
endpoint3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee10  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  0800ef48  0800ef48  0001ef48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f528  0800f528  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f528  0800f528  0001f528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f530  0800f530  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f530  0800f530  0001f530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f534  0800f534  0001f534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800f538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000186c  200000fc  0800f634  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001968  0800f634  00021968  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031ffe  00000000  00000000  00020126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000063b4  00000000  00000000  00052124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024e0  00000000  00000000  000584d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002298  00000000  00000000  0005a9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022af7  00000000  00000000  0005cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026bca  00000000  00000000  0007f747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5fbb  00000000  00000000  000a6311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c2cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099c8  00000000  00000000  0016c31c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	200000fc 	.word	0x200000fc
 8000154:	00000000 	.word	0x00000000
 8000158:	0800ef30 	.word	0x0800ef30

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000100 	.word	0x20000100
 8000174:	0800ef30 	.word	0x0800ef30

08000178 <__aeabi_drsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800017c:	e002      	b.n	8000184 <__adddf3>
 800017e:	bf00      	nop

08000180 <__aeabi_dsub>:
 8000180:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000184 <__adddf3>:
 8000184:	b530      	push	{r4, r5, lr}
 8000186:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018e:	ea94 0f05 	teq	r4, r5
 8000192:	bf08      	it	eq
 8000194:	ea90 0f02 	teqeq	r0, r2
 8000198:	bf1f      	itttt	ne
 800019a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001aa:	f000 80e2 	beq.w	8000372 <__adddf3+0x1ee>
 80001ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b6:	bfb8      	it	lt
 80001b8:	426d      	neglt	r5, r5
 80001ba:	dd0c      	ble.n	80001d6 <__adddf3+0x52>
 80001bc:	442c      	add	r4, r5
 80001be:	ea80 0202 	eor.w	r2, r0, r2
 80001c2:	ea81 0303 	eor.w	r3, r1, r3
 80001c6:	ea82 0000 	eor.w	r0, r2, r0
 80001ca:	ea83 0101 	eor.w	r1, r3, r1
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	2d36      	cmp	r5, #54	; 0x36
 80001d8:	bf88      	it	hi
 80001da:	bd30      	pophi	{r4, r5, pc}
 80001dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x70>
 80001ee:	4240      	negs	r0, r0
 80001f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000200:	d002      	beq.n	8000208 <__adddf3+0x84>
 8000202:	4252      	negs	r2, r2
 8000204:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000208:	ea94 0f05 	teq	r4, r5
 800020c:	f000 80a7 	beq.w	800035e <__adddf3+0x1da>
 8000210:	f1a4 0401 	sub.w	r4, r4, #1
 8000214:	f1d5 0e20 	rsbs	lr, r5, #32
 8000218:	db0d      	blt.n	8000236 <__adddf3+0xb2>
 800021a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021e:	fa22 f205 	lsr.w	r2, r2, r5
 8000222:	1880      	adds	r0, r0, r2
 8000224:	f141 0100 	adc.w	r1, r1, #0
 8000228:	fa03 f20e 	lsl.w	r2, r3, lr
 800022c:	1880      	adds	r0, r0, r2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	4159      	adcs	r1, r3
 8000234:	e00e      	b.n	8000254 <__adddf3+0xd0>
 8000236:	f1a5 0520 	sub.w	r5, r5, #32
 800023a:	f10e 0e20 	add.w	lr, lr, #32
 800023e:	2a01      	cmp	r2, #1
 8000240:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000244:	bf28      	it	cs
 8000246:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	18c0      	adds	r0, r0, r3
 8000250:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000254:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000258:	d507      	bpl.n	800026a <__adddf3+0xe6>
 800025a:	f04f 0e00 	mov.w	lr, #0
 800025e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000262:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000266:	eb6e 0101 	sbc.w	r1, lr, r1
 800026a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026e:	d31b      	bcc.n	80002a8 <__adddf3+0x124>
 8000270:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000274:	d30c      	bcc.n	8000290 <__adddf3+0x10c>
 8000276:	0849      	lsrs	r1, r1, #1
 8000278:	ea5f 0030 	movs.w	r0, r0, rrx
 800027c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000280:	f104 0401 	add.w	r4, r4, #1
 8000284:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000288:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800028c:	f080 809a 	bcs.w	80003c4 <__adddf3+0x240>
 8000290:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	ea41 0105 	orr.w	r1, r1, r5
 80002a6:	bd30      	pop	{r4, r5, pc}
 80002a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002ac:	4140      	adcs	r0, r0
 80002ae:	eb41 0101 	adc.w	r1, r1, r1
 80002b2:	3c01      	subs	r4, #1
 80002b4:	bf28      	it	cs
 80002b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ba:	d2e9      	bcs.n	8000290 <__adddf3+0x10c>
 80002bc:	f091 0f00 	teq	r1, #0
 80002c0:	bf04      	itt	eq
 80002c2:	4601      	moveq	r1, r0
 80002c4:	2000      	moveq	r0, #0
 80002c6:	fab1 f381 	clz	r3, r1
 80002ca:	bf08      	it	eq
 80002cc:	3320      	addeq	r3, #32
 80002ce:	f1a3 030b 	sub.w	r3, r3, #11
 80002d2:	f1b3 0220 	subs.w	r2, r3, #32
 80002d6:	da0c      	bge.n	80002f2 <__adddf3+0x16e>
 80002d8:	320c      	adds	r2, #12
 80002da:	dd08      	ble.n	80002ee <__adddf3+0x16a>
 80002dc:	f102 0c14 	add.w	ip, r2, #20
 80002e0:	f1c2 020c 	rsb	r2, r2, #12
 80002e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e8:	fa21 f102 	lsr.w	r1, r1, r2
 80002ec:	e00c      	b.n	8000308 <__adddf3+0x184>
 80002ee:	f102 0214 	add.w	r2, r2, #20
 80002f2:	bfd8      	it	le
 80002f4:	f1c2 0c20 	rsble	ip, r2, #32
 80002f8:	fa01 f102 	lsl.w	r1, r1, r2
 80002fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000300:	bfdc      	itt	le
 8000302:	ea41 010c 	orrle.w	r1, r1, ip
 8000306:	4090      	lslle	r0, r2
 8000308:	1ae4      	subs	r4, r4, r3
 800030a:	bfa2      	ittt	ge
 800030c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000310:	4329      	orrge	r1, r5
 8000312:	bd30      	popge	{r4, r5, pc}
 8000314:	ea6f 0404 	mvn.w	r4, r4
 8000318:	3c1f      	subs	r4, #31
 800031a:	da1c      	bge.n	8000356 <__adddf3+0x1d2>
 800031c:	340c      	adds	r4, #12
 800031e:	dc0e      	bgt.n	800033e <__adddf3+0x1ba>
 8000320:	f104 0414 	add.w	r4, r4, #20
 8000324:	f1c4 0220 	rsb	r2, r4, #32
 8000328:	fa20 f004 	lsr.w	r0, r0, r4
 800032c:	fa01 f302 	lsl.w	r3, r1, r2
 8000330:	ea40 0003 	orr.w	r0, r0, r3
 8000334:	fa21 f304 	lsr.w	r3, r1, r4
 8000338:	ea45 0103 	orr.w	r1, r5, r3
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	f1c4 040c 	rsb	r4, r4, #12
 8000342:	f1c4 0220 	rsb	r2, r4, #32
 8000346:	fa20 f002 	lsr.w	r0, r0, r2
 800034a:	fa01 f304 	lsl.w	r3, r1, r4
 800034e:	ea40 0003 	orr.w	r0, r0, r3
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	fa21 f004 	lsr.w	r0, r1, r4
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	f094 0f00 	teq	r4, #0
 8000362:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000366:	bf06      	itte	eq
 8000368:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800036c:	3401      	addeq	r4, #1
 800036e:	3d01      	subne	r5, #1
 8000370:	e74e      	b.n	8000210 <__adddf3+0x8c>
 8000372:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000376:	bf18      	it	ne
 8000378:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800037c:	d029      	beq.n	80003d2 <__adddf3+0x24e>
 800037e:	ea94 0f05 	teq	r4, r5
 8000382:	bf08      	it	eq
 8000384:	ea90 0f02 	teqeq	r0, r2
 8000388:	d005      	beq.n	8000396 <__adddf3+0x212>
 800038a:	ea54 0c00 	orrs.w	ip, r4, r0
 800038e:	bf04      	itt	eq
 8000390:	4619      	moveq	r1, r3
 8000392:	4610      	moveq	r0, r2
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	ea91 0f03 	teq	r1, r3
 800039a:	bf1e      	ittt	ne
 800039c:	2100      	movne	r1, #0
 800039e:	2000      	movne	r0, #0
 80003a0:	bd30      	popne	{r4, r5, pc}
 80003a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a6:	d105      	bne.n	80003b4 <__adddf3+0x230>
 80003a8:	0040      	lsls	r0, r0, #1
 80003aa:	4149      	adcs	r1, r1
 80003ac:	bf28      	it	cs
 80003ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b2:	bd30      	pop	{r4, r5, pc}
 80003b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b8:	bf3c      	itt	cc
 80003ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003be:	bd30      	popcc	{r4, r5, pc}
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003cc:	f04f 0000 	mov.w	r0, #0
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf1a      	itte	ne
 80003d8:	4619      	movne	r1, r3
 80003da:	4610      	movne	r0, r2
 80003dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e0:	bf1c      	itt	ne
 80003e2:	460b      	movne	r3, r1
 80003e4:	4602      	movne	r2, r0
 80003e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ea:	bf06      	itte	eq
 80003ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f0:	ea91 0f03 	teqeq	r1, r3
 80003f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	bf00      	nop

080003fc <__aeabi_ui2d>:
 80003fc:	f090 0f00 	teq	r0, #0
 8000400:	bf04      	itt	eq
 8000402:	2100      	moveq	r1, #0
 8000404:	4770      	bxeq	lr
 8000406:	b530      	push	{r4, r5, lr}
 8000408:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800040c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000410:	f04f 0500 	mov.w	r5, #0
 8000414:	f04f 0100 	mov.w	r1, #0
 8000418:	e750      	b.n	80002bc <__adddf3+0x138>
 800041a:	bf00      	nop

0800041c <__aeabi_i2d>:
 800041c:	f090 0f00 	teq	r0, #0
 8000420:	bf04      	itt	eq
 8000422:	2100      	moveq	r1, #0
 8000424:	4770      	bxeq	lr
 8000426:	b530      	push	{r4, r5, lr}
 8000428:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800042c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000430:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000434:	bf48      	it	mi
 8000436:	4240      	negmi	r0, r0
 8000438:	f04f 0100 	mov.w	r1, #0
 800043c:	e73e      	b.n	80002bc <__adddf3+0x138>
 800043e:	bf00      	nop

08000440 <__aeabi_f2d>:
 8000440:	0042      	lsls	r2, r0, #1
 8000442:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000446:	ea4f 0131 	mov.w	r1, r1, rrx
 800044a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044e:	bf1f      	itttt	ne
 8000450:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000454:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000458:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800045c:	4770      	bxne	lr
 800045e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000462:	bf08      	it	eq
 8000464:	4770      	bxeq	lr
 8000466:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800046a:	bf04      	itt	eq
 800046c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e71c      	b.n	80002bc <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aed8 	beq.w	800026a <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6bd      	b.n	800026a <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__gedf2>:
 80004f0:	f04f 3cff 	mov.w	ip, #4294967295
 80004f4:	e006      	b.n	8000504 <__cmpdf2+0x4>
 80004f6:	bf00      	nop

080004f8 <__ledf2>:
 80004f8:	f04f 0c01 	mov.w	ip, #1
 80004fc:	e002      	b.n	8000504 <__cmpdf2+0x4>
 80004fe:	bf00      	nop

08000500 <__cmpdf2>:
 8000500:	f04f 0c01 	mov.w	ip, #1
 8000504:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000508:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800050c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000510:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000514:	bf18      	it	ne
 8000516:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800051a:	d01b      	beq.n	8000554 <__cmpdf2+0x54>
 800051c:	b001      	add	sp, #4
 800051e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000522:	bf0c      	ite	eq
 8000524:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000528:	ea91 0f03 	teqne	r1, r3
 800052c:	bf02      	ittt	eq
 800052e:	ea90 0f02 	teqeq	r0, r2
 8000532:	2000      	moveq	r0, #0
 8000534:	4770      	bxeq	lr
 8000536:	f110 0f00 	cmn.w	r0, #0
 800053a:	ea91 0f03 	teq	r1, r3
 800053e:	bf58      	it	pl
 8000540:	4299      	cmppl	r1, r3
 8000542:	bf08      	it	eq
 8000544:	4290      	cmpeq	r0, r2
 8000546:	bf2c      	ite	cs
 8000548:	17d8      	asrcs	r0, r3, #31
 800054a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800054e:	f040 0001 	orr.w	r0, r0, #1
 8000552:	4770      	bx	lr
 8000554:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000558:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800055c:	d102      	bne.n	8000564 <__cmpdf2+0x64>
 800055e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000562:	d107      	bne.n	8000574 <__cmpdf2+0x74>
 8000564:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d1d6      	bne.n	800051c <__cmpdf2+0x1c>
 800056e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000572:	d0d3      	beq.n	800051c <__cmpdf2+0x1c>
 8000574:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <__aeabi_cdrcmple>:
 800057c:	4684      	mov	ip, r0
 800057e:	4610      	mov	r0, r2
 8000580:	4662      	mov	r2, ip
 8000582:	468c      	mov	ip, r1
 8000584:	4619      	mov	r1, r3
 8000586:	4663      	mov	r3, ip
 8000588:	e000      	b.n	800058c <__aeabi_cdcmpeq>
 800058a:	bf00      	nop

0800058c <__aeabi_cdcmpeq>:
 800058c:	b501      	push	{r0, lr}
 800058e:	f7ff ffb7 	bl	8000500 <__cmpdf2>
 8000592:	2800      	cmp	r0, #0
 8000594:	bf48      	it	mi
 8000596:	f110 0f00 	cmnmi.w	r0, #0
 800059a:	bd01      	pop	{r0, pc}

0800059c <__aeabi_dcmpeq>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff fff4 	bl	800058c <__aeabi_cdcmpeq>
 80005a4:	bf0c      	ite	eq
 80005a6:	2001      	moveq	r0, #1
 80005a8:	2000      	movne	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmplt>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffea 	bl	800058c <__aeabi_cdcmpeq>
 80005b8:	bf34      	ite	cc
 80005ba:	2001      	movcc	r0, #1
 80005bc:	2000      	movcs	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmple>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffe0 	bl	800058c <__aeabi_cdcmpeq>
 80005cc:	bf94      	ite	ls
 80005ce:	2001      	movls	r0, #1
 80005d0:	2000      	movhi	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_dcmpge>:
 80005d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005dc:	f7ff ffce 	bl	800057c <__aeabi_cdrcmple>
 80005e0:	bf94      	ite	ls
 80005e2:	2001      	movls	r0, #1
 80005e4:	2000      	movhi	r0, #0
 80005e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ea:	bf00      	nop

080005ec <__aeabi_dcmpgt>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff ffc4 	bl	800057c <__aeabi_cdrcmple>
 80005f4:	bf34      	ite	cc
 80005f6:	2001      	movcc	r0, #1
 80005f8:	2000      	movcs	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_d2iz>:
 8000600:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000604:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000608:	d215      	bcs.n	8000636 <__aeabi_d2iz+0x36>
 800060a:	d511      	bpl.n	8000630 <__aeabi_d2iz+0x30>
 800060c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000610:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000614:	d912      	bls.n	800063c <__aeabi_d2iz+0x3c>
 8000616:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800061a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800061e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000622:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000626:	fa23 f002 	lsr.w	r0, r3, r2
 800062a:	bf18      	it	ne
 800062c:	4240      	negne	r0, r0
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800063a:	d105      	bne.n	8000648 <__aeabi_d2iz+0x48>
 800063c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000640:	bf08      	it	eq
 8000642:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop

08000650 <__aeabi_frsub>:
 8000650:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000654:	e002      	b.n	800065c <__addsf3>
 8000656:	bf00      	nop

08000658 <__aeabi_fsub>:
 8000658:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800065c <__addsf3>:
 800065c:	0042      	lsls	r2, r0, #1
 800065e:	bf1f      	itttt	ne
 8000660:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000664:	ea92 0f03 	teqne	r2, r3
 8000668:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800066c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000670:	d06a      	beq.n	8000748 <__addsf3+0xec>
 8000672:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000676:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800067a:	bfc1      	itttt	gt
 800067c:	18d2      	addgt	r2, r2, r3
 800067e:	4041      	eorgt	r1, r0
 8000680:	4048      	eorgt	r0, r1
 8000682:	4041      	eorgt	r1, r0
 8000684:	bfb8      	it	lt
 8000686:	425b      	neglt	r3, r3
 8000688:	2b19      	cmp	r3, #25
 800068a:	bf88      	it	hi
 800068c:	4770      	bxhi	lr
 800068e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000692:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000696:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800069a:	bf18      	it	ne
 800069c:	4240      	negne	r0, r0
 800069e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4249      	negne	r1, r1
 80006ae:	ea92 0f03 	teq	r2, r3
 80006b2:	d03f      	beq.n	8000734 <__addsf3+0xd8>
 80006b4:	f1a2 0201 	sub.w	r2, r2, #1
 80006b8:	fa41 fc03 	asr.w	ip, r1, r3
 80006bc:	eb10 000c 	adds.w	r0, r0, ip
 80006c0:	f1c3 0320 	rsb	r3, r3, #32
 80006c4:	fa01 f103 	lsl.w	r1, r1, r3
 80006c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006cc:	d502      	bpl.n	80006d4 <__addsf3+0x78>
 80006ce:	4249      	negs	r1, r1
 80006d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006d8:	d313      	bcc.n	8000702 <__addsf3+0xa6>
 80006da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006de:	d306      	bcc.n	80006ee <__addsf3+0x92>
 80006e0:	0840      	lsrs	r0, r0, #1
 80006e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006e6:	f102 0201 	add.w	r2, r2, #1
 80006ea:	2afe      	cmp	r2, #254	; 0xfe
 80006ec:	d251      	bcs.n	8000792 <__addsf3+0x136>
 80006ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006f6:	bf08      	it	eq
 80006f8:	f020 0001 	biceq.w	r0, r0, #1
 80006fc:	ea40 0003 	orr.w	r0, r0, r3
 8000700:	4770      	bx	lr
 8000702:	0049      	lsls	r1, r1, #1
 8000704:	eb40 0000 	adc.w	r0, r0, r0
 8000708:	3a01      	subs	r2, #1
 800070a:	bf28      	it	cs
 800070c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000710:	d2ed      	bcs.n	80006ee <__addsf3+0x92>
 8000712:	fab0 fc80 	clz	ip, r0
 8000716:	f1ac 0c08 	sub.w	ip, ip, #8
 800071a:	ebb2 020c 	subs.w	r2, r2, ip
 800071e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000722:	bfaa      	itet	ge
 8000724:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000728:	4252      	neglt	r2, r2
 800072a:	4318      	orrge	r0, r3
 800072c:	bfbc      	itt	lt
 800072e:	40d0      	lsrlt	r0, r2
 8000730:	4318      	orrlt	r0, r3
 8000732:	4770      	bx	lr
 8000734:	f092 0f00 	teq	r2, #0
 8000738:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800073c:	bf06      	itte	eq
 800073e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000742:	3201      	addeq	r2, #1
 8000744:	3b01      	subne	r3, #1
 8000746:	e7b5      	b.n	80006b4 <__addsf3+0x58>
 8000748:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800074c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000750:	bf18      	it	ne
 8000752:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000756:	d021      	beq.n	800079c <__addsf3+0x140>
 8000758:	ea92 0f03 	teq	r2, r3
 800075c:	d004      	beq.n	8000768 <__addsf3+0x10c>
 800075e:	f092 0f00 	teq	r2, #0
 8000762:	bf08      	it	eq
 8000764:	4608      	moveq	r0, r1
 8000766:	4770      	bx	lr
 8000768:	ea90 0f01 	teq	r0, r1
 800076c:	bf1c      	itt	ne
 800076e:	2000      	movne	r0, #0
 8000770:	4770      	bxne	lr
 8000772:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000776:	d104      	bne.n	8000782 <__addsf3+0x126>
 8000778:	0040      	lsls	r0, r0, #1
 800077a:	bf28      	it	cs
 800077c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000780:	4770      	bx	lr
 8000782:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000786:	bf3c      	itt	cc
 8000788:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800078c:	4770      	bxcc	lr
 800078e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000792:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000796:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800079a:	4770      	bx	lr
 800079c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007a0:	bf16      	itet	ne
 80007a2:	4608      	movne	r0, r1
 80007a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007a8:	4601      	movne	r1, r0
 80007aa:	0242      	lsls	r2, r0, #9
 80007ac:	bf06      	itte	eq
 80007ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007b2:	ea90 0f01 	teqeq	r0, r1
 80007b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ba:	4770      	bx	lr

080007bc <__aeabi_ui2f>:
 80007bc:	f04f 0300 	mov.w	r3, #0
 80007c0:	e004      	b.n	80007cc <__aeabi_i2f+0x8>
 80007c2:	bf00      	nop

080007c4 <__aeabi_i2f>:
 80007c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007c8:	bf48      	it	mi
 80007ca:	4240      	negmi	r0, r0
 80007cc:	ea5f 0c00 	movs.w	ip, r0
 80007d0:	bf08      	it	eq
 80007d2:	4770      	bxeq	lr
 80007d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007d8:	4601      	mov	r1, r0
 80007da:	f04f 0000 	mov.w	r0, #0
 80007de:	e01c      	b.n	800081a <__aeabi_l2f+0x2a>

080007e0 <__aeabi_ul2f>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	f04f 0300 	mov.w	r3, #0
 80007ec:	e00a      	b.n	8000804 <__aeabi_l2f+0x14>
 80007ee:	bf00      	nop

080007f0 <__aeabi_l2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007fc:	d502      	bpl.n	8000804 <__aeabi_l2f+0x14>
 80007fe:	4240      	negs	r0, r0
 8000800:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000804:	ea5f 0c01 	movs.w	ip, r1
 8000808:	bf02      	ittt	eq
 800080a:	4684      	moveq	ip, r0
 800080c:	4601      	moveq	r1, r0
 800080e:	2000      	moveq	r0, #0
 8000810:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000814:	bf08      	it	eq
 8000816:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800081a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800081e:	fabc f28c 	clz	r2, ip
 8000822:	3a08      	subs	r2, #8
 8000824:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000828:	db10      	blt.n	800084c <__aeabi_l2f+0x5c>
 800082a:	fa01 fc02 	lsl.w	ip, r1, r2
 800082e:	4463      	add	r3, ip
 8000830:	fa00 fc02 	lsl.w	ip, r0, r2
 8000834:	f1c2 0220 	rsb	r2, r2, #32
 8000838:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800083c:	fa20 f202 	lsr.w	r2, r0, r2
 8000840:	eb43 0002 	adc.w	r0, r3, r2
 8000844:	bf08      	it	eq
 8000846:	f020 0001 	biceq.w	r0, r0, #1
 800084a:	4770      	bx	lr
 800084c:	f102 0220 	add.w	r2, r2, #32
 8000850:	fa01 fc02 	lsl.w	ip, r1, r2
 8000854:	f1c2 0220 	rsb	r2, r2, #32
 8000858:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800085c:	fa21 f202 	lsr.w	r2, r1, r2
 8000860:	eb43 0002 	adc.w	r0, r3, r2
 8000864:	bf08      	it	eq
 8000866:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800086a:	4770      	bx	lr

0800086c <__aeabi_uldivmod>:
 800086c:	b953      	cbnz	r3, 8000884 <__aeabi_uldivmod+0x18>
 800086e:	b94a      	cbnz	r2, 8000884 <__aeabi_uldivmod+0x18>
 8000870:	2900      	cmp	r1, #0
 8000872:	bf08      	it	eq
 8000874:	2800      	cmpeq	r0, #0
 8000876:	bf1c      	itt	ne
 8000878:	f04f 31ff 	movne.w	r1, #4294967295
 800087c:	f04f 30ff 	movne.w	r0, #4294967295
 8000880:	f000 b974 	b.w	8000b6c <__aeabi_idiv0>
 8000884:	f1ad 0c08 	sub.w	ip, sp, #8
 8000888:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800088c:	f000 f806 	bl	800089c <__udivmoddi4>
 8000890:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000898:	b004      	add	sp, #16
 800089a:	4770      	bx	lr

0800089c <__udivmoddi4>:
 800089c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a0:	9e08      	ldr	r6, [sp, #32]
 80008a2:	460d      	mov	r5, r1
 80008a4:	4604      	mov	r4, r0
 80008a6:	4688      	mov	r8, r1
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d14d      	bne.n	8000948 <__udivmoddi4+0xac>
 80008ac:	428a      	cmp	r2, r1
 80008ae:	4694      	mov	ip, r2
 80008b0:	d968      	bls.n	8000984 <__udivmoddi4+0xe8>
 80008b2:	fab2 f282 	clz	r2, r2
 80008b6:	b152      	cbz	r2, 80008ce <__udivmoddi4+0x32>
 80008b8:	fa01 f302 	lsl.w	r3, r1, r2
 80008bc:	f1c2 0120 	rsb	r1, r2, #32
 80008c0:	fa20 f101 	lsr.w	r1, r0, r1
 80008c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80008c8:	ea41 0803 	orr.w	r8, r1, r3
 80008cc:	4094      	lsls	r4, r2
 80008ce:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80008d2:	0c21      	lsrs	r1, r4, #16
 80008d4:	fbb8 fef5 	udiv	lr, r8, r5
 80008d8:	fa1f f78c 	uxth.w	r7, ip
 80008dc:	fb05 831e 	mls	r3, r5, lr, r8
 80008e0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008e4:	fb0e f107 	mul.w	r1, lr, r7
 80008e8:	4299      	cmp	r1, r3
 80008ea:	d90b      	bls.n	8000904 <__udivmoddi4+0x68>
 80008ec:	eb1c 0303 	adds.w	r3, ip, r3
 80008f0:	f10e 30ff 	add.w	r0, lr, #4294967295
 80008f4:	f080 811e 	bcs.w	8000b34 <__udivmoddi4+0x298>
 80008f8:	4299      	cmp	r1, r3
 80008fa:	f240 811b 	bls.w	8000b34 <__udivmoddi4+0x298>
 80008fe:	f1ae 0e02 	sub.w	lr, lr, #2
 8000902:	4463      	add	r3, ip
 8000904:	1a5b      	subs	r3, r3, r1
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb3 f0f5 	udiv	r0, r3, r5
 800090c:	fb05 3310 	mls	r3, r5, r0, r3
 8000910:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000914:	fb00 f707 	mul.w	r7, r0, r7
 8000918:	42a7      	cmp	r7, r4
 800091a:	d90a      	bls.n	8000932 <__udivmoddi4+0x96>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 33ff 	add.w	r3, r0, #4294967295
 8000924:	f080 8108 	bcs.w	8000b38 <__udivmoddi4+0x29c>
 8000928:	42a7      	cmp	r7, r4
 800092a:	f240 8105 	bls.w	8000b38 <__udivmoddi4+0x29c>
 800092e:	4464      	add	r4, ip
 8000930:	3802      	subs	r0, #2
 8000932:	1be4      	subs	r4, r4, r7
 8000934:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000938:	2100      	movs	r1, #0
 800093a:	b11e      	cbz	r6, 8000944 <__udivmoddi4+0xa8>
 800093c:	40d4      	lsrs	r4, r2
 800093e:	2300      	movs	r3, #0
 8000940:	e9c6 4300 	strd	r4, r3, [r6]
 8000944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000948:	428b      	cmp	r3, r1
 800094a:	d908      	bls.n	800095e <__udivmoddi4+0xc2>
 800094c:	2e00      	cmp	r6, #0
 800094e:	f000 80ee 	beq.w	8000b2e <__udivmoddi4+0x292>
 8000952:	2100      	movs	r1, #0
 8000954:	e9c6 0500 	strd	r0, r5, [r6]
 8000958:	4608      	mov	r0, r1
 800095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095e:	fab3 f183 	clz	r1, r3
 8000962:	2900      	cmp	r1, #0
 8000964:	d14a      	bne.n	80009fc <__udivmoddi4+0x160>
 8000966:	42ab      	cmp	r3, r5
 8000968:	d302      	bcc.n	8000970 <__udivmoddi4+0xd4>
 800096a:	4282      	cmp	r2, r0
 800096c:	f200 80f9 	bhi.w	8000b62 <__udivmoddi4+0x2c6>
 8000970:	1a84      	subs	r4, r0, r2
 8000972:	eb65 0303 	sbc.w	r3, r5, r3
 8000976:	2001      	movs	r0, #1
 8000978:	4698      	mov	r8, r3
 800097a:	2e00      	cmp	r6, #0
 800097c:	d0e2      	beq.n	8000944 <__udivmoddi4+0xa8>
 800097e:	e9c6 4800 	strd	r4, r8, [r6]
 8000982:	e7df      	b.n	8000944 <__udivmoddi4+0xa8>
 8000984:	b902      	cbnz	r2, 8000988 <__udivmoddi4+0xec>
 8000986:	deff      	udf	#255	; 0xff
 8000988:	fab2 f282 	clz	r2, r2
 800098c:	2a00      	cmp	r2, #0
 800098e:	f040 8091 	bne.w	8000ab4 <__udivmoddi4+0x218>
 8000992:	eba1 050c 	sub.w	r5, r1, ip
 8000996:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800099a:	fa1f fe8c 	uxth.w	lr, ip
 800099e:	2101      	movs	r1, #1
 80009a0:	fbb5 f3f7 	udiv	r3, r5, r7
 80009a4:	fb07 5013 	mls	r0, r7, r3, r5
 80009a8:	0c25      	lsrs	r5, r4, #16
 80009aa:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80009ae:	fb0e f003 	mul.w	r0, lr, r3
 80009b2:	42a8      	cmp	r0, r5
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x12c>
 80009b6:	eb1c 0505 	adds.w	r5, ip, r5
 80009ba:	f103 38ff 	add.w	r8, r3, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x12a>
 80009c0:	42a8      	cmp	r0, r5
 80009c2:	f200 80cb 	bhi.w	8000b5c <__udivmoddi4+0x2c0>
 80009c6:	4643      	mov	r3, r8
 80009c8:	1a2d      	subs	r5, r5, r0
 80009ca:	b2a4      	uxth	r4, r4
 80009cc:	fbb5 f0f7 	udiv	r0, r5, r7
 80009d0:	fb07 5510 	mls	r5, r7, r0, r5
 80009d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009d8:	fb0e fe00 	mul.w	lr, lr, r0
 80009dc:	45a6      	cmp	lr, r4
 80009de:	d908      	bls.n	80009f2 <__udivmoddi4+0x156>
 80009e0:	eb1c 0404 	adds.w	r4, ip, r4
 80009e4:	f100 35ff 	add.w	r5, r0, #4294967295
 80009e8:	d202      	bcs.n	80009f0 <__udivmoddi4+0x154>
 80009ea:	45a6      	cmp	lr, r4
 80009ec:	f200 80bb 	bhi.w	8000b66 <__udivmoddi4+0x2ca>
 80009f0:	4628      	mov	r0, r5
 80009f2:	eba4 040e 	sub.w	r4, r4, lr
 80009f6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009fa:	e79e      	b.n	800093a <__udivmoddi4+0x9e>
 80009fc:	f1c1 0720 	rsb	r7, r1, #32
 8000a00:	408b      	lsls	r3, r1
 8000a02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a0e:	fa05 f301 	lsl.w	r3, r5, r1
 8000a12:	431c      	orrs	r4, r3
 8000a14:	40fd      	lsrs	r5, r7
 8000a16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a1a:	fa00 f301 	lsl.w	r3, r0, r1
 8000a1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a22:	0c20      	lsrs	r0, r4, #16
 8000a24:	fa1f fe8c 	uxth.w	lr, ip
 8000a28:	fb09 5518 	mls	r5, r9, r8, r5
 8000a2c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000a30:	fb08 f00e 	mul.w	r0, r8, lr
 8000a34:	42a8      	cmp	r0, r5
 8000a36:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3a:	d90b      	bls.n	8000a54 <__udivmoddi4+0x1b8>
 8000a3c:	eb1c 0505 	adds.w	r5, ip, r5
 8000a40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a44:	f080 8088 	bcs.w	8000b58 <__udivmoddi4+0x2bc>
 8000a48:	42a8      	cmp	r0, r5
 8000a4a:	f240 8085 	bls.w	8000b58 <__udivmoddi4+0x2bc>
 8000a4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a52:	4465      	add	r5, ip
 8000a54:	1a2d      	subs	r5, r5, r0
 8000a56:	b2a4      	uxth	r4, r4
 8000a58:	fbb5 f0f9 	udiv	r0, r5, r9
 8000a5c:	fb09 5510 	mls	r5, r9, r0, r5
 8000a60:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000a64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a68:	45ae      	cmp	lr, r5
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x1e2>
 8000a6c:	eb1c 0505 	adds.w	r5, ip, r5
 8000a70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a74:	d26c      	bcs.n	8000b50 <__udivmoddi4+0x2b4>
 8000a76:	45ae      	cmp	lr, r5
 8000a78:	d96a      	bls.n	8000b50 <__udivmoddi4+0x2b4>
 8000a7a:	3802      	subs	r0, #2
 8000a7c:	4465      	add	r5, ip
 8000a7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a82:	fba0 9402 	umull	r9, r4, r0, r2
 8000a86:	eba5 050e 	sub.w	r5, r5, lr
 8000a8a:	42a5      	cmp	r5, r4
 8000a8c:	46c8      	mov	r8, r9
 8000a8e:	46a6      	mov	lr, r4
 8000a90:	d356      	bcc.n	8000b40 <__udivmoddi4+0x2a4>
 8000a92:	d053      	beq.n	8000b3c <__udivmoddi4+0x2a0>
 8000a94:	b15e      	cbz	r6, 8000aae <__udivmoddi4+0x212>
 8000a96:	ebb3 0208 	subs.w	r2, r3, r8
 8000a9a:	eb65 050e 	sbc.w	r5, r5, lr
 8000a9e:	fa05 f707 	lsl.w	r7, r5, r7
 8000aa2:	fa22 f301 	lsr.w	r3, r2, r1
 8000aa6:	40cd      	lsrs	r5, r1
 8000aa8:	431f      	orrs	r7, r3
 8000aaa:	e9c6 7500 	strd	r7, r5, [r6]
 8000aae:	2100      	movs	r1, #0
 8000ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab4:	f1c2 0320 	rsb	r3, r2, #32
 8000ab8:	fa20 f103 	lsr.w	r1, r0, r3
 8000abc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac0:	fa25 f303 	lsr.w	r3, r5, r3
 8000ac4:	4095      	lsls	r5, r2
 8000ac6:	430d      	orrs	r5, r1
 8000ac8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000acc:	fa1f fe8c 	uxth.w	lr, ip
 8000ad0:	fbb3 f1f7 	udiv	r1, r3, r7
 8000ad4:	fb07 3011 	mls	r0, r7, r1, r3
 8000ad8:	0c2b      	lsrs	r3, r5, #16
 8000ada:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000ade:	fb01 f00e 	mul.w	r0, r1, lr
 8000ae2:	4298      	cmp	r0, r3
 8000ae4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x260>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f101 38ff 	add.w	r8, r1, #4294967295
 8000af2:	d22f      	bcs.n	8000b54 <__udivmoddi4+0x2b8>
 8000af4:	4298      	cmp	r0, r3
 8000af6:	d92d      	bls.n	8000b54 <__udivmoddi4+0x2b8>
 8000af8:	3902      	subs	r1, #2
 8000afa:	4463      	add	r3, ip
 8000afc:	1a1b      	subs	r3, r3, r0
 8000afe:	b2ad      	uxth	r5, r5
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3310 	mls	r3, r7, r0, r3
 8000b08:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b0c:	fb00 f30e 	mul.w	r3, r0, lr
 8000b10:	42ab      	cmp	r3, r5
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x28a>
 8000b14:	eb1c 0505 	adds.w	r5, ip, r5
 8000b18:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1c:	d216      	bcs.n	8000b4c <__udivmoddi4+0x2b0>
 8000b1e:	42ab      	cmp	r3, r5
 8000b20:	d914      	bls.n	8000b4c <__udivmoddi4+0x2b0>
 8000b22:	3802      	subs	r0, #2
 8000b24:	4465      	add	r5, ip
 8000b26:	1aed      	subs	r5, r5, r3
 8000b28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b2c:	e738      	b.n	80009a0 <__udivmoddi4+0x104>
 8000b2e:	4631      	mov	r1, r6
 8000b30:	4630      	mov	r0, r6
 8000b32:	e707      	b.n	8000944 <__udivmoddi4+0xa8>
 8000b34:	4686      	mov	lr, r0
 8000b36:	e6e5      	b.n	8000904 <__udivmoddi4+0x68>
 8000b38:	4618      	mov	r0, r3
 8000b3a:	e6fa      	b.n	8000932 <__udivmoddi4+0x96>
 8000b3c:	454b      	cmp	r3, r9
 8000b3e:	d2a9      	bcs.n	8000a94 <__udivmoddi4+0x1f8>
 8000b40:	ebb9 0802 	subs.w	r8, r9, r2
 8000b44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b48:	3801      	subs	r0, #1
 8000b4a:	e7a3      	b.n	8000a94 <__udivmoddi4+0x1f8>
 8000b4c:	4640      	mov	r0, r8
 8000b4e:	e7ea      	b.n	8000b26 <__udivmoddi4+0x28a>
 8000b50:	4620      	mov	r0, r4
 8000b52:	e794      	b.n	8000a7e <__udivmoddi4+0x1e2>
 8000b54:	4641      	mov	r1, r8
 8000b56:	e7d1      	b.n	8000afc <__udivmoddi4+0x260>
 8000b58:	46d0      	mov	r8, sl
 8000b5a:	e77b      	b.n	8000a54 <__udivmoddi4+0x1b8>
 8000b5c:	3b02      	subs	r3, #2
 8000b5e:	4465      	add	r5, ip
 8000b60:	e732      	b.n	80009c8 <__udivmoddi4+0x12c>
 8000b62:	4608      	mov	r0, r1
 8000b64:	e709      	b.n	800097a <__udivmoddi4+0xde>
 8000b66:	4464      	add	r4, ip
 8000b68:	3802      	subs	r0, #2
 8000b6a:	e742      	b.n	80009f2 <__udivmoddi4+0x156>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b80:	f023 0218 	bic.w	r2, r3, #24
 8000b84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr

08000b9a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b085      	sub	sp, #20
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ba8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bce:	f000 fbbb 	bl	8001348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd2:	f000 f809 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd6:	f000 f8bd 	bl	8000d54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bda:	f000 f86f 	bl	8000cbc <MX_USART2_UART_Init>
  MX_LoRaWAN_Init();
 8000bde:	f003 fbaf 	bl	8004340 <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8000be2:	f003 fbb5 	bl	8004350 <MX_LoRaWAN_Process>
 8000be6:	e7fc      	b.n	8000be2 <main+0x18>

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b09a      	sub	sp, #104	; 0x68
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	2248      	movs	r2, #72	; 0x48
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f00e f910 	bl	800ee1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]
 8000c0a:	615a      	str	r2, [r3, #20]
 8000c0c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c0e:	f000 fe7f 	bl	8001910 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff ffac 	bl	8000b70 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c18:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <SystemClock_Config+0xac>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c20:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <SystemClock_Config+0xac>)
 8000c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <SystemClock_Config+0xac>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000c34:	2324      	movs	r3, #36	; 0x24
 8000c36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c38:	2381      	movs	r3, #129	; 0x81
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c44:	2360      	movs	r3, #96	; 0x60
 8000c46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4c:	f107 0320 	add.w	r3, r7, #32
 8000c50:	4618      	mov	r0, r3
 8000c52:	f001 f92f 	bl	8001eb4 <HAL_RCC_OscConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000c5c:	f000 f8d4 	bl	8000e08 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000c60:	234f      	movs	r3, #79	; 0x4f
 8000c62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f001 fcb5 	bl	80025ec <HAL_RCC_ClockConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c88:	f000 f8be 	bl	8000e08 <Error_Handler>
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	3768      	adds	r7, #104	; 0x68
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	58000400 	.word	0x58000400

08000c98 <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
void MX_SUBGHZ_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_SUBGHZ_Init+0x20>)
 8000c9e:	2210      	movs	r2, #16
 8000ca0:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_SUBGHZ_Init+0x20>)
 8000ca4:	f002 fa16 	bl	80030d4 <HAL_SUBGHZ_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000cae:	f000 f8ab 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000118 	.word	0x20000118

08000cbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <MX_USART2_UART_Init+0x90>)
 8000cc2:	4a23      	ldr	r2, [pc, #140]	; (8000d50 <MX_USART2_UART_Init+0x94>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <MX_USART2_UART_Init+0x90>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_USART2_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_USART2_UART_Init+0x90>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_USART2_UART_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_USART2_UART_Init+0x90>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_USART2_UART_Init+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_USART2_UART_Init+0x90>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_USART2_UART_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_USART2_UART_Init+0x90>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <MX_USART2_UART_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d04:	4811      	ldr	r0, [pc, #68]	; (8000d4c <MX_USART2_UART_Init+0x90>)
 8000d06:	f002 fda2 	bl	800384e <HAL_UART_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d10:	f000 f87a 	bl	8000e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	480d      	ldr	r0, [pc, #52]	; (8000d4c <MX_USART2_UART_Init+0x90>)
 8000d18:	f003 fa4a 	bl	80041b0 <HAL_UARTEx_SetTxFifoThreshold>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d22:	f000 f871 	bl	8000e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4808      	ldr	r0, [pc, #32]	; (8000d4c <MX_USART2_UART_Init+0x90>)
 8000d2a:	f003 fa7f 	bl	800422c <HAL_UARTEx_SetRxFifoThreshold>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d34:	f000 f868 	bl	8000e08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <MX_USART2_UART_Init+0x90>)
 8000d3a:	f003 fa01 	bl	8004140 <HAL_UARTEx_DisableFifoMode>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d44:	f000 f860 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000124 	.word	0x20000124
 8000d50:	40004400 	.word	0x40004400

08000d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff ff16 	bl	8000b9a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2002      	movs	r0, #2
 8000d70:	f7ff ff13 	bl	8000b9a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff ff10 	bl	8000b9a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000d80:	481f      	ldr	r0, [pc, #124]	; (8000e00 <MX_GPIO_Init+0xac>)
 8000d82:	f000 fdad 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2138      	movs	r1, #56	; 0x38
 8000d8a:	481e      	ldr	r0, [pc, #120]	; (8000e04 <MX_GPIO_Init+0xb0>)
 8000d8c:	f000 fda8 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000d90:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000d94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	4619      	mov	r1, r3
 8000da6:	4816      	ldr	r0, [pc, #88]	; (8000e00 <MX_GPIO_Init+0xac>)
 8000da8:	f000 fc3a 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000dac:	2338      	movs	r3, #56	; 0x38
 8000dae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4810      	ldr	r0, [pc, #64]	; (8000e04 <MX_GPIO_Init+0xb0>)
 8000dc2:	f000 fc2d 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ddc:	f000 fc20 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000de0:	2340      	movs	r3, #64	; 0x40
 8000de2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000de4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000de8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	4619      	mov	r1, r3
 8000df2:	4804      	ldr	r0, [pc, #16]	; (8000e04 <MX_GPIO_Init+0xb0>)
 8000df4:	f000 fc14 	bl	8001620 <HAL_GPIO_Init>

}
 8000df8:	bf00      	nop
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	48000400 	.word	0x48000400
 8000e04:	48000800 	.word	0x48000800

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <Error_Handler+0x8>

08000e12 <LL_AHB2_GRP1_EnableClock>:
{
 8000e12:	b480      	push	{r7}
 8000e14:	b085      	sub	sp, #20
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4013      	ands	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b085      	sub	sp, #20
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4013      	ands	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr

08000e72 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b085      	sub	sp, #20
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000e80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e8e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4013      	ands	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e96:	68fb      	ldr	r3, [r7, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr

08000ea2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr

08000eae <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f7ff ffdb 	bl	8000e72 <LL_APB3_GRP1_EnableClock>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b096      	sub	sp, #88	; 0x58
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2238      	movs	r2, #56	; 0x38
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f00d ff99 	bl	800ee1c <memset>
  if(huart->Instance==USART2)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <HAL_UART_MspInit+0x88>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d126      	bne.n	8000f42 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ef8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000efc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 ff32 	bl	8002d6c <HAL_RCCEx_PeriphCLKConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f0e:	f7ff ff7b 	bl	8000e08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f12:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000f16:	f7ff ff94 	bl	8000e42 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f7ff ff79 	bl	8000e12 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000f20:	230c      	movs	r3, #12
 8000f22:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f30:	2307      	movs	r3, #7
 8000f32:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3e:	f000 fb6f 	bl	8001620 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f42:	bf00      	nop
 8000f44:	3758      	adds	r7, #88	; 0x58
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40004400 	.word	0x40004400

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <NMI_Handler+0x4>

08000f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <MemManage_Handler+0x4>

08000f62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr

08000f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr

08000f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f96:	f000 fa31 	bl	80013fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8000fa4:	4b02      	ldr	r3, [pc, #8]	; (8000fb0 <LL_FLASH_GetUDN+0x10>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	1fff7580 	.word	0x1fff7580

08000fb4 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <LL_FLASH_GetDeviceID+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	b2db      	uxtb	r3, r3
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	1fff7584 	.word	0x1fff7584

08000fcc <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <LL_FLASH_GetSTCompanyID+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	1fff7584 	.word	0x1fff7584

08000fe4 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr

08001006 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	80fb      	strh	r3, [r7, #6]

  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001010:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr

0800101e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800101e:	b590      	push	{r4, r7, lr}
 8001020:	b087      	sub	sp, #28
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 800102a:	f7ff ffb9 	bl	8000fa0 <LL_FLASH_GetUDN>
 800102e:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001036:	d138      	bne.n	80010aa <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001038:	f000 f9f2 	bl	8001420 <HAL_GetUIDw0>
 800103c:	4604      	mov	r4, r0
 800103e:	f000 fa03 	bl	8001448 <HAL_GetUIDw2>
 8001042:	4603      	mov	r3, r0
 8001044:	4423      	add	r3, r4
 8001046:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001048:	f000 f9f4 	bl	8001434 <HAL_GetUIDw1>
 800104c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	0e1a      	lsrs	r2, r3, #24
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3307      	adds	r3, #7
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	0c1a      	lsrs	r2, r3, #16
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3306      	adds	r3, #6
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	0a1a      	lsrs	r2, r3, #8
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3305      	adds	r3, #5
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3304      	adds	r3, #4
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	0e1a      	lsrs	r2, r3, #24
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3303      	adds	r3, #3
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	0c1a      	lsrs	r2, r3, #16
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3302      	adds	r3, #2
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	0a1a      	lsrs	r2, r3, #8
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3301      	adds	r3, #1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80010a8:	e031      	b.n	800110e <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3307      	adds	r3, #7
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	0a1a      	lsrs	r2, r3, #8
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3306      	adds	r3, #6
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	0c1a      	lsrs	r2, r3, #16
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3305      	adds	r3, #5
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	0e1a      	lsrs	r2, r3, #24
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3304      	adds	r3, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80010d8:	f7ff ff6c 	bl	8000fb4 <LL_FLASH_GetDeviceID>
 80010dc:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3303      	adds	r3, #3
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80010e8:	f7ff ff70 	bl	8000fcc <LL_FLASH_GetSTCompanyID>
 80010ec:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3302      	adds	r3, #2
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	0a1a      	lsrs	r2, r3, #8
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3301      	adds	r3, #1
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	0c1b      	lsrs	r3, r3, #16
 8001108:	b2da      	uxtb	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	701a      	strb	r2, [r3, #0]
}
 800110e:	bf00      	nop
 8001110:	371c      	adds	r7, #28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd90      	pop	{r4, r7, pc}

08001116 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001116:	b590      	push	{r4, r7, lr}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001120:	f7ff ff3e 	bl	8000fa0 <LL_FLASH_GetUDN>
 8001124:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112c:	d10b      	bne.n	8001146 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800112e:	f000 f977 	bl	8001420 <HAL_GetUIDw0>
 8001132:	4604      	mov	r4, r0
 8001134:	f000 f97e 	bl	8001434 <HAL_GetUIDw1>
 8001138:	4603      	mov	r3, r0
 800113a:	405c      	eors	r4, r3
 800113c:	f000 f984 	bl	8001448 <HAL_GetUIDw2>
 8001140:	4603      	mov	r3, r0
 8001142:	4063      	eors	r3, r4
 8001144:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001146:	687b      	ldr	r3, [r7, #4]

}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bd90      	pop	{r4, r7, pc}

08001150 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_GetTick+0x24>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001162:	f000 f85c 	bl	800121e <TIMER_IF_GetTimerValue>
 8001166:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200001b4 	.word	0x200001b4

08001178 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f879 	bl	800127a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 80011a6:	79fb      	ldrb	r3, [r7, #7]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr

080011ca <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 80011d4:	79fb      	ldrb	r3, [r7, #7]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 80011e4:	4b02      	ldr	r3, [pc, #8]	; (80011f0 <TIMER_IF_SetTimerContext+0x10>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	200001b8 	.word	0x200001b8

080011f4 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 80011f8:	4b02      	ldr	r3, [pc, #8]	; (8001204 <TIMER_IF_GetTimerContext+0x10>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	200001b8 	.word	0x200001b8

08001208 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8001212:	687b      	ldr	r3, [r7, #4]
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8001228:	687b      	ldr	r3, [r7, #4]
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr

08001234 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 800123e:	687b      	ldr	r3, [r7, #4]
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr

0800124a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800124a:	b480      	push	{r7}
 800124c:	b085      	sub	sp, #20
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8001256:	68fb      	ldr	r3, [r7, #12]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001262:	b480      	push	{r7}
 8001264:	b085      	sub	sp, #20
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr

0800127a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  return seconds;
 8001298:	68fb      	ldr	r3, [r7, #12]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  return ret;
 80012d2:	687b      	ldr	r3, [r7, #4]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  return ret;
 80012e8:	687b      	ldr	r3, [r7, #4]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012f8:	f7ff ff4a 	bl	8001190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <LoopForever+0x6>)
  ldr r1, =_edata
 80012fe:	490d      	ldr	r1, [pc, #52]	; (8001334 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <LoopForever+0xe>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001304:	e002      	b.n	800130c <LoopCopyDataInit>

08001306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130a:	3304      	adds	r3, #4

0800130c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800130c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001310:	d3f9      	bcc.n	8001306 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001314:	4c0a      	ldr	r4, [pc, #40]	; (8001340 <LoopForever+0x16>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001318:	e001      	b.n	800131e <LoopFillZerobss>

0800131a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800131c:	3204      	adds	r2, #4

0800131e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001320:	d3fb      	bcc.n	800131a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001322:	f00d fd57 	bl	800edd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001326:	f7ff fc50 	bl	8000bca <main>

0800132a <LoopForever>:

LoopForever:
    b LoopForever
 800132a:	e7fe      	b.n	800132a <LoopForever>
  ldr   r0, =_estack
 800132c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001338:	0800f538 	.word	0x0800f538
  ldr r2, =_sbss
 800133c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001340:	20001968 	.word	0x20001968

08001344 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC_IRQHandler>
	...

08001348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001352:	2003      	movs	r0, #3
 8001354:	f000 f932 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001358:	f001 fb2a 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 800135c:	4603      	mov	r3, r0
 800135e:	4a09      	ldr	r2, [pc, #36]	; (8001384 <HAL_Init+0x3c>)
 8001360:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001362:	2000      	movs	r0, #0
 8001364:	f000 f810 	bl	8001388 <HAL_InitTick>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	71fb      	strb	r3, [r7, #7]
 8001372:	e001      	b.n	8001378 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001374:	f7ff fd95 	bl	8000ea2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001378:	79fb      	ldrb	r3, [r7, #7]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000000 	.word	0x20000000

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_InitTick+0x6c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d024      	beq.n	80013e6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800139c:	f001 fb08 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_InitTick+0x6c>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 f926 	bl	8001606 <HAL_SYSTICK_Config>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d10f      	bne.n	80013e0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b0f      	cmp	r3, #15
 80013c4:	d809      	bhi.n	80013da <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c6:	2200      	movs	r2, #0
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	f04f 30ff 	mov.w	r0, #4294967295
 80013ce:	f000 f900 	bl	80015d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013d2:	4a09      	ldr	r2, [pc, #36]	; (80013f8 <HAL_InitTick+0x70>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	e007      	b.n	80013ea <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	e004      	b.n	80013ea <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	e001      	b.n	80013ea <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000008 	.word	0x20000008
 80013f8:	20000004 	.word	0x20000004

080013fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_IncTick+0x1c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <HAL_IncTick+0x20>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4413      	add	r3, r2
 800140c:	4a03      	ldr	r2, [pc, #12]	; (800141c <HAL_IncTick+0x20>)
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	20000008 	.word	0x20000008
 800141c:	200001bc 	.word	0x200001bc

08001420 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8001424:	4b02      	ldr	r3, [pc, #8]	; (8001430 <HAL_GetUIDw0+0x10>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	1fff7590 	.word	0x1fff7590

08001434 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001438:	4b02      	ldr	r3, [pc, #8]	; (8001444 <HAL_GetUIDw1+0x10>)
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	1fff7594 	.word	0x1fff7594

08001448 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800144c:	4b02      	ldr	r3, [pc, #8]	; (8001458 <HAL_GetUIDw2+0x10>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	1fff7598 	.word	0x1fff7598

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	db0a      	blt.n	80014ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	490c      	ldr	r1, [pc, #48]	; (800150c <__NVIC_SetPriority+0x4c>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	0112      	lsls	r2, r2, #4
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e8:	e00a      	b.n	8001500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4908      	ldr	r1, [pc, #32]	; (8001510 <__NVIC_SetPriority+0x50>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	3b04      	subs	r3, #4
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	440b      	add	r3, r1
 80014fe:	761a      	strb	r2, [r3, #24]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f1c3 0307 	rsb	r3, r3, #7
 800152e:	2b04      	cmp	r3, #4
 8001530:	bf28      	it	cs
 8001532:	2304      	movcs	r3, #4
 8001534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3304      	adds	r3, #4
 800153a:	2b06      	cmp	r3, #6
 800153c:	d902      	bls.n	8001544 <NVIC_EncodePriority+0x30>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3b03      	subs	r3, #3
 8001542:	e000      	b.n	8001546 <NVIC_EncodePriority+0x32>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43d9      	mvns	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	4313      	orrs	r3, r2
         );
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	; 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001588:	d301      	bcc.n	800158e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2301      	movs	r3, #1
 800158c:	e00f      	b.n	80015ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <SysTick_Config+0x40>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001596:	210f      	movs	r1, #15
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f7ff ff90 	bl	80014c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SysTick_Config+0x40>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SysTick_Config+0x40>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff49 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015e0:	f7ff ff60 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 80015e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f7ff ff92 	bl	8001514 <NVIC_EncodePriority>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff61 	bl	80014c0 <__NVIC_SetPriority>
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ffb2 	bl	8001578 <SysTick_Config>
 8001614:	4603      	mov	r3, r0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162e:	e140      	b.n	80018b2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	2101      	movs	r1, #1
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	4013      	ands	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 8132 	beq.w	80018ac <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b01      	cmp	r3, #1
 8001652:	d005      	beq.n	8001660 <HAL_GPIO_Init+0x40>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d130      	bne.n	80016c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	2203      	movs	r2, #3
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001696:	2201      	movs	r2, #1
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	f003 0201 	and.w	r2, r3, #1
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d017      	beq.n	80016fe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	2203      	movs	r2, #3
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d123      	bne.n	8001752 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	08da      	lsrs	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3208      	adds	r2, #8
 8001712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	220f      	movs	r2, #15
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	691a      	ldr	r2, [r3, #16]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	08da      	lsrs	r2, r3, #3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3208      	adds	r2, #8
 800174c:	6939      	ldr	r1, [r7, #16]
 800174e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0203 	and.w	r2, r3, #3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 808c 	beq.w	80018ac <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001794:	4a4e      	ldr	r2, [pc, #312]	; (80018d0 <HAL_GPIO_Init+0x2b0>)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	3302      	adds	r3, #2
 800179c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	2207      	movs	r2, #7
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017be:	d00d      	beq.n	80017dc <HAL_GPIO_Init+0x1bc>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a44      	ldr	r2, [pc, #272]	; (80018d4 <HAL_GPIO_Init+0x2b4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d007      	beq.n	80017d8 <HAL_GPIO_Init+0x1b8>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a43      	ldr	r2, [pc, #268]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d101      	bne.n	80017d4 <HAL_GPIO_Init+0x1b4>
 80017d0:	2302      	movs	r3, #2
 80017d2:	e004      	b.n	80017de <HAL_GPIO_Init+0x1be>
 80017d4:	2307      	movs	r3, #7
 80017d6:	e002      	b.n	80017de <HAL_GPIO_Init+0x1be>
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <HAL_GPIO_Init+0x1be>
 80017dc:	2300      	movs	r3, #0
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	f002 0203 	and.w	r2, r2, #3
 80017e4:	0092      	lsls	r2, r2, #2
 80017e6:	4093      	lsls	r3, r2
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017ee:	4938      	ldr	r1, [pc, #224]	; (80018d0 <HAL_GPIO_Init+0x2b0>)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	089b      	lsrs	r3, r3, #2
 80017f4:	3302      	adds	r3, #2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017fc:	4b37      	ldr	r3, [pc, #220]	; (80018dc <HAL_GPIO_Init+0x2bc>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	43db      	mvns	r3, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4313      	orrs	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001820:	4a2e      	ldr	r2, [pc, #184]	; (80018dc <HAL_GPIO_Init+0x2bc>)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001826:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <HAL_GPIO_Init+0x2bc>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4313      	orrs	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800184a:	4a24      	ldr	r2, [pc, #144]	; (80018dc <HAL_GPIO_Init+0x2bc>)
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001850:	4b22      	ldr	r3, [pc, #136]	; (80018dc <HAL_GPIO_Init+0x2bc>)
 8001852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001856:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001876:	4a19      	ldr	r2, [pc, #100]	; (80018dc <HAL_GPIO_Init+0x2bc>)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <HAL_GPIO_Init+0x2bc>)
 8001880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001884:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80018a4:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <HAL_GPIO_Init+0x2bc>)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	3301      	adds	r3, #1
 80018b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	fa22 f303 	lsr.w	r3, r2, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f47f aeb7 	bne.w	8001630 <HAL_GPIO_Init+0x10>
  }
}
 80018c2:	bf00      	nop
 80018c4:	bf00      	nop
 80018c6:	371c      	adds	r7, #28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40010000 	.word	0x40010000
 80018d4:	48000400 	.word	0x48000400
 80018d8:	48000800 	.word	0x48000800
 80018dc:	58000800 	.word	0x58000800

080018e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]
 80018ec:	4613      	mov	r3, r2
 80018ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018f0:	787b      	ldrb	r3, [r7, #1]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018f6:	887a      	ldrh	r2, [r7, #2]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018fc:	e002      	b.n	8001904 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
	...

08001910 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a03      	ldr	r2, [pc, #12]	; (8001928 <HAL_PWR_EnableBkUpAccess+0x18>)
 800191a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	58000400 	.word	0x58000400

0800192c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_PWREx_GetVoltageRange+0x14>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	58000400 	.word	0x58000400

08001944 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001954:	d101      	bne.n	800195a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	58000400 	.word	0x58000400

08001968 <LL_RCC_HSE_EnableTcxo>:
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800196c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001976:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <LL_RCC_HSE_DisableTcxo>:
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001992:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80019a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019b2:	d101      	bne.n	80019b8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <LL_RCC_HSE_Enable>:
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80019c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d4:	6013      	str	r3, [r2, #0]
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <LL_RCC_HSE_Disable>:
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80019e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <LL_RCC_HSE_IsReady>:
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a0c:	d101      	bne.n	8001a12 <LL_RCC_HSE_IsReady+0x18>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <LL_RCC_HSE_IsReady+0x1a>
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <LL_RCC_HSI_Enable>:
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <LL_RCC_HSI_Disable>:
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <LL_RCC_HSI_IsReady>:
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a66:	d101      	bne.n	8001a6c <LL_RCC_HSI_IsReady+0x18>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <LL_RCC_HSI_IsReady+0x1a>
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	061b      	lsls	r3, r3, #24
 8001a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d101      	bne.n	8001ab6 <LL_RCC_LSE_IsReady+0x18>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <LL_RCC_LSE_IsReady+0x1a>
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001acc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d101      	bne.n	8001b18 <LL_RCC_LSI_IsReady+0x18>
 8001b14:	2301      	movs	r3, #1
 8001b16:	e000      	b.n	8001b1a <LL_RCC_LSI_IsReady+0x1a>
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6013      	str	r3, [r2, #0]
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6013      	str	r3, [r2, #0]
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d101      	bne.n	8001b70 <LL_RCC_MSI_IsReady+0x16>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <LL_RCC_MSI_IsReady+0x18>
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d101      	bne.n	8001b90 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bbc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001be2:	4313      	orrs	r3, r2
 8001be4:	604b      	str	r3, [r1, #4]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f023 0203 	bic.w	r2, r3, #3
 8001c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	608b      	str	r3, [r1, #8]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr

08001c16 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 030c 	and.w	r3, r3, #12
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	608b      	str	r3, [r1, #8]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr

08001c52 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c8c:	f023 020f 	bic.w	r2, r3, #15
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	608b      	str	r3, [r1, #8]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ce0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr

08001d3a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d7e:	6013      	str	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d9a:	d101      	bne.n	8001da0 <LL_RCC_PLL_IsReady+0x18>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <LL_RCC_PLL_IsReady+0x1a>
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0303 	and.w	r3, r3, #3
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e16:	d101      	bne.n	8001e1c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e000      	b.n	8001e1e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e3a:	d101      	bne.n	8001e40 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e52:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5e:	d101      	bne.n	8001e64 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e80:	d101      	bne.n	8001e86 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ea2:	d101      	bne.n	8001ea8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e38b      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ec6:	f7ff fea6 	bl	8001c16 <LL_RCC_GetSysClkSource>
 8001eca:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ecc:	f7ff ff8f 	bl	8001dee <LL_RCC_PLL_GetMainSource>
 8001ed0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 80c9 	beq.w	8002072 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x3e>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	2b0c      	cmp	r3, #12
 8001eea:	d17b      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d178      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ef2:	f7ff fe32 	bl	8001b5a <LL_RCC_MSI_IsReady>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_OscConfig+0x54>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e36a      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d005      	beq.n	8001f26 <HAL_RCC_OscConfig+0x72>
 8001f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f24:	e006      	b.n	8001f34 <HAL_RCC_OscConfig+0x80>
 8001f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2e:	091b      	lsrs	r3, r3, #4
 8001f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d222      	bcs.n	8001f7e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 fd6f 	bl	8002a20 <RCC_SetFlashLatencyFromMSIRange>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e348      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f56:	f043 0308 	orr.w	r3, r3, #8
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fe26 	bl	8001bc8 <LL_RCC_MSI_SetCalibTrimming>
 8001f7c:	e021      	b.n	8001fc2 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f88:	f043 0308 	orr.w	r3, r3, #8
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fe0d 	bl	8001bc8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fd34 	bl	8002a20 <RCC_SetFlashLatencyFromMSIRange>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e30d      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001fc2:	f000 fcf5 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4aa1      	ldr	r2, [pc, #644]	; (8002250 <HAL_RCC_OscConfig+0x39c>)
 8001fca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fcc:	4ba1      	ldr	r3, [pc, #644]	; (8002254 <HAL_RCC_OscConfig+0x3a0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff f9d9 	bl	8001388 <HAL_InitTick>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001fda:	7cfb      	ldrb	r3, [r7, #19]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d047      	beq.n	8002070 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	e2fc      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d02c      	beq.n	8002046 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fec:	f7ff fd99 	bl	8001b22 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ff0:	f7ff f8ae 	bl	8001150 <HAL_GetTick>
 8001ff4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ff8:	f7ff f8aa 	bl	8001150 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e2e9      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 800200a:	f7ff fda6 	bl	8001b5a <LL_RCC_MSI_IsReady>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f1      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800201e:	f043 0308 	orr.w	r3, r3, #8
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002032:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fdc2 	bl	8001bc8 <LL_RCC_MSI_SetCalibTrimming>
 8002044:	e015      	b.n	8002072 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002046:	f7ff fd7a 	bl	8001b3e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800204a:	f7ff f881 	bl	8001150 <HAL_GetTick>
 800204e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002052:	f7ff f87d 	bl	8001150 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e2bc      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002064:	f7ff fd79 	bl	8001b5a <LL_RCC_MSI_IsReady>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f1      	bne.n	8002052 <HAL_RCC_OscConfig+0x19e>
 800206e:	e000      	b.n	8002072 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002070:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d05f      	beq.n	800213e <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	2b08      	cmp	r3, #8
 8002082:	d005      	beq.n	8002090 <HAL_RCC_OscConfig+0x1dc>
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	2b0c      	cmp	r3, #12
 8002088:	d10d      	bne.n	80020a6 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d10a      	bne.n	80020a6 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002090:	f7ff fcb3 	bl	80019fa <LL_RCC_HSE_IsReady>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d050      	beq.n	800213c <HAL_RCC_OscConfig+0x288>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d14c      	bne.n	800213c <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e29b      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80020a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c4:	d102      	bne.n	80020cc <HAL_RCC_OscConfig+0x218>
 80020c6:	f7ff fc7c 	bl	80019c2 <LL_RCC_HSE_Enable>
 80020ca:	e00d      	b.n	80020e8 <HAL_RCC_OscConfig+0x234>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80020d4:	d104      	bne.n	80020e0 <HAL_RCC_OscConfig+0x22c>
 80020d6:	f7ff fc47 	bl	8001968 <LL_RCC_HSE_EnableTcxo>
 80020da:	f7ff fc72 	bl	80019c2 <LL_RCC_HSE_Enable>
 80020de:	e003      	b.n	80020e8 <HAL_RCC_OscConfig+0x234>
 80020e0:	f7ff fc7d 	bl	80019de <LL_RCC_HSE_Disable>
 80020e4:	f7ff fc4e 	bl	8001984 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d012      	beq.n	8002116 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7ff f82e 	bl	8001150 <HAL_GetTick>
 80020f4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f8:	f7ff f82a 	bl	8001150 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	; 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e269      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 800210a:	f7ff fc76 	bl	80019fa <LL_RCC_HSE_IsReady>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f1      	beq.n	80020f8 <HAL_RCC_OscConfig+0x244>
 8002114:	e013      	b.n	800213e <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002116:	f7ff f81b 	bl	8001150 <HAL_GetTick>
 800211a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800211e:	f7ff f817 	bl	8001150 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b64      	cmp	r3, #100	; 0x64
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e256      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002130:	f7ff fc63 	bl	80019fa <LL_RCC_HSE_IsReady>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f1      	bne.n	800211e <HAL_RCC_OscConfig+0x26a>
 800213a:	e000      	b.n	800213e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d04b      	beq.n	80021e2 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	2b04      	cmp	r3, #4
 800214e:	d005      	beq.n	800215c <HAL_RCC_OscConfig+0x2a8>
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	2b0c      	cmp	r3, #12
 8002154:	d113      	bne.n	800217e <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d110      	bne.n	800217e <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800215c:	f7ff fc7a 	bl	8001a54 <LL_RCC_HSI_IsReady>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <HAL_RCC_OscConfig+0x2be>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e235      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fc7d 	bl	8001a76 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800217c:	e031      	b.n	80021e2 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d019      	beq.n	80021ba <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002186:	f7ff fc49 	bl	8001a1c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218a:	f7fe ffe1 	bl	8001150 <HAL_GetTick>
 800218e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002192:	f7fe ffdd 	bl	8001150 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e21c      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80021a4:	f7ff fc56 	bl	8001a54 <LL_RCC_HSI_IsReady>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f1      	beq.n	8002192 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fc5f 	bl	8001a76 <LL_RCC_HSI_SetCalibTrimming>
 80021b8:	e013      	b.n	80021e2 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ba:	f7ff fc3d 	bl	8001a38 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021be:	f7fe ffc7 	bl	8001150 <HAL_GetTick>
 80021c2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c6:	f7fe ffc3 	bl	8001150 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e202      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80021d8:	f7ff fc3c 	bl	8001a54 <LL_RCC_HSI_IsReady>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f1      	bne.n	80021c6 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d06f      	beq.n	80022ce <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d057      	beq.n	80022a6 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 80021f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fe:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69da      	ldr	r2, [r3, #28]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	429a      	cmp	r2, r3
 800220c:	d036      	beq.n	800227c <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d006      	beq.n	8002226 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e1db      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d018      	beq.n	8002262 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8002230:	f7ff fc56 	bl	8001ae0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002234:	f7fe ff8c 	bl	8001150 <HAL_GetTick>
 8002238:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800223a:	e00d      	b.n	8002258 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223c:	f7fe ff88 	bl	8001150 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b11      	cmp	r3, #17
 8002248:	d906      	bls.n	8002258 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e1c7      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
 800224e:	bf00      	nop
 8002250:	20000000 	.word	0x20000000
 8002254:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8002258:	f7ff fc52 	bl	8001b00 <LL_RCC_LSI_IsReady>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1ec      	bne.n	800223c <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800226a:	f023 0210 	bic.w	r2, r3, #16
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227c:	f7ff fc20 	bl	8001ac0 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002280:	f7fe ff66 	bl	8001150 <HAL_GetTick>
 8002284:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002288:	f7fe ff62 	bl	8001150 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b11      	cmp	r3, #17
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e1a1      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 800229a:	f7ff fc31 	bl	8001b00 <LL_RCC_LSI_IsReady>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f1      	beq.n	8002288 <HAL_RCC_OscConfig+0x3d4>
 80022a4:	e013      	b.n	80022ce <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a6:	f7ff fc1b 	bl	8001ae0 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022aa:	f7fe ff51 	bl	8001150 <HAL_GetTick>
 80022ae:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b2:	f7fe ff4d 	bl	8001150 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b11      	cmp	r3, #17
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e18c      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 80022c4:	f7ff fc1c 	bl	8001b00 <LL_RCC_LSI_IsReady>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f1      	bne.n	80022b2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80d8 	beq.w	800248c <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80022dc:	f7ff fb32 	bl	8001944 <LL_PWR_IsEnabledBkUpAccess>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d113      	bne.n	800230e <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80022e6:	f7ff fb13 	bl	8001910 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ea:	f7fe ff31 	bl	8001150 <HAL_GetTick>
 80022ee:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f2:	f7fe ff2d 	bl	8001150 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e16c      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002304:	f7ff fb1e 	bl	8001944 <LL_PWR_IsEnabledBkUpAccess>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f1      	beq.n	80022f2 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d07b      	beq.n	800240e <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b85      	cmp	r3, #133	; 0x85
 800231c:	d003      	beq.n	8002326 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b05      	cmp	r3, #5
 8002324:	d109      	bne.n	800233a <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233a:	f7fe ff09 	bl	8001150 <HAL_GetTick>
 800233e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002348:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7fe fefb 	bl	8001150 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	; 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e138      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 800236c:	f7ff fb97 	bl	8001a9e <LL_RCC_LSE_IsReady>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0ef      	beq.n	8002356 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b81      	cmp	r3, #129	; 0x81
 800237c:	d003      	beq.n	8002386 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b85      	cmp	r3, #133	; 0x85
 8002384:	d121      	bne.n	80023ca <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7fe fee3 	bl	8001150 <HAL_GetTick>
 800238a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800238c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002394:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80023a0:	e00a      	b.n	80023b8 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a2:	f7fe fed5 	bl	8001150 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e112      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80023b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ec      	beq.n	80023a2 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80023c8:	e060      	b.n	800248c <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7fe fec1 	bl	8001150 <HAL_GetTick>
 80023ce:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80023d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7fe feb3 	bl	8001150 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0f0      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1ec      	bne.n	80023e6 <HAL_RCC_OscConfig+0x532>
 800240c:	e03e      	b.n	800248c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240e:	f7fe fe9f 	bl	8001150 <HAL_GetTick>
 8002412:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7fe fe91 	bl	8001150 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	; 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e0ce      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1ec      	bne.n	800242a <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002450:	f7fe fe7e 	bl	8001150 <HAL_GetTick>
 8002454:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002462:	f023 0301 	bic.w	r3, r3, #1
 8002466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800246a:	e00a      	b.n	8002482 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246c:	f7fe fe70 	bl	8001150 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e0ad      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002482:	f7ff fb0c 	bl	8001a9e <LL_RCC_LSE_IsReady>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ef      	bne.n	800246c <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80a3 	beq.w	80025dc <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2b0c      	cmp	r3, #12
 800249a:	d076      	beq.n	800258a <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d14b      	bne.n	800253c <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a4:	f7ff fc62 	bl	8001d6c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe fe52 	bl	8001150 <HAL_GetTick>
 80024ac:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b0:	f7fe fe4e 	bl	8001150 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b0a      	cmp	r3, #10
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e08d      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80024c2:	f7ff fc61 	bl	8001d88 <LL_RCC_PLL_IsReady>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f1      	bne.n	80024b0 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	4b45      	ldr	r3, [pc, #276]	; (80025e8 <HAL_RCC_OscConfig+0x734>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024de:	4311      	orrs	r1, r2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024e4:	0212      	lsls	r2, r2, #8
 80024e6:	4311      	orrs	r1, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024ec:	4311      	orrs	r1, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024f2:	4311      	orrs	r1, r2
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024f8:	430a      	orrs	r2, r1
 80024fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024fe:	4313      	orrs	r3, r2
 8002500:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002502:	f7ff fc25 	bl	8001d50 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002516:	f7fe fe1b 	bl	8001150 <HAL_GetTick>
 800251a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251e:	f7fe fe17 	bl	8001150 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b0a      	cmp	r3, #10
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e056      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002530:	f7ff fc2a 	bl	8001d88 <LL_RCC_PLL_IsReady>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f1      	beq.n	800251e <HAL_RCC_OscConfig+0x66a>
 800253a:	e04f      	b.n	80025dc <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253c:	f7ff fc16 	bl	8001d6c <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800254a:	f023 0303 	bic.w	r3, r3, #3
 800254e:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8002550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800255a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800255e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002562:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe fdf4 	bl	8001150 <HAL_GetTick>
 8002568:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe fdf0 	bl	8001150 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b0a      	cmp	r3, #10
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e02f      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800257e:	f7ff fc03 	bl	8001d88 <LL_RCC_PLL_IsReady>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f1      	bne.n	800256c <HAL_RCC_OscConfig+0x6b8>
 8002588:	e028      	b.n	80025dc <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e023      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	f003 0203 	and.w	r2, r3, #3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d115      	bne.n	80025d8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d10e      	bne.n	80025d8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d106      	bne.n	80025d8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3720      	adds	r7, #32
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	11c1808c 	.word	0x11c1808c

080025ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e12c      	b.n	800285a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002600:	4b98      	ldr	r3, [pc, #608]	; (8002864 <HAL_RCC_ClockConfig+0x278>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d91b      	bls.n	8002646 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b95      	ldr	r3, [pc, #596]	; (8002864 <HAL_RCC_ClockConfig+0x278>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 0207 	bic.w	r2, r3, #7
 8002616:	4993      	ldr	r1, [pc, #588]	; (8002864 <HAL_RCC_ClockConfig+0x278>)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800261e:	f7fe fd97 	bl	8001150 <HAL_GetTick>
 8002622:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002624:	e008      	b.n	8002638 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002626:	f7fe fd93 	bl	8001150 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e110      	b.n	800285a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002638:	4b8a      	ldr	r3, [pc, #552]	; (8002864 <HAL_RCC_ClockConfig+0x278>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d1ef      	bne.n	8002626 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d016      	beq.n	8002680 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fae8 	bl	8001c2c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800265c:	f7fe fd78 	bl	8001150 <HAL_GetTick>
 8002660:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002664:	f7fe fd74 	bl	8001150 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e0f1      	b.n	800285a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002676:	f7ff fbc5 	bl	8001e04 <LL_RCC_IsActiveFlag_HPRE>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f1      	beq.n	8002664 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	d016      	beq.n	80026ba <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fade 	bl	8001c52 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002696:	f7fe fd5b 	bl	8001150 <HAL_GetTick>
 800269a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800269e:	f7fe fd57 	bl	8001150 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e0d4      	b.n	800285a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80026b0:	f7ff fbb9 	bl	8001e26 <LL_RCC_IsActiveFlag_C2HPRE>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f1      	beq.n	800269e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d016      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fad6 	bl	8001c7c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026d0:	f7fe fd3e 	bl	8001150 <HAL_GetTick>
 80026d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026d8:	f7fe fd3a 	bl	8001150 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e0b7      	b.n	800285a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80026ea:	f7ff fbae 	bl	8001e4a <LL_RCC_IsActiveFlag_SHDHPRE>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f1      	beq.n	80026d8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d016      	beq.n	800272e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff facf 	bl	8001ca8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800270a:	f7fe fd21 	bl	8001150 <HAL_GetTick>
 800270e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002712:	f7fe fd1d 	bl	8001150 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e09a      	b.n	800285a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002724:	f7ff fba3 	bl	8001e6e <LL_RCC_IsActiveFlag_PPRE1>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f1      	beq.n	8002712 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d017      	beq.n	800276a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fac4 	bl	8001cce <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002746:	f7fe fd03 	bl	8001150 <HAL_GetTick>
 800274a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800274c:	e008      	b.n	8002760 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800274e:	f7fe fcff 	bl	8001150 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e07c      	b.n	800285a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002760:	f7ff fb96 	bl	8001e90 <LL_RCC_IsActiveFlag_PPRE2>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f1      	beq.n	800274e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d043      	beq.n	80027fe <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d106      	bne.n	800278c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800277e:	f7ff f93c 	bl	80019fa <LL_RCC_HSE_IsReady>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d11e      	bne.n	80027c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e066      	b.n	800285a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d106      	bne.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002794:	f7ff faf8 	bl	8001d88 <LL_RCC_PLL_IsReady>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d113      	bne.n	80027c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e05b      	b.n	800285a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80027aa:	f7ff f9d6 	bl	8001b5a <LL_RCC_MSI_IsReady>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d108      	bne.n	80027c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e050      	b.n	800285a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80027b8:	f7ff f94c 	bl	8001a54 <LL_RCC_HSI_IsReady>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e049      	b.n	800285a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fa10 	bl	8001bf0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d0:	f7fe fcbe 	bl	8001150 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d8:	f7fe fcba 	bl	8001150 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e035      	b.n	800285a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	f7ff fa12 	bl	8001c16 <LL_RCC_GetSysClkSource>
 80027f2:	4602      	mov	r2, r0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d1ec      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027fe:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_RCC_ClockConfig+0x278>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d21b      	bcs.n	8002844 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280c:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HAL_RCC_ClockConfig+0x278>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 0207 	bic.w	r2, r3, #7
 8002814:	4913      	ldr	r1, [pc, #76]	; (8002864 <HAL_RCC_ClockConfig+0x278>)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	4313      	orrs	r3, r2
 800281a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800281c:	f7fe fc98 	bl	8001150 <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002822:	e008      	b.n	8002836 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002824:	f7fe fc94 	bl	8001150 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e011      	b.n	800285a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_RCC_ClockConfig+0x278>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d1ef      	bne.n	8002824 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002844:	f000 f8b4 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 8002848:	4603      	mov	r3, r0
 800284a:	4a07      	ldr	r2, [pc, #28]	; (8002868 <HAL_RCC_ClockConfig+0x27c>)
 800284c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <HAL_RCC_ClockConfig+0x280>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fd98 	bl	8001388 <HAL_InitTick>
 8002858:	4603      	mov	r3, r0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	58004000 	.word	0x58004000
 8002868:	20000000 	.word	0x20000000
 800286c:	20000004 	.word	0x20000004

08002870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800287e:	f7ff f9ca 	bl	8001c16 <LL_RCC_GetSysClkSource>
 8002882:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002884:	f7ff fab3 	bl	8001dee <LL_RCC_PLL_GetMainSource>
 8002888:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x2c>
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b0c      	cmp	r3, #12
 8002894:	d139      	bne.n	800290a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d136      	bne.n	800290a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800289c:	f7ff f96d 	bl	8001b7a <LL_RCC_MSI_IsEnabledRangeSelect>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d115      	bne.n	80028d2 <HAL_RCC_GetSysClockFreq+0x62>
 80028a6:	f7ff f968 	bl	8001b7a <LL_RCC_MSI_IsEnabledRangeSelect>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d106      	bne.n	80028be <HAL_RCC_GetSysClockFreq+0x4e>
 80028b0:	f7ff f973 	bl	8001b9a <LL_RCC_MSI_GetRange>
 80028b4:	4603      	mov	r3, r0
 80028b6:	0a1b      	lsrs	r3, r3, #8
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	e005      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x5a>
 80028be:	f7ff f977 	bl	8001bb0 <LL_RCC_MSI_GetRangeAfterStandby>
 80028c2:	4603      	mov	r3, r0
 80028c4:	0a1b      	lsrs	r3, r3, #8
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	4a36      	ldr	r2, [pc, #216]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x134>)
 80028cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d0:	e014      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x8c>
 80028d2:	f7ff f952 	bl	8001b7a <LL_RCC_MSI_IsEnabledRangeSelect>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d106      	bne.n	80028ea <HAL_RCC_GetSysClockFreq+0x7a>
 80028dc:	f7ff f95d 	bl	8001b9a <LL_RCC_MSI_GetRange>
 80028e0:	4603      	mov	r3, r0
 80028e2:	091b      	lsrs	r3, r3, #4
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	e005      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x86>
 80028ea:	f7ff f961 	bl	8001bb0 <LL_RCC_MSI_GetRangeAfterStandby>
 80028ee:	4603      	mov	r3, r0
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	4a2b      	ldr	r2, [pc, #172]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x134>)
 80028f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d115      	bne.n	8002930 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002908:	e012      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b04      	cmp	r3, #4
 800290e:	d102      	bne.n	8002916 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002910:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	e00c      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b08      	cmp	r3, #8
 800291a:	d109      	bne.n	8002930 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800291c:	f7ff f840 	bl	80019a0 <LL_RCC_HSE_IsEnabledDiv2>
 8002920:	4603      	mov	r3, r0
 8002922:	2b01      	cmp	r3, #1
 8002924:	d102      	bne.n	800292c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	e001      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800292c:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <HAL_RCC_GetSysClockFreq+0x13c>)
 800292e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002930:	f7ff f971 	bl	8001c16 <LL_RCC_GetSysClkSource>
 8002934:	4603      	mov	r3, r0
 8002936:	2b0c      	cmp	r3, #12
 8002938:	d12f      	bne.n	800299a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800293a:	f7ff fa58 	bl	8001dee <LL_RCC_PLL_GetMainSource>
 800293e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d003      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0xde>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b03      	cmp	r3, #3
 800294a:	d003      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0xe4>
 800294c:	e00d      	b.n	800296a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800294e:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002950:	60fb      	str	r3, [r7, #12]
        break;
 8002952:	e00d      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002954:	f7ff f824 	bl	80019a0 <LL_RCC_HSE_IsEnabledDiv2>
 8002958:	4603      	mov	r3, r0
 800295a:	2b01      	cmp	r3, #1
 800295c:	d102      	bne.n	8002964 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002960:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002962:	e005      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002964:	4b11      	ldr	r3, [pc, #68]	; (80029ac <HAL_RCC_GetSysClockFreq+0x13c>)
 8002966:	60fb      	str	r3, [r7, #12]
        break;
 8002968:	e002      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	60fb      	str	r3, [r7, #12]
        break;
 800296e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002970:	f7ff fa1b 	bl	8001daa <LL_RCC_PLL_GetN>
 8002974:	4602      	mov	r2, r0
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	fb03 f402 	mul.w	r4, r3, r2
 800297c:	f7ff fa2c 	bl	8001dd8 <LL_RCC_PLL_GetDivider>
 8002980:	4603      	mov	r3, r0
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	3301      	adds	r3, #1
 8002986:	fbb4 f4f3 	udiv	r4, r4, r3
 800298a:	f7ff fa1a 	bl	8001dc2 <LL_RCC_PLL_GetR>
 800298e:	4603      	mov	r3, r0
 8002990:	0f5b      	lsrs	r3, r3, #29
 8002992:	3301      	adds	r3, #1
 8002994:	fbb4 f3f3 	udiv	r3, r4, r3
 8002998:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800299a:	697b      	ldr	r3, [r7, #20]
}
 800299c:	4618      	mov	r0, r3
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd90      	pop	{r4, r7, pc}
 80029a4:	0800f000 	.word	0x0800f000
 80029a8:	00f42400 	.word	0x00f42400
 80029ac:	01e84800 	.word	0x01e84800

080029b0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b0:	b598      	push	{r3, r4, r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80029b4:	f7ff ff5c 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 80029b8:	4604      	mov	r4, r0
 80029ba:	f7ff f99b 	bl	8001cf4 <LL_RCC_GetAHBPrescaler>
 80029be:	4603      	mov	r3, r0
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	4a03      	ldr	r2, [pc, #12]	; (80029d4 <HAL_RCC_GetHCLKFreq+0x24>)
 80029c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029cc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	bd98      	pop	{r3, r4, r7, pc}
 80029d4:	0800efa0 	.word	0x0800efa0

080029d8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d8:	b598      	push	{r3, r4, r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80029dc:	f7ff ffe8 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029e0:	4604      	mov	r4, r0
 80029e2:	f7ff f99f 	bl	8001d24 <LL_RCC_GetAPB1Prescaler>
 80029e6:	4603      	mov	r3, r0
 80029e8:	0a1b      	lsrs	r3, r3, #8
 80029ea:	4a03      	ldr	r2, [pc, #12]	; (80029f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	bd98      	pop	{r3, r4, r7, pc}
 80029f8:	0800efe0 	.word	0x0800efe0

080029fc <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029fc:	b598      	push	{r3, r4, r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002a00:	f7ff ffd6 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 8002a04:	4604      	mov	r4, r0
 8002a06:	f7ff f998 	bl	8001d3a <LL_RCC_GetAPB2Prescaler>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	0adb      	lsrs	r3, r3, #11
 8002a0e:	4a03      	ldr	r2, [pc, #12]	; (8002a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a14:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	bd98      	pop	{r3, r4, r7, pc}
 8002a1c:	0800efe0 	.word	0x0800efe0

08002a20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	091b      	lsrs	r3, r3, #4
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	4a10      	ldr	r2, [pc, #64]	; (8002a74 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a36:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002a38:	f7ff f967 	bl	8001d0a <LL_RCC_GetAHB3Prescaler>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	091b      	lsrs	r3, r3, #4
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	4a0c      	ldr	r2, [pc, #48]	; (8002a78 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a50:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4a09      	ldr	r2, [pc, #36]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	0c9c      	lsrs	r4, r3, #18
 8002a5c:	f7fe ff66 	bl	800192c <HAL_PWREx_GetVoltageRange>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4619      	mov	r1, r3
 8002a64:	4620      	mov	r0, r4
 8002a66:	f000 f80b 	bl	8002a80 <RCC_SetFlashLatency>
 8002a6a:	4603      	mov	r3, r0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd90      	pop	{r4, r7, pc}
 8002a74:	0800f000 	.word	0x0800f000
 8002a78:	0800efa0 	.word	0x0800efa0
 8002a7c:	431bde83 	.word	0x431bde83

08002a80 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08e      	sub	sp, #56	; 0x38
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002a8a:	4a3a      	ldr	r2, [pc, #232]	; (8002b74 <RCC_SetFlashLatency+0xf4>)
 8002a8c:	f107 0320 	add.w	r3, r7, #32
 8002a90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a94:	6018      	str	r0, [r3, #0]
 8002a96:	3304      	adds	r3, #4
 8002a98:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002a9a:	4a37      	ldr	r2, [pc, #220]	; (8002b78 <RCC_SetFlashLatency+0xf8>)
 8002a9c:	f107 0318 	add.w	r3, r7, #24
 8002aa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002aa4:	6018      	str	r0, [r3, #0]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002aaa:	4a34      	ldr	r2, [pc, #208]	; (8002b7c <RCC_SetFlashLatency+0xfc>)
 8002aac:	f107 030c 	add.w	r3, r7, #12
 8002ab0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ab2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac0:	d11b      	bne.n	8002afa <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ac6:	e014      	b.n	8002af2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	3338      	adds	r3, #56	; 0x38
 8002ace:	443b      	add	r3, r7
 8002ad0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d807      	bhi.n	8002aec <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	3338      	adds	r3, #56	; 0x38
 8002ae2:	443b      	add	r3, r7
 8002ae4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002ae8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002aea:	e021      	b.n	8002b30 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aee:	3301      	adds	r3, #1
 8002af0:	633b      	str	r3, [r7, #48]	; 0x30
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d9e7      	bls.n	8002ac8 <RCC_SetFlashLatency+0x48>
 8002af8:	e01a      	b.n	8002b30 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002afe:	e014      	b.n	8002b2a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	3338      	adds	r3, #56	; 0x38
 8002b06:	443b      	add	r3, r7
 8002b08:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d807      	bhi.n	8002b24 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	3338      	adds	r3, #56	; 0x38
 8002b1a:	443b      	add	r3, r7
 8002b1c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b22:	e005      	b.n	8002b30 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b26:	3301      	adds	r3, #1
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d9e7      	bls.n	8002b00 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b30:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <RCC_SetFlashLatency+0x100>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 0207 	bic.w	r2, r3, #7
 8002b38:	4911      	ldr	r1, [pc, #68]	; (8002b80 <RCC_SetFlashLatency+0x100>)
 8002b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b40:	f7fe fb06 	bl	8001150 <HAL_GetTick>
 8002b44:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b46:	e008      	b.n	8002b5a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b48:	f7fe fb02 	bl	8001150 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e007      	b.n	8002b6a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <RCC_SetFlashLatency+0x100>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1ef      	bne.n	8002b48 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3738      	adds	r7, #56	; 0x38
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	0800ef48 	.word	0x0800ef48
 8002b78:	0800ef50 	.word	0x0800ef50
 8002b7c:	0800ef58 	.word	0x0800ef58
 8002b80:	58004000 	.word	0x58004000

08002b84 <LL_RCC_LSE_IsReady>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d101      	bne.n	8002b9c <LL_RCC_LSE_IsReady+0x18>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <LL_RCC_LSE_IsReady+0x1a>
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr

08002ba6 <LL_RCC_SetUSARTClockSource>:
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	0c1b      	lsrs	r3, r3, #16
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr

08002bd6 <LL_RCC_SetI2SClockSource>:
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <LL_RCC_SetLPUARTClockSource>:
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <LL_RCC_SetI2CClockSource>:
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002c42:	43db      	mvns	r3, r3
 8002c44:	401a      	ands	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002c4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <LL_RCC_SetLPTIMClockSource>:
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	041b      	lsls	r3, r3, #16
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	041b      	lsls	r3, r3, #16
 8002c80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <LL_RCC_SetRNGClockSource>:
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002ca8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <LL_RCC_SetADCClockSource>:
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <LL_RCC_SetRTCClockSource>:
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <LL_RCC_GetRTCClockSource>:
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <LL_RCC_ForceBackupDomainReset>:
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d42:	bf00      	nop
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr

08002d4a <LL_RCC_ReleaseBackupDomainReset>:
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr
	...

08002d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002d78:	2300      	movs	r3, #0
 8002d7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d058      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002d8c:	f7fe fdc0 	bl	8001910 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d90:	f7fe f9de 	bl	8001150 <HAL_GetTick>
 8002d94:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002d96:	e009      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d98:	f7fe f9da 	bl	8001150 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d902      	bls.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	74fb      	strb	r3, [r7, #19]
        break;
 8002daa:	e006      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002dac:	4b7b      	ldr	r3, [pc, #492]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db8:	d1ee      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002dba:	7cfb      	ldrb	r3, [r7, #19]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d13c      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002dc0:	f7ff ffa7 	bl	8002d12 <LL_RCC_GetRTCClockSource>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d00f      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dda:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ddc:	f7ff ffa5 	bl	8002d2a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002de0:	f7ff ffb3 	bl	8002d4a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002de4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d014      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df8:	f7fe f9aa 	bl	8001150 <HAL_GetTick>
 8002dfc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e00:	f7fe f9a6 	bl	8001150 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d902      	bls.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	74fb      	strb	r3, [r7, #19]
            break;
 8002e16:	e004      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002e18:	f7ff feb4 	bl	8002b84 <LL_RCC_LSE_IsReady>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d1ee      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002e22:	7cfb      	ldrb	r3, [r7, #19]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff5b 	bl	8002ce8 <LL_RCC_SetRTCClockSource>
 8002e32:	e004      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	74bb      	strb	r3, [r7, #18]
 8002e38:	e001      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e3a:	7cfb      	ldrb	r3, [r7, #19]
 8002e3c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d004      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fea9 	bl	8002ba6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d004      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fe9e 	bl	8002ba6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d004      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fec0 	bl	8002c00 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d004      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fee6 	bl	8002c62 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d004      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff fedb 	bl	8002c62 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d004      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fed0 	bl	8002c62 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d004      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fea9 	bl	8002c2a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d004      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff fe9e 	bl	8002c2a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d004      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fe93 	bl	8002c2a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d011      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fe5e 	bl	8002bd6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f22:	d107      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d010      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fea5 	bl	8002c94 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d107      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f60:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d011      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fea3 	bl	8002cbe <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f80:	d107      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f90:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002f92:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	58000400 	.word	0x58000400

08002fa0 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002fb0:	4904      	ldr	r1, [pc, #16]	; (8002fc4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	608b      	str	r3, [r1, #8]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	58000400 	.word	0x58000400

08002fc8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002fcc:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd2:	4a04      	ldr	r2, [pc, #16]	; (8002fe4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	58000400 	.word	0x58000400

08002fe8 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff2:	4a04      	ldr	r2, [pc, #16]	; (8003004 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002ff4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	58000400 	.word	0x58000400

08003008 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800300c:	4b03      	ldr	r3, [pc, #12]	; (800301c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800300e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003012:	619a      	str	r2, [r3, #24]
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	58000400 	.word	0x58000400

08003020 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003024:	4b06      	ldr	r3, [pc, #24]	; (8003040 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b02      	cmp	r3, #2
 800302e:	d101      	bne.n	8003034 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	58000400 	.word	0x58000400

08003044 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b04      	cmp	r3, #4
 8003052:	d101      	bne.n	8003058 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	58000400 	.word	0x58000400

08003068 <LL_RCC_RF_DisableReset>:
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003078:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800307c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <LL_RCC_IsRFUnderReset>:
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800308c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800309c:	d101      	bne.n	80030a2 <LL_RCC_IsRFUnderReset+0x1a>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <LL_RCC_IsRFUnderReset+0x1c>
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <LL_EXTI_EnableIT_32_63+0x24>)
 80030b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80030ba:	4905      	ldr	r1, [pc, #20]	; (80030d0 <LL_EXTI_EnableIT_32_63+0x24>)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	58000800 	.word	0x58000800

080030d4 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d103      	bne.n	80030ea <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
    return status;
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	e04b      	b.n	8003182 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	799b      	ldrb	r3, [r3, #6]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d105      	bne.n	8003104 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fd fed5 	bl	8000eae <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 800310a:	f7ff ffad 	bl	8003068 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800310e:	4b1f      	ldr	r3, [pc, #124]	; (800318c <HAL_SUBGHZ_Init+0xb8>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	0cdb      	lsrs	r3, r3, #19
 800311c:	2264      	movs	r2, #100	; 0x64
 800311e:	fb02 f303 	mul.w	r3, r2, r3
 8003122:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d105      	bne.n	8003136 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	609a      	str	r2, [r3, #8]
      break;
 8003134:	e007      	b.n	8003146 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3b01      	subs	r3, #1
 800313a:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 800313c:	f7ff ffa4 	bl	8003088 <LL_RCC_IsRFUnderReset>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1ee      	bne.n	8003124 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8003146:	f7ff ff3f 	bl	8002fc8 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800314a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800314e:	f7ff ffad 	bl	80030ac <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003152:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003156:	f7ff ff23 	bl	8002fa0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800315a:	f7ff ff55 	bl	8003008 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10a      	bne.n	800317a <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fa2f 	bl	80035cc <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	719a      	strb	r2, [r3, #6]

  return status;
 8003180:	7bfb      	ldrb	r3, [r7, #15]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	20000000 	.word	0x20000000

08003190 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	461a      	mov	r2, r3
 800319c:	460b      	mov	r3, r1
 800319e:	817b      	strh	r3, [r7, #10]
 80031a0:	4613      	mov	r3, r2
 80031a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	799b      	ldrb	r3, [r3, #6]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d14a      	bne.n	8003244 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	795b      	ldrb	r3, [r3, #5]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_SUBGHZ_WriteRegisters+0x2a>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e045      	b.n	8003246 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2202      	movs	r2, #2
 80031c4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 face 	bl	8003768 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80031cc:	f7ff ff0c 	bl	8002fe8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80031d0:	210d      	movs	r1, #13
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 fa1a 	bl	800360c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80031d8:	897b      	ldrh	r3, [r7, #10]
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	b29b      	uxth	r3, r3
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	4619      	mov	r1, r3
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 fa12 	bl	800360c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80031e8:	897b      	ldrh	r3, [r7, #10]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	4619      	mov	r1, r3
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fa0c 	bl	800360c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80031f4:	2300      	movs	r3, #0
 80031f6:	82bb      	strh	r3, [r7, #20]
 80031f8:	e00a      	b.n	8003210 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80031fa:	8abb      	ldrh	r3, [r7, #20]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	4413      	add	r3, r2
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	4619      	mov	r1, r3
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 fa01 	bl	800360c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800320a:	8abb      	ldrh	r3, [r7, #20]
 800320c:	3301      	adds	r3, #1
 800320e:	82bb      	strh	r3, [r7, #20]
 8003210:	8aba      	ldrh	r2, [r7, #20]
 8003212:	893b      	ldrh	r3, [r7, #8]
 8003214:	429a      	cmp	r2, r3
 8003216:	d3f0      	bcc.n	80031fa <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003218:	f7ff fed6 	bl	8002fc8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fac7 	bl	80037b0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	75fb      	strb	r3, [r7, #23]
 800322e:	e001      	b.n	8003234 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	715a      	strb	r2, [r3, #5]

    return status;
 8003240:	7dfb      	ldrb	r3, [r7, #23]
 8003242:	e000      	b.n	8003246 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003244:	2302      	movs	r3, #2
  }
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b088      	sub	sp, #32
 8003252:	af00      	add	r7, sp, #0
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	461a      	mov	r2, r3
 800325a:	460b      	mov	r3, r1
 800325c:	817b      	strh	r3, [r7, #10]
 800325e:	4613      	mov	r3, r2
 8003260:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	799b      	ldrb	r3, [r3, #6]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	d14a      	bne.n	8003306 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	795b      	ldrb	r3, [r3, #5]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003278:	2302      	movs	r3, #2
 800327a:	e045      	b.n	8003308 <HAL_SUBGHZ_ReadRegisters+0xba>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 fa70 	bl	8003768 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003288:	f7ff feae 	bl	8002fe8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800328c:	211d      	movs	r1, #29
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f9bc 	bl	800360c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003294:	897b      	ldrh	r3, [r7, #10]
 8003296:	0a1b      	lsrs	r3, r3, #8
 8003298:	b29b      	uxth	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	4619      	mov	r1, r3
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f9b4 	bl	800360c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80032a4:	897b      	ldrh	r3, [r7, #10]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	4619      	mov	r1, r3
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f9ae 	bl	800360c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80032b0:	2100      	movs	r1, #0
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f9aa 	bl	800360c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80032b8:	2300      	movs	r3, #0
 80032ba:	82fb      	strh	r3, [r7, #22]
 80032bc:	e009      	b.n	80032d2 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80032be:	69b9      	ldr	r1, [r7, #24]
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f9f9 	bl	80036b8 <SUBGHZSPI_Receive>
      pData++;
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	3301      	adds	r3, #1
 80032ca:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80032cc:	8afb      	ldrh	r3, [r7, #22]
 80032ce:	3301      	adds	r3, #1
 80032d0:	82fb      	strh	r3, [r7, #22]
 80032d2:	8afa      	ldrh	r2, [r7, #22]
 80032d4:	893b      	ldrh	r3, [r7, #8]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d3f1      	bcc.n	80032be <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80032da:	f7ff fe75 	bl	8002fc8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fa66 	bl	80037b0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	77fb      	strb	r3, [r7, #31]
 80032f0:	e001      	b.n	80032f6 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	715a      	strb	r2, [r3, #5]

    return status;
 8003302:	7ffb      	ldrb	r3, [r7, #31]
 8003304:	e000      	b.n	8003308 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003306:	2302      	movs	r3, #2
  }
}
 8003308:	4618      	mov	r0, r3
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	607a      	str	r2, [r7, #4]
 800331a:	461a      	mov	r2, r3
 800331c:	460b      	mov	r3, r1
 800331e:	72fb      	strb	r3, [r7, #11]
 8003320:	4613      	mov	r3, r2
 8003322:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	799b      	ldrb	r3, [r3, #6]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b01      	cmp	r3, #1
 800332c:	d14a      	bne.n	80033c4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	795b      	ldrb	r3, [r3, #5]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d101      	bne.n	800333a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003336:	2302      	movs	r3, #2
 8003338:	e045      	b.n	80033c6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2201      	movs	r2, #1
 800333e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 fa11 	bl	8003768 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003346:	7afb      	ldrb	r3, [r7, #11]
 8003348:	2b84      	cmp	r3, #132	; 0x84
 800334a:	d002      	beq.n	8003352 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800334c:	7afb      	ldrb	r3, [r7, #11]
 800334e:	2b94      	cmp	r3, #148	; 0x94
 8003350:	d103      	bne.n	800335a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	711a      	strb	r2, [r3, #4]
 8003358:	e002      	b.n	8003360 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003360:	f7ff fe42 	bl	8002fe8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003364:	7afb      	ldrb	r3, [r7, #11]
 8003366:	4619      	mov	r1, r3
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f94f 	bl	800360c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800336e:	2300      	movs	r3, #0
 8003370:	82bb      	strh	r3, [r7, #20]
 8003372:	e00a      	b.n	800338a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003374:	8abb      	ldrh	r3, [r7, #20]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	4413      	add	r3, r2
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	4619      	mov	r1, r3
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f944 	bl	800360c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003384:	8abb      	ldrh	r3, [r7, #20]
 8003386:	3301      	adds	r3, #1
 8003388:	82bb      	strh	r3, [r7, #20]
 800338a:	8aba      	ldrh	r2, [r7, #20]
 800338c:	893b      	ldrh	r3, [r7, #8]
 800338e:	429a      	cmp	r2, r3
 8003390:	d3f0      	bcc.n	8003374 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003392:	f7ff fe19 	bl	8002fc8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003396:	7afb      	ldrb	r3, [r7, #11]
 8003398:	2b84      	cmp	r3, #132	; 0x84
 800339a:	d002      	beq.n	80033a2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 fa07 	bl	80037b0 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	75fb      	strb	r3, [r7, #23]
 80033ae:	e001      	b.n	80033b4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	715a      	strb	r2, [r3, #5]

    return status;
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	e000      	b.n	80033c6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80033c4:	2302      	movs	r3, #2
  }
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b088      	sub	sp, #32
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	461a      	mov	r2, r3
 80033da:	460b      	mov	r3, r1
 80033dc:	72fb      	strb	r3, [r7, #11]
 80033de:	4613      	mov	r3, r2
 80033e0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	799b      	ldrb	r3, [r3, #6]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d13d      	bne.n	800346c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	795b      	ldrb	r3, [r3, #5]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e038      	b.n	800346e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f9b0 	bl	8003768 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003408:	f7ff fdee 	bl	8002fe8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800340c:	7afb      	ldrb	r3, [r7, #11]
 800340e:	4619      	mov	r1, r3
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 f8fb 	bl	800360c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003416:	2100      	movs	r1, #0
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f8f7 	bl	800360c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800341e:	2300      	movs	r3, #0
 8003420:	82fb      	strh	r3, [r7, #22]
 8003422:	e009      	b.n	8003438 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003424:	69b9      	ldr	r1, [r7, #24]
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 f946 	bl	80036b8 <SUBGHZSPI_Receive>
      pData++;
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	3301      	adds	r3, #1
 8003430:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003432:	8afb      	ldrh	r3, [r7, #22]
 8003434:	3301      	adds	r3, #1
 8003436:	82fb      	strh	r3, [r7, #22]
 8003438:	8afa      	ldrh	r2, [r7, #22]
 800343a:	893b      	ldrh	r3, [r7, #8]
 800343c:	429a      	cmp	r2, r3
 800343e:	d3f1      	bcc.n	8003424 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003440:	f7ff fdc2 	bl	8002fc8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f9b3 	bl	80037b0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	e001      	b.n	800345c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	715a      	strb	r2, [r3, #5]

    return status;
 8003468:	7ffb      	ldrb	r3, [r7, #31]
 800346a:	e000      	b.n	800346e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b086      	sub	sp, #24
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	461a      	mov	r2, r3
 8003482:	460b      	mov	r3, r1
 8003484:	72fb      	strb	r3, [r7, #11]
 8003486:	4613      	mov	r3, r2
 8003488:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	799b      	ldrb	r3, [r3, #6]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d13e      	bne.n	8003512 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	795b      	ldrb	r3, [r3, #5]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800349c:	2302      	movs	r3, #2
 800349e:	e039      	b.n	8003514 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2201      	movs	r2, #1
 80034a4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f95e 	bl	8003768 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80034ac:	f7ff fd9c 	bl	8002fe8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80034b0:	210e      	movs	r1, #14
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f8aa 	bl	800360c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80034b8:	7afb      	ldrb	r3, [r7, #11]
 80034ba:	4619      	mov	r1, r3
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f8a5 	bl	800360c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	82bb      	strh	r3, [r7, #20]
 80034c6:	e00a      	b.n	80034de <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80034c8:	8abb      	ldrh	r3, [r7, #20]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	4619      	mov	r1, r3
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f89a 	bl	800360c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80034d8:	8abb      	ldrh	r3, [r7, #20]
 80034da:	3301      	adds	r3, #1
 80034dc:	82bb      	strh	r3, [r7, #20]
 80034de:	8aba      	ldrh	r2, [r7, #20]
 80034e0:	893b      	ldrh	r3, [r7, #8]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d3f0      	bcc.n	80034c8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80034e6:	f7ff fd6f 	bl	8002fc8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f960 	bl	80037b0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	75fb      	strb	r3, [r7, #23]
 80034fc:	e001      	b.n	8003502 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	715a      	strb	r2, [r3, #5]

    return status;
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	e000      	b.n	8003514 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003512:	2302      	movs	r3, #2
  }
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	461a      	mov	r2, r3
 8003528:	460b      	mov	r3, r1
 800352a:	72fb      	strb	r3, [r7, #11]
 800352c:	4613      	mov	r3, r2
 800352e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	799b      	ldrb	r3, [r3, #6]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d141      	bne.n	80035c2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	795b      	ldrb	r3, [r3, #5]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003546:	2302      	movs	r3, #2
 8003548:	e03c      	b.n	80035c4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f909 	bl	8003768 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003556:	f7ff fd47 	bl	8002fe8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800355a:	211e      	movs	r1, #30
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f855 	bl	800360c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003562:	7afb      	ldrb	r3, [r7, #11]
 8003564:	4619      	mov	r1, r3
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f850 	bl	800360c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800356c:	2100      	movs	r1, #0
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f84c 	bl	800360c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003574:	2300      	movs	r3, #0
 8003576:	82fb      	strh	r3, [r7, #22]
 8003578:	e009      	b.n	800358e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800357a:	69b9      	ldr	r1, [r7, #24]
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f89b 	bl	80036b8 <SUBGHZSPI_Receive>
      pData++;
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	3301      	adds	r3, #1
 8003586:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003588:	8afb      	ldrh	r3, [r7, #22]
 800358a:	3301      	adds	r3, #1
 800358c:	82fb      	strh	r3, [r7, #22]
 800358e:	8afa      	ldrh	r2, [r7, #22]
 8003590:	893b      	ldrh	r3, [r7, #8]
 8003592:	429a      	cmp	r2, r3
 8003594:	d3f1      	bcc.n	800357a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003596:	f7ff fd17 	bl	8002fc8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f908 	bl	80037b0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	77fb      	strb	r3, [r7, #31]
 80035ac:	e001      	b.n	80035b2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	715a      	strb	r2, [r3, #5]

    return status;
 80035be:	7ffb      	ldrb	r3, [r7, #31]
 80035c0:	e000      	b.n	80035c4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80035c2:	2302      	movs	r3, #2
  }
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3720      	adds	r7, #32
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80035d4:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <SUBGHZSPI_Init+0x3c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a0b      	ldr	r2, [pc, #44]	; (8003608 <SUBGHZSPI_Init+0x3c>)
 80035da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035de:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80035e0:	4a09      	ldr	r2, [pc, #36]	; (8003608 <SUBGHZSPI_Init+0x3c>)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80035e8:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80035ea:	4b07      	ldr	r3, [pc, #28]	; (8003608 <SUBGHZSPI_Init+0x3c>)
 80035ec:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80035f0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <SUBGHZSPI_Init+0x3c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a04      	ldr	r2, [pc, #16]	; (8003608 <SUBGHZSPI_Init+0x3c>)
 80035f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035fc:	6013      	str	r3, [r2, #0]
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr
 8003608:	58010000 	.word	0x58010000

0800360c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800361c:	4b23      	ldr	r3, [pc, #140]	; (80036ac <SUBGHZSPI_Transmit+0xa0>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	0cdb      	lsrs	r3, r3, #19
 800362a:	2264      	movs	r2, #100	; 0x64
 800362c:	fb02 f303 	mul.w	r3, r2, r3
 8003630:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d105      	bne.n	8003644 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	609a      	str	r2, [r3, #8]
      break;
 8003642:	e008      	b.n	8003656 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	3b01      	subs	r3, #1
 8003648:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800364a:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <SUBGHZSPI_Transmit+0xa4>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b02      	cmp	r3, #2
 8003654:	d1ed      	bne.n	8003632 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003656:	4b17      	ldr	r3, [pc, #92]	; (80036b4 <SUBGHZSPI_Transmit+0xa8>)
 8003658:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003660:	4b12      	ldr	r3, [pc, #72]	; (80036ac <SUBGHZSPI_Transmit+0xa0>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	0cdb      	lsrs	r3, r3, #19
 800366e:	2264      	movs	r2, #100	; 0x64
 8003670:	fb02 f303 	mul.w	r3, r2, r3
 8003674:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d105      	bne.n	8003688 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	609a      	str	r2, [r3, #8]
      break;
 8003686:	e008      	b.n	800369a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3b01      	subs	r3, #1
 800368c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <SUBGHZSPI_Transmit+0xa4>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b01      	cmp	r3, #1
 8003698:	d1ed      	bne.n	8003676 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <SUBGHZSPI_Transmit+0xa4>)
 800369c:	68db      	ldr	r3, [r3, #12]

  return status;
 800369e:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	371c      	adds	r7, #28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000000 	.word	0x20000000
 80036b0:	58010000 	.word	0x58010000
 80036b4:	5801000c 	.word	0x5801000c

080036b8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80036c6:	4b25      	ldr	r3, [pc, #148]	; (800375c <SUBGHZSPI_Receive+0xa4>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	4613      	mov	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	0cdb      	lsrs	r3, r3, #19
 80036d4:	2264      	movs	r2, #100	; 0x64
 80036d6:	fb02 f303 	mul.w	r3, r2, r3
 80036da:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d105      	bne.n	80036ee <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	609a      	str	r2, [r3, #8]
      break;
 80036ec:	e008      	b.n	8003700 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80036f4:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <SUBGHZSPI_Receive+0xa8>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d1ed      	bne.n	80036dc <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003700:	4b18      	ldr	r3, [pc, #96]	; (8003764 <SUBGHZSPI_Receive+0xac>)
 8003702:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	22ff      	movs	r2, #255	; 0xff
 8003708:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800370a:	4b14      	ldr	r3, [pc, #80]	; (800375c <SUBGHZSPI_Receive+0xa4>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	0cdb      	lsrs	r3, r3, #19
 8003718:	2264      	movs	r2, #100	; 0x64
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d105      	bne.n	8003732 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	609a      	str	r2, [r3, #8]
      break;
 8003730:	e008      	b.n	8003744 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3b01      	subs	r3, #1
 8003736:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003738:	4b09      	ldr	r3, [pc, #36]	; (8003760 <SUBGHZSPI_Receive+0xa8>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	d1ed      	bne.n	8003720 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <SUBGHZSPI_Receive+0xa8>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	b2da      	uxtb	r2, r3
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	701a      	strb	r2, [r3, #0]

  return status;
 800374e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003750:	4618      	mov	r0, r3
 8003752:	371c      	adds	r7, #28
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000000 	.word	0x20000000
 8003760:	58010000 	.word	0x58010000
 8003764:	5801000c 	.word	0x5801000c

08003768 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	791b      	ldrb	r3, [r3, #4]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d111      	bne.n	800379c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <SUBGHZ_CheckDeviceReady+0x44>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4613      	mov	r3, r2
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	4413      	add	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	0c1b      	lsrs	r3, r3, #16
 8003786:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003788:	f7ff fc2e 	bl	8002fe8 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3b01      	subs	r3, #1
 8003790:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1f9      	bne.n	800378c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003798:	f7ff fc16 	bl	8002fc8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f807 	bl	80037b0 <SUBGHZ_WaitOnBusy>
 80037a2:	4603      	mov	r3, r0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000000 	.word	0x20000000

080037b0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80037bc:	4b12      	ldr	r3, [pc, #72]	; (8003808 <SUBGHZ_WaitOnBusy+0x58>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4613      	mov	r3, r2
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	4413      	add	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	0d1b      	lsrs	r3, r3, #20
 80037ca:	2264      	movs	r2, #100	; 0x64
 80037cc:	fb02 f303 	mul.w	r3, r2, r3
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80037d2:	f7ff fc37 	bl	8003044 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80037d6:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d105      	bne.n	80037ea <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2202      	movs	r2, #2
 80037e6:	609a      	str	r2, [r3, #8]
      break;
 80037e8:	e009      	b.n	80037fe <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	3b01      	subs	r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80037f0:	f7ff fc16 	bl	8003020 <LL_PWR_IsActiveFlag_RFBUSYS>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d0e9      	beq.n	80037d2 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	20000000 	.word	0x20000000

0800380c <LL_RCC_GetUSARTClockSource>:
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003818:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	401a      	ands	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	041b      	lsls	r3, r3, #16
 8003824:	4313      	orrs	r3, r2
}
 8003826:	4618      	mov	r0, r3
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr

08003830 <LL_RCC_GetLPUARTClockSource>:
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4013      	ands	r3, r2
}
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e042      	b.n	80038e6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fd fb26 	bl	8000ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2224      	movs	r2, #36	; 0x24
 800387c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0201 	bic.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f82d 	bl	80038f0 <UART_SetConfig>
 8003896:	4603      	mov	r3, r0
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e022      	b.n	80038e6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fa95 	bl	8003dd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0201 	orr.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fb1b 	bl	8003f1a <UART_CheckIdleState>
 80038e4:	4603      	mov	r3, r0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f4:	b08c      	sub	sp, #48	; 0x30
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	431a      	orrs	r2, r3
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	431a      	orrs	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	4313      	orrs	r3, r2
 8003916:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4b94      	ldr	r3, [pc, #592]	; (8003b70 <UART_SetConfig+0x280>)
 8003920:	4013      	ands	r3, r2
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	6812      	ldr	r2, [r2, #0]
 8003926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003928:	430b      	orrs	r3, r1
 800392a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a89      	ldr	r2, [pc, #548]	; (8003b74 <UART_SetConfig+0x284>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d004      	beq.n	800395c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003958:	4313      	orrs	r3, r2
 800395a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003966:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	6812      	ldr	r2, [r2, #0]
 800396e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003970:	430b      	orrs	r3, r1
 8003972:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397a:	f023 010f 	bic.w	r1, r3, #15
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a7a      	ldr	r2, [pc, #488]	; (8003b78 <UART_SetConfig+0x288>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d127      	bne.n	80039e4 <UART_SetConfig+0xf4>
 8003994:	2003      	movs	r0, #3
 8003996:	f7ff ff39 	bl	800380c <LL_RCC_GetUSARTClockSource>
 800399a:	4603      	mov	r3, r0
 800399c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d81b      	bhi.n	80039dc <UART_SetConfig+0xec>
 80039a4:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <UART_SetConfig+0xbc>)
 80039a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039aa:	bf00      	nop
 80039ac:	080039bd 	.word	0x080039bd
 80039b0:	080039cd 	.word	0x080039cd
 80039b4:	080039c5 	.word	0x080039c5
 80039b8:	080039d5 	.word	0x080039d5
 80039bc:	2301      	movs	r3, #1
 80039be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c2:	e080      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 80039c4:	2302      	movs	r3, #2
 80039c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ca:	e07c      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 80039cc:	2304      	movs	r3, #4
 80039ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039d2:	e078      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 80039d4:	2308      	movs	r3, #8
 80039d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039da:	e074      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 80039dc:	2310      	movs	r3, #16
 80039de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039e2:	e070      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a64      	ldr	r2, [pc, #400]	; (8003b7c <UART_SetConfig+0x28c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d138      	bne.n	8003a60 <UART_SetConfig+0x170>
 80039ee:	200c      	movs	r0, #12
 80039f0:	f7ff ff0c 	bl	800380c <LL_RCC_GetUSARTClockSource>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80039fa:	2b0c      	cmp	r3, #12
 80039fc:	d82c      	bhi.n	8003a58 <UART_SetConfig+0x168>
 80039fe:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <UART_SetConfig+0x114>)
 8003a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a04:	08003a39 	.word	0x08003a39
 8003a08:	08003a59 	.word	0x08003a59
 8003a0c:	08003a59 	.word	0x08003a59
 8003a10:	08003a59 	.word	0x08003a59
 8003a14:	08003a49 	.word	0x08003a49
 8003a18:	08003a59 	.word	0x08003a59
 8003a1c:	08003a59 	.word	0x08003a59
 8003a20:	08003a59 	.word	0x08003a59
 8003a24:	08003a41 	.word	0x08003a41
 8003a28:	08003a59 	.word	0x08003a59
 8003a2c:	08003a59 	.word	0x08003a59
 8003a30:	08003a59 	.word	0x08003a59
 8003a34:	08003a51 	.word	0x08003a51
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a3e:	e042      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003a40:	2302      	movs	r3, #2
 8003a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a46:	e03e      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003a48:	2304      	movs	r3, #4
 8003a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a4e:	e03a      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003a50:	2308      	movs	r3, #8
 8003a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a56:	e036      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003a58:	2310      	movs	r3, #16
 8003a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a5e:	e032      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a43      	ldr	r2, [pc, #268]	; (8003b74 <UART_SetConfig+0x284>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d12a      	bne.n	8003ac0 <UART_SetConfig+0x1d0>
 8003a6a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003a6e:	f7ff fedf 	bl	8003830 <LL_RCC_GetLPUARTClockSource>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a78:	d01a      	beq.n	8003ab0 <UART_SetConfig+0x1c0>
 8003a7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a7e:	d81b      	bhi.n	8003ab8 <UART_SetConfig+0x1c8>
 8003a80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a84:	d00c      	beq.n	8003aa0 <UART_SetConfig+0x1b0>
 8003a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a8a:	d815      	bhi.n	8003ab8 <UART_SetConfig+0x1c8>
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <UART_SetConfig+0x1a8>
 8003a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a94:	d008      	beq.n	8003aa8 <UART_SetConfig+0x1b8>
 8003a96:	e00f      	b.n	8003ab8 <UART_SetConfig+0x1c8>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a9e:	e012      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aa6:	e00e      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aae:	e00a      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003ab0:	2308      	movs	r3, #8
 8003ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ab6:	e006      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003ab8:	2310      	movs	r3, #16
 8003aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003abe:	e002      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003ac0:	2310      	movs	r3, #16
 8003ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a2a      	ldr	r2, [pc, #168]	; (8003b74 <UART_SetConfig+0x284>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	f040 80a4 	bne.w	8003c1a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ad2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d823      	bhi.n	8003b22 <UART_SetConfig+0x232>
 8003ada:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <UART_SetConfig+0x1f0>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003b05 	.word	0x08003b05
 8003ae4:	08003b23 	.word	0x08003b23
 8003ae8:	08003b0d 	.word	0x08003b0d
 8003aec:	08003b23 	.word	0x08003b23
 8003af0:	08003b13 	.word	0x08003b13
 8003af4:	08003b23 	.word	0x08003b23
 8003af8:	08003b23 	.word	0x08003b23
 8003afc:	08003b23 	.word	0x08003b23
 8003b00:	08003b1b 	.word	0x08003b1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b04:	f7fe ff68 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8003b08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b0a:	e010      	b.n	8003b2e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b0c:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <UART_SetConfig+0x290>)
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b10:	e00d      	b.n	8003b2e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b12:	f7fe fead 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 8003b16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b18:	e009      	b.n	8003b2e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b20:	e005      	b.n	8003b2e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 8137 	beq.w	8003da4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <UART_SetConfig+0x294>)
 8003b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b40:	461a      	mov	r2, r3
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	4413      	add	r3, r2
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d305      	bcc.n	8003b66 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d910      	bls.n	8003b88 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b6c:	e11a      	b.n	8003da4 <UART_SetConfig+0x4b4>
 8003b6e:	bf00      	nop
 8003b70:	cfff69f3 	.word	0xcfff69f3
 8003b74:	40008000 	.word	0x40008000
 8003b78:	40013800 	.word	0x40013800
 8003b7c:	40004400 	.word	0x40004400
 8003b80:	00f42400 	.word	0x00f42400
 8003b84:	0800f080 	.word	0x0800f080
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	60fa      	str	r2, [r7, #12]
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	4a8e      	ldr	r2, [pc, #568]	; (8003dd0 <UART_SetConfig+0x4e0>)
 8003b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	607a      	str	r2, [r7, #4]
 8003ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ba6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003baa:	f7fc fe5f 	bl	800086c <__aeabi_uldivmod>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	020b      	lsls	r3, r1, #8
 8003bc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003bc4:	0202      	lsls	r2, r0, #8
 8003bc6:	6979      	ldr	r1, [r7, #20]
 8003bc8:	6849      	ldr	r1, [r1, #4]
 8003bca:	0849      	lsrs	r1, r1, #1
 8003bcc:	2000      	movs	r0, #0
 8003bce:	460c      	mov	r4, r1
 8003bd0:	4605      	mov	r5, r0
 8003bd2:	eb12 0804 	adds.w	r8, r2, r4
 8003bd6:	eb43 0905 	adc.w	r9, r3, r5
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	469a      	mov	sl, r3
 8003be2:	4693      	mov	fp, r2
 8003be4:	4652      	mov	r2, sl
 8003be6:	465b      	mov	r3, fp
 8003be8:	4640      	mov	r0, r8
 8003bea:	4649      	mov	r1, r9
 8003bec:	f7fc fe3e 	bl	800086c <__aeabi_uldivmod>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bfe:	d308      	bcc.n	8003c12 <UART_SetConfig+0x322>
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c06:	d204      	bcs.n	8003c12 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6a3a      	ldr	r2, [r7, #32]
 8003c0e:	60da      	str	r2, [r3, #12]
 8003c10:	e0c8      	b.n	8003da4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c18:	e0c4      	b.n	8003da4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c22:	d168      	bne.n	8003cf6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003c24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d828      	bhi.n	8003c7e <UART_SetConfig+0x38e>
 8003c2c:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <UART_SetConfig+0x344>)
 8003c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003c59 	.word	0x08003c59
 8003c38:	08003c61 	.word	0x08003c61
 8003c3c:	08003c69 	.word	0x08003c69
 8003c40:	08003c7f 	.word	0x08003c7f
 8003c44:	08003c6f 	.word	0x08003c6f
 8003c48:	08003c7f 	.word	0x08003c7f
 8003c4c:	08003c7f 	.word	0x08003c7f
 8003c50:	08003c7f 	.word	0x08003c7f
 8003c54:	08003c77 	.word	0x08003c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c58:	f7fe febe 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8003c5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c5e:	e014      	b.n	8003c8a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c60:	f7fe fecc 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
 8003c64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c66:	e010      	b.n	8003c8a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c68:	4b5a      	ldr	r3, [pc, #360]	; (8003dd4 <UART_SetConfig+0x4e4>)
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c6c:	e00d      	b.n	8003c8a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c6e:	f7fe fdff 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 8003c72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c74:	e009      	b.n	8003c8a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c7c:	e005      	b.n	8003c8a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8089 	beq.w	8003da4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	4a4e      	ldr	r2, [pc, #312]	; (8003dd0 <UART_SetConfig+0x4e0>)
 8003c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ca4:	005a      	lsls	r2, r3, #1
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	085b      	lsrs	r3, r3, #1
 8003cac:	441a      	add	r2, r3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	2b0f      	cmp	r3, #15
 8003cbe:	d916      	bls.n	8003cee <UART_SetConfig+0x3fe>
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc6:	d212      	bcs.n	8003cee <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	f023 030f 	bic.w	r3, r3, #15
 8003cd0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	085b      	lsrs	r3, r3, #1
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	8bfb      	ldrh	r3, [r7, #30]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	8bfa      	ldrh	r2, [r7, #30]
 8003cea:	60da      	str	r2, [r3, #12]
 8003cec:	e05a      	b.n	8003da4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003cf4:	e056      	b.n	8003da4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d827      	bhi.n	8003d4e <UART_SetConfig+0x45e>
 8003cfe:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <UART_SetConfig+0x414>)
 8003d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d04:	08003d29 	.word	0x08003d29
 8003d08:	08003d31 	.word	0x08003d31
 8003d0c:	08003d39 	.word	0x08003d39
 8003d10:	08003d4f 	.word	0x08003d4f
 8003d14:	08003d3f 	.word	0x08003d3f
 8003d18:	08003d4f 	.word	0x08003d4f
 8003d1c:	08003d4f 	.word	0x08003d4f
 8003d20:	08003d4f 	.word	0x08003d4f
 8003d24:	08003d47 	.word	0x08003d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d28:	f7fe fe56 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8003d2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d2e:	e014      	b.n	8003d5a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d30:	f7fe fe64 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
 8003d34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d36:	e010      	b.n	8003d5a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d38:	4b26      	ldr	r3, [pc, #152]	; (8003dd4 <UART_SetConfig+0x4e4>)
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d3c:	e00d      	b.n	8003d5a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d3e:	f7fe fd97 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 8003d42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d44:	e009      	b.n	8003d5a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d4c:	e005      	b.n	8003d5a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d58:	bf00      	nop
    }

    if (pclk != 0U)
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d021      	beq.n	8003da4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	4a1a      	ldr	r2, [pc, #104]	; (8003dd0 <UART_SetConfig+0x4e0>)
 8003d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	085b      	lsrs	r3, r3, #1
 8003d78:	441a      	add	r2, r3
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	2b0f      	cmp	r3, #15
 8003d8a:	d908      	bls.n	8003d9e <UART_SetConfig+0x4ae>
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d92:	d204      	bcs.n	8003d9e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6a3a      	ldr	r2, [r7, #32]
 8003d9a:	60da      	str	r2, [r3, #12]
 8003d9c:	e002      	b.n	8003da4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2200      	movs	r2, #0
 8003db8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003dc0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3730      	adds	r7, #48	; 0x30
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dce:	bf00      	nop
 8003dd0:	0800f080 	.word	0x0800f080
 8003dd4:	00f42400 	.word	0x00f42400

08003dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01a      	beq.n	8003eee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed6:	d10a      	bne.n	8003eee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	605a      	str	r2, [r3, #4]
  }
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr

08003f1a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b086      	sub	sp, #24
 8003f1e:	af02      	add	r7, sp, #8
 8003f20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f2a:	f7fd f911 	bl	8001150 <HAL_GetTick>
 8003f2e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d10e      	bne.n	8003f5c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f82f 	bl	8003fb0 <UART_WaitOnFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e025      	b.n	8003fa8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d10e      	bne.n	8003f88 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f819 	bl	8003fb0 <UART_WaitOnFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e00f      	b.n	8003fa8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b09c      	sub	sp, #112	; 0x70
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc0:	e0a9      	b.n	8004116 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc8:	f000 80a5 	beq.w	8004116 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fcc:	f7fd f8c0 	bl	8001150 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d302      	bcc.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x32>
 8003fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d140      	bne.n	8004064 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ff6:	667b      	str	r3, [r7, #100]	; 0x64
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004000:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004002:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004006:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800400e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e6      	bne.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3308      	adds	r3, #8
 800401a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800401e:	e853 3f00 	ldrex	r3, [r3]
 8004022:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	663b      	str	r3, [r7, #96]	; 0x60
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3308      	adds	r3, #8
 8004032:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004034:	64ba      	str	r2, [r7, #72]	; 0x48
 8004036:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800403a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800403c:	e841 2300 	strex	r3, r2, [r1]
 8004040:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e5      	bne.n	8004014 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e069      	b.n	8004138 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b00      	cmp	r3, #0
 8004070:	d051      	beq.n	8004116 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800407c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004080:	d149      	bne.n	8004116 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800408a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040aa:	637b      	str	r3, [r7, #52]	; 0x34
 80040ac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e6      	bne.n	800408c <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3308      	adds	r3, #8
 80040c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	613b      	str	r3, [r7, #16]
   return(result);
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3308      	adds	r3, #8
 80040dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040de:	623a      	str	r2, [r7, #32]
 80040e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e2:	69f9      	ldr	r1, [r7, #28]
 80040e4:	6a3a      	ldr	r2, [r7, #32]
 80040e6:	e841 2300 	strex	r3, r2, [r1]
 80040ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e5      	bne.n	80040be <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e010      	b.n	8004138 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4013      	ands	r3, r2
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	429a      	cmp	r2, r3
 8004124:	bf0c      	ite	eq
 8004126:	2301      	moveq	r3, #1
 8004128:	2300      	movne	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	79fb      	ldrb	r3, [r7, #7]
 8004130:	429a      	cmp	r2, r3
 8004132:	f43f af46 	beq.w	8003fc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3770      	adds	r7, #112	; 0x70
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_UARTEx_DisableFifoMode+0x16>
 8004152:	2302      	movs	r3, #2
 8004154:	e027      	b.n	80041a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2224      	movs	r2, #36	; 0x24
 8004162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004184:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e02d      	b.n	8004224 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2224      	movs	r2, #36	; 0x24
 80041d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0201 	bic.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f84f 	bl	80042a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004240:	2302      	movs	r3, #2
 8004242:	e02d      	b.n	80042a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2224      	movs	r2, #36	; 0x24
 8004250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f811 	bl	80042a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d108      	bne.n	80042ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80042c8:	e031      	b.n	800432e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80042ca:	2308      	movs	r3, #8
 80042cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80042ce:	2308      	movs	r3, #8
 80042d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	0e5b      	lsrs	r3, r3, #25
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	0f5b      	lsrs	r3, r3, #29
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042f2:	7bbb      	ldrb	r3, [r7, #14]
 80042f4:	7b3a      	ldrb	r2, [r7, #12]
 80042f6:	4910      	ldr	r1, [pc, #64]	; (8004338 <UARTEx_SetNbDataToProcess+0x90>)
 80042f8:	5c8a      	ldrb	r2, [r1, r2]
 80042fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80042fe:	7b3a      	ldrb	r2, [r7, #12]
 8004300:	490e      	ldr	r1, [pc, #56]	; (800433c <UARTEx_SetNbDataToProcess+0x94>)
 8004302:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004304:	fb93 f3f2 	sdiv	r3, r3, r2
 8004308:	b29a      	uxth	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	7b7a      	ldrb	r2, [r7, #13]
 8004314:	4908      	ldr	r1, [pc, #32]	; (8004338 <UARTEx_SetNbDataToProcess+0x90>)
 8004316:	5c8a      	ldrb	r2, [r1, r2]
 8004318:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800431c:	7b7a      	ldrb	r2, [r7, #13]
 800431e:	4907      	ldr	r1, [pc, #28]	; (800433c <UARTEx_SetNbDataToProcess+0x94>)
 8004320:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004322:	fb93 f3f2 	sdiv	r3, r3, r2
 8004326:	b29a      	uxth	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800432e:	bf00      	nop
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr
 8004338:	0800f098 	.word	0x0800f098
 800433c:	0800f0a0 	.word	0x0800f0a0

08004340 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8004344:	f7fc fe4e 	bl	8000fe4 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8004348:	f000 f808 	bl	800435c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800434c:	bf00      	nop
 800434e:	bd80      	pop	{r7, pc}

08004350 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr

0800435c <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* USER CODE END LoRaWAN_Init_1 */

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8004360:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 8004364:	4802      	ldr	r0, [pc, #8]	; (8004370 <LoRaWAN_Init+0x14>)
 8004366:	f001 fa93 	bl	8005890 <LmHandlerInit>

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800436a:	bf00      	nop
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	2000000c 	.word	0x2000000c

08004374 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  /* USER CODE END OnRxData_1 */
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr

08004388 <OnTxData>:
/* USER CODE BEGIN PrFD_LedEvents */

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  /* USER CODE END OnTxData_1 */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr

0800439a <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  /* USER CODE END OnJoinRequest_1 */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr

080043ac <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  /* USER CODE END OnBeaconStatusChange_1 */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr

080043be <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	4603      	mov	r3, r0
 80043c6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  /* USER CODE END OnClassChange_1 */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 80043d2:	b480      	push	{r7}
 80043d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
}
 80043d6:	bf00      	nop
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr

080043de <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr

080043f0 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr

08004418 <OnSystemReset>:

static void OnSystemReset(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
}
 800441c:	bf00      	nop
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr

08004424 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800442a:	2300      	movs	r3, #0
 800442c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800442e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr

0800443a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800443a:	b480      	push	{r7}
 800443c:	b085      	sub	sp, #20
 800443e:	af00      	add	r7, sp, #0
 8004440:	4603      	mov	r3, r0
 8004442:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8004448:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800445a:	2300      	movs	r3, #0
 800445c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800445e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr

0800446a <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 8004470:	2301      	movs	r3, #1
 8004472:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 8004474:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8004476:	4618      	mov	r0, r3
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr

08004480 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 8004486:	2301      	movs	r3, #1
 8004488:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800448a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800448c:	4618      	mov	r0, r3
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr

08004496 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8004496:	b480      	push	{r7}
 8004498:	b085      	sub	sp, #20
 800449a:	af00      	add	r7, sp, #0
 800449c:	4603      	mov	r3, r0
 800449e:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d102      	bne.n	80044b0 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 80044aa:	230f      	movs	r3, #15
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	e001      	b.n	80044b4 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 80044b0:	2316      	movs	r3, #22
 80044b2:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 80044b4:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr

080044c0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	33f1      	adds	r3, #241	; 0xf1
 80044cc:	2210      	movs	r2, #16
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f006 fff5 	bl	800b4c0 <memset1>
    ctx->M_n = 0;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	22f0      	movs	r2, #240	; 0xf0
 80044e2:	2100      	movs	r1, #0
 80044e4:	4618      	mov	r0, r3
 80044e6:	f006 ffeb 	bl	800b4c0 <memset1>
}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b082      	sub	sp, #8
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	461a      	mov	r2, r3
 8004500:	2110      	movs	r1, #16
 8004502:	6838      	ldr	r0, [r7, #0]
 8004504:	f000 fe5c 	bl	80051c0 <lorawan_aes_set_key>
}
 8004508:	bf00      	nop
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08c      	sub	sp, #48	; 0x30
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 80a1 	beq.w	800466a <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800452e:	f1c3 0310 	rsb	r3, r3, #16
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	4293      	cmp	r3, r2
 8004536:	bf28      	it	cs
 8004538:	4613      	movcs	r3, r2
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f203 1201 	addw	r2, r3, #257	; 0x101
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004548:	4413      	add	r3, r2
 800454a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454c:	b292      	uxth	r2, r2
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	4618      	mov	r0, r3
 8004552:	f006 ff7a 	bl	800b44a <memcpy1>
        ctx->M_n += mlen;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	441a      	add	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800456c:	2b0f      	cmp	r3, #15
 800456e:	f240 808d 	bls.w	800468c <AES_CMAC_Update+0x17c>
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	429a      	cmp	r2, r3
 8004578:	f000 8088 	beq.w	800468c <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800457c:	2300      	movs	r3, #0
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004580:	e015      	b.n	80045ae <AES_CMAC_Update+0x9e>
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004586:	4413      	add	r3, r2
 8004588:	33f1      	adds	r3, #241	; 0xf1
 800458a:	781a      	ldrb	r2, [r3, #0]
 800458c:	68f9      	ldr	r1, [r7, #12]
 800458e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004590:	440b      	add	r3, r1
 8004592:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	4053      	eors	r3, r2
 800459a:	b2d9      	uxtb	r1, r3
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a0:	4413      	add	r3, r2
 80045a2:	33f1      	adds	r3, #241	; 0xf1
 80045a4:	460a      	mov	r2, r1
 80045a6:	701a      	strb	r2, [r3, #0]
 80045a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045aa:	3301      	adds	r3, #1
 80045ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b0:	2b0f      	cmp	r3, #15
 80045b2:	dde6      	ble.n	8004582 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 80045ba:	f107 0314 	add.w	r3, r7, #20
 80045be:	2210      	movs	r2, #16
 80045c0:	4618      	mov	r0, r3
 80045c2:	f006 ff42 	bl	800b44a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	f107 0114 	add.w	r1, r7, #20
 80045cc:	f107 0314 	add.w	r3, r7, #20
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 fed3 	bl	800537c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	33f1      	adds	r3, #241	; 0xf1
 80045da:	f107 0114 	add.w	r1, r7, #20
 80045de:	2210      	movs	r2, #16
 80045e0:	4618      	mov	r0, r3
 80045e2:	f006 ff32 	bl	800b44a <memcpy1>

        data += mlen;
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	4413      	add	r3, r2
 80045ec:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 80045f6:	e038      	b.n	800466a <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 80045f8:	2300      	movs	r3, #0
 80045fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80045fc:	e013      	b.n	8004626 <AES_CMAC_Update+0x116>
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004602:	4413      	add	r3, r2
 8004604:	33f1      	adds	r3, #241	; 0xf1
 8004606:	781a      	ldrb	r2, [r3, #0]
 8004608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	440b      	add	r3, r1
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	4053      	eors	r3, r2
 8004612:	b2d9      	uxtb	r1, r3
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	4413      	add	r3, r2
 800461a:	33f1      	adds	r3, #241	; 0xf1
 800461c:	460a      	mov	r2, r1
 800461e:	701a      	strb	r2, [r3, #0]
 8004620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004622:	3301      	adds	r3, #1
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	2b0f      	cmp	r3, #15
 800462a:	dde8      	ble.n	80045fe <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8004632:	f107 0314 	add.w	r3, r7, #20
 8004636:	2210      	movs	r2, #16
 8004638:	4618      	mov	r0, r3
 800463a:	f006 ff06 	bl	800b44a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	f107 0114 	add.w	r1, r7, #20
 8004644:	f107 0314 	add.w	r3, r7, #20
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fe97 	bl	800537c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	33f1      	adds	r3, #241	; 0xf1
 8004652:	f107 0114 	add.w	r1, r7, #20
 8004656:	2210      	movs	r2, #16
 8004658:	4618      	mov	r0, r3
 800465a:	f006 fef6 	bl	800b44a <memcpy1>

        data += 16;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	3310      	adds	r3, #16
 8004662:	60bb      	str	r3, [r7, #8]
        len -= 16;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3b10      	subs	r3, #16
 8004668:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b10      	cmp	r3, #16
 800466e:	d8c3      	bhi.n	80045f8 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	b292      	uxth	r2, r2
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	4618      	mov	r0, r3
 800467e:	f006 fee4 	bl	800b44a <memcpy1>
    ctx->M_n = len;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800468a:	e000      	b.n	800468e <AES_CMAC_Update+0x17e>
            return;
 800468c:	bf00      	nop
}
 800468e:	3730      	adds	r7, #48	; 0x30
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b092      	sub	sp, #72	; 0x48
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800469e:	f107 031c 	add.w	r3, r7, #28
 80046a2:	2210      	movs	r2, #16
 80046a4:	2100      	movs	r1, #0
 80046a6:	4618      	mov	r0, r3
 80046a8:	f006 ff0a 	bl	800b4c0 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	f107 011c 	add.w	r1, r7, #28
 80046b2:	f107 031c 	add.w	r3, r7, #28
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fe60 	bl	800537c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 80046bc:	7f3b      	ldrb	r3, [r7, #28]
 80046be:	b25b      	sxtb	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	da30      	bge.n	8004726 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 80046c4:	2300      	movs	r3, #0
 80046c6:	647b      	str	r3, [r7, #68]	; 0x44
 80046c8:	e01b      	b.n	8004702 <AES_CMAC_Final+0x6e>
 80046ca:	f107 021c 	add.w	r2, r7, #28
 80046ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d0:	4413      	add	r3, r2
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	b25a      	sxtb	r2, r3
 80046d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046da:	3301      	adds	r3, #1
 80046dc:	3348      	adds	r3, #72	; 0x48
 80046de:	443b      	add	r3, r7
 80046e0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80046e4:	09db      	lsrs	r3, r3, #7
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	b25b      	sxtb	r3, r3
 80046ea:	4313      	orrs	r3, r2
 80046ec:	b25b      	sxtb	r3, r3
 80046ee:	b2d9      	uxtb	r1, r3
 80046f0:	f107 021c 	add.w	r2, r7, #28
 80046f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046f6:	4413      	add	r3, r2
 80046f8:	460a      	mov	r2, r1
 80046fa:	701a      	strb	r2, [r3, #0]
 80046fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046fe:	3301      	adds	r3, #1
 8004700:	647b      	str	r3, [r7, #68]	; 0x44
 8004702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004704:	2b0e      	cmp	r3, #14
 8004706:	dde0      	ble.n	80046ca <AES_CMAC_Final+0x36>
 8004708:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	b2db      	uxtb	r3, r3
 8004710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 8004714:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004718:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800471c:	43db      	mvns	r3, r3
 800471e:	b2db      	uxtb	r3, r3
 8004720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004724:	e027      	b.n	8004776 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 8004726:	2300      	movs	r3, #0
 8004728:	643b      	str	r3, [r7, #64]	; 0x40
 800472a:	e01b      	b.n	8004764 <AES_CMAC_Final+0xd0>
 800472c:	f107 021c 	add.w	r2, r7, #28
 8004730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004732:	4413      	add	r3, r2
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	b25a      	sxtb	r2, r3
 800473a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800473c:	3301      	adds	r3, #1
 800473e:	3348      	adds	r3, #72	; 0x48
 8004740:	443b      	add	r3, r7
 8004742:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8004746:	09db      	lsrs	r3, r3, #7
 8004748:	b2db      	uxtb	r3, r3
 800474a:	b25b      	sxtb	r3, r3
 800474c:	4313      	orrs	r3, r2
 800474e:	b25b      	sxtb	r3, r3
 8004750:	b2d9      	uxtb	r1, r3
 8004752:	f107 021c 	add.w	r2, r7, #28
 8004756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004758:	4413      	add	r3, r2
 800475a:	460a      	mov	r2, r1
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004760:	3301      	adds	r3, #1
 8004762:	643b      	str	r3, [r7, #64]	; 0x40
 8004764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004766:	2b0e      	cmp	r3, #14
 8004768:	dde0      	ble.n	800472c <AES_CMAC_Final+0x98>
 800476a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	b2db      	uxtb	r3, r3
 8004772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800477c:	2b10      	cmp	r3, #16
 800477e:	d11d      	bne.n	80047bc <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8004780:	2300      	movs	r3, #0
 8004782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004784:	e016      	b.n	80047b4 <AES_CMAC_Final+0x120>
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478a:	4413      	add	r3, r2
 800478c:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004790:	781a      	ldrb	r2, [r3, #0]
 8004792:	f107 011c 	add.w	r1, r7, #28
 8004796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004798:	440b      	add	r3, r1
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	4053      	eors	r3, r2
 800479e:	b2d9      	uxtb	r1, r3
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a4:	4413      	add	r3, r2
 80047a6:	f203 1301 	addw	r3, r3, #257	; 0x101
 80047aa:	460a      	mov	r2, r1
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b0:	3301      	adds	r3, #1
 80047b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b6:	2b0f      	cmp	r3, #15
 80047b8:	dde5      	ble.n	8004786 <AES_CMAC_Final+0xf2>
 80047ba:	e096      	b.n	80048ea <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 80047bc:	7f3b      	ldrb	r3, [r7, #28]
 80047be:	b25b      	sxtb	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	da30      	bge.n	8004826 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 80047c4:	2300      	movs	r3, #0
 80047c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80047c8:	e01b      	b.n	8004802 <AES_CMAC_Final+0x16e>
 80047ca:	f107 021c 	add.w	r2, r7, #28
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d0:	4413      	add	r3, r2
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	b25a      	sxtb	r2, r3
 80047d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047da:	3301      	adds	r3, #1
 80047dc:	3348      	adds	r3, #72	; 0x48
 80047de:	443b      	add	r3, r7
 80047e0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80047e4:	09db      	lsrs	r3, r3, #7
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	b25b      	sxtb	r3, r3
 80047ea:	4313      	orrs	r3, r2
 80047ec:	b25b      	sxtb	r3, r3
 80047ee:	b2d9      	uxtb	r1, r3
 80047f0:	f107 021c 	add.w	r2, r7, #28
 80047f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f6:	4413      	add	r3, r2
 80047f8:	460a      	mov	r2, r1
 80047fa:	701a      	strb	r2, [r3, #0]
 80047fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fe:	3301      	adds	r3, #1
 8004800:	63bb      	str	r3, [r7, #56]	; 0x38
 8004802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004804:	2b0e      	cmp	r3, #14
 8004806:	dde0      	ble.n	80047ca <AES_CMAC_Final+0x136>
 8004808:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	b2db      	uxtb	r3, r3
 8004810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 8004814:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004818:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800481c:	43db      	mvns	r3, r3
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004824:	e027      	b.n	8004876 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 8004826:	2300      	movs	r3, #0
 8004828:	637b      	str	r3, [r7, #52]	; 0x34
 800482a:	e01b      	b.n	8004864 <AES_CMAC_Final+0x1d0>
 800482c:	f107 021c 	add.w	r2, r7, #28
 8004830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004832:	4413      	add	r3, r2
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	b25a      	sxtb	r2, r3
 800483a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483c:	3301      	adds	r3, #1
 800483e:	3348      	adds	r3, #72	; 0x48
 8004840:	443b      	add	r3, r7
 8004842:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8004846:	09db      	lsrs	r3, r3, #7
 8004848:	b2db      	uxtb	r3, r3
 800484a:	b25b      	sxtb	r3, r3
 800484c:	4313      	orrs	r3, r2
 800484e:	b25b      	sxtb	r3, r3
 8004850:	b2d9      	uxtb	r1, r3
 8004852:	f107 021c 	add.w	r2, r7, #28
 8004856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004858:	4413      	add	r3, r2
 800485a:	460a      	mov	r2, r1
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004860:	3301      	adds	r3, #1
 8004862:	637b      	str	r3, [r7, #52]	; 0x34
 8004864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004866:	2b0e      	cmp	r3, #14
 8004868:	dde0      	ble.n	800482c <AES_CMAC_Final+0x198>
 800486a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	b2db      	uxtb	r3, r3
 8004872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	4413      	add	r3, r2
 8004880:	2280      	movs	r2, #128	; 0x80
 8004882:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8004886:	e007      	b.n	8004898 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	4413      	add	r3, r2
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80048ac:	2b0f      	cmp	r3, #15
 80048ae:	d9eb      	bls.n	8004888 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 80048b0:	2300      	movs	r3, #0
 80048b2:	633b      	str	r3, [r7, #48]	; 0x30
 80048b4:	e016      	b.n	80048e4 <AES_CMAC_Final+0x250>
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	4413      	add	r3, r2
 80048bc:	f203 1301 	addw	r3, r3, #257	; 0x101
 80048c0:	781a      	ldrb	r2, [r3, #0]
 80048c2:	f107 011c 	add.w	r1, r7, #28
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	440b      	add	r3, r1
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	4053      	eors	r3, r2
 80048ce:	b2d9      	uxtb	r1, r3
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d4:	4413      	add	r3, r2
 80048d6:	f203 1301 	addw	r3, r3, #257	; 0x101
 80048da:	460a      	mov	r2, r1
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e0:	3301      	adds	r3, #1
 80048e2:	633b      	str	r3, [r7, #48]	; 0x30
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	2b0f      	cmp	r3, #15
 80048e8:	dde5      	ble.n	80048b6 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 80048ea:	2300      	movs	r3, #0
 80048ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ee:	e015      	b.n	800491c <AES_CMAC_Final+0x288>
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f4:	4413      	add	r3, r2
 80048f6:	33f1      	adds	r3, #241	; 0xf1
 80048f8:	781a      	ldrb	r2, [r3, #0]
 80048fa:	6839      	ldr	r1, [r7, #0]
 80048fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fe:	440b      	add	r3, r1
 8004900:	f203 1301 	addw	r3, r3, #257	; 0x101
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	4053      	eors	r3, r2
 8004908:	b2d9      	uxtb	r1, r3
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490e:	4413      	add	r3, r2
 8004910:	33f1      	adds	r3, #241	; 0xf1
 8004912:	460a      	mov	r2, r1
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004918:	3301      	adds	r3, #1
 800491a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800491c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491e:	2b0f      	cmp	r3, #15
 8004920:	dde6      	ble.n	80048f0 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8004928:	f107 030c 	add.w	r3, r7, #12
 800492c:	2210      	movs	r2, #16
 800492e:	4618      	mov	r0, r3
 8004930:	f006 fd8b 	bl	800b44a <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	f107 030c 	add.w	r3, r7, #12
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	4618      	mov	r0, r3
 800493e:	f000 fd1d 	bl	800537c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8004942:	f107 031c 	add.w	r3, r7, #28
 8004946:	2210      	movs	r2, #16
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f006 fdb8 	bl	800b4c0 <memset1>
}
 8004950:	bf00      	nop
 8004952:	3748      	adds	r7, #72	; 0x48
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781a      	ldrb	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3301      	adds	r3, #1
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	7852      	ldrb	r2, [r2, #1]
 8004972:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3302      	adds	r3, #2
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	7892      	ldrb	r2, [r2, #2]
 800497c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3303      	adds	r3, #3
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	78d2      	ldrb	r2, [r2, #3]
 8004986:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	7912      	ldrb	r2, [r2, #4]
 8004990:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3305      	adds	r3, #5
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	7952      	ldrb	r2, [r2, #5]
 800499a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3306      	adds	r3, #6
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	7992      	ldrb	r2, [r2, #6]
 80049a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3307      	adds	r3, #7
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	79d2      	ldrb	r2, [r2, #7]
 80049ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3308      	adds	r3, #8
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	7a12      	ldrb	r2, [r2, #8]
 80049b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3309      	adds	r3, #9
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	7a52      	ldrb	r2, [r2, #9]
 80049c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	330a      	adds	r3, #10
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	7a92      	ldrb	r2, [r2, #10]
 80049cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	330b      	adds	r3, #11
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	7ad2      	ldrb	r2, [r2, #11]
 80049d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	330c      	adds	r3, #12
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	7b12      	ldrb	r2, [r2, #12]
 80049e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	330d      	adds	r3, #13
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	7b52      	ldrb	r2, [r2, #13]
 80049ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	330e      	adds	r3, #14
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	7b92      	ldrb	r2, [r2, #14]
 80049f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	330f      	adds	r3, #15
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	7bd2      	ldrb	r2, [r2, #15]
 80049fe:	701a      	strb	r2, [r3, #0]
#endif
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	4613      	mov	r3, r2
 8004a16:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 8004a18:	e007      	b.n	8004a2a <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	1c53      	adds	r3, r2, #1
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	1c59      	adds	r1, r3, #1
 8004a24:	60f9      	str	r1, [r7, #12]
 8004a26:	7812      	ldrb	r2, [r2, #0]
 8004a28:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	1e5a      	subs	r2, r3, #1
 8004a2e:	71fa      	strb	r2, [r7, #7]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f2      	bne.n	8004a1a <copy_block_nn+0x10>
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr

08004a40 <xor_block>:

static void xor_block( void *d, const void *s )
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	781a      	ldrb	r2, [r3, #0]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	4053      	eors	r3, r2
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	7819      	ldrb	r1, [r3, #0]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	3301      	adds	r3, #1
 8004a64:	781a      	ldrb	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	404a      	eors	r2, r1
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3302      	adds	r3, #2
 8004a74:	7819      	ldrb	r1, [r3, #0]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	3302      	adds	r3, #2
 8004a7a:	781a      	ldrb	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3302      	adds	r3, #2
 8004a80:	404a      	eors	r2, r1
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3303      	adds	r3, #3
 8004a8a:	7819      	ldrb	r1, [r3, #0]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	3303      	adds	r3, #3
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3303      	adds	r3, #3
 8004a96:	404a      	eors	r2, r1
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	7819      	ldrb	r1, [r3, #0]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	781a      	ldrb	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	404a      	eors	r2, r1
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3305      	adds	r3, #5
 8004ab6:	7819      	ldrb	r1, [r3, #0]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	3305      	adds	r3, #5
 8004abc:	781a      	ldrb	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3305      	adds	r3, #5
 8004ac2:	404a      	eors	r2, r1
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3306      	adds	r3, #6
 8004acc:	7819      	ldrb	r1, [r3, #0]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	3306      	adds	r3, #6
 8004ad2:	781a      	ldrb	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3306      	adds	r3, #6
 8004ad8:	404a      	eors	r2, r1
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3307      	adds	r3, #7
 8004ae2:	7819      	ldrb	r1, [r3, #0]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	3307      	adds	r3, #7
 8004ae8:	781a      	ldrb	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3307      	adds	r3, #7
 8004aee:	404a      	eors	r2, r1
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3308      	adds	r3, #8
 8004af8:	7819      	ldrb	r1, [r3, #0]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	3308      	adds	r3, #8
 8004afe:	781a      	ldrb	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3308      	adds	r3, #8
 8004b04:	404a      	eors	r2, r1
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3309      	adds	r3, #9
 8004b0e:	7819      	ldrb	r1, [r3, #0]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	3309      	adds	r3, #9
 8004b14:	781a      	ldrb	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3309      	adds	r3, #9
 8004b1a:	404a      	eors	r2, r1
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	330a      	adds	r3, #10
 8004b24:	7819      	ldrb	r1, [r3, #0]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	330a      	adds	r3, #10
 8004b2a:	781a      	ldrb	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	330a      	adds	r3, #10
 8004b30:	404a      	eors	r2, r1
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	330b      	adds	r3, #11
 8004b3a:	7819      	ldrb	r1, [r3, #0]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	330b      	adds	r3, #11
 8004b40:	781a      	ldrb	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	330b      	adds	r3, #11
 8004b46:	404a      	eors	r2, r1
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	330c      	adds	r3, #12
 8004b50:	7819      	ldrb	r1, [r3, #0]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	330c      	adds	r3, #12
 8004b56:	781a      	ldrb	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	404a      	eors	r2, r1
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	330d      	adds	r3, #13
 8004b66:	7819      	ldrb	r1, [r3, #0]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	330d      	adds	r3, #13
 8004b6c:	781a      	ldrb	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	330d      	adds	r3, #13
 8004b72:	404a      	eors	r2, r1
 8004b74:	b2d2      	uxtb	r2, r2
 8004b76:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	330e      	adds	r3, #14
 8004b7c:	7819      	ldrb	r1, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	330e      	adds	r3, #14
 8004b82:	781a      	ldrb	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	330e      	adds	r3, #14
 8004b88:	404a      	eors	r2, r1
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	330f      	adds	r3, #15
 8004b92:	7819      	ldrb	r1, [r3, #0]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	330f      	adds	r3, #15
 8004b98:	781a      	ldrb	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	330f      	adds	r3, #15
 8004b9e:	404a      	eors	r2, r1
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	701a      	strb	r2, [r3, #0]
#endif
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bc80      	pop	{r7}
 8004bac:	4770      	bx	lr

08004bae <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b085      	sub	sp, #20
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	781a      	ldrb	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	4053      	eors	r3, r2
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	7819      	ldrb	r1, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	781a      	ldrb	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	404a      	eors	r2, r1
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	3302      	adds	r3, #2
 8004be4:	7819      	ldrb	r1, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	3302      	adds	r3, #2
 8004bea:	781a      	ldrb	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3302      	adds	r3, #2
 8004bf0:	404a      	eors	r2, r1
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	3303      	adds	r3, #3
 8004bfa:	7819      	ldrb	r1, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3303      	adds	r3, #3
 8004c00:	781a      	ldrb	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3303      	adds	r3, #3
 8004c06:	404a      	eors	r2, r1
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	7819      	ldrb	r1, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3304      	adds	r3, #4
 8004c16:	781a      	ldrb	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	404a      	eors	r2, r1
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	3305      	adds	r3, #5
 8004c26:	7819      	ldrb	r1, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3305      	adds	r3, #5
 8004c2c:	781a      	ldrb	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3305      	adds	r3, #5
 8004c32:	404a      	eors	r2, r1
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	3306      	adds	r3, #6
 8004c3c:	7819      	ldrb	r1, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3306      	adds	r3, #6
 8004c42:	781a      	ldrb	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3306      	adds	r3, #6
 8004c48:	404a      	eors	r2, r1
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	3307      	adds	r3, #7
 8004c52:	7819      	ldrb	r1, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3307      	adds	r3, #7
 8004c58:	781a      	ldrb	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3307      	adds	r3, #7
 8004c5e:	404a      	eors	r2, r1
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	3308      	adds	r3, #8
 8004c68:	7819      	ldrb	r1, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	781a      	ldrb	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3308      	adds	r3, #8
 8004c74:	404a      	eors	r2, r1
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	3309      	adds	r3, #9
 8004c7e:	7819      	ldrb	r1, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3309      	adds	r3, #9
 8004c84:	781a      	ldrb	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3309      	adds	r3, #9
 8004c8a:	404a      	eors	r2, r1
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	330a      	adds	r3, #10
 8004c94:	7819      	ldrb	r1, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	330a      	adds	r3, #10
 8004c9a:	781a      	ldrb	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	330a      	adds	r3, #10
 8004ca0:	404a      	eors	r2, r1
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	330b      	adds	r3, #11
 8004caa:	7819      	ldrb	r1, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	330b      	adds	r3, #11
 8004cb0:	781a      	ldrb	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	330b      	adds	r3, #11
 8004cb6:	404a      	eors	r2, r1
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	330c      	adds	r3, #12
 8004cc0:	7819      	ldrb	r1, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	330c      	adds	r3, #12
 8004cc6:	781a      	ldrb	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	330c      	adds	r3, #12
 8004ccc:	404a      	eors	r2, r1
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	330d      	adds	r3, #13
 8004cd6:	7819      	ldrb	r1, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	330d      	adds	r3, #13
 8004cdc:	781a      	ldrb	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	330d      	adds	r3, #13
 8004ce2:	404a      	eors	r2, r1
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	330e      	adds	r3, #14
 8004cec:	7819      	ldrb	r1, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	330e      	adds	r3, #14
 8004cf2:	781a      	ldrb	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	330e      	adds	r3, #14
 8004cf8:	404a      	eors	r2, r1
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	330f      	adds	r3, #15
 8004d02:	7819      	ldrb	r1, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	330f      	adds	r3, #15
 8004d08:	781a      	ldrb	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	330f      	adds	r3, #15
 8004d0e:	404a      	eors	r2, r1
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8004d14:	bf00      	nop
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bc80      	pop	{r7}
 8004d1c:	4770      	bx	lr

08004d1e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 8004d28:	6839      	ldr	r1, [r7, #0]
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff fe88 	bl	8004a40 <xor_block>
}
 8004d30:	bf00      	nop
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	461a      	mov	r2, r3
 8004d46:	4b48      	ldr	r3, [pc, #288]	; (8004e68 <shift_sub_rows+0x130>)
 8004d48:	5c9a      	ldrb	r2, [r3, r2]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3304      	adds	r3, #4
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	4619      	mov	r1, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	4a43      	ldr	r2, [pc, #268]	; (8004e68 <shift_sub_rows+0x130>)
 8004d5c:	5c52      	ldrb	r2, [r2, r1]
 8004d5e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3308      	adds	r3, #8
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	4619      	mov	r1, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3308      	adds	r3, #8
 8004d6c:	4a3e      	ldr	r2, [pc, #248]	; (8004e68 <shift_sub_rows+0x130>)
 8004d6e:	5c52      	ldrb	r2, [r2, r1]
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	330c      	adds	r3, #12
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	4a3a      	ldr	r2, [pc, #232]	; (8004e68 <shift_sub_rows+0x130>)
 8004d80:	5c52      	ldrb	r2, [r2, r1]
 8004d82:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	785b      	ldrb	r3, [r3, #1]
 8004d88:	73fb      	strb	r3, [r7, #15]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3305      	adds	r3, #5
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	4619      	mov	r1, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3301      	adds	r3, #1
 8004d96:	4a34      	ldr	r2, [pc, #208]	; (8004e68 <shift_sub_rows+0x130>)
 8004d98:	5c52      	ldrb	r2, [r2, r1]
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3309      	adds	r3, #9
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	4619      	mov	r1, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3305      	adds	r3, #5
 8004da8:	4a2f      	ldr	r2, [pc, #188]	; (8004e68 <shift_sub_rows+0x130>)
 8004daa:	5c52      	ldrb	r2, [r2, r1]
 8004dac:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	330d      	adds	r3, #13
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	4619      	mov	r1, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3309      	adds	r3, #9
 8004dba:	4a2b      	ldr	r2, [pc, #172]	; (8004e68 <shift_sub_rows+0x130>)
 8004dbc:	5c52      	ldrb	r2, [r2, r1]
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	7bfa      	ldrb	r2, [r7, #15]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	330d      	adds	r3, #13
 8004dc6:	4928      	ldr	r1, [pc, #160]	; (8004e68 <shift_sub_rows+0x130>)
 8004dc8:	5c8a      	ldrb	r2, [r1, r2]
 8004dca:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	789b      	ldrb	r3, [r3, #2]
 8004dd0:	73fb      	strb	r3, [r7, #15]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	330a      	adds	r3, #10
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3302      	adds	r3, #2
 8004dde:	4a22      	ldr	r2, [pc, #136]	; (8004e68 <shift_sub_rows+0x130>)
 8004de0:	5c52      	ldrb	r2, [r2, r1]
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	7bfa      	ldrb	r2, [r7, #15]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	330a      	adds	r3, #10
 8004dea:	491f      	ldr	r1, [pc, #124]	; (8004e68 <shift_sub_rows+0x130>)
 8004dec:	5c8a      	ldrb	r2, [r1, r2]
 8004dee:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	799b      	ldrb	r3, [r3, #6]
 8004df4:	73fb      	strb	r3, [r7, #15]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	330e      	adds	r3, #14
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3306      	adds	r3, #6
 8004e02:	4a19      	ldr	r2, [pc, #100]	; (8004e68 <shift_sub_rows+0x130>)
 8004e04:	5c52      	ldrb	r2, [r2, r1]
 8004e06:	701a      	strb	r2, [r3, #0]
 8004e08:	7bfa      	ldrb	r2, [r7, #15]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	330e      	adds	r3, #14
 8004e0e:	4916      	ldr	r1, [pc, #88]	; (8004e68 <shift_sub_rows+0x130>)
 8004e10:	5c8a      	ldrb	r2, [r1, r2]
 8004e12:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	7bdb      	ldrb	r3, [r3, #15]
 8004e18:	73fb      	strb	r3, [r7, #15]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	330b      	adds	r3, #11
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	4619      	mov	r1, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	330f      	adds	r3, #15
 8004e26:	4a10      	ldr	r2, [pc, #64]	; (8004e68 <shift_sub_rows+0x130>)
 8004e28:	5c52      	ldrb	r2, [r2, r1]
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3307      	adds	r3, #7
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	4619      	mov	r1, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	330b      	adds	r3, #11
 8004e38:	4a0b      	ldr	r2, [pc, #44]	; (8004e68 <shift_sub_rows+0x130>)
 8004e3a:	5c52      	ldrb	r2, [r2, r1]
 8004e3c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3303      	adds	r3, #3
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	4619      	mov	r1, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3307      	adds	r3, #7
 8004e4a:	4a07      	ldr	r2, [pc, #28]	; (8004e68 <shift_sub_rows+0x130>)
 8004e4c:	5c52      	ldrb	r2, [r2, r1]
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	7bfa      	ldrb	r2, [r7, #15]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3303      	adds	r3, #3
 8004e56:	4904      	ldr	r1, [pc, #16]	; (8004e68 <shift_sub_rows+0x130>)
 8004e58:	5c8a      	ldrb	r2, [r1, r2]
 8004e5a:	701a      	strb	r2, [r3, #0]
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	0800f0a8 	.word	0x0800f0a8

08004e6c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 8004e74:	f107 0308 	add.w	r3, r7, #8
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7ff fd6c 	bl	8004958 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8004e80:	7a3b      	ldrb	r3, [r7, #8]
 8004e82:	461a      	mov	r2, r3
 8004e84:	4b9a      	ldr	r3, [pc, #616]	; (80050f0 <mix_sub_columns+0x284>)
 8004e86:	5c9a      	ldrb	r2, [r3, r2]
 8004e88:	7b7b      	ldrb	r3, [r7, #13]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4b99      	ldr	r3, [pc, #612]	; (80050f4 <mix_sub_columns+0x288>)
 8004e8e:	5c5b      	ldrb	r3, [r3, r1]
 8004e90:	4053      	eors	r3, r2
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	7cbb      	ldrb	r3, [r7, #18]
 8004e96:	4619      	mov	r1, r3
 8004e98:	4b97      	ldr	r3, [pc, #604]	; (80050f8 <mix_sub_columns+0x28c>)
 8004e9a:	5c5b      	ldrb	r3, [r3, r1]
 8004e9c:	4053      	eors	r3, r2
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	7dfb      	ldrb	r3, [r7, #23]
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4b94      	ldr	r3, [pc, #592]	; (80050f8 <mix_sub_columns+0x28c>)
 8004ea6:	5c5b      	ldrb	r3, [r3, r1]
 8004ea8:	4053      	eors	r3, r2
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8004eb0:	7a3b      	ldrb	r3, [r7, #8]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4b90      	ldr	r3, [pc, #576]	; (80050f8 <mix_sub_columns+0x28c>)
 8004eb6:	5c9a      	ldrb	r2, [r3, r2]
 8004eb8:	7b7b      	ldrb	r3, [r7, #13]
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4b8c      	ldr	r3, [pc, #560]	; (80050f0 <mix_sub_columns+0x284>)
 8004ebe:	5c5b      	ldrb	r3, [r3, r1]
 8004ec0:	4053      	eors	r3, r2
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	7cbb      	ldrb	r3, [r7, #18]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4b8a      	ldr	r3, [pc, #552]	; (80050f4 <mix_sub_columns+0x288>)
 8004eca:	5c5b      	ldrb	r3, [r3, r1]
 8004ecc:	4053      	eors	r3, r2
 8004ece:	b2d9      	uxtb	r1, r3
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	4b88      	ldr	r3, [pc, #544]	; (80050f8 <mix_sub_columns+0x28c>)
 8004ed6:	5c9a      	ldrb	r2, [r3, r2]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3301      	adds	r3, #1
 8004edc:	404a      	eors	r2, r1
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8004ee2:	7a3b      	ldrb	r3, [r7, #8]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	4b84      	ldr	r3, [pc, #528]	; (80050f8 <mix_sub_columns+0x28c>)
 8004ee8:	5c9a      	ldrb	r2, [r3, r2]
 8004eea:	7b7b      	ldrb	r3, [r7, #13]
 8004eec:	4619      	mov	r1, r3
 8004eee:	4b82      	ldr	r3, [pc, #520]	; (80050f8 <mix_sub_columns+0x28c>)
 8004ef0:	5c5b      	ldrb	r3, [r3, r1]
 8004ef2:	4053      	eors	r3, r2
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	7cbb      	ldrb	r3, [r7, #18]
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4b7d      	ldr	r3, [pc, #500]	; (80050f0 <mix_sub_columns+0x284>)
 8004efc:	5c5b      	ldrb	r3, [r3, r1]
 8004efe:	4053      	eors	r3, r2
 8004f00:	b2d9      	uxtb	r1, r3
 8004f02:	7dfb      	ldrb	r3, [r7, #23]
 8004f04:	461a      	mov	r2, r3
 8004f06:	4b7b      	ldr	r3, [pc, #492]	; (80050f4 <mix_sub_columns+0x288>)
 8004f08:	5c9a      	ldrb	r2, [r3, r2]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3302      	adds	r3, #2
 8004f0e:	404a      	eors	r2, r1
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8004f14:	7a3b      	ldrb	r3, [r7, #8]
 8004f16:	461a      	mov	r2, r3
 8004f18:	4b76      	ldr	r3, [pc, #472]	; (80050f4 <mix_sub_columns+0x288>)
 8004f1a:	5c9a      	ldrb	r2, [r3, r2]
 8004f1c:	7b7b      	ldrb	r3, [r7, #13]
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4b75      	ldr	r3, [pc, #468]	; (80050f8 <mix_sub_columns+0x28c>)
 8004f22:	5c5b      	ldrb	r3, [r3, r1]
 8004f24:	4053      	eors	r3, r2
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	7cbb      	ldrb	r3, [r7, #18]
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4b72      	ldr	r3, [pc, #456]	; (80050f8 <mix_sub_columns+0x28c>)
 8004f2e:	5c5b      	ldrb	r3, [r3, r1]
 8004f30:	4053      	eors	r3, r2
 8004f32:	b2d9      	uxtb	r1, r3
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
 8004f36:	461a      	mov	r2, r3
 8004f38:	4b6d      	ldr	r3, [pc, #436]	; (80050f0 <mix_sub_columns+0x284>)
 8004f3a:	5c9a      	ldrb	r2, [r3, r2]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3303      	adds	r3, #3
 8004f40:	404a      	eors	r2, r1
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8004f46:	7b3b      	ldrb	r3, [r7, #12]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4b69      	ldr	r3, [pc, #420]	; (80050f0 <mix_sub_columns+0x284>)
 8004f4c:	5c9a      	ldrb	r2, [r3, r2]
 8004f4e:	7c7b      	ldrb	r3, [r7, #17]
 8004f50:	4619      	mov	r1, r3
 8004f52:	4b68      	ldr	r3, [pc, #416]	; (80050f4 <mix_sub_columns+0x288>)
 8004f54:	5c5b      	ldrb	r3, [r3, r1]
 8004f56:	4053      	eors	r3, r2
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	7dbb      	ldrb	r3, [r7, #22]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4b66      	ldr	r3, [pc, #408]	; (80050f8 <mix_sub_columns+0x28c>)
 8004f60:	5c5b      	ldrb	r3, [r3, r1]
 8004f62:	4053      	eors	r3, r2
 8004f64:	b2d9      	uxtb	r1, r3
 8004f66:	7afb      	ldrb	r3, [r7, #11]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4b63      	ldr	r3, [pc, #396]	; (80050f8 <mix_sub_columns+0x28c>)
 8004f6c:	5c9a      	ldrb	r2, [r3, r2]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3304      	adds	r3, #4
 8004f72:	404a      	eors	r2, r1
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8004f78:	7b3b      	ldrb	r3, [r7, #12]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	4b5e      	ldr	r3, [pc, #376]	; (80050f8 <mix_sub_columns+0x28c>)
 8004f7e:	5c9a      	ldrb	r2, [r3, r2]
 8004f80:	7c7b      	ldrb	r3, [r7, #17]
 8004f82:	4619      	mov	r1, r3
 8004f84:	4b5a      	ldr	r3, [pc, #360]	; (80050f0 <mix_sub_columns+0x284>)
 8004f86:	5c5b      	ldrb	r3, [r3, r1]
 8004f88:	4053      	eors	r3, r2
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	7dbb      	ldrb	r3, [r7, #22]
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4b58      	ldr	r3, [pc, #352]	; (80050f4 <mix_sub_columns+0x288>)
 8004f92:	5c5b      	ldrb	r3, [r3, r1]
 8004f94:	4053      	eors	r3, r2
 8004f96:	b2d9      	uxtb	r1, r3
 8004f98:	7afb      	ldrb	r3, [r7, #11]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	4b56      	ldr	r3, [pc, #344]	; (80050f8 <mix_sub_columns+0x28c>)
 8004f9e:	5c9a      	ldrb	r2, [r3, r2]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3305      	adds	r3, #5
 8004fa4:	404a      	eors	r2, r1
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8004faa:	7b3b      	ldrb	r3, [r7, #12]
 8004fac:	461a      	mov	r2, r3
 8004fae:	4b52      	ldr	r3, [pc, #328]	; (80050f8 <mix_sub_columns+0x28c>)
 8004fb0:	5c9a      	ldrb	r2, [r3, r2]
 8004fb2:	7c7b      	ldrb	r3, [r7, #17]
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4b50      	ldr	r3, [pc, #320]	; (80050f8 <mix_sub_columns+0x28c>)
 8004fb8:	5c5b      	ldrb	r3, [r3, r1]
 8004fba:	4053      	eors	r3, r2
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	7dbb      	ldrb	r3, [r7, #22]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4b4b      	ldr	r3, [pc, #300]	; (80050f0 <mix_sub_columns+0x284>)
 8004fc4:	5c5b      	ldrb	r3, [r3, r1]
 8004fc6:	4053      	eors	r3, r2
 8004fc8:	b2d9      	uxtb	r1, r3
 8004fca:	7afb      	ldrb	r3, [r7, #11]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4b49      	ldr	r3, [pc, #292]	; (80050f4 <mix_sub_columns+0x288>)
 8004fd0:	5c9a      	ldrb	r2, [r3, r2]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3306      	adds	r3, #6
 8004fd6:	404a      	eors	r2, r1
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8004fdc:	7b3b      	ldrb	r3, [r7, #12]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	4b44      	ldr	r3, [pc, #272]	; (80050f4 <mix_sub_columns+0x288>)
 8004fe2:	5c9a      	ldrb	r2, [r3, r2]
 8004fe4:	7c7b      	ldrb	r3, [r7, #17]
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4b43      	ldr	r3, [pc, #268]	; (80050f8 <mix_sub_columns+0x28c>)
 8004fea:	5c5b      	ldrb	r3, [r3, r1]
 8004fec:	4053      	eors	r3, r2
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	7dbb      	ldrb	r3, [r7, #22]
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4b40      	ldr	r3, [pc, #256]	; (80050f8 <mix_sub_columns+0x28c>)
 8004ff6:	5c5b      	ldrb	r3, [r3, r1]
 8004ff8:	4053      	eors	r3, r2
 8004ffa:	b2d9      	uxtb	r1, r3
 8004ffc:	7afb      	ldrb	r3, [r7, #11]
 8004ffe:	461a      	mov	r2, r3
 8005000:	4b3b      	ldr	r3, [pc, #236]	; (80050f0 <mix_sub_columns+0x284>)
 8005002:	5c9a      	ldrb	r2, [r3, r2]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3307      	adds	r3, #7
 8005008:	404a      	eors	r2, r1
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800500e:	7c3b      	ldrb	r3, [r7, #16]
 8005010:	461a      	mov	r2, r3
 8005012:	4b37      	ldr	r3, [pc, #220]	; (80050f0 <mix_sub_columns+0x284>)
 8005014:	5c9a      	ldrb	r2, [r3, r2]
 8005016:	7d7b      	ldrb	r3, [r7, #21]
 8005018:	4619      	mov	r1, r3
 800501a:	4b36      	ldr	r3, [pc, #216]	; (80050f4 <mix_sub_columns+0x288>)
 800501c:	5c5b      	ldrb	r3, [r3, r1]
 800501e:	4053      	eors	r3, r2
 8005020:	b2da      	uxtb	r2, r3
 8005022:	7abb      	ldrb	r3, [r7, #10]
 8005024:	4619      	mov	r1, r3
 8005026:	4b34      	ldr	r3, [pc, #208]	; (80050f8 <mix_sub_columns+0x28c>)
 8005028:	5c5b      	ldrb	r3, [r3, r1]
 800502a:	4053      	eors	r3, r2
 800502c:	b2d9      	uxtb	r1, r3
 800502e:	7bfb      	ldrb	r3, [r7, #15]
 8005030:	461a      	mov	r2, r3
 8005032:	4b31      	ldr	r3, [pc, #196]	; (80050f8 <mix_sub_columns+0x28c>)
 8005034:	5c9a      	ldrb	r2, [r3, r2]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3308      	adds	r3, #8
 800503a:	404a      	eors	r2, r1
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8005040:	7c3b      	ldrb	r3, [r7, #16]
 8005042:	461a      	mov	r2, r3
 8005044:	4b2c      	ldr	r3, [pc, #176]	; (80050f8 <mix_sub_columns+0x28c>)
 8005046:	5c9a      	ldrb	r2, [r3, r2]
 8005048:	7d7b      	ldrb	r3, [r7, #21]
 800504a:	4619      	mov	r1, r3
 800504c:	4b28      	ldr	r3, [pc, #160]	; (80050f0 <mix_sub_columns+0x284>)
 800504e:	5c5b      	ldrb	r3, [r3, r1]
 8005050:	4053      	eors	r3, r2
 8005052:	b2da      	uxtb	r2, r3
 8005054:	7abb      	ldrb	r3, [r7, #10]
 8005056:	4619      	mov	r1, r3
 8005058:	4b26      	ldr	r3, [pc, #152]	; (80050f4 <mix_sub_columns+0x288>)
 800505a:	5c5b      	ldrb	r3, [r3, r1]
 800505c:	4053      	eors	r3, r2
 800505e:	b2d9      	uxtb	r1, r3
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	461a      	mov	r2, r3
 8005064:	4b24      	ldr	r3, [pc, #144]	; (80050f8 <mix_sub_columns+0x28c>)
 8005066:	5c9a      	ldrb	r2, [r3, r2]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3309      	adds	r3, #9
 800506c:	404a      	eors	r2, r1
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8005072:	7c3b      	ldrb	r3, [r7, #16]
 8005074:	461a      	mov	r2, r3
 8005076:	4b20      	ldr	r3, [pc, #128]	; (80050f8 <mix_sub_columns+0x28c>)
 8005078:	5c9a      	ldrb	r2, [r3, r2]
 800507a:	7d7b      	ldrb	r3, [r7, #21]
 800507c:	4619      	mov	r1, r3
 800507e:	4b1e      	ldr	r3, [pc, #120]	; (80050f8 <mix_sub_columns+0x28c>)
 8005080:	5c5b      	ldrb	r3, [r3, r1]
 8005082:	4053      	eors	r3, r2
 8005084:	b2da      	uxtb	r2, r3
 8005086:	7abb      	ldrb	r3, [r7, #10]
 8005088:	4619      	mov	r1, r3
 800508a:	4b19      	ldr	r3, [pc, #100]	; (80050f0 <mix_sub_columns+0x284>)
 800508c:	5c5b      	ldrb	r3, [r3, r1]
 800508e:	4053      	eors	r3, r2
 8005090:	b2d9      	uxtb	r1, r3
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	461a      	mov	r2, r3
 8005096:	4b17      	ldr	r3, [pc, #92]	; (80050f4 <mix_sub_columns+0x288>)
 8005098:	5c9a      	ldrb	r2, [r3, r2]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	330a      	adds	r3, #10
 800509e:	404a      	eors	r2, r1
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80050a4:	7c3b      	ldrb	r3, [r7, #16]
 80050a6:	461a      	mov	r2, r3
 80050a8:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <mix_sub_columns+0x288>)
 80050aa:	5c9a      	ldrb	r2, [r3, r2]
 80050ac:	7d7b      	ldrb	r3, [r7, #21]
 80050ae:	4619      	mov	r1, r3
 80050b0:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <mix_sub_columns+0x28c>)
 80050b2:	5c5b      	ldrb	r3, [r3, r1]
 80050b4:	4053      	eors	r3, r2
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	7abb      	ldrb	r3, [r7, #10]
 80050ba:	4619      	mov	r1, r3
 80050bc:	4b0e      	ldr	r3, [pc, #56]	; (80050f8 <mix_sub_columns+0x28c>)
 80050be:	5c5b      	ldrb	r3, [r3, r1]
 80050c0:	4053      	eors	r3, r2
 80050c2:	b2d9      	uxtb	r1, r3
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	461a      	mov	r2, r3
 80050c8:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <mix_sub_columns+0x284>)
 80050ca:	5c9a      	ldrb	r2, [r3, r2]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	330b      	adds	r3, #11
 80050d0:	404a      	eors	r2, r1
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 80050d6:	7d3b      	ldrb	r3, [r7, #20]
 80050d8:	461a      	mov	r2, r3
 80050da:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <mix_sub_columns+0x284>)
 80050dc:	5c9a      	ldrb	r2, [r3, r2]
 80050de:	7a7b      	ldrb	r3, [r7, #9]
 80050e0:	4619      	mov	r1, r3
 80050e2:	4b04      	ldr	r3, [pc, #16]	; (80050f4 <mix_sub_columns+0x288>)
 80050e4:	5c5b      	ldrb	r3, [r3, r1]
 80050e6:	4053      	eors	r3, r2
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	7bbb      	ldrb	r3, [r7, #14]
 80050ec:	4619      	mov	r1, r3
 80050ee:	e005      	b.n	80050fc <mix_sub_columns+0x290>
 80050f0:	0800f1a8 	.word	0x0800f1a8
 80050f4:	0800f2a8 	.word	0x0800f2a8
 80050f8:	0800f0a8 	.word	0x0800f0a8
 80050fc:	4b2d      	ldr	r3, [pc, #180]	; (80051b4 <mix_sub_columns+0x348>)
 80050fe:	5c5b      	ldrb	r3, [r3, r1]
 8005100:	4053      	eors	r3, r2
 8005102:	b2d9      	uxtb	r1, r3
 8005104:	7cfb      	ldrb	r3, [r7, #19]
 8005106:	461a      	mov	r2, r3
 8005108:	4b2a      	ldr	r3, [pc, #168]	; (80051b4 <mix_sub_columns+0x348>)
 800510a:	5c9a      	ldrb	r2, [r3, r2]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	330c      	adds	r3, #12
 8005110:	404a      	eors	r2, r1
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8005116:	7d3b      	ldrb	r3, [r7, #20]
 8005118:	461a      	mov	r2, r3
 800511a:	4b26      	ldr	r3, [pc, #152]	; (80051b4 <mix_sub_columns+0x348>)
 800511c:	5c9a      	ldrb	r2, [r3, r2]
 800511e:	7a7b      	ldrb	r3, [r7, #9]
 8005120:	4619      	mov	r1, r3
 8005122:	4b25      	ldr	r3, [pc, #148]	; (80051b8 <mix_sub_columns+0x34c>)
 8005124:	5c5b      	ldrb	r3, [r3, r1]
 8005126:	4053      	eors	r3, r2
 8005128:	b2da      	uxtb	r2, r3
 800512a:	7bbb      	ldrb	r3, [r7, #14]
 800512c:	4619      	mov	r1, r3
 800512e:	4b23      	ldr	r3, [pc, #140]	; (80051bc <mix_sub_columns+0x350>)
 8005130:	5c5b      	ldrb	r3, [r3, r1]
 8005132:	4053      	eors	r3, r2
 8005134:	b2d9      	uxtb	r1, r3
 8005136:	7cfb      	ldrb	r3, [r7, #19]
 8005138:	461a      	mov	r2, r3
 800513a:	4b1e      	ldr	r3, [pc, #120]	; (80051b4 <mix_sub_columns+0x348>)
 800513c:	5c9a      	ldrb	r2, [r3, r2]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	330d      	adds	r3, #13
 8005142:	404a      	eors	r2, r1
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8005148:	7d3b      	ldrb	r3, [r7, #20]
 800514a:	461a      	mov	r2, r3
 800514c:	4b19      	ldr	r3, [pc, #100]	; (80051b4 <mix_sub_columns+0x348>)
 800514e:	5c9a      	ldrb	r2, [r3, r2]
 8005150:	7a7b      	ldrb	r3, [r7, #9]
 8005152:	4619      	mov	r1, r3
 8005154:	4b17      	ldr	r3, [pc, #92]	; (80051b4 <mix_sub_columns+0x348>)
 8005156:	5c5b      	ldrb	r3, [r3, r1]
 8005158:	4053      	eors	r3, r2
 800515a:	b2da      	uxtb	r2, r3
 800515c:	7bbb      	ldrb	r3, [r7, #14]
 800515e:	4619      	mov	r1, r3
 8005160:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <mix_sub_columns+0x34c>)
 8005162:	5c5b      	ldrb	r3, [r3, r1]
 8005164:	4053      	eors	r3, r2
 8005166:	b2d9      	uxtb	r1, r3
 8005168:	7cfb      	ldrb	r3, [r7, #19]
 800516a:	461a      	mov	r2, r3
 800516c:	4b13      	ldr	r3, [pc, #76]	; (80051bc <mix_sub_columns+0x350>)
 800516e:	5c9a      	ldrb	r2, [r3, r2]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	330e      	adds	r3, #14
 8005174:	404a      	eors	r2, r1
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800517a:	7d3b      	ldrb	r3, [r7, #20]
 800517c:	461a      	mov	r2, r3
 800517e:	4b0f      	ldr	r3, [pc, #60]	; (80051bc <mix_sub_columns+0x350>)
 8005180:	5c9a      	ldrb	r2, [r3, r2]
 8005182:	7a7b      	ldrb	r3, [r7, #9]
 8005184:	4619      	mov	r1, r3
 8005186:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <mix_sub_columns+0x348>)
 8005188:	5c5b      	ldrb	r3, [r3, r1]
 800518a:	4053      	eors	r3, r2
 800518c:	b2da      	uxtb	r2, r3
 800518e:	7bbb      	ldrb	r3, [r7, #14]
 8005190:	4619      	mov	r1, r3
 8005192:	4b08      	ldr	r3, [pc, #32]	; (80051b4 <mix_sub_columns+0x348>)
 8005194:	5c5b      	ldrb	r3, [r3, r1]
 8005196:	4053      	eors	r3, r2
 8005198:	b2d9      	uxtb	r1, r3
 800519a:	7cfb      	ldrb	r3, [r7, #19]
 800519c:	461a      	mov	r2, r3
 800519e:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <mix_sub_columns+0x34c>)
 80051a0:	5c9a      	ldrb	r2, [r3, r2]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	330f      	adds	r3, #15
 80051a6:	404a      	eors	r2, r1
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	701a      	strb	r2, [r3, #0]
  }
 80051ac:	bf00      	nop
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	0800f0a8 	.word	0x0800f0a8
 80051b8:	0800f1a8 	.word	0x0800f1a8
 80051bc:	0800f2a8 	.word	0x0800f2a8

080051c0 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	460b      	mov	r3, r1
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 80051ce:	7afb      	ldrb	r3, [r7, #11]
 80051d0:	3b10      	subs	r3, #16
 80051d2:	2b10      	cmp	r3, #16
 80051d4:	bf8c      	ite	hi
 80051d6:	2201      	movhi	r2, #1
 80051d8:	2200      	movls	r2, #0
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	2a00      	cmp	r2, #0
 80051de:	d10d      	bne.n	80051fc <lorawan_aes_set_key+0x3c>
 80051e0:	2201      	movs	r2, #1
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80051ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	bf14      	ite	ne
 80051f2:	2301      	movne	r3, #1
 80051f4:	2300      	moveq	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d105      	bne.n	8005208 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 8005204:	23ff      	movs	r3, #255	; 0xff
 8005206:	e0b2      	b.n	800536e <lorawan_aes_set_key+0x1ae>
        break;
 8005208:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	7afa      	ldrb	r2, [r7, #11]
 800520e:	68f9      	ldr	r1, [r7, #12]
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff fbfa 	bl	8004a0a <copy_block_nn>
    hi = (keylen + 28) << 2;
 8005216:	7afb      	ldrb	r3, [r7, #11]
 8005218:	331c      	adds	r3, #28
 800521a:	b2db      	uxtb	r3, r3
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 8005220:	7c7b      	ldrb	r3, [r7, #17]
 8005222:	091b      	lsrs	r3, r3, #4
 8005224:	b2db      	uxtb	r3, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	b2da      	uxtb	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8005230:	7afb      	ldrb	r3, [r7, #11]
 8005232:	75fb      	strb	r3, [r7, #23]
 8005234:	2301      	movs	r3, #1
 8005236:	75bb      	strb	r3, [r7, #22]
 8005238:	e093      	b.n	8005362 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800523a:	7dfb      	ldrb	r3, [r7, #23]
 800523c:	3b04      	subs	r3, #4
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	5cd3      	ldrb	r3, [r2, r3]
 8005242:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 8005244:	7dfb      	ldrb	r3, [r7, #23]
 8005246:	3b03      	subs	r3, #3
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	5cd3      	ldrb	r3, [r2, r3]
 800524c:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800524e:	7dfb      	ldrb	r3, [r7, #23]
 8005250:	3b02      	subs	r3, #2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	5cd3      	ldrb	r3, [r2, r3]
 8005256:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 8005258:	7dfb      	ldrb	r3, [r7, #23]
 800525a:	3b01      	subs	r3, #1
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	5cd3      	ldrb	r3, [r2, r3]
 8005260:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 8005262:	7dfb      	ldrb	r3, [r7, #23]
 8005264:	7afa      	ldrb	r2, [r7, #11]
 8005266:	fbb3 f1f2 	udiv	r1, r3, r2
 800526a:	fb01 f202 	mul.w	r2, r1, r2
 800526e:	1a9b      	subs	r3, r3, r2
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d127      	bne.n	80052c6 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 8005276:	7d7b      	ldrb	r3, [r7, #21]
 8005278:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800527a:	7d3b      	ldrb	r3, [r7, #20]
 800527c:	4a3e      	ldr	r2, [pc, #248]	; (8005378 <lorawan_aes_set_key+0x1b8>)
 800527e:	5cd2      	ldrb	r2, [r2, r3]
 8005280:	7dbb      	ldrb	r3, [r7, #22]
 8005282:	4053      	eors	r3, r2
 8005284:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 8005286:	7cfb      	ldrb	r3, [r7, #19]
 8005288:	4a3b      	ldr	r2, [pc, #236]	; (8005378 <lorawan_aes_set_key+0x1b8>)
 800528a:	5cd3      	ldrb	r3, [r2, r3]
 800528c:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800528e:	7cbb      	ldrb	r3, [r7, #18]
 8005290:	4a39      	ldr	r2, [pc, #228]	; (8005378 <lorawan_aes_set_key+0x1b8>)
 8005292:	5cd3      	ldrb	r3, [r2, r3]
 8005294:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 8005296:	7c3b      	ldrb	r3, [r7, #16]
 8005298:	4a37      	ldr	r2, [pc, #220]	; (8005378 <lorawan_aes_set_key+0x1b8>)
 800529a:	5cd3      	ldrb	r3, [r2, r3]
 800529c:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800529e:	7dbb      	ldrb	r3, [r7, #22]
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	b25a      	sxtb	r2, r3
 80052a4:	7dbb      	ldrb	r3, [r7, #22]
 80052a6:	09db      	lsrs	r3, r3, #7
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	4619      	mov	r1, r3
 80052ac:	0049      	lsls	r1, r1, #1
 80052ae:	440b      	add	r3, r1
 80052b0:	4619      	mov	r1, r3
 80052b2:	00c8      	lsls	r0, r1, #3
 80052b4:	4619      	mov	r1, r3
 80052b6:	4603      	mov	r3, r0
 80052b8:	440b      	add	r3, r1
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	b25b      	sxtb	r3, r3
 80052be:	4053      	eors	r3, r2
 80052c0:	b25b      	sxtb	r3, r3
 80052c2:	75bb      	strb	r3, [r7, #22]
 80052c4:	e01c      	b.n	8005300 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 80052c6:	7afb      	ldrb	r3, [r7, #11]
 80052c8:	2b18      	cmp	r3, #24
 80052ca:	d919      	bls.n	8005300 <lorawan_aes_set_key+0x140>
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
 80052ce:	7afa      	ldrb	r2, [r7, #11]
 80052d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80052d4:	fb01 f202 	mul.w	r2, r1, r2
 80052d8:	1a9b      	subs	r3, r3, r2
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b10      	cmp	r3, #16
 80052de:	d10f      	bne.n	8005300 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 80052e0:	7d7b      	ldrb	r3, [r7, #21]
 80052e2:	4a25      	ldr	r2, [pc, #148]	; (8005378 <lorawan_aes_set_key+0x1b8>)
 80052e4:	5cd3      	ldrb	r3, [r2, r3]
 80052e6:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 80052e8:	7d3b      	ldrb	r3, [r7, #20]
 80052ea:	4a23      	ldr	r2, [pc, #140]	; (8005378 <lorawan_aes_set_key+0x1b8>)
 80052ec:	5cd3      	ldrb	r3, [r2, r3]
 80052ee:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 80052f0:	7cfb      	ldrb	r3, [r7, #19]
 80052f2:	4a21      	ldr	r2, [pc, #132]	; (8005378 <lorawan_aes_set_key+0x1b8>)
 80052f4:	5cd3      	ldrb	r3, [r2, r3]
 80052f6:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 80052f8:	7cbb      	ldrb	r3, [r7, #18]
 80052fa:	4a1f      	ldr	r2, [pc, #124]	; (8005378 <lorawan_aes_set_key+0x1b8>)
 80052fc:	5cd3      	ldrb	r3, [r2, r3]
 80052fe:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 8005300:	7dfa      	ldrb	r2, [r7, #23]
 8005302:	7afb      	ldrb	r3, [r7, #11]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8005308:	7c3b      	ldrb	r3, [r7, #16]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	5cd1      	ldrb	r1, [r2, r3]
 800530e:	7dfb      	ldrb	r3, [r7, #23]
 8005310:	7d7a      	ldrb	r2, [r7, #21]
 8005312:	404a      	eors	r2, r1
 8005314:	b2d1      	uxtb	r1, r2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800531a:	7c3b      	ldrb	r3, [r7, #16]
 800531c:	3301      	adds	r3, #1
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	5cd1      	ldrb	r1, [r2, r3]
 8005322:	7dfb      	ldrb	r3, [r7, #23]
 8005324:	3301      	adds	r3, #1
 8005326:	7d3a      	ldrb	r2, [r7, #20]
 8005328:	404a      	eors	r2, r1
 800532a:	b2d1      	uxtb	r1, r2
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8005330:	7c3b      	ldrb	r3, [r7, #16]
 8005332:	3302      	adds	r3, #2
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	5cd1      	ldrb	r1, [r2, r3]
 8005338:	7dfb      	ldrb	r3, [r7, #23]
 800533a:	3302      	adds	r3, #2
 800533c:	7cfa      	ldrb	r2, [r7, #19]
 800533e:	404a      	eors	r2, r1
 8005340:	b2d1      	uxtb	r1, r2
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8005346:	7c3b      	ldrb	r3, [r7, #16]
 8005348:	3303      	adds	r3, #3
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	5cd1      	ldrb	r1, [r2, r3]
 800534e:	7dfb      	ldrb	r3, [r7, #23]
 8005350:	3303      	adds	r3, #3
 8005352:	7cba      	ldrb	r2, [r7, #18]
 8005354:	404a      	eors	r2, r1
 8005356:	b2d1      	uxtb	r1, r2
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800535c:	7dfb      	ldrb	r3, [r7, #23]
 800535e:	3304      	adds	r3, #4
 8005360:	75fb      	strb	r3, [r7, #23]
 8005362:	7dfa      	ldrb	r2, [r7, #23]
 8005364:	7c7b      	ldrb	r3, [r7, #17]
 8005366:	429a      	cmp	r2, r3
 8005368:	f4ff af67 	bcc.w	800523a <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	0800f0a8 	.word	0x0800f0a8

0800537c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08a      	sub	sp, #40	; 0x28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d038      	beq.n	8005404 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	f107 0314 	add.w	r3, r7, #20
 8005398:	68f9      	ldr	r1, [r7, #12]
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff fc07 	bl	8004bae <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 80053a0:	2301      	movs	r3, #1
 80053a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80053a6:	e014      	b.n	80053d2 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 80053a8:	f107 0314 	add.w	r3, r7, #20
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7ff fd5d 	bl	8004e6c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80053b8:	0112      	lsls	r2, r2, #4
 80053ba:	441a      	add	r2, r3
 80053bc:	f107 0314 	add.w	r3, r7, #20
 80053c0:	4611      	mov	r1, r2
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff fcab 	bl	8004d1e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80053c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053cc:	3301      	adds	r3, #1
 80053ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80053d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80053dc:	429a      	cmp	r2, r3
 80053de:	d3e3      	bcc.n	80053a8 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 80053e0:	f107 0314 	add.w	r3, r7, #20
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff fca7 	bl	8004d38 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80053f0:	0112      	lsls	r2, r2, #4
 80053f2:	441a      	add	r2, r3
 80053f4:	f107 0314 	add.w	r3, r7, #20
 80053f8:	4619      	mov	r1, r3
 80053fa:	68b8      	ldr	r0, [r7, #8]
 80053fc:	f7ff fbd7 	bl	8004bae <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8005400:	2300      	movs	r3, #0
 8005402:	e000      	b.n	8005406 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 8005404:	23ff      	movs	r3, #255	; 0xff
}
 8005406:	4618      	mov	r0, r3
 8005408:	3728      	adds	r7, #40	; 0x28
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	4603      	mov	r3, r0
 8005418:	6039      	str	r1, [r7, #0]
 800541a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800541c:	2300      	movs	r3, #0
 800541e:	73fb      	strb	r3, [r7, #15]
 8005420:	e01a      	b.n	8005458 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8005422:	4b12      	ldr	r3, [pc, #72]	; (800546c <GetKeyByID+0x5c>)
 8005424:	6819      	ldr	r1, [r3, #0]
 8005426:	7bfa      	ldrb	r2, [r7, #15]
 8005428:	4613      	mov	r3, r2
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	4413      	add	r3, r2
 800542e:	440b      	add	r3, r1
 8005430:	3310      	adds	r3, #16
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	79fa      	ldrb	r2, [r7, #7]
 8005436:	429a      	cmp	r2, r3
 8005438:	d10b      	bne.n	8005452 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800543a:	4b0c      	ldr	r3, [pc, #48]	; (800546c <GetKeyByID+0x5c>)
 800543c:	6819      	ldr	r1, [r3, #0]
 800543e:	7bfa      	ldrb	r2, [r7, #15]
 8005440:	4613      	mov	r3, r2
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	4413      	add	r3, r2
 8005446:	3310      	adds	r3, #16
 8005448:	18ca      	adds	r2, r1, r3
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800544e:	2300      	movs	r3, #0
 8005450:	e006      	b.n	8005460 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8005452:	7bfb      	ldrb	r3, [r7, #15]
 8005454:	3301      	adds	r3, #1
 8005456:	73fb      	strb	r3, [r7, #15]
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	2b09      	cmp	r3, #9
 800545c:	d9e1      	bls.n	8005422 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800545e:	2303      	movs	r3, #3
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	200001c0 	.word	0x200001c0

08005470 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 8005470:	b590      	push	{r4, r7, lr}
 8005472:	b0d1      	sub	sp, #324	; 0x144
 8005474:	af00      	add	r7, sp, #0
 8005476:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800547a:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800547e:	6020      	str	r0, [r4, #0]
 8005480:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8005484:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8005488:	6001      	str	r1, [r0, #0]
 800548a:	4619      	mov	r1, r3
 800548c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005490:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8005494:	801a      	strh	r2, [r3, #0]
 8005496:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800549a:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800549e:	460a      	mov	r2, r1
 80054a0:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 80054a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80054a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <ComputeCmac+0x48>
 80054b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80054b8:	2302      	movs	r3, #2
 80054ba:	e05c      	b.n	8005576 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 80054bc:	f107 0314 	add.w	r3, r7, #20
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fe fffd 	bl	80044c0 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 80054c6:	f107 0210 	add.w	r2, r7, #16
 80054ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80054ce:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	4611      	mov	r1, r2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff ff9a 	bl	8005410 <GetKeyByID>
 80054dc:	4603      	mov	r3, r0
 80054de:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80054e2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d143      	bne.n	8005572 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 80054ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80054ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	f107 0314 	add.w	r3, r7, #20
 80054fa:	4611      	mov	r1, r2
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fe fff8 	bl	80044f2 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 8005502:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005506:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d009      	beq.n	8005524 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 8005510:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005514:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005518:	f107 0014 	add.w	r0, r7, #20
 800551c:	2210      	movs	r2, #16
 800551e:	6819      	ldr	r1, [r3, #0]
 8005520:	f7fe fff6 	bl	8004510 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8005524:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005528:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800552c:	881a      	ldrh	r2, [r3, #0]
 800552e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005532:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005536:	f107 0014 	add.w	r0, r7, #20
 800553a:	6819      	ldr	r1, [r3, #0]
 800553c:	f7fe ffe8 	bl	8004510 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 8005540:	f107 0214 	add.w	r2, r7, #20
 8005544:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8005548:	4611      	mov	r1, r2
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff f8a2 	bl	8004694 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8005550:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005554:	061a      	lsls	r2, r3, #24
 8005556:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800555a:	041b      	lsls	r3, r3, #16
 800555c:	431a      	orrs	r2, r3
 800555e:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8005562:	021b      	lsls	r3, r3, #8
 8005564:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 8005566:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800556a:	431a      	orrs	r2, r3
 800556c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005570:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 8005572:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 8005576:	4618      	mov	r0, r3
 8005578:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800557c:	46bd      	mov	sp, r7
 800557e:	bd90      	pop	{r4, r7, pc}

08005580 <SecureElementPrintSessionKeys>:
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
}
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
#else
    PrintKey(NWK_S_KEY);
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr
	...

08005590 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	4603      	mov	r3, r0
 8005598:	6039      	str	r1, [r7, #0]
 800559a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80055a2:	2302      	movs	r3, #2
 80055a4:	e04c      	b.n	8005640 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80055a6:	2300      	movs	r3, #0
 80055a8:	77fb      	strb	r3, [r7, #31]
 80055aa:	e045      	b.n	8005638 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 80055ac:	4b26      	ldr	r3, [pc, #152]	; (8005648 <SecureElementSetKey+0xb8>)
 80055ae:	6819      	ldr	r1, [r3, #0]
 80055b0:	7ffa      	ldrb	r2, [r7, #31]
 80055b2:	4613      	mov	r3, r2
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	4413      	add	r3, r2
 80055b8:	440b      	add	r3, r1
 80055ba:	3310      	adds	r3, #16
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	79fa      	ldrb	r2, [r7, #7]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d136      	bne.n	8005632 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 80055c4:	79fb      	ldrb	r3, [r7, #7]
 80055c6:	2b80      	cmp	r3, #128	; 0x80
 80055c8:	d123      	bne.n	8005612 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 80055ca:	2306      	movs	r3, #6
 80055cc:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	f107 0310 	add.w	r3, r7, #16
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	605a      	str	r2, [r3, #4]
 80055dc:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 80055de:	f107 030c 	add.w	r3, r7, #12
 80055e2:	227f      	movs	r2, #127	; 0x7f
 80055e4:	2110      	movs	r1, #16
 80055e6:	6838      	ldr	r0, [r7, #0]
 80055e8:	f000 f84e 	bl	8005688 <SecureElementAesEncrypt>
 80055ec:	4603      	mov	r3, r0
 80055ee:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 80055f0:	4b15      	ldr	r3, [pc, #84]	; (8005648 <SecureElementSetKey+0xb8>)
 80055f2:	6819      	ldr	r1, [r3, #0]
 80055f4:	7ffa      	ldrb	r2, [r7, #31]
 80055f6:	4613      	mov	r3, r2
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	4413      	add	r3, r2
 80055fc:	3310      	adds	r3, #16
 80055fe:	440b      	add	r3, r1
 8005600:	3301      	adds	r3, #1
 8005602:	f107 010c 	add.w	r1, r7, #12
 8005606:	2210      	movs	r2, #16
 8005608:	4618      	mov	r0, r3
 800560a:	f005 ff1e 	bl	800b44a <memcpy1>
                return retval;
 800560e:	7fbb      	ldrb	r3, [r7, #30]
 8005610:	e016      	b.n	8005640 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8005612:	4b0d      	ldr	r3, [pc, #52]	; (8005648 <SecureElementSetKey+0xb8>)
 8005614:	6819      	ldr	r1, [r3, #0]
 8005616:	7ffa      	ldrb	r2, [r7, #31]
 8005618:	4613      	mov	r3, r2
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	4413      	add	r3, r2
 800561e:	3310      	adds	r3, #16
 8005620:	440b      	add	r3, r1
 8005622:	3301      	adds	r3, #1
 8005624:	2210      	movs	r2, #16
 8005626:	6839      	ldr	r1, [r7, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	f005 ff0e 	bl	800b44a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800562e:	2300      	movs	r3, #0
 8005630:	e006      	b.n	8005640 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8005632:	7ffb      	ldrb	r3, [r7, #31]
 8005634:	3301      	adds	r3, #1
 8005636:	77fb      	strb	r3, [r7, #31]
 8005638:	7ffb      	ldrb	r3, [r7, #31]
 800563a:	2b09      	cmp	r3, #9
 800563c:	d9b6      	bls.n	80055ac <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800563e:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8005640:	4618      	mov	r0, r3
 8005642:	3720      	adds	r7, #32
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	200001c0 	.word	0x200001c0

0800564c <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af02      	add	r7, sp, #8
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	4611      	mov	r1, r2
 8005658:	461a      	mov	r2, r3
 800565a:	460b      	mov	r3, r1
 800565c:	80fb      	strh	r3, [r7, #6]
 800565e:	4613      	mov	r3, r2
 8005660:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8005662:	797b      	ldrb	r3, [r7, #5]
 8005664:	2b7e      	cmp	r3, #126	; 0x7e
 8005666:	d901      	bls.n	800566c <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8005668:	2303      	movs	r3, #3
 800566a:	e009      	b.n	8005680 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800566c:	7979      	ldrb	r1, [r7, #5]
 800566e:	88fa      	ldrh	r2, [r7, #6]
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	460b      	mov	r3, r1
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f7ff fef9 	bl	8005470 <ComputeCmac>
 800567e:	4603      	mov	r3, r0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <SecureElementAesEncrypt>:
    return retval;
}

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b0c2      	sub	sp, #264	; 0x108
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	4608      	mov	r0, r1
 8005692:	4611      	mov	r1, r2
 8005694:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8005698:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	4603      	mov	r3, r0
 80056a0:	817b      	strh	r3, [r7, #10]
 80056a2:	460b      	mov	r3, r1
 80056a4:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d006      	beq.n	80056ba <SecureElementAesEncrypt+0x32>
 80056ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80056ba:	2302      	movs	r3, #2
 80056bc:	e046      	b.n	800574c <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 80056be:	897b      	ldrh	r3, [r7, #10]
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80056ca:	2305      	movs	r3, #5
 80056cc:	e03e      	b.n	800574c <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 80056ce:	f107 0314 	add.w	r3, r7, #20
 80056d2:	22f0      	movs	r2, #240	; 0xf0
 80056d4:	2100      	movs	r1, #0
 80056d6:	4618      	mov	r0, r3
 80056d8:	f005 fef2 	bl	800b4c0 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 80056dc:	f107 0210 	add.w	r2, r7, #16
 80056e0:	7a7b      	ldrb	r3, [r7, #9]
 80056e2:	4611      	mov	r1, r2
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff fe93 	bl	8005410 <GetKeyByID>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 80056f0:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d127      	bne.n	8005748 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	3301      	adds	r3, #1
 80056fc:	f107 0214 	add.w	r2, r7, #20
 8005700:	2110      	movs	r1, #16
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff fd5c 	bl	80051c0 <lorawan_aes_set_key>

        uint8_t block = 0;
 8005708:	2300      	movs	r3, #0
 800570a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800570e:	e018      	b.n	8005742 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8005710:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	18d0      	adds	r0, r2, r3
 8005718:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800571c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8005720:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8005724:	6812      	ldr	r2, [r2, #0]
 8005726:	4413      	add	r3, r2
 8005728:	f107 0214 	add.w	r2, r7, #20
 800572c:	4619      	mov	r1, r3
 800572e:	f7ff fe25 	bl	800537c <lorawan_aes_encrypt>
            block = block + 16;
 8005732:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8005736:	3310      	adds	r3, #16
 8005738:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800573c:	897b      	ldrh	r3, [r7, #10]
 800573e:	3b10      	subs	r3, #16
 8005740:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 8005742:	897b      	ldrh	r3, [r7, #10]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1e3      	bne.n	8005710 <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 8005748:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800574c:	4618      	mov	r0, r3
 800574e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b088      	sub	sp, #32
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	460b      	mov	r3, r1
 8005760:	70fb      	strb	r3, [r7, #3]
 8005762:	4613      	mov	r3, r2
 8005764:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800576c:	2302      	movs	r3, #2
 800576e:	e02e      	b.n	80057ce <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 8005770:	2306      	movs	r3, #6
 8005772:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 8005774:	78bb      	ldrb	r3, [r7, #2]
 8005776:	2b7f      	cmp	r3, #127	; 0x7f
 8005778:	d104      	bne.n	8005784 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	2b04      	cmp	r3, #4
 800577e:	d001      	beq.n	8005784 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8005780:	2303      	movs	r3, #3
 8005782:	e024      	b.n	80057ce <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 8005784:	2300      	movs	r3, #0
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	f107 0310 	add.w	r3, r7, #16
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	605a      	str	r2, [r3, #4]
 8005792:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8005794:	f107 030c 	add.w	r3, r7, #12
 8005798:	78fa      	ldrb	r2, [r7, #3]
 800579a:	2110      	movs	r1, #16
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff ff73 	bl	8005688 <SecureElementAesEncrypt>
 80057a2:	4603      	mov	r3, r0
 80057a4:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 80057a6:	7ffb      	ldrb	r3, [r7, #31]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 80057ac:	7ffb      	ldrb	r3, [r7, #31]
 80057ae:	e00e      	b.n	80057ce <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 80057b0:	f107 020c 	add.w	r2, r7, #12
 80057b4:	78bb      	ldrb	r3, [r7, #2]
 80057b6:	4611      	mov	r1, r2
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff fee9 	bl	8005590 <SecureElementSetKey>
 80057be:	4603      	mov	r3, r0
 80057c0:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 80057c2:	7ffb      	ldrb	r3, [r7, #31]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 80057c8:	7ffb      	ldrb	r3, [r7, #31]
 80057ca:	e000      	b.n	80057ce <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 80057cc:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3720      	adds	r7, #32
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
	...

080057d8 <SecureElementRandomNumber>:
    return SECURE_ELEMENT_SUCCESS;
}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80057e6:	2302      	movs	r3, #2
 80057e8:	e006      	b.n	80057f8 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 80057ea:	4b05      	ldr	r3, [pc, #20]	; (8005800 <SecureElementRandomNumber+0x28>)
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	4798      	blx	r3
 80057f0:	4602      	mov	r2, r0
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	0800f3f0 	.word	0x0800f3f0

08005804 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8005812:	2302      	movs	r3, #2
 8005814:	e007      	b.n	8005826 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 8005816:	4b06      	ldr	r3, [pc, #24]	; (8005830 <SecureElementSetDevEui+0x2c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2208      	movs	r2, #8
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	4618      	mov	r0, r3
 8005820:	f005 fe13 	bl	800b44a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	200001c0 	.word	0x200001c0

08005834 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 8005838:	4b02      	ldr	r3, [pc, #8]	; (8005844 <SecureElementGetDevEui+0x10>)
 800583a:	681b      	ldr	r3, [r3, #0]
}
 800583c:	4618      	mov	r0, r3
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr
 8005844:	200001c0 	.word	0x200001c0

08005848 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8005856:	2302      	movs	r3, #2
 8005858:	e008      	b.n	800586c <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800585a:	4b06      	ldr	r3, [pc, #24]	; (8005874 <SecureElementSetJoinEui+0x2c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3308      	adds	r3, #8
 8005860:	2208      	movs	r2, #8
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	4618      	mov	r0, r3
 8005866:	f005 fdf0 	bl	800b44a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	200001c0 	.word	0x200001c0

08005878 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800587c:	4b03      	ldr	r3, [pc, #12]	; (800588c <SecureElementGetJoinEui+0x14>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3308      	adds	r3, #8
}
 8005882:	4618      	mov	r0, r3
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	200001c0 	.word	0x200001c0

08005890 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800589a:	4a1a      	ldr	r2, [pc, #104]	; (8005904 <LmHandlerInit+0x74>)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 80058a0:	4b19      	ldr	r3, [pc, #100]	; (8005908 <LmHandlerInit+0x78>)
 80058a2:	4a1a      	ldr	r2, [pc, #104]	; (800590c <LmHandlerInit+0x7c>)
 80058a4:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 80058a6:	4b18      	ldr	r3, [pc, #96]	; (8005908 <LmHandlerInit+0x78>)
 80058a8:	4a19      	ldr	r2, [pc, #100]	; (8005910 <LmHandlerInit+0x80>)
 80058aa:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80058ac:	4b16      	ldr	r3, [pc, #88]	; (8005908 <LmHandlerInit+0x78>)
 80058ae:	4a19      	ldr	r2, [pc, #100]	; (8005914 <LmHandlerInit+0x84>)
 80058b0:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 80058b2:	4b15      	ldr	r3, [pc, #84]	; (8005908 <LmHandlerInit+0x78>)
 80058b4:	4a18      	ldr	r2, [pc, #96]	; (8005918 <LmHandlerInit+0x88>)
 80058b6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 80058b8:	4b12      	ldr	r3, [pc, #72]	; (8005904 <LmHandlerInit+0x74>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a17      	ldr	r2, [pc, #92]	; (800591c <LmHandlerInit+0x8c>)
 80058c0:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 80058c2:	4b10      	ldr	r3, [pc, #64]	; (8005904 <LmHandlerInit+0x74>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	4a14      	ldr	r2, [pc, #80]	; (800591c <LmHandlerInit+0x8c>)
 80058ca:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 80058cc:	4b0d      	ldr	r3, [pc, #52]	; (8005904 <LmHandlerInit+0x74>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	4a12      	ldr	r2, [pc, #72]	; (800591c <LmHandlerInit+0x8c>)
 80058d4:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 80058d6:	4b11      	ldr	r3, [pc, #68]	; (800591c <LmHandlerInit+0x8c>)
 80058d8:	4a11      	ldr	r2, [pc, #68]	; (8005920 <LmHandlerInit+0x90>)
 80058da:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 80058dc:	4b09      	ldr	r3, [pc, #36]	; (8005904 <LmHandlerInit+0x74>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	4a0e      	ldr	r2, [pc, #56]	; (800591c <LmHandlerInit+0x8c>)
 80058e4:	6113      	str	r3, [r2, #16]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80058e6:	490f      	ldr	r1, [pc, #60]	; (8005924 <LmHandlerInit+0x94>)
 80058e8:	2000      	movs	r0, #0
 80058ea:	f000 fc25 	bl	8006138 <LmHandlerPackageRegister>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <LmHandlerInit+0x6a>
    {
        return LORAMAC_HANDLER_ERROR;
 80058f4:	f04f 33ff 	mov.w	r3, #4294967295
 80058f8:	e000      	b.n	80058fc <LmHandlerInit+0x6c>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	200001ec 	.word	0x200001ec
 8005908:	200001f0 	.word	0x200001f0
 800590c:	08005e05 	.word	0x08005e05
 8005910:	08005e6d 	.word	0x08005e6d
 8005914:	08005f49 	.word	0x08005f49
 8005918:	08006065 	.word	0x08006065
 800591c:	20000200 	.word	0x20000200
 8005920:	08006305 	.word	0x08006305
 8005924:	20000070 	.word	0x20000070

08005928 <LmHandlerJoin>:
{
    return DutyCycleWaitTime;
}

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b090      	sub	sp, #64	; 0x40
 800592c:	af00      	add	r7, sp, #0
 800592e:	4603      	mov	r3, r0
 8005930:	460a      	mov	r2, r1
 8005932:	71fb      	strb	r3, [r7, #7]
 8005934:	4613      	mov	r3, r2
 8005936:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 8005938:	2301      	movs	r3, #1
 800593a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800593e:	4b35      	ldr	r3, [pc, #212]	; (8005a14 <LmHandlerJoin+0xec>)
 8005940:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	2b02      	cmp	r3, #2
 800594e:	d110      	bne.n	8005972 <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8005950:	2302      	movs	r3, #2
 8005952:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8005956:	4b30      	ldr	r3, [pc, #192]	; (8005a18 <LmHandlerJoin+0xf0>)
 8005958:	2202      	movs	r2, #2
 800595a:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800595c:	4a2e      	ldr	r2, [pc, #184]	; (8005a18 <LmHandlerJoin+0xf0>)
 800595e:	79bb      	ldrb	r3, [r7, #6]
 8005960:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 8005962:	f002 f831 	bl	80079c8 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 8005966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800596a:	4618      	mov	r0, r3
 800596c:	f002 fda2 	bl	80084b4 <LoRaMacMlmeRequest>
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 8005970:	e04b      	b.n	8005a0a <LmHandlerJoin+0xe2>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 8005972:	2301      	movs	r3, #1
 8005974:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8005978:	4b27      	ldr	r3, [pc, #156]	; (8005a18 <LmHandlerJoin+0xf0>)
 800597a:	2201      	movs	r2, #1
 800597c:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800597e:	4b25      	ldr	r3, [pc, #148]	; (8005a14 <LmHandlerJoin+0xec>)
 8005980:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8005984:	4b24      	ldr	r3, [pc, #144]	; (8005a18 <LmHandlerJoin+0xf0>)
 8005986:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8005988:	4b23      	ldr	r3, [pc, #140]	; (8005a18 <LmHandlerJoin+0xf0>)
 800598a:	2200      	movs	r2, #0
 800598c:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800598e:	4a22      	ldr	r2, [pc, #136]	; (8005a18 <LmHandlerJoin+0xf0>)
 8005990:	79bb      	ldrb	r3, [r7, #6]
 8005992:	71d3      	strb	r3, [r2, #7]
        if (CtxRestoreDone == false)
 8005994:	4b21      	ldr	r3, [pc, #132]	; (8005a1c <LmHandlerJoin+0xf4>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	f083 0301 	eor.w	r3, r3, #1
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d01e      	beq.n	80059e0 <LmHandlerJoin+0xb8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 80059a2:	231e      	movs	r3, #30
 80059a4:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 80059a6:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <LmHandlerJoin+0xec>)
 80059a8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80059ac:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80059ae:	f107 0308 	add.w	r3, r7, #8
 80059b2:	4618      	mov	r0, r3
 80059b4:	f002 fa24 	bl	8007e00 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 80059b8:	231f      	movs	r3, #31
 80059ba:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 80059bc:	4b15      	ldr	r3, [pc, #84]	; (8005a14 <LmHandlerJoin+0xec>)
 80059be:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80059c2:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80059c4:	f107 0308 	add.w	r3, r7, #8
 80059c8:	4618      	mov	r0, r3
 80059ca:	f002 fa19 	bl	8007e00 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80059ce:	2328      	movs	r3, #40	; 0x28
 80059d0:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80059d2:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <LmHandlerJoin+0xf8>)
 80059d4:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 80059d6:	f107 0308 	add.w	r3, r7, #8
 80059da:	4618      	mov	r0, r3
 80059dc:	f002 fa10 	bl	8007e00 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 80059e0:	f001 fff2 	bl	80079c8 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 80059e4:	2301      	movs	r3, #1
 80059e6:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80059e8:	2301      	movs	r3, #1
 80059ea:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80059ec:	f107 0308 	add.w	r3, r7, #8
 80059f0:	4618      	mov	r0, r3
 80059f2:	f002 fa05 	bl	8007e00 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80059f6:	4b0b      	ldr	r3, [pc, #44]	; (8005a24 <LmHandlerJoin+0xfc>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	4806      	ldr	r0, [pc, #24]	; (8005a18 <LmHandlerJoin+0xf0>)
 80059fe:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8005a00:	4b04      	ldr	r3, [pc, #16]	; (8005a14 <LmHandlerJoin+0xec>)
 8005a02:	785b      	ldrb	r3, [r3, #1]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 f92b 	bl	8005c60 <LmHandlerRequestClass>
}
 8005a0a:	bf00      	nop
 8005a0c:	3740      	adds	r7, #64	; 0x40
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	200001d8 	.word	0x200001d8
 8005a18:	2000007c 	.word	0x2000007c
 8005a1c:	2000030a 	.word	0x2000030a
 8005a20:	01000300 	.word	0x01000300
 8005a24:	200001ec 	.word	0x200001ec

08005a28 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	; 0x28
 8005a2c:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8005a32:	463b      	mov	r3, r7
 8005a34:	4618      	mov	r0, r3
 8005a36:	f002 f85d 	bl	8007af4 <LoRaMacMibGetRequestConfirm>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 8005a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8005a48:	793b      	ldrb	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	e002      	b.n	8005a58 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 8005a56:	2300      	movs	r3, #0
    }
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3728      	adds	r7, #40	; 0x28
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	; 0x28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	70fb      	strb	r3, [r7, #3]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8005a70:	23ff      	movs	r3, #255	; 0xff
 8005a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 8005a76:	f000 ff4f 	bl	8006918 <LoRaMacIsBusy>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8005a80:	f06f 0301 	mvn.w	r3, #1
 8005a84:	e0b6      	b.n	8005bf4 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8005a86:	f7ff ffcf 	bl	8005a28 <LmHandlerJoinStatus>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d00a      	beq.n	8005aa6 <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8005a90:	4b5a      	ldr	r3, [pc, #360]	; (8005bfc <LmHandlerSend+0x19c>)
 8005a92:	799b      	ldrb	r3, [r3, #6]
 8005a94:	4a59      	ldr	r2, [pc, #356]	; (8005bfc <LmHandlerSend+0x19c>)
 8005a96:	79d2      	ldrb	r2, [r2, #7]
 8005a98:	4611      	mov	r1, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff ff44 	bl	8005928 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8005aa0:	f06f 0302 	mvn.w	r3, #2
 8005aa4:	e0a6      	b.n	8005bf4 <LmHandlerSend+0x194>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8005aa6:	4b56      	ldr	r3, [pc, #344]	; (8005c00 <LmHandlerSend+0x1a0>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4798      	blx	r3
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00d      	beq.n	8005ad0 <LmHandlerSend+0x70>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	781a      	ldrb	r2, [r3, #0]
 8005ab8:	4b51      	ldr	r3, [pc, #324]	; (8005c00 <LmHandlerSend+0x1a0>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d006      	beq.n	8005ad0 <LmHandlerSend+0x70>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <LmHandlerSend+0x70>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8005aca:	f06f 0303 	mvn.w	r3, #3
 8005ace:	e091      	b.n	8005bf4 <LmHandlerSend+0x194>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 8005ad0:	4a4c      	ldr	r2, [pc, #304]	; (8005c04 <LmHandlerSend+0x1a4>)
 8005ad2:	78fb      	ldrb	r3, [r7, #3]
 8005ad4:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8005ad6:	78fb      	ldrb	r3, [r7, #3]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	bf14      	ite	ne
 8005adc:	2301      	movne	r3, #1
 8005ade:	2300      	moveq	r3, #0
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8005ae4:	4b48      	ldr	r3, [pc, #288]	; (8005c08 <LmHandlerSend+0x1a8>)
 8005ae6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8005aea:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	785b      	ldrb	r3, [r3, #1]
 8005af0:	f107 020c 	add.w	r2, r7, #12
 8005af4:	4611      	mov	r1, r2
 8005af6:	4618      	mov	r0, r3
 8005af8:	f001 ff74 	bl	80079e4 <LoRaMacQueryTxPossible>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d009      	beq.n	8005b16 <LmHandlerSend+0xb6>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8005b02:	2300      	movs	r3, #0
 8005b04:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8005b0e:	23f9      	movs	r3, #249	; 0xf9
 8005b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b14:	e009      	b.n	8005b2a <LmHandlerSend+0xca>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	785b      	ldrb	r3, [r3, #1]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 8005b2a:	4b36      	ldr	r3, [pc, #216]	; (8005c04 <LmHandlerSend+0x1a4>)
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	3310      	adds	r3, #16
 8005b30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b34:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8005b38:	4b33      	ldr	r3, [pc, #204]	; (8005c08 <LmHandlerSend+0x1a8>)
 8005b3a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8005b3e:	4b31      	ldr	r3, [pc, #196]	; (8005c04 <LmHandlerSend+0x1a4>)
 8005b40:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8005b42:	78ba      	ldrb	r2, [r7, #2]
 8005b44:	f107 0310 	add.w	r3, r7, #16
 8005b48:	4611      	mov	r1, r2
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f002 fdf2 	bl	8008734 <LoRaMacMcpsRequest>
 8005b50:	4603      	mov	r3, r0
 8005b52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	4a2c      	ldr	r2, [pc, #176]	; (8005c0c <LmHandlerSend+0x1ac>)
 8005b5a:	6013      	str	r3, [r2, #0]

    switch (status)
 8005b5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b60:	2b11      	cmp	r3, #17
 8005b62:	d840      	bhi.n	8005be6 <LmHandlerSend+0x186>
 8005b64:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <LmHandlerSend+0x10c>)
 8005b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6a:	bf00      	nop
 8005b6c:	08005bb5 	.word	0x08005bb5
 8005b70:	08005bc7 	.word	0x08005bc7
 8005b74:	08005be7 	.word	0x08005be7
 8005b78:	08005be7 	.word	0x08005be7
 8005b7c:	08005be7 	.word	0x08005be7
 8005b80:	08005be7 	.word	0x08005be7
 8005b84:	08005be7 	.word	0x08005be7
 8005b88:	08005bcf 	.word	0x08005bcf
 8005b8c:	08005be7 	.word	0x08005be7
 8005b90:	08005be7 	.word	0x08005be7
 8005b94:	08005be7 	.word	0x08005be7
 8005b98:	08005bdf 	.word	0x08005bdf
 8005b9c:	08005be7 	.word	0x08005be7
 8005ba0:	08005be7 	.word	0x08005be7
 8005ba4:	08005bc7 	.word	0x08005bc7
 8005ba8:	08005bc7 	.word	0x08005bc7
 8005bac:	08005bc7 	.word	0x08005bc7
 8005bb0:	08005bd7 	.word	0x08005bd7
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 8005bb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005bb8:	f113 0f07 	cmn.w	r3, #7
 8005bbc:	d017      	beq.n	8005bee <LmHandlerSend+0x18e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8005bc4:	e013      	b.n	8005bee <LmHandlerSend+0x18e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 8005bc6:	23fe      	movs	r3, #254	; 0xfe
 8005bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8005bcc:	e010      	b.n	8005bf0 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8005bce:	23fd      	movs	r3, #253	; 0xfd
 8005bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8005bd4:	e00c      	b.n	8005bf0 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8005bd6:	23fb      	movs	r3, #251	; 0xfb
 8005bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8005bdc:	e008      	b.n	8005bf0 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8005bde:	23fa      	movs	r3, #250	; 0xfa
 8005be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8005be4:	e004      	b.n	8005bf0 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8005be6:	23ff      	movs	r3, #255	; 0xff
 8005be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8005bec:	e000      	b.n	8005bf0 <LmHandlerSend+0x190>
            break;
 8005bee:	bf00      	nop
    }

    return lmhStatus;
 8005bf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3728      	adds	r7, #40	; 0x28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	2000007c 	.word	0x2000007c
 8005c00:	200001c4 	.word	0x200001c4
 8005c04:	20000084 	.word	0x20000084
 8005c08:	200001d8 	.word	0x200001d8
 8005c0c:	20000214 	.word	0x20000214

08005c10 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 8005c16:	230a      	movs	r3, #10
 8005c18:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f002 fc49 	bl	80084b4 <LoRaMacMlmeRequest>
 8005c22:	4603      	mov	r3, r0
 8005c24:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	4a06      	ldr	r2, [pc, #24]	; (8005c44 <LmHandlerDeviceTimeReq+0x34>)
 8005c2a:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8005c32:	2300      	movs	r3, #0
 8005c34:	e001      	b.n	8005c3a <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8005c36:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000214 	.word	0x20000214

08005c48 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	4603      	mov	r3, r0
 8005c50:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 8005c52:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr

08005c60 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08c      	sub	sp, #48	; 0x30
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 8005c70:	f000 fe52 	bl	8006918 <LoRaMacIsBusy>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8005c7a:	f06f 0301 	mvn.w	r3, #1
 8005c7e:	e073      	b.n	8005d68 <LmHandlerRequestClass+0x108>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8005c80:	f7ff fed2 	bl	8005a28 <LmHandlerJoinStatus>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d002      	beq.n	8005c90 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8005c8a:	f06f 0302 	mvn.w	r3, #2
 8005c8e:	e06b      	b.n	8005d68 <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8005c90:	2300      	movs	r3, #0
 8005c92:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8005c94:	f107 0308 	add.w	r3, r7, #8
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f001 ff2b 	bl	8007af4 <LoRaMacMibGetRequestConfirm>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 8005ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca8:	e05e      	b.n	8005d68 <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 8005caa:	7b3b      	ldrb	r3, [r7, #12]
 8005cac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 8005cb0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8005cb4:	79fb      	ldrb	r3, [r7, #7]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d04d      	beq.n	8005d56 <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 8005cba:	79fb      	ldrb	r3, [r7, #7]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d028      	beq.n	8005d12 <LmHandlerRequestClass+0xb2>
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	dc4a      	bgt.n	8005d5a <LmHandlerRequestClass+0xfa>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <LmHandlerRequestClass+0x6e>
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d01e      	beq.n	8005d0a <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 8005ccc:	e045      	b.n	8005d5a <LmHandlerRequestClass+0xfa>
                if( currentClass != CLASS_A )
 8005cce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d043      	beq.n	8005d5e <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8005cda:	f107 0308 	add.w	r3, r7, #8
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f002 f88e 	bl	8007e00 <LoRaMacMibSetRequestConfirm>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10b      	bne.n	8005d02 <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8005cea:	4b21      	ldr	r3, [pc, #132]	; (8005d70 <LmHandlerRequestClass+0x110>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d034      	beq.n	8005d5e <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8005cf4:	4b1e      	ldr	r3, [pc, #120]	; (8005d70 <LmHandlerRequestClass+0x110>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfa:	79fa      	ldrb	r2, [r7, #7]
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4798      	blx	r3
            break;
 8005d00:	e02d      	b.n	8005d5e <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8005d02:	23ff      	movs	r3, #255	; 0xff
 8005d04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8005d08:	e029      	b.n	8005d5e <LmHandlerRequestClass+0xfe>
                errorStatus = LORAMAC_HANDLER_ERROR;
 8005d0a:	23ff      	movs	r3, #255	; 0xff
 8005d0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8005d10:	e028      	b.n	8005d64 <LmHandlerRequestClass+0x104>
                if( currentClass != CLASS_A )
 8005d12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8005d1a:	23ff      	movs	r3, #255	; 0xff
 8005d1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8005d20:	e01f      	b.n	8005d62 <LmHandlerRequestClass+0x102>
                    mibReq.Param.Class = newClass;
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8005d26:	f107 0308 	add.w	r3, r7, #8
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f002 f868 	bl	8007e00 <LoRaMacMibSetRequestConfirm>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10b      	bne.n	8005d4e <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8005d36:	4b0e      	ldr	r3, [pc, #56]	; (8005d70 <LmHandlerRequestClass+0x110>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d010      	beq.n	8005d62 <LmHandlerRequestClass+0x102>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8005d40:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <LmHandlerRequestClass+0x110>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d46:	79fa      	ldrb	r2, [r7, #7]
 8005d48:	4610      	mov	r0, r2
 8005d4a:	4798      	blx	r3
            break;
 8005d4c:	e009      	b.n	8005d62 <LmHandlerRequestClass+0x102>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8005d4e:	23ff      	movs	r3, #255	; 0xff
 8005d50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8005d54:	e005      	b.n	8005d62 <LmHandlerRequestClass+0x102>
        }
    }
 8005d56:	bf00      	nop
 8005d58:	e004      	b.n	8005d64 <LmHandlerRequestClass+0x104>
            break;
 8005d5a:	bf00      	nop
 8005d5c:	e002      	b.n	8005d64 <LmHandlerRequestClass+0x104>
            break;
 8005d5e:	bf00      	nop
 8005d60:	e000      	b.n	8005d64 <LmHandlerRequestClass+0x104>
            break;
 8005d62:	bf00      	nop
    return errorStatus;
 8005d64:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3730      	adds	r7, #48	; 0x30
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	200001ec 	.word	0x200001ec

08005d74 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08c      	sub	sp, #48	; 0x30
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d102      	bne.n	8005d88 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8005d82:	f04f 33ff 	mov.w	r3, #4294967295
 8005d86:	e010      	b.n	8005daa <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8005d8c:	f107 030c 	add.w	r3, r7, #12
 8005d90:	4618      	mov	r0, r3
 8005d92:	f001 feaf 	bl	8007af4 <LoRaMacMibGetRequestConfirm>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8005d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005da0:	e003      	b.n	8005daa <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 8005da2:	7c3a      	ldrb	r2, [r7, #16]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3730      	adds	r7, #48	; 0x30
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08c      	sub	sp, #48	; 0x30
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d102      	bne.n	8005dc8 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8005dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc6:	e016      	b.n	8005df6 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 8005dc8:	231f      	movs	r3, #31
 8005dca:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8005dcc:	f107 030c 	add.w	r3, r7, #12
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f001 fe8f 	bl	8007af4 <LoRaMacMibGetRequestConfirm>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8005ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8005de0:	e009      	b.n	8005df6 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 8005de2:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f993 2000 	ldrsb.w	r2, [r3]
 8005df0:	4b03      	ldr	r3, [pc, #12]	; (8005e00 <LmHandlerGetTxDatarate+0x4c>)
 8005df2:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3730      	adds	r7, #48	; 0x30
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	200001d8 	.word	0x200001d8

08005e04 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 8005e0c:	4b15      	ldr	r3, [pc, #84]	; (8005e64 <McpsConfirm+0x60>)
 8005e0e:	2201      	movs	r2, #1
 8005e10:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	785a      	ldrb	r2, [r3, #1]
 8005e16:	4b13      	ldr	r3, [pc, #76]	; (8005e64 <McpsConfirm+0x60>)
 8005e18:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	789b      	ldrb	r3, [r3, #2]
 8005e1e:	b25a      	sxtb	r2, r3
 8005e20:	4b10      	ldr	r3, [pc, #64]	; (8005e64 <McpsConfirm+0x60>)
 8005e22:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	4a0e      	ldr	r2, [pc, #56]	; (8005e64 <McpsConfirm+0x60>)
 8005e2a:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8005e32:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <McpsConfirm+0x60>)
 8005e34:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <McpsConfirm+0x60>)
 8005e3e:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	791b      	ldrb	r3, [r3, #4]
 8005e44:	461a      	mov	r2, r3
 8005e46:	4b07      	ldr	r3, [pc, #28]	; (8005e64 <McpsConfirm+0x60>)
 8005e48:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 8005e4a:	4b07      	ldr	r3, [pc, #28]	; (8005e68 <McpsConfirm+0x64>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e50:	4804      	ldr	r0, [pc, #16]	; (8005e64 <McpsConfirm+0x60>)
 8005e52:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	2000      	movs	r0, #0
 8005e58:	f000 f9c0 	bl	80061dc <LmHandlerPackagesNotify>
}
 8005e5c:	bf00      	nop
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	20000084 	.word	0x20000084
 8005e68:	200001ec 	.word	0x200001ec

08005e6c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 8005e76:	2300      	movs	r3, #0
 8005e78:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 8005e7a:	4b31      	ldr	r3, [pc, #196]	; (8005f40 <McpsIndication+0xd4>)
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	785a      	ldrb	r2, [r3, #1]
 8005e84:	4b2e      	ldr	r3, [pc, #184]	; (8005f40 <McpsIndication+0xd4>)
 8005e86:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8005e88:	4b2d      	ldr	r3, [pc, #180]	; (8005f40 <McpsIndication+0xd4>)
 8005e8a:	785b      	ldrb	r3, [r3, #1]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d153      	bne.n	8005f38 <McpsIndication+0xcc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	791b      	ldrb	r3, [r3, #4]
 8005e94:	b25a      	sxtb	r2, r3
 8005e96:	4b2a      	ldr	r3, [pc, #168]	; (8005f40 <McpsIndication+0xd4>)
 8005e98:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ea0:	b25a      	sxtb	r2, r3
 8005ea2:	4b27      	ldr	r3, [pc, #156]	; (8005f40 <McpsIndication+0xd4>)
 8005ea4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8005eac:	4b24      	ldr	r3, [pc, #144]	; (8005f40 <McpsIndication+0xd4>)
 8005eae:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	78da      	ldrb	r2, [r3, #3]
 8005eb4:	4b22      	ldr	r3, [pc, #136]	; (8005f40 <McpsIndication+0xd4>)
 8005eb6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	4a20      	ldr	r2, [pc, #128]	; (8005f40 <McpsIndication+0xd4>)
 8005ebe:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	78db      	ldrb	r3, [r3, #3]
 8005ec4:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	7b1b      	ldrb	r3, [r3, #12]
 8005eca:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8005ed2:	4b1c      	ldr	r3, [pc, #112]	; (8005f44 <McpsIndication+0xd8>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	f107 0218 	add.w	r2, r7, #24
 8005edc:	4918      	ldr	r1, [pc, #96]	; (8005f40 <McpsIndication+0xd4>)
 8005ede:	4610      	mov	r0, r2
 8005ee0:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 8005ee2:	4b18      	ldr	r3, [pc, #96]	; (8005f44 <McpsIndication+0xd8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d007      	beq.n	8005efc <McpsIndication+0x90>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	7e1b      	ldrb	r3, [r3, #24]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8005ef4:	4b13      	ldr	r3, [pc, #76]	; (8005f44 <McpsIndication+0xd8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efa:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8005efc:	6879      	ldr	r1, [r7, #4]
 8005efe:	2001      	movs	r0, #1
 8005f00:	f000 f96c 	bl	80061dc <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 8005f04:	f107 0317 	add.w	r3, r7, #23
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7ff ff33 	bl	8005d74 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	795b      	ldrb	r3, [r3, #5]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d111      	bne.n	8005f3a <McpsIndication+0xce>
 8005f16:	7dfb      	ldrb	r3, [r7, #23]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10e      	bne.n	8005f3a <McpsIndication+0xce>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	733b      	strb	r3, [r7, #12]
 8005f20:	2300      	movs	r3, #0
 8005f22:	737b      	strb	r3, [r7, #13]
 8005f24:	2300      	movs	r3, #0
 8005f26:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 8005f28:	f107 030c 	add.w	r3, r7, #12
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	2100      	movs	r1, #0
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff fd95 	bl	8005a60 <LmHandlerSend>
 8005f36:	e000      	b.n	8005f3a <McpsIndication+0xce>
        return;
 8005f38:	bf00      	nop
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 8005f3a:	3720      	adds	r7, #32
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	200000a0 	.word	0x200000a0
 8005f44:	200001ec 	.word	0x200001ec

08005f48 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08c      	sub	sp, #48	; 0x30
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 8005f50:	4b3d      	ldr	r3, [pc, #244]	; (8006048 <MlmeConfirm+0x100>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	785a      	ldrb	r2, [r3, #1]
 8005f5a:	4b3b      	ldr	r3, [pc, #236]	; (8006048 <MlmeConfirm+0x100>)
 8005f5c:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8005f5e:	4b3b      	ldr	r3, [pc, #236]	; (800604c <MlmeConfirm+0x104>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f64:	4838      	ldr	r0, [pc, #224]	; (8006048 <MlmeConfirm+0x100>)
 8005f66:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	2002      	movs	r0, #2
 8005f6c:	f000 f936 	bl	80061dc <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	3b01      	subs	r3, #1
 8005f76:	2b0c      	cmp	r3, #12
 8005f78:	d85e      	bhi.n	8006038 <MlmeConfirm+0xf0>
 8005f7a:	a201      	add	r2, pc, #4	; (adr r2, 8005f80 <MlmeConfirm+0x38>)
 8005f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f80:	08005fb5 	.word	0x08005fb5
 8005f84:	08006039 	.word	0x08006039
 8005f88:	08006039 	.word	0x08006039
 8005f8c:	08006007 	.word	0x08006007
 8005f90:	08006039 	.word	0x08006039
 8005f94:	08006039 	.word	0x08006039
 8005f98:	08006039 	.word	0x08006039
 8005f9c:	08006039 	.word	0x08006039
 8005fa0:	08006039 	.word	0x08006039
 8005fa4:	08006039 	.word	0x08006039
 8005fa8:	08006039 	.word	0x08006039
 8005fac:	0800601f 	.word	0x0800601f
 8005fb0:	08006039 	.word	0x08006039
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 8005fb4:	2306      	movs	r3, #6
 8005fb6:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8005fb8:	f107 030c 	add.w	r3, r7, #12
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f001 fd99 	bl	8007af4 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	4a22      	ldr	r2, [pc, #136]	; (8006050 <MlmeConfirm+0x108>)
 8005fc6:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8005fc8:	4822      	ldr	r0, [pc, #136]	; (8006054 <MlmeConfirm+0x10c>)
 8005fca:	f7ff fef3 	bl	8005db4 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	785b      	ldrb	r3, [r3, #1]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d108      	bne.n	8005fe8 <MlmeConfirm+0xa0>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8005fd6:	4b20      	ldr	r3, [pc, #128]	; (8006058 <MlmeConfirm+0x110>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8005fdc:	4b1f      	ldr	r3, [pc, #124]	; (800605c <MlmeConfirm+0x114>)
 8005fde:	785b      	ldrb	r3, [r3, #1]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff fe3d 	bl	8005c60 <LmHandlerRequestClass>
 8005fe6:	e002      	b.n	8005fee <MlmeConfirm+0xa6>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8005fe8:	4b1b      	ldr	r3, [pc, #108]	; (8006058 <MlmeConfirm+0x110>)
 8005fea:	22ff      	movs	r2, #255	; 0xff
 8005fec:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8005fee:	4b17      	ldr	r3, [pc, #92]	; (800604c <MlmeConfirm+0x104>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	4818      	ldr	r0, [pc, #96]	; (8006058 <MlmeConfirm+0x110>)
 8005ff6:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	785b      	ldrb	r3, [r3, #1]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d11d      	bne.n	800603c <MlmeConfirm+0xf4>
            {
                SecureElementPrintSessionKeys();
 8006000:	f7ff fabe 	bl	8005580 <SecureElementPrintSessionKeys>
            }
        }
        break;
 8006004:	e01a      	b.n	800603c <MlmeConfirm+0xf4>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 8006006:	4b16      	ldr	r3, [pc, #88]	; (8006060 <MlmeConfirm+0x118>)
 8006008:	2201      	movs	r2, #1
 800600a:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	7a1a      	ldrb	r2, [r3, #8]
 8006010:	4b13      	ldr	r3, [pc, #76]	; (8006060 <MlmeConfirm+0x118>)
 8006012:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	7a5a      	ldrb	r2, [r3, #9]
 8006018:	4b11      	ldr	r3, [pc, #68]	; (8006060 <MlmeConfirm+0x118>)
 800601a:	74da      	strb	r2, [r3, #19]
        }
        break;
 800601c:	e00f      	b.n	800603e <MlmeConfirm+0xf6>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	785b      	ldrb	r3, [r3, #1]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d105      	bne.n	8006032 <MlmeConfirm+0xea>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8006026:	4b0d      	ldr	r3, [pc, #52]	; (800605c <MlmeConfirm+0x114>)
 8006028:	7b1b      	ldrb	r3, [r3, #12]
 800602a:	4618      	mov	r0, r3
 800602c:	f7ff fe0c 	bl	8005c48 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 8006030:	e005      	b.n	800603e <MlmeConfirm+0xf6>
                LmHandlerDeviceTimeReq( );
 8006032:	f7ff fded 	bl	8005c10 <LmHandlerDeviceTimeReq>
        break;
 8006036:	e002      	b.n	800603e <MlmeConfirm+0xf6>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 8006038:	bf00      	nop
 800603a:	e000      	b.n	800603e <MlmeConfirm+0xf6>
        break;
 800603c:	bf00      	nop
    }
}
 800603e:	bf00      	nop
 8006040:	3730      	adds	r7, #48	; 0x30
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000084 	.word	0x20000084
 800604c:	200001ec 	.word	0x200001ec
 8006050:	20000058 	.word	0x20000058
 8006054:	20000080 	.word	0x20000080
 8006058:	2000007c 	.word	0x2000007c
 800605c:	200001d8 	.word	0x200001d8
 8006060:	200000a0 	.word	0x200000a0

08006064 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800606e:	4b2f      	ldr	r3, [pc, #188]	; (800612c <MlmeIndication+0xc8>)
 8006070:	2200      	movs	r2, #0
 8006072:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	785a      	ldrb	r2, [r3, #1]
 8006078:	4b2c      	ldr	r3, [pc, #176]	; (800612c <MlmeIndication+0xc8>)
 800607a:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	789b      	ldrb	r3, [r3, #2]
 8006080:	b25a      	sxtb	r2, r3
 8006082:	4b2a      	ldr	r3, [pc, #168]	; (800612c <MlmeIndication+0xc8>)
 8006084:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800608c:	b25a      	sxtb	r2, r3
 800608e:	4b27      	ldr	r3, [pc, #156]	; (800612c <MlmeIndication+0xc8>)
 8006090:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8006098:	4b24      	ldr	r3, [pc, #144]	; (800612c <MlmeIndication+0xc8>)
 800609a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	78da      	ldrb	r2, [r3, #3]
 80060a0:	4b22      	ldr	r3, [pc, #136]	; (800612c <MlmeIndication+0xc8>)
 80060a2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	4a20      	ldr	r2, [pc, #128]	; (800612c <MlmeIndication+0xc8>)
 80060aa:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2b0b      	cmp	r3, #11
 80060b2:	d009      	beq.n	80060c8 <MlmeIndication+0x64>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b0f      	cmp	r3, #15
 80060ba:	d005      	beq.n	80060c8 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80060bc:	4b1c      	ldr	r3, [pc, #112]	; (8006130 <MlmeIndication+0xcc>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c2:	491a      	ldr	r1, [pc, #104]	; (800612c <MlmeIndication+0xc8>)
 80060c4:	2000      	movs	r0, #0
 80060c6:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 80060c8:	6879      	ldr	r1, [r7, #4]
 80060ca:	2003      	movs	r0, #3
 80060cc:	f000 f886 	bl	80061dc <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b0f      	cmp	r3, #15
 80060d6:	d01e      	beq.n	8006116 <MlmeIndication+0xb2>
 80060d8:	2b0f      	cmp	r3, #15
 80060da:	dc1e      	bgt.n	800611a <MlmeIndication+0xb6>
 80060dc:	2b07      	cmp	r3, #7
 80060de:	d002      	beq.n	80060e6 <MlmeIndication+0x82>
 80060e0:	2b0b      	cmp	r3, #11
 80060e2:	d01c      	beq.n	800611e <MlmeIndication+0xba>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 80060e4:	e019      	b.n	800611a <MlmeIndication+0xb6>
            LmHandlerAppData_t appData =
 80060e6:	2300      	movs	r3, #0
 80060e8:	723b      	strb	r3, [r7, #8]
 80060ea:	2300      	movs	r3, #0
 80060ec:	727b      	strb	r3, [r7, #9]
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 80060f2:	4b10      	ldr	r3, [pc, #64]	; (8006134 <MlmeIndication+0xd0>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	4798      	blx	r3
 80060fa:	4603      	mov	r3, r0
 80060fc:	f083 0301 	eor.w	r3, r3, #1
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00d      	beq.n	8006122 <MlmeIndication+0xbe>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 8006106:	f107 0308 	add.w	r3, r7, #8
 800610a:	2201      	movs	r2, #1
 800610c:	2100      	movs	r1, #0
 800610e:	4618      	mov	r0, r3
 8006110:	f7ff fca6 	bl	8005a60 <LmHandlerSend>
        break;
 8006114:	e005      	b.n	8006122 <MlmeIndication+0xbe>
        break;
 8006116:	bf00      	nop
 8006118:	e004      	b.n	8006124 <MlmeIndication+0xc0>
        break;
 800611a:	bf00      	nop
 800611c:	e002      	b.n	8006124 <MlmeIndication+0xc0>
        break;
 800611e:	bf00      	nop
 8006120:	e000      	b.n	8006124 <MlmeIndication+0xc0>
        break;
 8006122:	bf00      	nop
    }
}
 8006124:	bf00      	nop
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	200000a0 	.word	0x200000a0
 8006130:	200001ec 	.word	0x200001ec
 8006134:	200001c4 	.word	0x200001c4

08006138 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	4603      	mov	r3, r0
 8006140:	6039      	str	r1, [r7, #0]
 8006142:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 8006144:	2300      	movs	r3, #0
 8006146:	60fb      	str	r3, [r7, #12]
    switch( id )
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d103      	bne.n	8006156 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800614e:	f000 f8e3 	bl	8006318 <LmhpCompliancePackageFactory>
 8006152:	60f8      	str	r0, [r7, #12]
            break;
 8006154:	e000      	b.n	8006158 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 8006156:	bf00      	nop
        }
    }
    if( package != NULL )
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d02b      	beq.n	80061b6 <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	4918      	ldr	r1, [pc, #96]	; (80061c4 <LmHandlerPackageRegister+0x8c>)
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	4a16      	ldr	r2, [pc, #88]	; (80061c4 <LmHandlerPackageRegister+0x8c>)
 800616c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006170:	4a15      	ldr	r2, [pc, #84]	; (80061c8 <LmHandlerPackageRegister+0x90>)
 8006172:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	4a13      	ldr	r2, [pc, #76]	; (80061c4 <LmHandlerPackageRegister+0x8c>)
 8006178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800617c:	4a13      	ldr	r2, [pc, #76]	; (80061cc <LmHandlerPackageRegister+0x94>)
 800617e:	62da      	str	r2, [r3, #44]	; 0x2c
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	4a10      	ldr	r2, [pc, #64]	; (80061c4 <LmHandlerPackageRegister+0x8c>)
 8006184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006188:	4a11      	ldr	r2, [pc, #68]	; (80061d0 <LmHandlerPackageRegister+0x98>)
 800618a:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800618c:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <LmHandlerPackageRegister+0x9c>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	490c      	ldr	r1, [pc, #48]	; (80061c4 <LmHandlerPackageRegister+0x8c>)
 8006194:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006198:	6992      	ldr	r2, [r2, #24]
 800619a:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800619c:	79fb      	ldrb	r3, [r7, #7]
 800619e:	4a09      	ldr	r2, [pc, #36]	; (80061c4 <LmHandlerPackageRegister+0x8c>)
 80061a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	4a0c      	ldr	r2, [pc, #48]	; (80061d8 <LmHandlerPackageRegister+0xa0>)
 80061a8:	6851      	ldr	r1, [r2, #4]
 80061aa:	4a0b      	ldr	r2, [pc, #44]	; (80061d8 <LmHandlerPackageRegister+0xa0>)
 80061ac:	7852      	ldrb	r2, [r2, #1]
 80061ae:	6838      	ldr	r0, [r7, #0]
 80061b0:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 80061b2:	2300      	movs	r3, #0
 80061b4:	e001      	b.n	80061ba <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 80061b6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	200001c4 	.word	0x200001c4
 80061c8:	08005929 	.word	0x08005929
 80061cc:	08005a61 	.word	0x08005a61
 80061d0:	08005c11 	.word	0x08005c11
 80061d4:	200001ec 	.word	0x200001ec
 80061d8:	200000b4 	.word	0x200000b4

080061dc <LmHandlerPackagesNotify>:
        return false;
    }
}

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	4603      	mov	r3, r0
 80061e4:	6039      	str	r1, [r7, #0]
 80061e6:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80061e8:	2300      	movs	r3, #0
 80061ea:	73fb      	strb	r3, [r7, #15]
 80061ec:	e07e      	b.n	80062ec <LmHandlerPackagesNotify+0x110>
    {
        if( LmHandlerPackages[i] != NULL )
 80061ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061f2:	4a43      	ldr	r2, [pc, #268]	; (8006300 <LmHandlerPackagesNotify+0x124>)
 80061f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d066      	beq.n	80062ca <LmHandlerPackagesNotify+0xee>
        {
            switch( notifyType )
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d865      	bhi.n	80062ce <LmHandlerPackagesNotify+0xf2>
 8006202:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <LmHandlerPackagesNotify+0x2c>)
 8006204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006208:	08006219 	.word	0x08006219
 800620c:	0800623b 	.word	0x0800623b
 8006210:	08006287 	.word	0x08006287
 8006214:	080062a9 	.word	0x080062a9
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8006218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800621c:	4a38      	ldr	r2, [pc, #224]	; (8006300 <LmHandlerPackagesNotify+0x124>)
 800621e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d054      	beq.n	80062d2 <LmHandlerPackagesNotify+0xf6>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8006228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800622c:	4a34      	ldr	r2, [pc, #208]	; (8006300 <LmHandlerPackagesNotify+0x124>)
 800622e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	6838      	ldr	r0, [r7, #0]
 8006236:	4798      	blx	r3
                    }
                    break;
 8006238:	e04b      	b.n	80062d2 <LmHandlerPackagesNotify+0xf6>
                }
                case PACKAGE_MCPS_INDICATION:
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800623a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800623e:	4a30      	ldr	r2, [pc, #192]	; (8006300 <LmHandlerPackagesNotify+0x124>)
 8006240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d045      	beq.n	80062d6 <LmHandlerPackagesNotify+0xfa>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800624a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800624e:	4a2c      	ldr	r2, [pc, #176]	; (8006300 <LmHandlerPackagesNotify+0x124>)
 8006250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006254:	781a      	ldrb	r2, [r3, #0]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800625a:	429a      	cmp	r2, r3
 800625c:	d00a      	beq.n	8006274 <LmHandlerPackagesNotify+0x98>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800625e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d137      	bne.n	80062d6 <LmHandlerPackagesNotify+0xfa>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 8006266:	4b26      	ldr	r3, [pc, #152]	; (8006300 <LmHandlerPackagesNotify+0x124>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	4798      	blx	r3
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d030      	beq.n	80062d6 <LmHandlerPackagesNotify+0xfa>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 8006274:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006278:	4a21      	ldr	r2, [pc, #132]	; (8006300 <LmHandlerPackagesNotify+0x124>)
 800627a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	6838      	ldr	r0, [r7, #0]
 8006282:	4798      	blx	r3
                    }
                    break;
 8006284:	e027      	b.n	80062d6 <LmHandlerPackagesNotify+0xfa>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8006286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800628a:	4a1d      	ldr	r2, [pc, #116]	; (8006300 <LmHandlerPackagesNotify+0x124>)
 800628c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d021      	beq.n	80062da <LmHandlerPackagesNotify+0xfe>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8006296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800629a:	4a19      	ldr	r2, [pc, #100]	; (8006300 <LmHandlerPackagesNotify+0x124>)
 800629c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	6838      	ldr	r0, [r7, #0]
 80062a4:	4798      	blx	r3
                    }
                    break;
 80062a6:	e018      	b.n	80062da <LmHandlerPackagesNotify+0xfe>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 80062a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062ac:	4a14      	ldr	r2, [pc, #80]	; (8006300 <LmHandlerPackagesNotify+0x124>)
 80062ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d012      	beq.n	80062de <LmHandlerPackagesNotify+0x102>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 80062b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062bc:	4a10      	ldr	r2, [pc, #64]	; (8006300 <LmHandlerPackagesNotify+0x124>)
 80062be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	6838      	ldr	r0, [r7, #0]
 80062c6:	4798      	blx	r3
                    }
                    break;
 80062c8:	e009      	b.n	80062de <LmHandlerPackagesNotify+0x102>
                default:
                {
                    break;
                }
            }
        }
 80062ca:	bf00      	nop
 80062cc:	e008      	b.n	80062e0 <LmHandlerPackagesNotify+0x104>
                    break;
 80062ce:	bf00      	nop
 80062d0:	e006      	b.n	80062e0 <LmHandlerPackagesNotify+0x104>
                    break;
 80062d2:	bf00      	nop
 80062d4:	e004      	b.n	80062e0 <LmHandlerPackagesNotify+0x104>
                    break;
 80062d6:	bf00      	nop
 80062d8:	e002      	b.n	80062e0 <LmHandlerPackagesNotify+0x104>
                    break;
 80062da:	bf00      	nop
 80062dc:	e000      	b.n	80062e0 <LmHandlerPackagesNotify+0x104>
                    break;
 80062de:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80062e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	3301      	adds	r3, #1
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	73fb      	strb	r3, [r7, #15]
 80062ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	f77f af7c 	ble.w	80061ee <LmHandlerPackagesNotify+0x12>
    }
}
 80062f6:	bf00      	nop
 80062f8:	bf00      	nop
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	200001c4 	.word	0x200001c4

08006304 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	4603      	mov	r3, r0
 800630c:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr

08006318 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 8006318:	b480      	push	{r7}
 800631a:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800631c:	4b02      	ldr	r3, [pc, #8]	; (8006328 <LmhpCompliancePackageFactory+0x10>)
}
 800631e:	4618      	mov	r0, r3
 8006320:	46bd      	mov	sp, r7
 8006322:	bc80      	pop	{r7}
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	200000bc 	.word	0x200000bc

0800632c <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	4613      	mov	r3, r2
 8006338:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00f      	beq.n	8006360 <LmhpComplianceInit+0x34>
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00c      	beq.n	8006360 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 8006346:	4a0c      	ldr	r2, [pc, #48]	; (8006378 <LmhpComplianceInit+0x4c>)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800634c:	4a0b      	ldr	r2, [pc, #44]	; (800637c <LmhpComplianceInit+0x50>)
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8006352:	4a0a      	ldr	r2, [pc, #40]	; (800637c <LmhpComplianceInit+0x50>)
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 8006358:	4b08      	ldr	r3, [pc, #32]	; (800637c <LmhpComplianceInit+0x50>)
 800635a:	2201      	movs	r2, #1
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	e006      	b.n	800636e <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <LmhpComplianceInit+0x4c>)
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 8006366:	4b05      	ldr	r3, [pc, #20]	; (800637c <LmhpComplianceInit+0x50>)
 8006368:	2200      	movs	r2, #0
 800636a:	701a      	strb	r2, [r3, #0]
    }
}
 800636c:	bf00      	nop
 800636e:	bf00      	nop
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr
 8006378:	20000338 	.word	0x20000338
 800637c:	20000324 	.word	0x20000324

08006380 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 8006384:	4b02      	ldr	r3, [pc, #8]	; (8006390 <LmhpComplianceIsInitialized+0x10>)
 8006386:	781b      	ldrb	r3, [r3, #0]
}
 8006388:	4618      	mov	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	bc80      	pop	{r7}
 800638e:	4770      	bx	lr
 8006390:	20000324 	.word	0x20000324

08006394 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8006398:	4b07      	ldr	r3, [pc, #28]	; (80063b8 <LmhpComplianceIsRunning+0x24>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	f083 0301 	eor.w	r3, r3, #1
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <LmhpComplianceIsRunning+0x16>
    {
        return false;
 80063a6:	2300      	movs	r3, #0
 80063a8:	e001      	b.n	80063ae <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 80063aa:	4b03      	ldr	r3, [pc, #12]	; (80063b8 <LmhpComplianceIsRunning+0x24>)
 80063ac:	785b      	ldrb	r3, [r3, #1]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bc80      	pop	{r7}
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	20000324 	.word	0x20000324

080063bc <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 80063c4:	4b0f      	ldr	r3, [pc, #60]	; (8006404 <LmhpComplianceOnMcpsConfirm+0x48>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	f083 0301 	eor.w	r3, r3, #1
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d112      	bne.n	80063f8 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 80063d2:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <LmhpComplianceOnMcpsConfirm+0x48>)
 80063d4:	785b      	ldrb	r3, [r3, #1]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00f      	beq.n	80063fa <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d10b      	bne.n	80063fa <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 80063ea:	4b06      	ldr	r3, [pc, #24]	; (8006404 <LmhpComplianceOnMcpsConfirm+0x48>)
 80063ec:	899b      	ldrh	r3, [r3, #12]
 80063ee:	3301      	adds	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	4b04      	ldr	r3, [pc, #16]	; (8006404 <LmhpComplianceOnMcpsConfirm+0x48>)
 80063f4:	819a      	strh	r2, [r3, #12]
 80063f6:	e000      	b.n	80063fa <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 80063f8:	bf00      	nop
    }
}
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bc80      	pop	{r7}
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	20000324 	.word	0x20000324

08006408 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8006410:	4b12      	ldr	r3, [pc, #72]	; (800645c <LmhpComplianceOnMlmeConfirm+0x54>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	f083 0301 	eor.w	r3, r3, #1
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d116      	bne.n	800644c <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800641e:	4b0f      	ldr	r3, [pc, #60]	; (800645c <LmhpComplianceOnMlmeConfirm+0x54>)
 8006420:	785b      	ldrb	r3, [r3, #1]
 8006422:	f083 0301 	eor.w	r3, r3, #1
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d111      	bne.n	8006450 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b04      	cmp	r3, #4
 8006432:	d10e      	bne.n	8006452 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 8006434:	4b09      	ldr	r3, [pc, #36]	; (800645c <LmhpComplianceOnMlmeConfirm+0x54>)
 8006436:	2201      	movs	r2, #1
 8006438:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	7a1a      	ldrb	r2, [r3, #8]
 800643e:	4b07      	ldr	r3, [pc, #28]	; (800645c <LmhpComplianceOnMlmeConfirm+0x54>)
 8006440:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	7a5a      	ldrb	r2, [r3, #9]
 8006446:	4b05      	ldr	r3, [pc, #20]	; (800645c <LmhpComplianceOnMlmeConfirm+0x54>)
 8006448:	741a      	strb	r2, [r3, #16]
 800644a:	e002      	b.n	8006452 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800644c:	bf00      	nop
 800644e:	e000      	b.n	8006452 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 8006450:	bf00      	nop
    }
}
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	bc80      	pop	{r7}
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	20000324 	.word	0x20000324

08006460 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8006466:	4b33      	ldr	r3, [pc, #204]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	f083 0301 	eor.w	r3, r3, #1
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 8006474:	f04f 33ff 	mov.w	r3, #4294967295
 8006478:	e057      	b.n	800652a <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.IsRunning == false )
 800647a:	4b2e      	ldr	r3, [pc, #184]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 800647c:	785b      	ldrb	r3, [r3, #1]
 800647e:	f083 0301 	eor.w	r3, r3, #1
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8006488:	2300      	movs	r3, #0
 800648a:	e04e      	b.n	800652a <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.LinkCheck == true )
 800648c:	4b29      	ldr	r3, [pc, #164]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 800648e:	7b9b      	ldrb	r3, [r3, #14]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d019      	beq.n	80064c8 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 8006494:	4b27      	ldr	r3, [pc, #156]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 8006496:	2200      	movs	r2, #0
 8006498:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800649a:	4b26      	ldr	r3, [pc, #152]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 800649c:	2203      	movs	r2, #3
 800649e:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 80064a0:	4b24      	ldr	r3, [pc, #144]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2205      	movs	r2, #5
 80064a6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 80064a8:	4b22      	ldr	r3, [pc, #136]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	3301      	adds	r3, #1
 80064ae:	4a21      	ldr	r2, [pc, #132]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 80064b0:	7bd2      	ldrb	r2, [r2, #15]
 80064b2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 80064b4:	4b1f      	ldr	r3, [pc, #124]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	3302      	adds	r3, #2
 80064ba:	4a1e      	ldr	r2, [pc, #120]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 80064bc:	7c12      	ldrb	r2, [r2, #16]
 80064be:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 80064c0:	4b1c      	ldr	r3, [pc, #112]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 80064c2:	2201      	movs	r2, #1
 80064c4:	709a      	strb	r2, [r3, #2]
 80064c6:	e01c      	b.n	8006502 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 80064c8:	4b1a      	ldr	r3, [pc, #104]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 80064ca:	789b      	ldrb	r3, [r3, #2]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d005      	beq.n	80064dc <LmhpComplianceTxProcess+0x7c>
 80064d0:	2b04      	cmp	r3, #4
 80064d2:	d116      	bne.n	8006502 <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 80064d4:	4b17      	ldr	r3, [pc, #92]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 80064d6:	2201      	movs	r2, #1
 80064d8:	709a      	strb	r2, [r3, #2]
            break;
 80064da:	e012      	b.n	8006502 <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 80064dc:	4b15      	ldr	r3, [pc, #84]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 80064de:	2202      	movs	r2, #2
 80064e0:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 80064e2:	4b14      	ldr	r3, [pc, #80]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 80064e4:	899b      	ldrh	r3, [r3, #12]
 80064e6:	0a1b      	lsrs	r3, r3, #8
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	4b12      	ldr	r3, [pc, #72]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 80064f2:	4b10      	ldr	r3, [pc, #64]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 80064f4:	899a      	ldrh	r2, [r3, #12]
 80064f6:	4b0f      	ldr	r3, [pc, #60]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	3301      	adds	r3, #1
 80064fc:	b2d2      	uxtb	r2, r2
 80064fe:	701a      	strb	r2, [r3, #0]
            break;
 8006500:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 8006502:	23e0      	movs	r3, #224	; 0xe0
 8006504:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 8006506:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 8006508:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800650a:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800650c:	4b09      	ldr	r3, [pc, #36]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 800650e:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 8006510:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 8006512:	4809      	ldr	r0, [pc, #36]	; (8006538 <LmhpComplianceTxProcess+0xd8>)
 8006514:	f008 fa94 	bl	800ea40 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 8006518:	4b08      	ldr	r3, [pc, #32]	; (800653c <LmhpComplianceTxProcess+0xdc>)
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	4a05      	ldr	r2, [pc, #20]	; (8006534 <LmhpComplianceTxProcess+0xd4>)
 800651e:	78d2      	ldrb	r2, [r2, #3]
 8006520:	4611      	mov	r1, r2
 8006522:	4638      	mov	r0, r7
 8006524:	2201      	movs	r2, #1
 8006526:	4798      	blx	r3
 8006528:	4603      	mov	r3, r0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20000324 	.word	0x20000324
 8006538:	2000030c 	.word	0x2000030c
 800653c:	200000bc 	.word	0x200000bc

08006540 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b0a2      	sub	sp, #136	; 0x88
 8006544:	af02      	add	r7, sp, #8
 8006546:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8006548:	4ba3      	ldr	r3, [pc, #652]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	f083 0301 	eor.w	r3, r3, #1
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	f040 81c2 	bne.w	80068dc <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	7b5b      	ldrb	r3, [r3, #13]
 800655c:	f083 0301 	eor.w	r3, r3, #1
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	f040 81bc 	bne.w	80068e0 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 8006568:	4b9b      	ldr	r3, [pc, #620]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 800656a:	785b      	ldrb	r3, [r3, #1]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00c      	beq.n	800658a <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	7b9b      	ldrb	r3, [r3, #14]
 8006574:	f083 0301 	eor.w	r3, r3, #1
 8006578:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800657a:	2b00      	cmp	r3, #0
 800657c:	d005      	beq.n	800658a <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800657e:	4b96      	ldr	r3, [pc, #600]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8006580:	899b      	ldrh	r3, [r3, #12]
 8006582:	3301      	adds	r3, #1
 8006584:	b29a      	uxth	r2, r3
 8006586:	4b94      	ldr	r3, [pc, #592]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8006588:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	78db      	ldrb	r3, [r3, #3]
 800658e:	2be0      	cmp	r3, #224	; 0xe0
 8006590:	f040 81a8 	bne.w	80068e4 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8006594:	4b90      	ldr	r3, [pc, #576]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8006596:	785b      	ldrb	r3, [r3, #1]
 8006598:	f083 0301 	eor.w	r3, r3, #1
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d060      	beq.n	8006664 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	7b1b      	ldrb	r3, [r3, #12]
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	f040 81a1 	bne.w	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	f040 819b 	bne.w	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	3301      	adds	r3, #1
 80065be:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	f040 8194 	bne.w	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	3302      	adds	r3, #2
 80065cc:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	f040 818d 	bne.w	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	3303      	adds	r3, #3
 80065da:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80065dc:	2b01      	cmp	r3, #1
 80065de:	f040 8186 	bne.w	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 80065e2:	4b7d      	ldr	r3, [pc, #500]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 80065e8:	4b7b      	ldr	r3, [pc, #492]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 80065ea:	22e0      	movs	r2, #224	; 0xe0
 80065ec:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 80065ee:	4b7a      	ldr	r3, [pc, #488]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 80065f0:	2202      	movs	r2, #2
 80065f2:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 80065f4:	4b78      	ldr	r3, [pc, #480]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 80065fa:	4b77      	ldr	r3, [pc, #476]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8006600:	4b75      	ldr	r3, [pc, #468]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8006602:	2200      	movs	r2, #0
 8006604:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8006606:	4b74      	ldr	r3, [pc, #464]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8006608:	2200      	movs	r2, #0
 800660a:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800660c:	4b72      	ldr	r3, [pc, #456]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 800660e:	2201      	movs	r2, #1
 8006610:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8006612:	4b71      	ldr	r3, [pc, #452]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8006614:	2201      	movs	r2, #1
 8006616:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 8006618:	2304      	movs	r3, #4
 800661a:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800661c:	2301      	movs	r3, #1
 800661e:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006620:	f107 0308 	add.w	r3, r7, #8
 8006624:	4618      	mov	r0, r3
 8006626:	f001 fbeb 	bl	8007e00 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800662a:	2000      	movs	r0, #0
 800662c:	f002 f978 	bl	8008920 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8006630:	4b6a      	ldr	r3, [pc, #424]	; (80067dc <LmhpComplianceOnMcpsIndication+0x29c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800663a:	4b68      	ldr	r3, [pc, #416]	; (80067dc <LmhpComplianceOnMcpsIndication+0x29c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8006642:	2300      	movs	r3, #0
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	4b66      	ldr	r3, [pc, #408]	; (80067e0 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006648:	2200      	movs	r2, #0
 800664a:	f04f 31ff 	mov.w	r1, #4294967295
 800664e:	4865      	ldr	r0, [pc, #404]	; (80067e4 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8006650:	f008 f9c0 	bl	800e9d4 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8006654:	f241 3188 	movw	r1, #5000	; 0x1388
 8006658:	4862      	ldr	r0, [pc, #392]	; (80067e4 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800665a:	f008 facf 	bl	800ebfc <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800665e:	f7ff feff 	bl	8006460 <LmhpComplianceTxProcess>
 8006662:	e144      	b.n	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	781a      	ldrb	r2, [r3, #0]
 800666a:	4b5b      	ldr	r3, [pc, #364]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 800666c:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800666e:	4b5a      	ldr	r3, [pc, #360]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8006670:	789b      	ldrb	r3, [r3, #2]
 8006672:	2b0a      	cmp	r3, #10
 8006674:	f200 8138 	bhi.w	80068e8 <LmhpComplianceOnMcpsIndication+0x3a8>
 8006678:	a201      	add	r2, pc, #4	; (adr r2, 8006680 <LmhpComplianceOnMcpsIndication+0x140>)
 800667a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667e:	bf00      	nop
 8006680:	080066ad 	.word	0x080066ad
 8006684:	080066f7 	.word	0x080066f7
 8006688:	080066ff 	.word	0x080066ff
 800668c:	0800670d 	.word	0x0800670d
 8006690:	0800671b 	.word	0x0800671b
 8006694:	08006773 	.word	0x08006773
 8006698:	08006785 	.word	0x08006785
 800669c:	080067ed 	.word	0x080067ed
 80066a0:	08006895 	.word	0x08006895
 80066a4:	080068a7 	.word	0x080068a7
 80066a8:	080068c1 	.word	0x080068c1
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 80066ac:	484d      	ldr	r0, [pc, #308]	; (80067e4 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80066ae:	f008 fa35 	bl	800eb1c <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 80066b2:	4b49      	ldr	r3, [pc, #292]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 80066b8:	4b47      	ldr	r3, [pc, #284]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 80066be:	2304      	movs	r3, #4
 80066c0:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80066c2:	4b46      	ldr	r3, [pc, #280]	; (80067dc <LmhpComplianceOnMcpsIndication+0x29c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80066ca:	f107 0308 	add.w	r3, r7, #8
 80066ce:	4618      	mov	r0, r3
 80066d0:	f001 fb96 	bl	8007e00 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80066d4:	4b41      	ldr	r3, [pc, #260]	; (80067dc <LmhpComplianceOnMcpsIndication+0x29c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	785b      	ldrb	r3, [r3, #1]
 80066da:	4618      	mov	r0, r3
 80066dc:	f002 f920 	bl	8008920 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 80066e0:	4b3e      	ldr	r3, [pc, #248]	; (80067dc <LmhpComplianceOnMcpsIndication+0x29c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 8100 	beq.w	80068ec <LmhpComplianceOnMcpsIndication+0x3ac>
                {
                    LmhpComplianceParams->StartPeripherals( );
 80066ec:	4b3b      	ldr	r3, [pc, #236]	; (80067dc <LmhpComplianceOnMcpsIndication+0x29c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	4798      	blx	r3
                }
            }
            break;
 80066f4:	e0fa      	b.n	80068ec <LmhpComplianceOnMcpsIndication+0x3ac>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 80066f6:	4b38      	ldr	r3, [pc, #224]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 80066f8:	2202      	movs	r2, #2
 80066fa:	719a      	strb	r2, [r3, #6]
            break;
 80066fc:	e0f7      	b.n	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 80066fe:	4b36      	ldr	r3, [pc, #216]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8006700:	2201      	movs	r2, #1
 8006702:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8006704:	4b34      	ldr	r3, [pc, #208]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8006706:	2201      	movs	r2, #1
 8006708:	709a      	strb	r2, [r3, #2]
            break;
 800670a:	e0f0      	b.n	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800670c:	4b32      	ldr	r3, [pc, #200]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 800670e:	2200      	movs	r2, #0
 8006710:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8006712:	4b31      	ldr	r3, [pc, #196]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8006714:	2201      	movs	r2, #1
 8006716:	709a      	strb	r2, [r3, #2]
            break;
 8006718:	e0e9      	b.n	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	7b1a      	ldrb	r2, [r3, #12]
 800671e:	4b2e      	ldr	r3, [pc, #184]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8006720:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 8006722:	4b2d      	ldr	r3, [pc, #180]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	2204      	movs	r2, #4
 8006728:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800672a:	2301      	movs	r3, #1
 800672c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006730:	e012      	b.n	8006758 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	689a      	ldr	r2, [r3, #8]
 8006736:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800673a:	4413      	add	r3, r2
 800673c:	781a      	ldrb	r2, [r3, #0]
 800673e:	4b26      	ldr	r3, [pc, #152]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8006740:	6899      	ldr	r1, [r3, #8]
 8006742:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006746:	440b      	add	r3, r1
 8006748:	3201      	adds	r2, #1
 800674a:	b2d2      	uxtb	r2, r2
 800674c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800674e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006752:	3301      	adds	r3, #1
 8006754:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006758:	4b1f      	ldr	r3, [pc, #124]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 800675a:	795a      	ldrb	r2, [r3, #5]
 800675c:	4b1e      	ldr	r3, [pc, #120]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 800675e:	799b      	ldrb	r3, [r3, #6]
 8006760:	4293      	cmp	r3, r2
 8006762:	bf28      	it	cs
 8006764:	4613      	movcs	r3, r2
 8006766:	b2db      	uxtb	r3, r3
 8006768:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800676c:	429a      	cmp	r2, r3
 800676e:	d3e0      	bcc.n	8006732 <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 8006770:	e0bd      	b.n	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 8006772:	2304      	movs	r3, #4
 8006774:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 8006778:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800677c:	4618      	mov	r0, r3
 800677e:	f001 fe99 	bl	80084b4 <LoRaMacMlmeRequest>
            }
            break;
 8006782:	e0b4      	b.n	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 8006784:	4817      	ldr	r0, [pc, #92]	; (80067e4 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8006786:	f008 f9c9 	bl	800eb1c <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800678a:	4b13      	ldr	r3, [pc, #76]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 800678c:	2200      	movs	r2, #0
 800678e:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8006790:	4b11      	ldr	r3, [pc, #68]	; (80067d8 <LmhpComplianceOnMcpsIndication+0x298>)
 8006792:	2200      	movs	r2, #0
 8006794:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 8006796:	2304      	movs	r3, #4
 8006798:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800679a:	4b10      	ldr	r3, [pc, #64]	; (80067dc <LmhpComplianceOnMcpsIndication+0x29c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80067a2:	f107 0308 	add.w	r3, r7, #8
 80067a6:	4618      	mov	r0, r3
 80067a8:	f001 fb2a 	bl	8007e00 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80067ac:	4b0b      	ldr	r3, [pc, #44]	; (80067dc <LmhpComplianceOnMcpsIndication+0x29c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	785b      	ldrb	r3, [r3, #1]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f002 f8b4 	bl	8008920 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 80067b8:	4b08      	ldr	r3, [pc, #32]	; (80067dc <LmhpComplianceOnMcpsIndication+0x29c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 80067c2:	4b06      	ldr	r3, [pc, #24]	; (80067dc <LmhpComplianceOnMcpsIndication+0x29c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 80067ca:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <LmhpComplianceOnMcpsIndication+0x2a8>)
 80067cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ce:	2101      	movs	r1, #1
 80067d0:	2002      	movs	r0, #2
 80067d2:	4798      	blx	r3
            }
            break;
 80067d4:	e08b      	b.n	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
 80067d6:	bf00      	nop
 80067d8:	20000324 	.word	0x20000324
 80067dc:	20000338 	.word	0x20000338
 80067e0:	08006905 	.word	0x08006905
 80067e4:	2000030c 	.word	0x2000030c
 80067e8:	200000bc 	.word	0x200000bc
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	7b1b      	ldrb	r3, [r3, #12]
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d113      	bne.n	800681c <LmhpComplianceOnMcpsIndication+0x2dc>
                {
                    mlmeReq.Type = MLME_TXCW;
 80067f4:	2305      	movs	r3, #5
 80067f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	3301      	adds	r3, #1
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	021b      	lsls	r3, r3, #8
 8006804:	b21a      	sxth	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	3302      	adds	r3, #2
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	b21b      	sxth	r3, r3
 8006810:	4313      	orrs	r3, r2
 8006812:	b21b      	sxth	r3, r3
 8006814:	b29b      	uxth	r3, r3
 8006816:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800681a:	e032      	b.n	8006882 <LmhpComplianceOnMcpsIndication+0x342>
                }
                else if( mcpsIndication->BufferSize == 7 )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	7b1b      	ldrb	r3, [r3, #12]
 8006820:	2b07      	cmp	r3, #7
 8006822:	d12e      	bne.n	8006882 <LmhpComplianceOnMcpsIndication+0x342>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 8006824:	2306      	movs	r3, #6
 8006826:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	3301      	adds	r3, #1
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	021b      	lsls	r3, r3, #8
 8006834:	b21a      	sxth	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	3302      	adds	r3, #2
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	b21b      	sxth	r3, r3
 8006840:	4313      	orrs	r3, r2
 8006842:	b21b      	sxth	r3, r3
 8006844:	b29b      	uxth	r3, r3
 8006846:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	3303      	adds	r3, #3
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	041a      	lsls	r2, r3, #16
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	3304      	adds	r3, #4
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	021b      	lsls	r3, r3, #8
 800685e:	4313      	orrs	r3, r2
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	6892      	ldr	r2, [r2, #8]
 8006864:	3205      	adds	r2, #5
 8006866:	7812      	ldrb	r2, [r2, #0]
 8006868:	4313      	orrs	r3, r2
 800686a:	461a      	mov	r2, r3
 800686c:	2364      	movs	r3, #100	; 0x64
 800686e:	fb02 f303 	mul.w	r3, r2, r3
 8006872:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	3306      	adds	r3, #6
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	b25b      	sxtb	r3, r3
 800687e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 8006882:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006886:	4618      	mov	r0, r3
 8006888:	f001 fe14 	bl	80084b4 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800688c:	4b19      	ldr	r3, [pc, #100]	; (80068f4 <LmhpComplianceOnMcpsIndication+0x3b4>)
 800688e:	2201      	movs	r2, #1
 8006890:	709a      	strb	r2, [r3, #2]
            }
            break;
 8006892:	e02c      	b.n	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 8006894:	230a      	movs	r3, #10
 8006896:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800689a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800689e:	4618      	mov	r0, r3
 80068a0:	f001 fe08 	bl	80084b4 <LoRaMacMlmeRequest>
            }
            break;
 80068a4:	e023      	b.n	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 80068a6:	2300      	movs	r3, #0
 80068a8:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	3301      	adds	r3, #1
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80068b4:	f107 0308 	add.w	r3, r7, #8
 80068b8:	4618      	mov	r0, r3
 80068ba:	f001 faa1 	bl	8007e00 <LoRaMacMibSetRequestConfirm>
            }
            break;
 80068be:	e016      	b.n	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 80068c0:	230d      	movs	r3, #13
 80068c2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	785b      	ldrb	r3, [r3, #1]
 80068cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 80068d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80068d4:	4618      	mov	r0, r3
 80068d6:	f001 fded 	bl	80084b4 <LoRaMacMlmeRequest>
            }
            break;
 80068da:	e008      	b.n	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 80068dc:	bf00      	nop
 80068de:	e006      	b.n	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 80068e0:	bf00      	nop
 80068e2:	e004      	b.n	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 80068e4:	bf00      	nop
 80068e6:	e002      	b.n	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
        default:
            break;
 80068e8:	bf00      	nop
 80068ea:	e000      	b.n	80068ee <LmhpComplianceOnMcpsIndication+0x3ae>
            break;
 80068ec:	bf00      	nop
        }
    }
}
 80068ee:	3780      	adds	r7, #128	; 0x80
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	20000324 	.word	0x20000324

080068f8 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 80068f8:	b480      	push	{r7}
 80068fa:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 80068fc:	bf00      	nop
 80068fe:	46bd      	mov	sp, r7
 8006900:	bc80      	pop	{r7}
 8006902:	4770      	bx	lr

08006904 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800690c:	f7ff fda8 	bl	8006460 <LmhpComplianceTxProcess>
}
 8006910:	bf00      	nop
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <LoRaMacIsBusy>:
        }
    }
}

bool LoRaMacIsBusy( void )
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800691c:	4b08      	ldr	r3, [pc, #32]	; (8006940 <LoRaMacIsBusy+0x28>)
 800691e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8006922:	2b00      	cmp	r3, #0
 8006924:	d106      	bne.n	8006934 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8006926:	4b06      	ldr	r3, [pc, #24]	; (8006940 <LoRaMacIsBusy+0x28>)
 8006928:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <LoRaMacIsBusy+0x1c>
    {
        return false;
 8006930:	2300      	movs	r3, #0
 8006932:	e000      	b.n	8006936 <LoRaMacIsBusy+0x1e>
    }
    return true;
 8006934:	2301      	movs	r3, #1
}
 8006936:	4618      	mov	r0, r3
 8006938:	46bd      	mov	sp, r7
 800693a:	bc80      	pop	{r7}
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	2000033c 	.word	0x2000033c

08006944 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8006944:	b5b0      	push	{r4, r5, r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	4603      	mov	r3, r0
 800694c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800694e:	2303      	movs	r3, #3
 8006950:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8006952:	4b61      	ldr	r3, [pc, #388]	; (8006ad8 <SwitchClass+0x194>)
 8006954:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8006958:	2b02      	cmp	r3, #2
 800695a:	f000 80a5 	beq.w	8006aa8 <SwitchClass+0x164>
 800695e:	2b02      	cmp	r3, #2
 8006960:	f300 80b4 	bgt.w	8006acc <SwitchClass+0x188>
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <SwitchClass+0x2c>
 8006968:	2b01      	cmp	r3, #1
 800696a:	f000 808f 	beq.w	8006a8c <SwitchClass+0x148>
 800696e:	e0ad      	b.n	8006acc <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8006970:	79fb      	ldrb	r3, [r7, #7]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d107      	bne.n	8006986 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8006976:	4b58      	ldr	r3, [pc, #352]	; (8006ad8 <SwitchClass+0x194>)
 8006978:	4a57      	ldr	r2, [pc, #348]	; (8006ad8 <SwitchClass+0x194>)
 800697a:	336c      	adds	r3, #108	; 0x6c
 800697c:	3264      	adds	r2, #100	; 0x64
 800697e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006982:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 8006986:	79fb      	ldrb	r3, [r7, #7]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d10c      	bne.n	80069a6 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800698c:	79fb      	ldrb	r3, [r7, #7]
 800698e:	4618      	mov	r0, r3
 8006990:	f002 f901 	bl	8008b96 <LoRaMacClassBSwitchClass>
 8006994:	4603      	mov	r3, r0
 8006996:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8006998:	7bfb      	ldrb	r3, [r7, #15]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d103      	bne.n	80069a6 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800699e:	4a4e      	ldr	r2, [pc, #312]	; (8006ad8 <SwitchClass+0x194>)
 80069a0:	79fb      	ldrb	r3, [r7, #7]
 80069a2:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 80069a6:	79fb      	ldrb	r3, [r7, #7]
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	f040 808a 	bne.w	8006ac2 <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80069ae:	4a4a      	ldr	r2, [pc, #296]	; (8006ad8 <SwitchClass+0x194>)
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80069b6:	4a49      	ldr	r2, [pc, #292]	; (8006adc <SwitchClass+0x198>)
 80069b8:	4b48      	ldr	r3, [pc, #288]	; (8006adc <SwitchClass+0x198>)
 80069ba:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 80069be:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 80069c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069c6:	682b      	ldr	r3, [r5, #0]
 80069c8:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80069ca:	4b44      	ldr	r3, [pc, #272]	; (8006adc <SwitchClass+0x198>)
 80069cc:	2202      	movs	r2, #2
 80069ce:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80069d2:	2300      	movs	r3, #0
 80069d4:	73bb      	strb	r3, [r7, #14]
 80069d6:	e049      	b.n	8006a6c <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 80069d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069dc:	4a3e      	ldr	r2, [pc, #248]	; (8006ad8 <SwitchClass+0x194>)
 80069de:	212c      	movs	r1, #44	; 0x2c
 80069e0:	fb01 f303 	mul.w	r3, r1, r3
 80069e4:	4413      	add	r3, r2
 80069e6:	33da      	adds	r3, #218	; 0xda
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d038      	beq.n	8006a60 <SwitchClass+0x11c>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80069ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069f2:	4a39      	ldr	r2, [pc, #228]	; (8006ad8 <SwitchClass+0x194>)
 80069f4:	212c      	movs	r1, #44	; 0x2c
 80069f6:	fb01 f303 	mul.w	r3, r1, r3
 80069fa:	4413      	add	r3, r2
 80069fc:	33f0      	adds	r3, #240	; 0xf0
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a35      	ldr	r2, [pc, #212]	; (8006ad8 <SwitchClass+0x194>)
 8006a02:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8006a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a08:	4a33      	ldr	r2, [pc, #204]	; (8006ad8 <SwitchClass+0x194>)
 8006a0a:	212c      	movs	r1, #44	; 0x2c
 8006a0c:	fb01 f303 	mul.w	r3, r1, r3
 8006a10:	4413      	add	r3, r2
 8006a12:	33f4      	adds	r3, #244	; 0xf4
 8006a14:	f993 3000 	ldrsb.w	r3, [r3]
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	4b2f      	ldr	r3, [pc, #188]	; (8006ad8 <SwitchClass+0x194>)
 8006a1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8006a20:	4b2e      	ldr	r3, [pc, #184]	; (8006adc <SwitchClass+0x198>)
 8006a22:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8006a26:	4b2d      	ldr	r3, [pc, #180]	; (8006adc <SwitchClass+0x198>)
 8006a28:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8006a2c:	4b2a      	ldr	r3, [pc, #168]	; (8006ad8 <SwitchClass+0x194>)
 8006a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a30:	4a2a      	ldr	r2, [pc, #168]	; (8006adc <SwitchClass+0x198>)
 8006a32:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8006a36:	4b28      	ldr	r3, [pc, #160]	; (8006ad8 <SwitchClass+0x194>)
 8006a38:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8006a3c:	4b27      	ldr	r3, [pc, #156]	; (8006adc <SwitchClass+0x198>)
 8006a3e:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8006a42:	4b25      	ldr	r3, [pc, #148]	; (8006ad8 <SwitchClass+0x194>)
 8006a44:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8006a48:	4b24      	ldr	r3, [pc, #144]	; (8006adc <SwitchClass+0x198>)
 8006a4a:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8006a4e:	4b23      	ldr	r3, [pc, #140]	; (8006adc <SwitchClass+0x198>)
 8006a50:	2203      	movs	r2, #3
 8006a52:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8006a56:	4b21      	ldr	r3, [pc, #132]	; (8006adc <SwitchClass+0x198>)
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8006a5e:	e009      	b.n	8006a74 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8006a60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	3301      	adds	r3, #1
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	73bb      	strb	r3, [r7, #14]
 8006a6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	ddb1      	ble.n	80069d8 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8006a74:	4b19      	ldr	r3, [pc, #100]	; (8006adc <SwitchClass+0x198>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8006a7c:	4b18      	ldr	r3, [pc, #96]	; (8006ae0 <SwitchClass+0x19c>)
 8006a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a80:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8006a82:	f000 fcb5 	bl	80073f0 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8006a8a:	e01a      	b.n	8006ac2 <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8006a8c:	79fb      	ldrb	r3, [r7, #7]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f002 f881 	bl	8008b96 <LoRaMacClassBSwitchClass>
 8006a94:	4603      	mov	r3, r0
 8006a96:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8006a98:	7bfb      	ldrb	r3, [r7, #15]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d113      	bne.n	8006ac6 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8006a9e:	4a0e      	ldr	r2, [pc, #56]	; (8006ad8 <SwitchClass+0x194>)
 8006aa0:	79fb      	ldrb	r3, [r7, #7]
 8006aa2:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 8006aa6:	e00e      	b.n	8006ac6 <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8006aa8:	79fb      	ldrb	r3, [r7, #7]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10d      	bne.n	8006aca <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8006aae:	4a0a      	ldr	r2, [pc, #40]	; (8006ad8 <SwitchClass+0x194>)
 8006ab0:	79fb      	ldrb	r3, [r7, #7]
 8006ab2:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8006ab6:	4b0a      	ldr	r3, [pc, #40]	; (8006ae0 <SwitchClass+0x19c>)
 8006ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aba:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8006ac0:	e003      	b.n	8006aca <SwitchClass+0x186>
            break;
 8006ac2:	bf00      	nop
 8006ac4:	e002      	b.n	8006acc <SwitchClass+0x188>
            break;
 8006ac6:	bf00      	nop
 8006ac8:	e000      	b.n	8006acc <SwitchClass+0x188>
            break;
 8006aca:	bf00      	nop
        }
    }

    return status;
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000848 	.word	0x20000848
 8006adc:	2000033c 	.word	0x2000033c
 8006ae0:	0800f3f0 	.word	0x0800f3f0

08006ae4 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8006aee:	4b10      	ldr	r3, [pc, #64]	; (8006b30 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8006af0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006af4:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8006afa:	230d      	movs	r3, #13
 8006afc:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8006afe:	4b0c      	ldr	r3, [pc, #48]	; (8006b30 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8006b00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8006b08:	230e      	movs	r3, #14
 8006b0a:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006b0c:	4b08      	ldr	r3, [pc, #32]	; (8006b30 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8006b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b12:	f107 0210 	add.w	r2, r7, #16
 8006b16:	4611      	mov	r1, r2
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f002 fefe 	bl	800991a <RegionGetPhyParam>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	b2db      	uxtb	r3, r3
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000848 	.word	0x20000848

08006b34 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	71fb      	strb	r3, [r7, #7]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	71bb      	strb	r3, [r7, #6]
 8006b42:	4613      	mov	r3, r2
 8006b44:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8006b4e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff ffc6 	bl	8006ae4 <GetMaxAppPayloadWithoutFOptsLength>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8006b5c:	79fb      	ldrb	r3, [r7, #7]
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	797b      	ldrb	r3, [r7, #5]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	4413      	add	r3, r2
 8006b66:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8006b68:	89ba      	ldrh	r2, [r7, #12]
 8006b6a:	89fb      	ldrh	r3, [r7, #14]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d804      	bhi.n	8006b7a <ValidatePayloadLength+0x46>
 8006b70:	89bb      	ldrh	r3, [r7, #12]
 8006b72:	2bff      	cmp	r3, #255	; 0xff
 8006b74:	d801      	bhi.n	8006b7a <ValidatePayloadLength+0x46>
    {
        return true;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e000      	b.n	8006b7c <ValidatePayloadLength+0x48>
    }
    return false;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <Send>:
    }
}

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08e      	sub	sp, #56	; 0x38
 8006b88:	af02      	add	r7, sp, #8
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	607a      	str	r2, [r7, #4]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	460b      	mov	r3, r1
 8006b92:	72fb      	strb	r3, [r7, #11]
 8006b94:	4613      	mov	r3, r2
 8006b96:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8006b9e:	4b65      	ldr	r3, [pc, #404]	; (8006d34 <Send+0x1b0>)
 8006ba0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ba4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8006ba8:	4b62      	ldr	r3, [pc, #392]	; (8006d34 <Send+0x1b0>)
 8006baa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006bae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8006bb2:	4b60      	ldr	r3, [pc, #384]	; (8006d34 <Send+0x1b0>)
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8006bb8:	4b5e      	ldr	r3, [pc, #376]	; (8006d34 <Send+0x1b0>)
 8006bba:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8006bc2:	2307      	movs	r3, #7
 8006bc4:	e0b1      	b.n	8006d2a <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8006bc6:	4b5b      	ldr	r3, [pc, #364]	; (8006d34 <Send+0x1b0>)
 8006bc8:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d102      	bne.n	8006bd6 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8006bd0:	4b58      	ldr	r3, [pc, #352]	; (8006d34 <Send+0x1b0>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8006bdc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006be0:	f36f 0303 	bfc	r3, #0, #4
 8006be4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8006be8:	4b52      	ldr	r3, [pc, #328]	; (8006d34 <Send+0x1b0>)
 8006bea:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8006bee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006bf2:	f362 13c7 	bfi	r3, r2, #7, #1
 8006bf6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8006bfa:	4b4e      	ldr	r3, [pc, #312]	; (8006d34 <Send+0x1b0>)
 8006bfc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d106      	bne.n	8006c12 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8006c04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006c08:	f043 0310 	orr.w	r3, r3, #16
 8006c0c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8006c10:	e005      	b.n	8006c1e <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8006c12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006c16:	f36f 1304 	bfc	r3, #4, #1
 8006c1a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8006c1e:	4b45      	ldr	r3, [pc, #276]	; (8006d34 <Send+0x1b0>)
 8006c20:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d005      	beq.n	8006c34 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8006c28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006c2c:	f043 0320 	orr.w	r3, r3, #32
 8006c30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8006c34:	4b3f      	ldr	r3, [pc, #252]	; (8006d34 <Send+0x1b0>)
 8006c36:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006c3a:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8006c40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006c44:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	bf14      	ite	ne
 8006c4e:	2301      	movne	r3, #1
 8006c50:	2300      	moveq	r3, #0
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8006c56:	4b37      	ldr	r3, [pc, #220]	; (8006d34 <Send+0x1b0>)
 8006c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5a:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8006c5c:	4b36      	ldr	r3, [pc, #216]	; (8006d38 <Send+0x1b4>)
 8006c5e:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8006c62:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8006c64:	4b34      	ldr	r3, [pc, #208]	; (8006d38 <Send+0x1b4>)
 8006c66:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8006c6a:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8006c6c:	4b31      	ldr	r3, [pc, #196]	; (8006d34 <Send+0x1b0>)
 8006c6e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8006c72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8006c76:	4b2f      	ldr	r3, [pc, #188]	; (8006d34 <Send+0x1b0>)
 8006c78:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8006c7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8006c80:	4b2c      	ldr	r3, [pc, #176]	; (8006d34 <Send+0x1b0>)
 8006c82:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006c86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8006c8a:	4b2a      	ldr	r3, [pc, #168]	; (8006d34 <Send+0x1b0>)
 8006c8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8006c94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c98:	f107 0014 	add.w	r0, r7, #20
 8006c9c:	4a27      	ldr	r2, [pc, #156]	; (8006d3c <Send+0x1b8>)
 8006c9e:	4928      	ldr	r1, [pc, #160]	; (8006d40 <Send+0x1bc>)
 8006ca0:	f001 ff10 	bl	8008ac4 <LoRaMacAdrCalcNext>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006cac:	f362 1386 	bfi	r3, r2, #6, #1
 8006cb0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8006cb4:	7afa      	ldrb	r2, [r7, #11]
 8006cb6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8006cba:	893b      	ldrh	r3, [r7, #8]
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 fbd9 	bl	8007478 <PrepareFrame>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8006ccc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <Send+0x158>
 8006cd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cd8:	2b0a      	cmp	r3, #10
 8006cda:	d107      	bne.n	8006cec <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8006cdc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 f96d 	bl	8006fc0 <ScheduleTx>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8006cec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00a      	beq.n	8006d0a <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8006cf4:	4a0f      	ldr	r2, [pc, #60]	; (8006d34 <Send+0x1b0>)
 8006cf6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006cfa:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8006cfe:	4a0d      	ldr	r2, [pc, #52]	; (8006d34 <Send+0x1b0>)
 8006d00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006d04:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8006d08:	e00d      	b.n	8006d26 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8006d0a:	4b0a      	ldr	r3, [pc, #40]	; (8006d34 <Send+0x1b0>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	4a07      	ldr	r2, [pc, #28]	; (8006d34 <Send+0x1b0>)
 8006d16:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8006d18:	f002 f8d6 	bl	8008ec8 <LoRaMacCommandsRemoveNoneStickyCmds>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8006d22:	2313      	movs	r3, #19
 8006d24:	e001      	b.n	8006d2a <Send+0x1a6>
        }
    }
    return status;
 8006d26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3730      	adds	r7, #48	; 0x30
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	20000848 	.word	0x20000848
 8006d38:	2000033c 	.word	0x2000033c
 8006d3c:	20000880 	.word	0x20000880
 8006d40:	20000881 	.word	0x20000881

08006d44 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8006d56:	2301      	movs	r3, #1
 8006d58:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8006d5a:	79fb      	ldrb	r3, [r7, #7]
 8006d5c:	2bff      	cmp	r3, #255	; 0xff
 8006d5e:	d129      	bne.n	8006db4 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8006d60:	2000      	movs	r0, #0
 8006d62:	f7ff fdef 	bl	8006944 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8006d66:	4b1a      	ldr	r3, [pc, #104]	; (8006dd0 <SendReJoinReq+0x8c>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8006d6e:	4b18      	ldr	r3, [pc, #96]	; (8006dd0 <SendReJoinReq+0x8c>)
 8006d70:	4a18      	ldr	r2, [pc, #96]	; (8006dd4 <SendReJoinReq+0x90>)
 8006d72:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8006d76:	4b16      	ldr	r3, [pc, #88]	; (8006dd0 <SendReJoinReq+0x8c>)
 8006d78:	22ff      	movs	r2, #255	; 0xff
 8006d7a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8006d7e:	7b3b      	ldrb	r3, [r7, #12]
 8006d80:	f36f 1347 	bfc	r3, #5, #3
 8006d84:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8006d86:	7b3a      	ldrb	r2, [r7, #12]
 8006d88:	4b11      	ldr	r3, [pc, #68]	; (8006dd0 <SendReJoinReq+0x8c>)
 8006d8a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8006d8e:	f7fe fd73 	bl	8005878 <SecureElementGetJoinEui>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2208      	movs	r2, #8
 8006d96:	4619      	mov	r1, r3
 8006d98:	480f      	ldr	r0, [pc, #60]	; (8006dd8 <SendReJoinReq+0x94>)
 8006d9a:	f004 fb56 	bl	800b44a <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8006d9e:	f7fe fd49 	bl	8005834 <SecureElementGetDevEui>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2208      	movs	r2, #8
 8006da6:	4619      	mov	r1, r3
 8006da8:	480c      	ldr	r0, [pc, #48]	; (8006ddc <SendReJoinReq+0x98>)
 8006daa:	f004 fb4e 	bl	800b44a <memcpy1>

            allowDelayedTx = false;
 8006dae:	2300      	movs	r3, #0
 8006db0:	73fb      	strb	r3, [r7, #15]

            break;
 8006db2:	e002      	b.n	8006dba <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8006db4:	2302      	movs	r3, #2
 8006db6:	73bb      	strb	r3, [r7, #14]
            break;
 8006db8:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 f8ff 	bl	8006fc0 <ScheduleTx>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	73bb      	strb	r3, [r7, #14]
    return status;
 8006dc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	2000033c 	.word	0x2000033c
 8006dd4:	2000033e 	.word	0x2000033e
 8006dd8:	2000044a 	.word	0x2000044a
 8006ddc:	20000452 	.word	0x20000452

08006de0 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8006de4:	f001 feab 	bl	8008b3e <LoRaMacClassBIsBeaconExpected>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d001      	beq.n	8006df2 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8006dee:	230e      	movs	r3, #14
 8006df0:	e013      	b.n	8006e1a <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8006df2:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <CheckForClassBCollision+0x40>)
 8006df4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d10d      	bne.n	8006e18 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8006dfc:	f001 fea6 	bl	8008b4c <LoRaMacClassBIsPingExpected>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8006e06:	230f      	movs	r3, #15
 8006e08:	e007      	b.n	8006e1a <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8006e0a:	f001 fea6 	bl	8008b5a <LoRaMacClassBIsMulticastExpected>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8006e14:	230f      	movs	r3, #15
 8006e16:	e000      	b.n	8006e1a <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	20000848 	.word	0x20000848

08006e24 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8006e24:	b590      	push	{r4, r7, lr}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8006e2a:	4b2d      	ldr	r3, [pc, #180]	; (8006ee0 <ComputeRxWindowParameters+0xbc>)
 8006e2c:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8006e30:	4b2b      	ldr	r3, [pc, #172]	; (8006ee0 <ComputeRxWindowParameters+0xbc>)
 8006e32:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8006e36:	4b2a      	ldr	r3, [pc, #168]	; (8006ee0 <ComputeRxWindowParameters+0xbc>)
 8006e38:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 8006e3c:	4b28      	ldr	r3, [pc, #160]	; (8006ee0 <ComputeRxWindowParameters+0xbc>)
 8006e3e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8006e42:	4b27      	ldr	r3, [pc, #156]	; (8006ee0 <ComputeRxWindowParameters+0xbc>)
 8006e44:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8006e48:	b25b      	sxtb	r3, r3
 8006e4a:	f002 fe44 	bl	8009ad6 <RegionApplyDrOffset>
 8006e4e:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8006e50:	b259      	sxtb	r1, r3
 8006e52:	4b23      	ldr	r3, [pc, #140]	; (8006ee0 <ComputeRxWindowParameters+0xbc>)
 8006e54:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006e58:	4b21      	ldr	r3, [pc, #132]	; (8006ee0 <ComputeRxWindowParameters+0xbc>)
 8006e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5c:	4821      	ldr	r0, [pc, #132]	; (8006ee4 <ComputeRxWindowParameters+0xc0>)
 8006e5e:	9000      	str	r0, [sp, #0]
 8006e60:	4620      	mov	r0, r4
 8006e62:	f002 fdae 	bl	80099c2 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8006e66:	4b1e      	ldr	r3, [pc, #120]	; (8006ee0 <ComputeRxWindowParameters+0xbc>)
 8006e68:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8006e6c:	4b1c      	ldr	r3, [pc, #112]	; (8006ee0 <ComputeRxWindowParameters+0xbc>)
 8006e6e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8006e72:	b259      	sxtb	r1, r3
 8006e74:	4b1a      	ldr	r3, [pc, #104]	; (8006ee0 <ComputeRxWindowParameters+0xbc>)
 8006e76:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006e7a:	4b19      	ldr	r3, [pc, #100]	; (8006ee0 <ComputeRxWindowParameters+0xbc>)
 8006e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7e:	4c1a      	ldr	r4, [pc, #104]	; (8006ee8 <ComputeRxWindowParameters+0xc4>)
 8006e80:	9400      	str	r4, [sp, #0]
 8006e82:	f002 fd9e 	bl	80099c2 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8006e86:	4b16      	ldr	r3, [pc, #88]	; (8006ee0 <ComputeRxWindowParameters+0xbc>)
 8006e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8a:	4a18      	ldr	r2, [pc, #96]	; (8006eec <ComputeRxWindowParameters+0xc8>)
 8006e8c:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8006e90:	4413      	add	r3, r2
 8006e92:	4a16      	ldr	r2, [pc, #88]	; (8006eec <ComputeRxWindowParameters+0xc8>)
 8006e94:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8006e98:	4b11      	ldr	r3, [pc, #68]	; (8006ee0 <ComputeRxWindowParameters+0xbc>)
 8006e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9c:	4a13      	ldr	r2, [pc, #76]	; (8006eec <ComputeRxWindowParameters+0xc8>)
 8006e9e:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8006ea2:	4413      	add	r3, r2
 8006ea4:	4a11      	ldr	r2, [pc, #68]	; (8006eec <ComputeRxWindowParameters+0xc8>)
 8006ea6:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8006eaa:	4b0d      	ldr	r3, [pc, #52]	; (8006ee0 <ComputeRxWindowParameters+0xbc>)
 8006eac:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d111      	bne.n	8006ed8 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8006eb4:	4b0a      	ldr	r3, [pc, #40]	; (8006ee0 <ComputeRxWindowParameters+0xbc>)
 8006eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb8:	4a0c      	ldr	r2, [pc, #48]	; (8006eec <ComputeRxWindowParameters+0xc8>)
 8006eba:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8006ebe:	4413      	add	r3, r2
 8006ec0:	4a0a      	ldr	r2, [pc, #40]	; (8006eec <ComputeRxWindowParameters+0xc8>)
 8006ec2:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8006ec6:	4b06      	ldr	r3, [pc, #24]	; (8006ee0 <ComputeRxWindowParameters+0xbc>)
 8006ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eca:	4a08      	ldr	r2, [pc, #32]	; (8006eec <ComputeRxWindowParameters+0xc8>)
 8006ecc:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8006ed0:	4413      	add	r3, r2
 8006ed2:	4a06      	ldr	r2, [pc, #24]	; (8006eec <ComputeRxWindowParameters+0xc8>)
 8006ed4:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8006ed8:	bf00      	nop
 8006eda:	3704      	adds	r7, #4
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd90      	pop	{r4, r7, pc}
 8006ee0:	20000848 	.word	0x20000848
 8006ee4:	200006f4 	.word	0x200006f4
 8006ee8:	20000708 	.word	0x20000708
 8006eec:	2000033c 	.word	0x2000033c

08006ef0 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8006efa:	4b13      	ldr	r3, [pc, #76]	; (8006f48 <VerifyTxFrame+0x58>)
 8006efc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d01b      	beq.n	8006f3c <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8006f04:	1d3b      	adds	r3, r7, #4
 8006f06:	4618      	mov	r0, r3
 8006f08:	f002 f802 	bl	8008f10 <LoRaMacCommandsGetSizeSerializedCmds>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8006f12:	2313      	movs	r3, #19
 8006f14:	e013      	b.n	8006f3e <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8006f16:	4b0d      	ldr	r3, [pc, #52]	; (8006f4c <VerifyTxFrame+0x5c>)
 8006f18:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8006f1c:	4a0a      	ldr	r2, [pc, #40]	; (8006f48 <VerifyTxFrame+0x58>)
 8006f1e:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7ff fe04 	bl	8006b34 <ValidatePayloadLength>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	f083 0301 	eor.w	r3, r3, #1
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8006f38:	2308      	movs	r3, #8
 8006f3a:	e000      	b.n	8006f3e <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	20000848 	.word	0x20000848
 8006f4c:	2000033c 	.word	0x2000033c

08006f50 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8006f56:	4b18      	ldr	r3, [pc, #96]	; (8006fb8 <SerializeTxFrame+0x68>)
 8006f58:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <SerializeTxFrame+0x16>
 8006f60:	2b04      	cmp	r3, #4
 8006f62:	d011      	beq.n	8006f88 <SerializeTxFrame+0x38>
 8006f64:	e021      	b.n	8006faa <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8006f66:	4815      	ldr	r0, [pc, #84]	; (8006fbc <SerializeTxFrame+0x6c>)
 8006f68:	f002 fb5e 	bl	8009628 <LoRaMacSerializerJoinRequest>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8006f70:	79fb      	ldrb	r3, [r7, #7]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8006f76:	2311      	movs	r3, #17
 8006f78:	e01a      	b.n	8006fb0 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8006f7a:	4b0f      	ldr	r3, [pc, #60]	; (8006fb8 <SerializeTxFrame+0x68>)
 8006f7c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	4b0d      	ldr	r3, [pc, #52]	; (8006fb8 <SerializeTxFrame+0x68>)
 8006f84:	801a      	strh	r2, [r3, #0]
            break;
 8006f86:	e012      	b.n	8006fae <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8006f88:	480c      	ldr	r0, [pc, #48]	; (8006fbc <SerializeTxFrame+0x6c>)
 8006f8a:	f002 fbcf 	bl	800972c <LoRaMacSerializerData>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8006f98:	2311      	movs	r3, #17
 8006f9a:	e009      	b.n	8006fb0 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8006f9c:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <SerializeTxFrame+0x68>)
 8006f9e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	4b04      	ldr	r3, [pc, #16]	; (8006fb8 <SerializeTxFrame+0x68>)
 8006fa6:	801a      	strh	r2, [r3, #0]
            break;
 8006fa8:	e001      	b.n	8006fae <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e000      	b.n	8006fb0 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	2000033c 	.word	0x2000033c
 8006fbc:	20000444 	.word	0x20000444

08006fc0 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b090      	sub	sp, #64	; 0x40
 8006fc4:	af02      	add	r7, sp, #8
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8006fd0:	f7ff ff06 	bl	8006de0 <CheckForClassBCollision>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8006fda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <ScheduleTx+0x28>
    {
        return status;
 8006fe2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fe6:	e08f      	b.n	8007108 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8006fe8:	f000 f8fa 	bl	80071e0 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8006fec:	f7ff ffb0 	bl	8006f50 <SerializeTxFrame>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8006ff6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d002      	beq.n	8007004 <ScheduleTx+0x44>
    {
        return status;
 8006ffe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007002:	e081      	b.n	8007108 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8007004:	4b42      	ldr	r3, [pc, #264]	; (8007110 <ScheduleTx+0x150>)
 8007006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007008:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800700a:	4b41      	ldr	r3, [pc, #260]	; (8007110 <ScheduleTx+0x150>)
 800700c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8007010:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8007012:	4b3f      	ldr	r3, [pc, #252]	; (8007110 <ScheduleTx+0x150>)
 8007014:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8007018:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800701a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800701e:	4618      	mov	r0, r3
 8007020:	f007 fc52 	bl	800e8c8 <SysTimeGetMcuTime>
 8007024:	4638      	mov	r0, r7
 8007026:	4b3a      	ldr	r3, [pc, #232]	; (8007110 <ScheduleTx+0x150>)
 8007028:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800702c:	9200      	str	r2, [sp, #0]
 800702e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007032:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007036:	ca06      	ldmia	r2, {r1, r2}
 8007038:	f007 fc0e 	bl	800e858 <SysTimeSub>
 800703c:	f107 0320 	add.w	r3, r7, #32
 8007040:	463a      	mov	r2, r7
 8007042:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007046:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800704a:	4b31      	ldr	r3, [pc, #196]	; (8007110 <ScheduleTx+0x150>)
 800704c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704e:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8007050:	2300      	movs	r3, #0
 8007052:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8007056:	2301      	movs	r3, #1
 8007058:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800705a:	4b2e      	ldr	r3, [pc, #184]	; (8007114 <ScheduleTx+0x154>)
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007060:	4b2b      	ldr	r3, [pc, #172]	; (8007110 <ScheduleTx+0x150>)
 8007062:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8007066:	2b00      	cmp	r3, #0
 8007068:	d104      	bne.n	8007074 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800706a:	2301      	movs	r3, #1
 800706c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8007070:	2300      	movs	r3, #0
 8007072:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8007074:	4b26      	ldr	r3, [pc, #152]	; (8007110 <ScheduleTx+0x150>)
 8007076:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800707a:	f107 0114 	add.w	r1, r7, #20
 800707e:	4b26      	ldr	r3, [pc, #152]	; (8007118 <ScheduleTx+0x158>)
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	4b26      	ldr	r3, [pc, #152]	; (800711c <ScheduleTx+0x15c>)
 8007084:	4a26      	ldr	r2, [pc, #152]	; (8007120 <ScheduleTx+0x160>)
 8007086:	f002 fcfc 	bl	8009a82 <RegionNextChannel>
 800708a:	4603      	mov	r3, r0
 800708c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8007090:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007094:	2b00      	cmp	r3, #0
 8007096:	d022      	beq.n	80070de <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8007098:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800709c:	2b0b      	cmp	r3, #11
 800709e:	d11b      	bne.n	80070d8 <ScheduleTx+0x118>
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d018      	beq.n	80070d8 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 80070a6:	4b1b      	ldr	r3, [pc, #108]	; (8007114 <ScheduleTx+0x154>)
 80070a8:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d011      	beq.n	80070d4 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80070b0:	4b18      	ldr	r3, [pc, #96]	; (8007114 <ScheduleTx+0x154>)
 80070b2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80070b6:	f043 0320 	orr.w	r3, r3, #32
 80070ba:	4a16      	ldr	r2, [pc, #88]	; (8007114 <ScheduleTx+0x154>)
 80070bc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80070c0:	4b14      	ldr	r3, [pc, #80]	; (8007114 <ScheduleTx+0x154>)
 80070c2:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 80070c6:	4619      	mov	r1, r3
 80070c8:	4816      	ldr	r0, [pc, #88]	; (8007124 <ScheduleTx+0x164>)
 80070ca:	f007 fd97 	bl	800ebfc <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 80070ce:	4815      	ldr	r0, [pc, #84]	; (8007124 <ScheduleTx+0x164>)
 80070d0:	f007 fcb6 	bl	800ea40 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	e017      	b.n	8007108 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 80070d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070dc:	e014      	b.n	8007108 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 80070de:	f7ff fea1 	bl	8006e24 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 80070e2:	f7ff ff05 	bl	8006ef0 <VerifyTxFrame>
 80070e6:	4603      	mov	r3, r0
 80070e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80070ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <ScheduleTx+0x13a>
    {
        return status;
 80070f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070f8:	e006      	b.n	8007108 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 80070fa:	4b06      	ldr	r3, [pc, #24]	; (8007114 <ScheduleTx+0x154>)
 80070fc:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8007100:	4618      	mov	r0, r3
 8007102:	f000 fad5 	bl	80076b0 <SendFrameOnChannel>
 8007106:	4603      	mov	r3, r0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3738      	adds	r7, #56	; 0x38
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	20000848 	.word	0x20000848
 8007114:	2000033c 	.word	0x2000033c
 8007118:	20000878 	.word	0x20000878
 800711c:	200007c4 	.word	0x200007c4
 8007120:	20000751 	.word	0x20000751
 8007124:	200006a4 	.word	0x200006a4

08007128 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	460a      	mov	r2, r1
 8007132:	71fb      	strb	r3, [r7, #7]
 8007134:	4613      	mov	r3, r2
 8007136:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8007138:	2313      	movs	r3, #19
 800713a:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800713c:	2300      	movs	r3, #0
 800713e:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8007140:	4b25      	ldr	r3, [pc, #148]	; (80071d8 <SecureFrame+0xb0>)
 8007142:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007146:	2b00      	cmp	r3, #0
 8007148:	d002      	beq.n	8007150 <SecureFrame+0x28>
 800714a:	2b04      	cmp	r3, #4
 800714c:	d011      	beq.n	8007172 <SecureFrame+0x4a>
 800714e:	e03b      	b.n	80071c8 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8007150:	4822      	ldr	r0, [pc, #136]	; (80071dc <SecureFrame+0xb4>)
 8007152:	f002 f95f 	bl	8009414 <LoRaMacCryptoPrepareJoinRequest>
 8007156:	4603      	mov	r3, r0
 8007158:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800715a:	7bfb      	ldrb	r3, [r7, #15]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8007160:	2311      	movs	r3, #17
 8007162:	e034      	b.n	80071ce <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8007164:	4b1c      	ldr	r3, [pc, #112]	; (80071d8 <SecureFrame+0xb0>)
 8007166:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800716a:	b29a      	uxth	r2, r3
 800716c:	4b1a      	ldr	r3, [pc, #104]	; (80071d8 <SecureFrame+0xb0>)
 800716e:	801a      	strh	r2, [r3, #0]
            break;
 8007170:	e02c      	b.n	80071cc <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8007172:	f107 0308 	add.w	r3, r7, #8
 8007176:	4618      	mov	r0, r3
 8007178:	f002 f904 	bl	8009384 <LoRaMacCryptoGetFCntUp>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8007182:	2312      	movs	r3, #18
 8007184:	e023      	b.n	80071ce <SecureFrame+0xa6>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8007186:	4b14      	ldr	r3, [pc, #80]	; (80071d8 <SecureFrame+0xb0>)
 8007188:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800718c:	2b00      	cmp	r3, #0
 800718e:	d104      	bne.n	800719a <SecureFrame+0x72>
 8007190:	4b11      	ldr	r3, [pc, #68]	; (80071d8 <SecureFrame+0xb0>)
 8007192:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8007196:	2b01      	cmp	r3, #1
 8007198:	d902      	bls.n	80071a0 <SecureFrame+0x78>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	3b01      	subs	r3, #1
 800719e:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80071a0:	68b8      	ldr	r0, [r7, #8]
 80071a2:	79ba      	ldrb	r2, [r7, #6]
 80071a4:	79f9      	ldrb	r1, [r7, #7]
 80071a6:	4b0d      	ldr	r3, [pc, #52]	; (80071dc <SecureFrame+0xb4>)
 80071a8:	f002 f978 	bl	800949c <LoRaMacCryptoSecureMessage>
 80071ac:	4603      	mov	r3, r0
 80071ae:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80071b6:	2311      	movs	r3, #17
 80071b8:	e009      	b.n	80071ce <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80071ba:	4b07      	ldr	r3, [pc, #28]	; (80071d8 <SecureFrame+0xb0>)
 80071bc:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <SecureFrame+0xb0>)
 80071c4:	801a      	strh	r2, [r3, #0]
            break;
 80071c6:	e001      	b.n	80071cc <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e000      	b.n	80071ce <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	2000033c 	.word	0x2000033c
 80071dc:	20000444 	.word	0x20000444

080071e0 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 80071e0:	b480      	push	{r7}
 80071e2:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 80071e4:	4b09      	ldr	r3, [pc, #36]	; (800720c <CalculateBackOff+0x2c>)
 80071e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10a      	bne.n	8007202 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 80071ec:	4b07      	ldr	r3, [pc, #28]	; (800720c <CalculateBackOff+0x2c>)
 80071ee:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 80071f2:	3b01      	subs	r3, #1
 80071f4:	4a06      	ldr	r2, [pc, #24]	; (8007210 <CalculateBackOff+0x30>)
 80071f6:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 80071fa:	fb02 f303 	mul.w	r3, r2, r3
 80071fe:	4a03      	ldr	r2, [pc, #12]	; (800720c <CalculateBackOff+0x2c>)
 8007200:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8007202:	bf00      	nop
 8007204:	46bd      	mov	sp, r7
 8007206:	bc80      	pop	{r7}
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	20000848 	.word	0x20000848
 8007210:	2000033c 	.word	0x2000033c

08007214 <ResetMacParameters>:
        }
    }
}

static void ResetMacParameters( void )
{
 8007214:	b5b0      	push	{r4, r5, r7, lr}
 8007216:	b08e      	sub	sp, #56	; 0x38
 8007218:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800721a:	4b68      	ldr	r3, [pc, #416]	; (80073bc <ResetMacParameters+0x1a8>)
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8007222:	4b66      	ldr	r3, [pc, #408]	; (80073bc <ResetMacParameters+0x1a8>)
 8007224:	2200      	movs	r2, #0
 8007226:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8007228:	4b65      	ldr	r3, [pc, #404]	; (80073c0 <ResetMacParameters+0x1ac>)
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 8007230:	4b63      	ldr	r3, [pc, #396]	; (80073c0 <ResetMacParameters+0x1ac>)
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8007238:	4b61      	ldr	r3, [pc, #388]	; (80073c0 <ResetMacParameters+0x1ac>)
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8007240:	4b5f      	ldr	r3, [pc, #380]	; (80073c0 <ResetMacParameters+0x1ac>)
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8007248:	4b5c      	ldr	r3, [pc, #368]	; (80073bc <ResetMacParameters+0x1a8>)
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8007250:	4b5a      	ldr	r3, [pc, #360]	; (80073bc <ResetMacParameters+0x1a8>)
 8007252:	2201      	movs	r2, #1
 8007254:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8007258:	4b58      	ldr	r3, [pc, #352]	; (80073bc <ResetMacParameters+0x1a8>)
 800725a:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 800725e:	4b57      	ldr	r3, [pc, #348]	; (80073bc <ResetMacParameters+0x1a8>)
 8007260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8007264:	4b55      	ldr	r3, [pc, #340]	; (80073bc <ResetMacParameters+0x1a8>)
 8007266:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 800726a:	4b54      	ldr	r3, [pc, #336]	; (80073bc <ResetMacParameters+0x1a8>)
 800726c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8007270:	4b52      	ldr	r3, [pc, #328]	; (80073bc <ResetMacParameters+0x1a8>)
 8007272:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 8007276:	4b51      	ldr	r3, [pc, #324]	; (80073bc <ResetMacParameters+0x1a8>)
 8007278:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800727c:	4b4f      	ldr	r3, [pc, #316]	; (80073bc <ResetMacParameters+0x1a8>)
 800727e:	4a4f      	ldr	r2, [pc, #316]	; (80073bc <ResetMacParameters+0x1a8>)
 8007280:	3364      	adds	r3, #100	; 0x64
 8007282:	32a8      	adds	r2, #168	; 0xa8
 8007284:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007288:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800728c:	4b4b      	ldr	r3, [pc, #300]	; (80073bc <ResetMacParameters+0x1a8>)
 800728e:	4a4b      	ldr	r2, [pc, #300]	; (80073bc <ResetMacParameters+0x1a8>)
 8007290:	336c      	adds	r3, #108	; 0x6c
 8007292:	32b0      	adds	r2, #176	; 0xb0
 8007294:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007298:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800729c:	4b47      	ldr	r3, [pc, #284]	; (80073bc <ResetMacParameters+0x1a8>)
 800729e:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 80072a2:	4b46      	ldr	r3, [pc, #280]	; (80073bc <ResetMacParameters+0x1a8>)
 80072a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80072a8:	4b44      	ldr	r3, [pc, #272]	; (80073bc <ResetMacParameters+0x1a8>)
 80072aa:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 80072ae:	4b43      	ldr	r3, [pc, #268]	; (80073bc <ResetMacParameters+0x1a8>)
 80072b0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80072b4:	4b41      	ldr	r3, [pc, #260]	; (80073bc <ResetMacParameters+0x1a8>)
 80072b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80072ba:	4a40      	ldr	r2, [pc, #256]	; (80073bc <ResetMacParameters+0x1a8>)
 80072bc:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80072be:	4b3f      	ldr	r3, [pc, #252]	; (80073bc <ResetMacParameters+0x1a8>)
 80072c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80072c4:	4a3d      	ldr	r2, [pc, #244]	; (80073bc <ResetMacParameters+0x1a8>)
 80072c6:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 80072c8:	4b3d      	ldr	r3, [pc, #244]	; (80073c0 <ResetMacParameters+0x1ac>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 80072d0:	4b3a      	ldr	r3, [pc, #232]	; (80073bc <ResetMacParameters+0x1a8>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80072d8:	2301      	movs	r3, #1
 80072da:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80072dc:	4b39      	ldr	r3, [pc, #228]	; (80073c4 <ResetMacParameters+0x1b0>)
 80072de:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80072e0:	4b39      	ldr	r3, [pc, #228]	; (80073c8 <ResetMacParameters+0x1b4>)
 80072e2:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80072e4:	4b35      	ldr	r3, [pc, #212]	; (80073bc <ResetMacParameters+0x1a8>)
 80072e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072ea:	1d3a      	adds	r2, r7, #4
 80072ec:	4611      	mov	r1, r2
 80072ee:	4618      	mov	r0, r3
 80072f0:	f002 fb2b 	bl	800994a <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80072f4:	4b32      	ldr	r3, [pc, #200]	; (80073c0 <ResetMacParameters+0x1ac>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80072fc:	4b30      	ldr	r3, [pc, #192]	; (80073c0 <ResetMacParameters+0x1ac>)
 80072fe:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8007302:	4b2f      	ldr	r3, [pc, #188]	; (80073c0 <ResetMacParameters+0x1ac>)
 8007304:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8007308:	4b2c      	ldr	r3, [pc, #176]	; (80073bc <ResetMacParameters+0x1a8>)
 800730a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800730c:	4a2c      	ldr	r2, [pc, #176]	; (80073c0 <ResetMacParameters+0x1ac>)
 800730e:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007312:	4b2a      	ldr	r3, [pc, #168]	; (80073bc <ResetMacParameters+0x1a8>)
 8007314:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8007318:	4b29      	ldr	r3, [pc, #164]	; (80073c0 <ResetMacParameters+0x1ac>)
 800731a:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800731e:	4b27      	ldr	r3, [pc, #156]	; (80073bc <ResetMacParameters+0x1a8>)
 8007320:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8007324:	4b26      	ldr	r3, [pc, #152]	; (80073c0 <ResetMacParameters+0x1ac>)
 8007326:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800732a:	4b25      	ldr	r3, [pc, #148]	; (80073c0 <ResetMacParameters+0x1ac>)
 800732c:	2200      	movs	r2, #0
 800732e:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8007332:	4b23      	ldr	r3, [pc, #140]	; (80073c0 <ResetMacParameters+0x1ac>)
 8007334:	2201      	movs	r2, #1
 8007336:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800733a:	4a21      	ldr	r2, [pc, #132]	; (80073c0 <ResetMacParameters+0x1ac>)
 800733c:	4b20      	ldr	r3, [pc, #128]	; (80073c0 <ResetMacParameters+0x1ac>)
 800733e:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8007342:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8007346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800734a:	682b      	ldr	r3, [r5, #0]
 800734c:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800734e:	4b1c      	ldr	r3, [pc, #112]	; (80073c0 <ResetMacParameters+0x1ac>)
 8007350:	2201      	movs	r2, #1
 8007352:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007356:	4b1a      	ldr	r3, [pc, #104]	; (80073c0 <ResetMacParameters+0x1ac>)
 8007358:	2202      	movs	r2, #2
 800735a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800735e:	2300      	movs	r3, #0
 8007360:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 8007362:	2300      	movs	r3, #0
 8007364:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 8007366:	4b16      	ldr	r3, [pc, #88]	; (80073c0 <ResetMacParameters+0x1ac>)
 8007368:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800736c:	2b00      	cmp	r3, #0
 800736e:	d009      	beq.n	8007384 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8007370:	4b13      	ldr	r3, [pc, #76]	; (80073c0 <ResetMacParameters+0x1ac>)
 8007372:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800737a:	4b11      	ldr	r3, [pc, #68]	; (80073c0 <ResetMacParameters+0x1ac>)
 800737c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8007384:	4b11      	ldr	r3, [pc, #68]	; (80073cc <ResetMacParameters+0x1b8>)
 8007386:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8007388:	4b11      	ldr	r3, [pc, #68]	; (80073d0 <ResetMacParameters+0x1bc>)
 800738a:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800738c:	4b11      	ldr	r3, [pc, #68]	; (80073d4 <ResetMacParameters+0x1c0>)
 800738e:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8007390:	4b11      	ldr	r3, [pc, #68]	; (80073d8 <ResetMacParameters+0x1c4>)
 8007392:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8007394:	4b11      	ldr	r3, [pc, #68]	; (80073dc <ResetMacParameters+0x1c8>)
 8007396:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8007398:	4b11      	ldr	r3, [pc, #68]	; (80073e0 <ResetMacParameters+0x1cc>)
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800739c:	4b11      	ldr	r3, [pc, #68]	; (80073e4 <ResetMacParameters+0x1d0>)
 800739e:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80073a0:	4b11      	ldr	r3, [pc, #68]	; (80073e8 <ResetMacParameters+0x1d4>)
 80073a2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80073a4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80073a8:	f107 0310 	add.w	r3, r7, #16
 80073ac:	4a0f      	ldr	r2, [pc, #60]	; (80073ec <ResetMacParameters+0x1d8>)
 80073ae:	4618      	mov	r0, r3
 80073b0:	f001 fba0 	bl	8008af4 <LoRaMacClassBInit>
}
 80073b4:	bf00      	nop
 80073b6:	3738      	adds	r7, #56	; 0x38
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bdb0      	pop	{r4, r5, r7, pc}
 80073bc:	20000848 	.word	0x20000848
 80073c0:	2000033c 	.word	0x2000033c
 80073c4:	20000a28 	.word	0x20000a28
 80073c8:	20000abc 	.word	0x20000abc
 80073cc:	2000079c 	.word	0x2000079c
 80073d0:	20000758 	.word	0x20000758
 80073d4:	20000788 	.word	0x20000788
 80073d8:	200007c1 	.word	0x200007c1
 80073dc:	2000091c 	.word	0x2000091c
 80073e0:	20000888 	.word	0x20000888
 80073e4:	2000088c 	.word	0x2000088c
 80073e8:	20000920 	.word	0x20000920
 80073ec:	20000f58 	.word	0x20000f58

080073f0 <OpenContinuousRxCWindow>:
        MacCtx.RxSlot = rxConfig->RxSlot;
    }
}

static void OpenContinuousRxCWindow( void )
{
 80073f0:	b590      	push	{r4, r7, lr}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80073f6:	4b1b      	ldr	r3, [pc, #108]	; (8007464 <OpenContinuousRxCWindow+0x74>)
 80073f8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80073fc:	4b19      	ldr	r3, [pc, #100]	; (8007464 <OpenContinuousRxCWindow+0x74>)
 80073fe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007402:	b259      	sxtb	r1, r3
 8007404:	4b17      	ldr	r3, [pc, #92]	; (8007464 <OpenContinuousRxCWindow+0x74>)
 8007406:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800740a:	4b16      	ldr	r3, [pc, #88]	; (8007464 <OpenContinuousRxCWindow+0x74>)
 800740c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740e:	4c16      	ldr	r4, [pc, #88]	; (8007468 <OpenContinuousRxCWindow+0x78>)
 8007410:	9400      	str	r4, [sp, #0]
 8007412:	f002 fad6 	bl	80099c2 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007416:	4b15      	ldr	r3, [pc, #84]	; (800746c <OpenContinuousRxCWindow+0x7c>)
 8007418:	2202      	movs	r2, #2
 800741a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800741e:	4b13      	ldr	r3, [pc, #76]	; (800746c <OpenContinuousRxCWindow+0x7c>)
 8007420:	2201      	movs	r2, #1
 8007422:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007426:	4b0f      	ldr	r3, [pc, #60]	; (8007464 <OpenContinuousRxCWindow+0x74>)
 8007428:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800742c:	4a10      	ldr	r2, [pc, #64]	; (8007470 <OpenContinuousRxCWindow+0x80>)
 800742e:	490e      	ldr	r1, [pc, #56]	; (8007468 <OpenContinuousRxCWindow+0x78>)
 8007430:	4618      	mov	r0, r3
 8007432:	f002 fae0 	bl	80099f6 <RegionRxConfig>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00f      	beq.n	800745c <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800743c:	4b0b      	ldr	r3, [pc, #44]	; (800746c <OpenContinuousRxCWindow+0x7c>)
 800743e:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 8007442:	4b0a      	ldr	r3, [pc, #40]	; (800746c <OpenContinuousRxCWindow+0x7c>)
 8007444:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( 0 ); // Continuous mode
 8007448:	4b0a      	ldr	r3, [pc, #40]	; (8007474 <OpenContinuousRxCWindow+0x84>)
 800744a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800744c:	2000      	movs	r0, #0
 800744e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8007450:	4b06      	ldr	r3, [pc, #24]	; (800746c <OpenContinuousRxCWindow+0x7c>)
 8007452:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 8007456:	4b05      	ldr	r3, [pc, #20]	; (800746c <OpenContinuousRxCWindow+0x7c>)
 8007458:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 800745c:	bf00      	nop
 800745e:	3704      	adds	r7, #4
 8007460:	46bd      	mov	sp, r7
 8007462:	bd90      	pop	{r4, r7, pc}
 8007464:	20000848 	.word	0x20000848
 8007468:	2000071c 	.word	0x2000071c
 800746c:	2000033c 	.word	0x2000033c
 8007470:	2000075c 	.word	0x2000075c
 8007474:	0800f3f0 	.word	0x0800f3f0

08007478 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	603b      	str	r3, [r7, #0]
 8007484:	4613      	mov	r3, r2
 8007486:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8007488:	4b82      	ldr	r3, [pc, #520]	; (8007694 <PrepareFrame+0x21c>)
 800748a:	2200      	movs	r2, #0
 800748c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800748e:	4b81      	ldr	r3, [pc, #516]	; (8007694 <PrepareFrame+0x21c>)
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800749a:	2300      	movs	r3, #0
 800749c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800749e:	2300      	movs	r3, #0
 80074a0:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80074a8:	2300      	movs	r3, #0
 80074aa:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80074ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80074ae:	461a      	mov	r2, r3
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	4879      	ldr	r0, [pc, #484]	; (8007698 <PrepareFrame+0x220>)
 80074b4:	f003 ffc9 	bl	800b44a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80074b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	4b75      	ldr	r3, [pc, #468]	; (8007694 <PrepareFrame+0x21c>)
 80074be:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	781a      	ldrb	r2, [r3, #0]
 80074c6:	4b73      	ldr	r3, [pc, #460]	; (8007694 <PrepareFrame+0x21c>)
 80074c8:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b07      	cmp	r3, #7
 80074d6:	f000 80b9 	beq.w	800764c <PrepareFrame+0x1d4>
 80074da:	2b07      	cmp	r3, #7
 80074dc:	f300 80d0 	bgt.w	8007680 <PrepareFrame+0x208>
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d006      	beq.n	80074f2 <PrepareFrame+0x7a>
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	f040 80cb 	bne.w	8007680 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80074ea:	4b6a      	ldr	r3, [pc, #424]	; (8007694 <PrepareFrame+0x21c>)
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80074f2:	4b68      	ldr	r3, [pc, #416]	; (8007694 <PrepareFrame+0x21c>)
 80074f4:	2204      	movs	r2, #4
 80074f6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80074fa:	4b66      	ldr	r3, [pc, #408]	; (8007694 <PrepareFrame+0x21c>)
 80074fc:	4a67      	ldr	r2, [pc, #412]	; (800769c <PrepareFrame+0x224>)
 80074fe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8007502:	4b64      	ldr	r3, [pc, #400]	; (8007694 <PrepareFrame+0x21c>)
 8007504:	22ff      	movs	r2, #255	; 0xff
 8007506:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	781a      	ldrb	r2, [r3, #0]
 800750e:	4b61      	ldr	r3, [pc, #388]	; (8007694 <PrepareFrame+0x21c>)
 8007510:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8007514:	4a5f      	ldr	r2, [pc, #380]	; (8007694 <PrepareFrame+0x21c>)
 8007516:	79fb      	ldrb	r3, [r7, #7]
 8007518:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800751c:	4b60      	ldr	r3, [pc, #384]	; (80076a0 <PrepareFrame+0x228>)
 800751e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007522:	4a5c      	ldr	r2, [pc, #368]	; (8007694 <PrepareFrame+0x21c>)
 8007524:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	781a      	ldrb	r2, [r3, #0]
 800752c:	4b59      	ldr	r3, [pc, #356]	; (8007694 <PrepareFrame+0x21c>)
 800752e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8007532:	4b58      	ldr	r3, [pc, #352]	; (8007694 <PrepareFrame+0x21c>)
 8007534:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8007538:	4b56      	ldr	r3, [pc, #344]	; (8007694 <PrepareFrame+0x21c>)
 800753a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800753e:	4b55      	ldr	r3, [pc, #340]	; (8007694 <PrepareFrame+0x21c>)
 8007540:	4a55      	ldr	r2, [pc, #340]	; (8007698 <PrepareFrame+0x220>)
 8007542:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8007546:	f107 0318 	add.w	r3, r7, #24
 800754a:	4618      	mov	r0, r3
 800754c:	f001 ff1a 	bl	8009384 <LoRaMacCryptoGetFCntUp>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8007556:	2312      	movs	r3, #18
 8007558:	e098      	b.n	800768c <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	b29a      	uxth	r2, r3
 800755e:	4b4d      	ldr	r3, [pc, #308]	; (8007694 <PrepareFrame+0x21c>)
 8007560:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 8007564:	4b4b      	ldr	r3, [pc, #300]	; (8007694 <PrepareFrame+0x21c>)
 8007566:	2200      	movs	r2, #0
 8007568:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 800756c:	4b49      	ldr	r3, [pc, #292]	; (8007694 <PrepareFrame+0x21c>)
 800756e:	2200      	movs	r2, #0
 8007570:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	4a47      	ldr	r2, [pc, #284]	; (8007694 <PrepareFrame+0x21c>)
 8007578:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800757c:	f107 0314 	add.w	r3, r7, #20
 8007580:	4618      	mov	r0, r3
 8007582:	f001 fcc5 	bl	8008f10 <LoRaMacCommandsGetSizeSerializedCmds>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d001      	beq.n	8007590 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800758c:	2313      	movs	r3, #19
 800758e:	e07d      	b.n	800768c <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d076      	beq.n	8007684 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8007596:	4b42      	ldr	r3, [pc, #264]	; (80076a0 <PrepareFrame+0x228>)
 8007598:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff faa1 	bl	8006ae4 <GetMaxAppPayloadWithoutFOptsLength>
 80075a2:	4603      	mov	r3, r0
 80075a4:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80075a6:	4b3b      	ldr	r3, [pc, #236]	; (8007694 <PrepareFrame+0x21c>)
 80075a8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d01d      	beq.n	80075ec <PrepareFrame+0x174>
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	2b0f      	cmp	r3, #15
 80075b4:	d81a      	bhi.n	80075ec <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80075b6:	f107 0314 	add.w	r3, r7, #20
 80075ba:	4a3a      	ldr	r2, [pc, #232]	; (80076a4 <PrepareFrame+0x22c>)
 80075bc:	4619      	mov	r1, r3
 80075be:	200f      	movs	r0, #15
 80075c0:	f001 fcbc 	bl	8008f3c <LoRaMacCommandsSerializeCmds>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80075ca:	2313      	movs	r3, #19
 80075cc:	e05e      	b.n	800768c <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f003 030f 	and.w	r3, r3, #15
 80075d4:	b2d9      	uxtb	r1, r3
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	7813      	ldrb	r3, [r2, #0]
 80075da:	f361 0303 	bfi	r3, r1, #0, #4
 80075de:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	781a      	ldrb	r2, [r3, #0]
 80075e4:	4b2b      	ldr	r3, [pc, #172]	; (8007694 <PrepareFrame+0x21c>)
 80075e6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80075ea:	e04b      	b.n	8007684 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80075ec:	4b29      	ldr	r3, [pc, #164]	; (8007694 <PrepareFrame+0x21c>)
 80075ee:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d010      	beq.n	8007618 <PrepareFrame+0x1a0>
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2b0f      	cmp	r3, #15
 80075fa:	d90d      	bls.n	8007618 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80075fc:	7ffb      	ldrb	r3, [r7, #31]
 80075fe:	f107 0114 	add.w	r1, r7, #20
 8007602:	4a29      	ldr	r2, [pc, #164]	; (80076a8 <PrepareFrame+0x230>)
 8007604:	4618      	mov	r0, r3
 8007606:	f001 fc99 	bl	8008f3c <LoRaMacCommandsSerializeCmds>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007610:	2313      	movs	r3, #19
 8007612:	e03b      	b.n	800768c <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8007614:	230a      	movs	r3, #10
 8007616:	e039      	b.n	800768c <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8007618:	7ffb      	ldrb	r3, [r7, #31]
 800761a:	f107 0114 	add.w	r1, r7, #20
 800761e:	4a22      	ldr	r2, [pc, #136]	; (80076a8 <PrepareFrame+0x230>)
 8007620:	4618      	mov	r0, r3
 8007622:	f001 fc8b 	bl	8008f3c <LoRaMacCommandsSerializeCmds>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800762c:	2313      	movs	r3, #19
 800762e:	e02d      	b.n	800768c <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8007630:	4b18      	ldr	r3, [pc, #96]	; (8007694 <PrepareFrame+0x21c>)
 8007632:	2200      	movs	r2, #0
 8007634:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8007638:	4b16      	ldr	r3, [pc, #88]	; (8007694 <PrepareFrame+0x21c>)
 800763a:	4a1b      	ldr	r2, [pc, #108]	; (80076a8 <PrepareFrame+0x230>)
 800763c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	b2da      	uxtb	r2, r3
 8007644:	4b13      	ldr	r3, [pc, #76]	; (8007694 <PrepareFrame+0x21c>)
 8007646:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 800764a:	e01b      	b.n	8007684 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d01a      	beq.n	8007688 <PrepareFrame+0x210>
 8007652:	4b10      	ldr	r3, [pc, #64]	; (8007694 <PrepareFrame+0x21c>)
 8007654:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8007658:	2b00      	cmp	r3, #0
 800765a:	d015      	beq.n	8007688 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800765c:	4813      	ldr	r0, [pc, #76]	; (80076ac <PrepareFrame+0x234>)
 800765e:	4b0d      	ldr	r3, [pc, #52]	; (8007694 <PrepareFrame+0x21c>)
 8007660:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8007664:	b29b      	uxth	r3, r3
 8007666:	461a      	mov	r2, r3
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	f003 feee 	bl	800b44a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800766e:	4b09      	ldr	r3, [pc, #36]	; (8007694 <PrepareFrame+0x21c>)
 8007670:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8007674:	b29b      	uxth	r3, r3
 8007676:	3301      	adds	r3, #1
 8007678:	b29a      	uxth	r2, r3
 800767a:	4b06      	ldr	r3, [pc, #24]	; (8007694 <PrepareFrame+0x21c>)
 800767c:	801a      	strh	r2, [r3, #0]
            }
            break;
 800767e:	e003      	b.n	8007688 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8007680:	2302      	movs	r3, #2
 8007682:	e003      	b.n	800768c <PrepareFrame+0x214>
            break;
 8007684:	bf00      	nop
 8007686:	e000      	b.n	800768a <PrepareFrame+0x212>
            break;
 8007688:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3720      	adds	r7, #32
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	2000033c 	.word	0x2000033c
 8007698:	20000474 	.word	0x20000474
 800769c:	2000033e 	.word	0x2000033e
 80076a0:	20000848 	.word	0x20000848
 80076a4:	20000454 	.word	0x20000454
 80076a8:	200007c8 	.word	0x200007c8
 80076ac:	2000033f 	.word	0x2000033f

080076b0 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08a      	sub	sp, #40	; 0x28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	4603      	mov	r3, r0
 80076b8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80076ba:	2303      	movs	r3, #3
 80076bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80076c4:	79fb      	ldrb	r3, [r7, #7]
 80076c6:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80076c8:	4b47      	ldr	r3, [pc, #284]	; (80077e8 <SendFrameOnChannel+0x138>)
 80076ca:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80076ce:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80076d0:	4b45      	ldr	r3, [pc, #276]	; (80077e8 <SendFrameOnChannel+0x138>)
 80076d2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80076d6:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80076d8:	4b43      	ldr	r3, [pc, #268]	; (80077e8 <SendFrameOnChannel+0x138>)
 80076da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076dc:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80076de:	4b42      	ldr	r3, [pc, #264]	; (80077e8 <SendFrameOnChannel+0x138>)
 80076e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076e2:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80076e4:	4b41      	ldr	r3, [pc, #260]	; (80077ec <SendFrameOnChannel+0x13c>)
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80076ea:	4b3f      	ldr	r3, [pc, #252]	; (80077e8 <SendFrameOnChannel+0x138>)
 80076ec:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80076f0:	f107 020f 	add.w	r2, r7, #15
 80076f4:	f107 0110 	add.w	r1, r7, #16
 80076f8:	4b3d      	ldr	r3, [pc, #244]	; (80077f0 <SendFrameOnChannel+0x140>)
 80076fa:	f002 f991 	bl	8009a20 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80076fe:	4b3b      	ldr	r3, [pc, #236]	; (80077ec <SendFrameOnChannel+0x13c>)
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007706:	4b38      	ldr	r3, [pc, #224]	; (80077e8 <SendFrameOnChannel+0x138>)
 8007708:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800770c:	b2da      	uxtb	r2, r3
 800770e:	4b37      	ldr	r3, [pc, #220]	; (80077ec <SendFrameOnChannel+0x13c>)
 8007710:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8007714:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8007718:	4b34      	ldr	r3, [pc, #208]	; (80077ec <SendFrameOnChannel+0x13c>)
 800771a:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 800771e:	79fb      	ldrb	r3, [r7, #7]
 8007720:	4a32      	ldr	r2, [pc, #200]	; (80077ec <SendFrameOnChannel+0x13c>)
 8007722:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007726:	4b31      	ldr	r3, [pc, #196]	; (80077ec <SendFrameOnChannel+0x13c>)
 8007728:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800772c:	4a2f      	ldr	r2, [pc, #188]	; (80077ec <SendFrameOnChannel+0x13c>)
 800772e:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007732:	4b2e      	ldr	r3, [pc, #184]	; (80077ec <SendFrameOnChannel+0x13c>)
 8007734:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8007738:	4a2c      	ldr	r2, [pc, #176]	; (80077ec <SendFrameOnChannel+0x13c>)
 800773a:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800773e:	f001 fa13 	bl	8008b68 <LoRaMacClassBIsBeaconModeActive>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00b      	beq.n	8007760 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8007748:	4b28      	ldr	r3, [pc, #160]	; (80077ec <SendFrameOnChannel+0x13c>)
 800774a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800774e:	4618      	mov	r0, r3
 8007750:	f001 fa40 	bl	8008bd4 <LoRaMacClassBIsUplinkCollision>
 8007754:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800775c:	2310      	movs	r3, #16
 800775e:	e03e      	b.n	80077de <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007760:	4b21      	ldr	r3, [pc, #132]	; (80077e8 <SendFrameOnChannel+0x138>)
 8007762:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007766:	2b01      	cmp	r3, #1
 8007768:	d101      	bne.n	800776e <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 800776a:	f001 fa3d 	bl	8008be8 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 800776e:	f001 fa0c 	bl	8008b8a <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8007772:	4b1d      	ldr	r3, [pc, #116]	; (80077e8 <SendFrameOnChannel+0x138>)
 8007774:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8007778:	b2db      	uxtb	r3, r3
 800777a:	4a1c      	ldr	r2, [pc, #112]	; (80077ec <SendFrameOnChannel+0x13c>)
 800777c:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8007780:	4611      	mov	r1, r2
 8007782:	4618      	mov	r0, r3
 8007784:	f7ff fcd0 	bl	8007128 <SecureFrame>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 800778e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <SendFrameOnChannel+0xec>
    {
        return status;
 8007796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800779a:	e020      	b.n	80077de <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800779c:	4b13      	ldr	r3, [pc, #76]	; (80077ec <SendFrameOnChannel+0x13c>)
 800779e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80077a2:	f043 0302 	orr.w	r3, r3, #2
 80077a6:	4a11      	ldr	r2, [pc, #68]	; (80077ec <SendFrameOnChannel+0x13c>)
 80077a8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 80077ac:	4b0f      	ldr	r3, [pc, #60]	; (80077ec <SendFrameOnChannel+0x13c>)
 80077ae:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80077b2:	f083 0301 	eor.w	r3, r3, #1
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d007      	beq.n	80077cc <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 80077bc:	4b0b      	ldr	r3, [pc, #44]	; (80077ec <SendFrameOnChannel+0x13c>)
 80077be:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80077c2:	3301      	adds	r3, #1
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	4b09      	ldr	r3, [pc, #36]	; (80077ec <SendFrameOnChannel+0x13c>)
 80077c8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80077cc:	4b09      	ldr	r3, [pc, #36]	; (80077f4 <SendFrameOnChannel+0x144>)
 80077ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d0:	4a06      	ldr	r2, [pc, #24]	; (80077ec <SendFrameOnChannel+0x13c>)
 80077d2:	8812      	ldrh	r2, [r2, #0]
 80077d4:	b2d2      	uxtb	r2, r2
 80077d6:	4611      	mov	r1, r2
 80077d8:	4807      	ldr	r0, [pc, #28]	; (80077f8 <SendFrameOnChannel+0x148>)
 80077da:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3728      	adds	r7, #40	; 0x28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20000848 	.word	0x20000848
 80077ec:	2000033c 	.word	0x2000033c
 80077f0:	20000754 	.word	0x20000754
 80077f4:	0800f3f0 	.word	0x0800f3f0
 80077f8:	2000033e 	.word	0x2000033e

080077fc <SetTxContinuousWave>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	4603      	mov	r3, r0
 8007804:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8007806:	4b15      	ldr	r3, [pc, #84]	; (800785c <SetTxContinuousWave+0x60>)
 8007808:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800780c:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800780e:	4b14      	ldr	r3, [pc, #80]	; (8007860 <SetTxContinuousWave+0x64>)
 8007810:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8007814:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007816:	4b12      	ldr	r3, [pc, #72]	; (8007860 <SetTxContinuousWave+0x64>)
 8007818:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800781c:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800781e:	4b10      	ldr	r3, [pc, #64]	; (8007860 <SetTxContinuousWave+0x64>)
 8007820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007822:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8007824:	4b0e      	ldr	r3, [pc, #56]	; (8007860 <SetTxContinuousWave+0x64>)
 8007826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007828:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 800782a:	88fb      	ldrh	r3, [r7, #6]
 800782c:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800782e:	4b0c      	ldr	r3, [pc, #48]	; (8007860 <SetTxContinuousWave+0x64>)
 8007830:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007834:	f107 0208 	add.w	r2, r7, #8
 8007838:	4611      	mov	r1, r2
 800783a:	4618      	mov	r0, r3
 800783c:	f002 f939 	bl	8009ab2 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007840:	4b06      	ldr	r3, [pc, #24]	; (800785c <SetTxContinuousWave+0x60>)
 8007842:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8007846:	f043 0302 	orr.w	r3, r3, #2
 800784a:	4a04      	ldr	r2, [pc, #16]	; (800785c <SetTxContinuousWave+0x60>)
 800784c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	2000033c 	.word	0x2000033c
 8007860:	20000848 	.word	0x20000848

08007864 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	4603      	mov	r3, r0
 800786c:	6039      	str	r1, [r7, #0]
 800786e:	80fb      	strh	r3, [r7, #6]
 8007870:	4613      	mov	r3, r2
 8007872:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8007874:	4b09      	ldr	r3, [pc, #36]	; (800789c <SetTxContinuousWave1+0x38>)
 8007876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007878:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800787c:	88fa      	ldrh	r2, [r7, #6]
 800787e:	6838      	ldr	r0, [r7, #0]
 8007880:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007882:	4b07      	ldr	r3, [pc, #28]	; (80078a0 <SetTxContinuousWave1+0x3c>)
 8007884:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8007888:	f043 0302 	orr.w	r3, r3, #2
 800788c:	4a04      	ldr	r2, [pc, #16]	; (80078a0 <SetTxContinuousWave1+0x3c>)
 800788e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	0800f3f0 	.word	0x0800f3f0
 80078a0:	2000033c 	.word	0x2000033c

080078a4 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80078ae:	4b3e      	ldr	r3, [pc, #248]	; (80079a8 <RestoreNvmData+0x104>)
 80078b0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d001      	beq.n	80078bc <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e071      	b.n	80079a0 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 80078bc:	2124      	movs	r1, #36	; 0x24
 80078be:	483b      	ldr	r0, [pc, #236]	; (80079ac <RestoreNvmData+0x108>)
 80078c0:	f003 fe18 	bl	800b4f4 <Crc32>
 80078c4:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 80078c6:	4b39      	ldr	r3, [pc, #228]	; (80079ac <RestoreNvmData+0x108>)
 80078c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d001      	beq.n	80078d4 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80078d0:	2317      	movs	r3, #23
 80078d2:	e065      	b.n	80079a0 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 80078d4:	2114      	movs	r1, #20
 80078d6:	4836      	ldr	r0, [pc, #216]	; (80079b0 <RestoreNvmData+0x10c>)
 80078d8:	f003 fe0c 	bl	800b4f4 <Crc32>
 80078dc:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 80078de:	4b33      	ldr	r3, [pc, #204]	; (80079ac <RestoreNvmData+0x108>)
 80078e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d001      	beq.n	80078ec <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80078e8:	2317      	movs	r3, #23
 80078ea:	e059      	b.n	80079a0 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 80078ec:	21dc      	movs	r1, #220	; 0xdc
 80078ee:	4831      	ldr	r0, [pc, #196]	; (80079b4 <RestoreNvmData+0x110>)
 80078f0:	f003 fe00 	bl	800b4f4 <Crc32>
 80078f4:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 80078f6:	4b2d      	ldr	r3, [pc, #180]	; (80079ac <RestoreNvmData+0x108>)
 80078f8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d001      	beq.n	8007906 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8007902:	2317      	movs	r3, #23
 8007904:	e04c      	b.n	80079a0 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8007906:	21bc      	movs	r1, #188	; 0xbc
 8007908:	482b      	ldr	r0, [pc, #172]	; (80079b8 <RestoreNvmData+0x114>)
 800790a:	f003 fdf3 	bl	800b4f4 <Crc32>
 800790e:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8007910:	4b26      	ldr	r3, [pc, #152]	; (80079ac <RestoreNvmData+0x108>)
 8007912:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	429a      	cmp	r2, r3
 800791a:	d001      	beq.n	8007920 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800791c:	2317      	movs	r3, #23
 800791e:	e03f      	b.n	80079a0 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8007920:	2190      	movs	r1, #144	; 0x90
 8007922:	4826      	ldr	r0, [pc, #152]	; (80079bc <RestoreNvmData+0x118>)
 8007924:	f003 fde6 	bl	800b4f4 <Crc32>
 8007928:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800792a:	4b20      	ldr	r3, [pc, #128]	; (80079ac <RestoreNvmData+0x108>)
 800792c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	429a      	cmp	r2, r3
 8007934:	d001      	beq.n	800793a <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8007936:	2317      	movs	r3, #23
 8007938:	e032      	b.n	80079a0 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800793a:	2114      	movs	r1, #20
 800793c:	4820      	ldr	r0, [pc, #128]	; (80079c0 <RestoreNvmData+0x11c>)
 800793e:	f003 fdd9 	bl	800b4f4 <Crc32>
 8007942:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8007944:	4b19      	ldr	r3, [pc, #100]	; (80079ac <RestoreNvmData+0x108>)
 8007946:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	429a      	cmp	r2, r3
 800794e:	d001      	beq.n	8007954 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8007950:	2317      	movs	r3, #23
 8007952:	e025      	b.n	80079a0 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8007954:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8007958:	4914      	ldr	r1, [pc, #80]	; (80079ac <RestoreNvmData+0x108>)
 800795a:	481a      	ldr	r0, [pc, #104]	; (80079c4 <RestoreNvmData+0x120>)
 800795c:	f003 fd75 	bl	800b44a <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8007960:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8007964:	2100      	movs	r1, #0
 8007966:	4811      	ldr	r0, [pc, #68]	; (80079ac <RestoreNvmData+0x108>)
 8007968:	f003 fdaa 	bl	800b4c0 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800796c:	4b0e      	ldr	r3, [pc, #56]	; (80079a8 <RestoreNvmData+0x104>)
 800796e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8007972:	4b0d      	ldr	r3, [pc, #52]	; (80079a8 <RestoreNvmData+0x104>)
 8007974:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8007978:	4b12      	ldr	r3, [pc, #72]	; (80079c4 <RestoreNvmData+0x120>)
 800797a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800797c:	4a0a      	ldr	r2, [pc, #40]	; (80079a8 <RestoreNvmData+0x104>)
 800797e:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007982:	4b10      	ldr	r3, [pc, #64]	; (80079c4 <RestoreNvmData+0x120>)
 8007984:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8007988:	4b07      	ldr	r3, [pc, #28]	; (80079a8 <RestoreNvmData+0x104>)
 800798a:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800798e:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <RestoreNvmData+0x104>)
 8007990:	2201      	movs	r2, #1
 8007992:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007996:	4b04      	ldr	r3, [pc, #16]	; (80079a8 <RestoreNvmData+0x104>)
 8007998:	2202      	movs	r2, #2
 800799a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    return LORAMAC_STATUS_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	2000033c 	.word	0x2000033c
 80079ac:	20000f70 	.word	0x20000f70
 80079b0:	20000f98 	.word	0x20000f98
 80079b4:	20000fb0 	.word	0x20000fb0
 80079b8:	20001090 	.word	0x20001090
 80079bc:	20001150 	.word	0x20001150
 80079c0:	20001680 	.word	0x20001680
 80079c4:	20000848 	.word	0x20000848

080079c8 <LoRaMacStart>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacStart( void )
{
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80079cc:	4b04      	ldr	r3, [pc, #16]	; (80079e0 <LoRaMacStart+0x18>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	46bd      	mov	sp, r7
 80079da:	bc80      	pop	{r7}
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	2000033c 	.word	0x2000033c

080079e4 <LoRaMacQueryTxPossible>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b08a      	sub	sp, #40	; 0x28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	4603      	mov	r3, r0
 80079ec:	6039      	str	r1, [r7, #0]
 80079ee:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80079f0:	4b3e      	ldr	r3, [pc, #248]	; (8007aec <LoRaMacQueryTxPossible+0x108>)
 80079f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f4:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80079f6:	4b3d      	ldr	r3, [pc, #244]	; (8007aec <LoRaMacQueryTxPossible+0x108>)
 80079f8:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 80079fc:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80079fe:	4b3b      	ldr	r3, [pc, #236]	; (8007aec <LoRaMacQueryTxPossible+0x108>)
 8007a00:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 8007a04:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8007a06:	2300      	movs	r3, #0
 8007a08:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e066      	b.n	8007ae2 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8007a14:	4b35      	ldr	r3, [pc, #212]	; (8007aec <LoRaMacQueryTxPossible+0x108>)
 8007a16:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007a1a:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8007a20:	4b32      	ldr	r3, [pc, #200]	; (8007aec <LoRaMacQueryTxPossible+0x108>)
 8007a22:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8007a26:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8007a28:	4b30      	ldr	r3, [pc, #192]	; (8007aec <LoRaMacQueryTxPossible+0x108>)
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2c:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8007a2e:	4b30      	ldr	r3, [pc, #192]	; (8007af0 <LoRaMacQueryTxPossible+0x10c>)
 8007a30:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8007a34:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8007a36:	4b2e      	ldr	r3, [pc, #184]	; (8007af0 <LoRaMacQueryTxPossible+0x10c>)
 8007a38:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8007a3c:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007a3e:	4b2b      	ldr	r3, [pc, #172]	; (8007aec <LoRaMacQueryTxPossible+0x108>)
 8007a40:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8007a44:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007a48:	4b28      	ldr	r3, [pc, #160]	; (8007aec <LoRaMacQueryTxPossible+0x108>)
 8007a4a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8007a4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007a52:	4b26      	ldr	r3, [pc, #152]	; (8007aec <LoRaMacQueryTxPossible+0x108>)
 8007a54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007a58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8007a5c:	4b23      	ldr	r3, [pc, #140]	; (8007aec <LoRaMacQueryTxPossible+0x108>)
 8007a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8007a66:	f107 0310 	add.w	r3, r7, #16
 8007a6a:	f107 020e 	add.w	r2, r7, #14
 8007a6e:	f107 010f 	add.w	r1, r7, #15
 8007a72:	f107 0014 	add.w	r0, r7, #20
 8007a76:	f001 f825 	bl	8008ac4 <LoRaMacAdrCalcNext>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7ff f830 	bl	8006ae4 <GetMaxAppPayloadWithoutFOptsLength>
 8007a84:	4603      	mov	r3, r0
 8007a86:	461a      	mov	r2, r3
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8007a8c:	f107 0308 	add.w	r3, r7, #8
 8007a90:	4618      	mov	r0, r3
 8007a92:	f001 fa3d 	bl	8008f10 <LoRaMacCommandsGetSizeSerializedCmds>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007a9c:	2313      	movs	r3, #19
 8007a9e:	e020      	b.n	8007ae2 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	2b0f      	cmp	r3, #15
 8007aa4:	d819      	bhi.n	8007ada <LoRaMacQueryTxPossible+0xf6>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	785b      	ldrb	r3, [r3, #1]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d313      	bcc.n	8007ada <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	785a      	ldrb	r2, [r3, #1]
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	785b      	ldrb	r3, [r3, #1]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	79fa      	ldrb	r2, [r7, #7]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	4413      	add	r3, r2
 8007ace:	4299      	cmp	r1, r3
 8007ad0:	d301      	bcc.n	8007ad6 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e005      	b.n	8007ae2 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8007ad6:	2308      	movs	r3, #8
 8007ad8:	e003      	b.n	8007ae2 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	2200      	movs	r2, #0
 8007ade:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8007ae0:	2308      	movs	r3, #8
    }
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3728      	adds	r7, #40	; 0x28
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	20000848 	.word	0x20000848
 8007af0:	2000033c 	.word	0x2000033c

08007af4 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8007af4:	b590      	push	{r4, r7, lr}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e171      	b.n	8007dee <LoRaMacMibGetRequestConfirm+0x2fa>
    }

    switch( mibGet->Type )
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	2b37      	cmp	r3, #55	; 0x37
 8007b10:	f200 8166 	bhi.w	8007de0 <LoRaMacMibGetRequestConfirm+0x2ec>
 8007b14:	a201      	add	r2, pc, #4	; (adr r2, 8007b1c <LoRaMacMibGetRequestConfirm+0x28>)
 8007b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1a:	bf00      	nop
 8007b1c:	08007bfd 	.word	0x08007bfd
 8007b20:	08007c09 	.word	0x08007c09
 8007b24:	08007c15 	.word	0x08007c15
 8007b28:	08007c21 	.word	0x08007c21
 8007b2c:	08007c2d 	.word	0x08007c2d
 8007b30:	08007c39 	.word	0x08007c39
 8007b34:	08007c45 	.word	0x08007c45
 8007b38:	08007de1 	.word	0x08007de1
 8007b3c:	08007de1 	.word	0x08007de1
 8007b40:	08007de1 	.word	0x08007de1
 8007b44:	08007de1 	.word	0x08007de1
 8007b48:	08007de1 	.word	0x08007de1
 8007b4c:	08007de1 	.word	0x08007de1
 8007b50:	08007de1 	.word	0x08007de1
 8007b54:	08007de1 	.word	0x08007de1
 8007b58:	08007c51 	.word	0x08007c51
 8007b5c:	08007c5d 	.word	0x08007c5d
 8007b60:	08007c69 	.word	0x08007c69
 8007b64:	08007c8b 	.word	0x08007c8b
 8007b68:	08007c9d 	.word	0x08007c9d
 8007b6c:	08007caf 	.word	0x08007caf
 8007b70:	08007cc1 	.word	0x08007cc1
 8007b74:	08007cf5 	.word	0x08007cf5
 8007b78:	08007cd3 	.word	0x08007cd3
 8007b7c:	08007d17 	.word	0x08007d17
 8007b80:	08007d23 	.word	0x08007d23
 8007b84:	08007d2d 	.word	0x08007d2d
 8007b88:	08007d37 	.word	0x08007d37
 8007b8c:	08007d41 	.word	0x08007d41
 8007b90:	08007d4b 	.word	0x08007d4b
 8007b94:	08007d55 	.word	0x08007d55
 8007b98:	08007d61 	.word	0x08007d61
 8007b9c:	08007d79 	.word	0x08007d79
 8007ba0:	08007d6d 	.word	0x08007d6d
 8007ba4:	08007d85 	.word	0x08007d85
 8007ba8:	08007d8f 	.word	0x08007d8f
 8007bac:	08007d9b 	.word	0x08007d9b
 8007bb0:	08007db5 	.word	0x08007db5
 8007bb4:	08007da5 	.word	0x08007da5
 8007bb8:	08007dad 	.word	0x08007dad
 8007bbc:	08007de1 	.word	0x08007de1
 8007bc0:	08007dc1 	.word	0x08007dc1
 8007bc4:	08007de1 	.word	0x08007de1
 8007bc8:	08007de1 	.word	0x08007de1
 8007bcc:	08007de1 	.word	0x08007de1
 8007bd0:	08007de1 	.word	0x08007de1
 8007bd4:	08007de1 	.word	0x08007de1
 8007bd8:	08007de1 	.word	0x08007de1
 8007bdc:	08007de1 	.word	0x08007de1
 8007be0:	08007de1 	.word	0x08007de1
 8007be4:	08007de1 	.word	0x08007de1
 8007be8:	08007de1 	.word	0x08007de1
 8007bec:	08007de1 	.word	0x08007de1
 8007bf0:	08007de1 	.word	0x08007de1
 8007bf4:	08007de1 	.word	0x08007de1
 8007bf8:	08007dd5 	.word	0x08007dd5
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8007bfc:	4b7e      	ldr	r3, [pc, #504]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007bfe:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	711a      	strb	r2, [r3, #4]
            break;
 8007c06:	e0f1      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8007c08:	4b7b      	ldr	r3, [pc, #492]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007c0a:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	711a      	strb	r2, [r3, #4]
            break;
 8007c12:	e0eb      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8007c14:	f7fd fe0e 	bl	8005834 <SecureElementGetDevEui>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	605a      	str	r2, [r3, #4]
            break;
 8007c1e:	e0e5      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8007c20:	f7fd fe2a 	bl	8005878 <SecureElementGetJoinEui>
 8007c24:	4602      	mov	r2, r0
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	605a      	str	r2, [r3, #4]
            break;
 8007c2a:	e0df      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8007c2c:	4b72      	ldr	r3, [pc, #456]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007c2e:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	711a      	strb	r2, [r3, #4]
            break;
 8007c36:	e0d9      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8007c38:	4b6f      	ldr	r3, [pc, #444]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007c3a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	605a      	str	r2, [r3, #4]
            break;
 8007c42:	e0d3      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8007c44:	4b6c      	ldr	r3, [pc, #432]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007c46:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	605a      	str	r2, [r3, #4]
            break;
 8007c4e:	e0cd      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8007c50:	4b69      	ldr	r3, [pc, #420]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007c52:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	711a      	strb	r2, [r3, #4]
            break;
 8007c5a:	e0c7      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8007c5c:	4b66      	ldr	r3, [pc, #408]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007c5e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	711a      	strb	r2, [r3, #4]
            break;
 8007c66:	e0c1      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8007c68:	231d      	movs	r3, #29
 8007c6a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007c6c:	4b62      	ldr	r3, [pc, #392]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c72:	f107 0210 	add.w	r2, r7, #16
 8007c76:	4611      	mov	r1, r2
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f001 fe4e 	bl	800991a <RegionGetPhyParam>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	605a      	str	r2, [r3, #4]
            break;
 8007c88:	e0b0      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a5a      	ldr	r2, [pc, #360]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007c8e:	3304      	adds	r3, #4
 8007c90:	3264      	adds	r2, #100	; 0x64
 8007c92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c96:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8007c9a:	e0a7      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a56      	ldr	r2, [pc, #344]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	32a8      	adds	r2, #168	; 0xa8
 8007ca4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ca8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8007cac:	e09e      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a51      	ldr	r2, [pc, #324]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	326c      	adds	r2, #108	; 0x6c
 8007cb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007cba:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8007cbe:	e095      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a4d      	ldr	r2, [pc, #308]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	32b0      	adds	r2, #176	; 0xb0
 8007cc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ccc:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8007cd0:	e08c      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8007cd2:	231b      	movs	r3, #27
 8007cd4:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007cd6:	4b48      	ldr	r3, [pc, #288]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007cd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cdc:	f107 0210 	add.w	r2, r7, #16
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f001 fe19 	bl	800991a <RegionGetPhyParam>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	605a      	str	r2, [r3, #4]
            break;
 8007cf2:	e07b      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8007cf4:	231a      	movs	r3, #26
 8007cf6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007cf8:	4b3f      	ldr	r3, [pc, #252]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cfe:	f107 0210 	add.w	r2, r7, #16
 8007d02:	4611      	mov	r1, r2
 8007d04:	4618      	mov	r0, r3
 8007d06:	f001 fe08 	bl	800991a <RegionGetPhyParam>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	605a      	str	r2, [r3, #4]
            break;
 8007d14:	e06a      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8007d16:	4b38      	ldr	r3, [pc, #224]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007d18:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	711a      	strb	r2, [r3, #4]
            break;
 8007d20:	e064      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8007d22:	4b35      	ldr	r3, [pc, #212]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007d24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	605a      	str	r2, [r3, #4]
            break;
 8007d2a:	e05f      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8007d2c:	4b32      	ldr	r3, [pc, #200]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007d2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	605a      	str	r2, [r3, #4]
            break;
 8007d34:	e05a      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8007d36:	4b30      	ldr	r3, [pc, #192]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	605a      	str	r2, [r3, #4]
            break;
 8007d3e:	e055      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8007d40:	4b2d      	ldr	r3, [pc, #180]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007d42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	605a      	str	r2, [r3, #4]
            break;
 8007d48:	e050      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8007d4a:	4b2b      	ldr	r3, [pc, #172]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007d4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	605a      	str	r2, [r3, #4]
            break;
 8007d52:	e04b      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8007d54:	4b28      	ldr	r3, [pc, #160]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007d56:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	711a      	strb	r2, [r3, #4]
            break;
 8007d5e:	e045      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8007d60:	4b25      	ldr	r3, [pc, #148]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007d62:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	711a      	strb	r2, [r3, #4]
            break;
 8007d6a:	e03f      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8007d6c:	4b22      	ldr	r3, [pc, #136]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007d6e:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	711a      	strb	r2, [r3, #4]
            break;
 8007d76:	e039      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007d78:	4b1f      	ldr	r3, [pc, #124]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007d7a:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	711a      	strb	r2, [r3, #4]
            break;
 8007d82:	e033      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8007d84:	4b1c      	ldr	r3, [pc, #112]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007d86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	605a      	str	r2, [r3, #4]
            break;
 8007d8c:	e02e      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8007d8e:	4b1a      	ldr	r3, [pc, #104]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007d90:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	711a      	strb	r2, [r3, #4]
            break;
 8007d98:	e028      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8007d9a:	4b17      	ldr	r3, [pc, #92]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007d9c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	605a      	str	r2, [r3, #4]
            break;
 8007da2:	e023      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a14      	ldr	r2, [pc, #80]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007da8:	605a      	str	r2, [r3, #4]
            break;
 8007daa:	e01f      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a13      	ldr	r2, [pc, #76]	; (8007dfc <LoRaMacMibGetRequestConfirm+0x308>)
 8007db0:	605a      	str	r2, [r3, #4]
            break;
 8007db2:	e01b      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8007db4:	4b10      	ldr	r3, [pc, #64]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007db6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	605a      	str	r2, [r3, #4]
            break;
 8007dbe:	e015      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a0d      	ldr	r2, [pc, #52]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007dc4:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 8007dc8:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8007dca:	687c      	ldr	r4, [r7, #4]
 8007dcc:	f001 fea4 	bl	8009b18 <RegionGetVersion>
 8007dd0:	60a0      	str	r0, [r4, #8]
            break;
 8007dd2:	e00b      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8007dd4:	4b08      	ldr	r3, [pc, #32]	; (8007df8 <LoRaMacMibGetRequestConfirm+0x304>)
 8007dd6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	605a      	str	r2, [r3, #4]
            break;
 8007dde:	e005      	b.n	8007dec <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fee3 	bl	8008bac <LoRaMacClassBMibGetRequestConfirm>
 8007de6:	4603      	mov	r3, r0
 8007de8:	75fb      	strb	r3, [r7, #23]
            break;
 8007dea:	bf00      	nop
        }
    }
    return status;
 8007dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd90      	pop	{r4, r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20000848 	.word	0x20000848
 8007dfc:	20000f70 	.word	0x20000f70

08007e00 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e348      	b.n	80084a8 <LoRaMacMibSetRequestConfirm+0x6a8>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8007e16:	4bb7      	ldr	r3, [pc, #732]	; (80080f4 <LoRaMacMibSetRequestConfirm+0x2f4>)
 8007e18:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8007e1c:	f003 0302 	and.w	r3, r3, #2
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e33f      	b.n	80084a8 <LoRaMacMibSetRequestConfirm+0x6a8>
    }

    switch( mibSet->Type )
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	2b37      	cmp	r3, #55	; 0x37
 8007e2e:	f200 8319 	bhi.w	8008464 <LoRaMacMibSetRequestConfirm+0x664>
 8007e32:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <LoRaMacMibSetRequestConfirm+0x38>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007f19 	.word	0x08007f19
 8007e3c:	08007f29 	.word	0x08007f29
 8007e40:	08007f43 	.word	0x08007f43
 8007e44:	08007f5b 	.word	0x08007f5b
 8007e48:	08007f73 	.word	0x08007f73
 8007e4c:	08007f7f 	.word	0x08007f7f
 8007e50:	08007f8b 	.word	0x08007f8b
 8007e54:	08007f97 	.word	0x08007f97
 8007e58:	08007fbd 	.word	0x08007fbd
 8007e5c:	08007fe3 	.word	0x08007fe3
 8007e60:	08008009 	.word	0x08008009
 8007e64:	0800802f 	.word	0x0800802f
 8007e68:	08008055 	.word	0x08008055
 8007e6c:	0800807b 	.word	0x0800807b
 8007e70:	080080a1 	.word	0x080080a1
 8007e74:	080080c7 	.word	0x080080c7
 8007e78:	080080e7 	.word	0x080080e7
 8007e7c:	08008465 	.word	0x08008465
 8007e80:	08008101 	.word	0x08008101
 8007e84:	08008171 	.word	0x08008171
 8007e88:	080081b1 	.word	0x080081b1
 8007e8c:	08008213 	.word	0x08008213
 8007e90:	08008283 	.word	0x08008283
 8007e94:	08008253 	.word	0x08008253
 8007e98:	080082b3 	.word	0x080082b3
 8007e9c:	080082d5 	.word	0x080082d5
 8007ea0:	080082df 	.word	0x080082df
 8007ea4:	080082e9 	.word	0x080082e9
 8007ea8:	080082f3 	.word	0x080082f3
 8007eac:	080082fd 	.word	0x080082fd
 8007eb0:	08008307 	.word	0x08008307
 8007eb4:	08008339 	.word	0x08008339
 8007eb8:	080083a5 	.word	0x080083a5
 8007ebc:	08008373 	.word	0x08008373
 8007ec0:	080083e1 	.word	0x080083e1
 8007ec4:	080083f7 	.word	0x080083f7
 8007ec8:	0800840f 	.word	0x0800840f
 8007ecc:	08008419 	.word	0x08008419
 8007ed0:	08008425 	.word	0x08008425
 8007ed4:	08008465 	.word	0x08008465
 8007ed8:	0800842f 	.word	0x0800842f
 8007edc:	08008465 	.word	0x08008465
 8007ee0:	08008465 	.word	0x08008465
 8007ee4:	08008465 	.word	0x08008465
 8007ee8:	08008465 	.word	0x08008465
 8007eec:	08008465 	.word	0x08008465
 8007ef0:	08008465 	.word	0x08008465
 8007ef4:	08008465 	.word	0x08008465
 8007ef8:	08008465 	.word	0x08008465
 8007efc:	08008465 	.word	0x08008465
 8007f00:	08008465 	.word	0x08008465
 8007f04:	08008465 	.word	0x08008465
 8007f08:	08008465 	.word	0x08008465
 8007f0c:	08008465 	.word	0x08008465
 8007f10:	08008465 	.word	0x08008465
 8007f14:	08008459 	.word	0x08008459
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	791b      	ldrb	r3, [r3, #4]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fe fd11 	bl	8006944 <SwitchClass>
 8007f22:	4603      	mov	r3, r0
 8007f24:	75fb      	strb	r3, [r7, #23]
            break;
 8007f26:	e2be      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	791b      	ldrb	r3, [r3, #4]
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d005      	beq.n	8007f3c <LoRaMacMibSetRequestConfirm+0x13c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	791a      	ldrb	r2, [r3, #4]
 8007f34:	4b70      	ldr	r3, [pc, #448]	; (80080f8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8007f36:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8007f3a:	e2b4      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	75fb      	strb	r3, [r7, #23]
            break;
 8007f40:	e2b1      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fd fc5c 	bl	8005804 <SecureElementSetDevEui>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 828e 	beq.w	8008470 <LoRaMacMibSetRequestConfirm+0x670>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007f54:	2303      	movs	r3, #3
 8007f56:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8007f58:	e28a      	b.n	8008470 <LoRaMacMibSetRequestConfirm+0x670>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fd fc72 	bl	8005848 <SecureElementSetJoinEui>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f000 8284 	beq.w	8008474 <LoRaMacMibSetRequestConfirm+0x674>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8007f70:	e280      	b.n	8008474 <LoRaMacMibSetRequestConfirm+0x674>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	791a      	ldrb	r2, [r3, #4]
 8007f76:	4b60      	ldr	r3, [pc, #384]	; (80080f8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8007f78:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 8007f7c:	e293      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	4a5d      	ldr	r2, [pc, #372]	; (80080f8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8007f84:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 8007f88:	e28d      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	4a5a      	ldr	r2, [pc, #360]	; (80080f8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8007f90:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 8007f94:	e287      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00b      	beq.n	8007fb6 <LoRaMacMibSetRequestConfirm+0x1b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	f001 fa05 	bl	80093b4 <LoRaMacCryptoSetKey>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 8263 	beq.w	8008478 <LoRaMacMibSetRequestConfirm+0x678>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8007fb2:	2311      	movs	r3, #17
 8007fb4:	e278      	b.n	80084a8 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8007fba:	e25d      	b.n	8008478 <LoRaMacMibSetRequestConfirm+0x678>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00b      	beq.n	8007fdc <LoRaMacMibSetRequestConfirm+0x1dc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	4619      	mov	r1, r3
 8007fca:	2001      	movs	r0, #1
 8007fcc:	f001 f9f2 	bl	80093b4 <LoRaMacCryptoSetKey>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 8252 	beq.w	800847c <LoRaMacMibSetRequestConfirm+0x67c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8007fd8:	2311      	movs	r3, #17
 8007fda:	e265      	b.n	80084a8 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8007fe0:	e24c      	b.n	800847c <LoRaMacMibSetRequestConfirm+0x67c>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00b      	beq.n	8008002 <LoRaMacMibSetRequestConfirm+0x202>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	2002      	movs	r0, #2
 8007ff2:	f001 f9df 	bl	80093b4 <LoRaMacCryptoSetKey>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f000 8241 	beq.w	8008480 <LoRaMacMibSetRequestConfirm+0x680>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8007ffe:	2311      	movs	r3, #17
 8008000:	e252      	b.n	80084a8 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008002:	2303      	movs	r3, #3
 8008004:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8008006:	e23b      	b.n	8008480 <LoRaMacMibSetRequestConfirm+0x680>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00b      	beq.n	8008028 <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	4619      	mov	r1, r3
 8008016:	2003      	movs	r0, #3
 8008018:	f001 f9cc 	bl	80093b4 <LoRaMacCryptoSetKey>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	f000 8230 	beq.w	8008484 <LoRaMacMibSetRequestConfirm+0x684>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8008024:	2311      	movs	r3, #17
 8008026:	e23f      	b.n	80084a8 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008028:	2303      	movs	r3, #3
 800802a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800802c:	e22a      	b.n	8008484 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00b      	beq.n	800804e <LoRaMacMibSetRequestConfirm+0x24e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	4619      	mov	r1, r3
 800803c:	207f      	movs	r0, #127	; 0x7f
 800803e:	f001 f9b9 	bl	80093b4 <LoRaMacCryptoSetKey>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	f000 821f 	beq.w	8008488 <LoRaMacMibSetRequestConfirm+0x688>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800804a:	2311      	movs	r3, #17
 800804c:	e22c      	b.n	80084a8 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800804e:	2303      	movs	r3, #3
 8008050:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8008052:	e219      	b.n	8008488 <LoRaMacMibSetRequestConfirm+0x688>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00b      	beq.n	8008074 <LoRaMacMibSetRequestConfirm+0x274>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	4619      	mov	r1, r3
 8008062:	2080      	movs	r0, #128	; 0x80
 8008064:	f001 f9a6 	bl	80093b4 <LoRaMacCryptoSetKey>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	f000 820e 	beq.w	800848c <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8008070:	2311      	movs	r3, #17
 8008072:	e219      	b.n	80084a8 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008074:	2303      	movs	r3, #3
 8008076:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8008078:	e208      	b.n	800848c <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00b      	beq.n	800809a <LoRaMacMibSetRequestConfirm+0x29a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	4619      	mov	r1, r3
 8008088:	2081      	movs	r0, #129	; 0x81
 800808a:	f001 f993 	bl	80093b4 <LoRaMacCryptoSetKey>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 81fd 	beq.w	8008490 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8008096:	2311      	movs	r3, #17
 8008098:	e206      	b.n	80084a8 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800809a:	2303      	movs	r3, #3
 800809c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800809e:	e1f7      	b.n	8008490 <LoRaMacMibSetRequestConfirm+0x690>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00b      	beq.n	80080c0 <LoRaMacMibSetRequestConfirm+0x2c0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	4619      	mov	r1, r3
 80080ae:	2082      	movs	r0, #130	; 0x82
 80080b0:	f001 f980 	bl	80093b4 <LoRaMacCryptoSetKey>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f000 81ec 	beq.w	8008494 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80080bc:	2311      	movs	r3, #17
 80080be:	e1f3      	b.n	80084a8 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80080c0:	2303      	movs	r3, #3
 80080c2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80080c4:	e1e6      	b.n	8008494 <LoRaMacMibSetRequestConfirm+0x694>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	791a      	ldrb	r2, [r3, #4]
 80080ca:	4b0b      	ldr	r3, [pc, #44]	; (80080f8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80080cc:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80080d0:	4b0a      	ldr	r3, [pc, #40]	; (80080fc <LoRaMacMibSetRequestConfirm+0x2fc>)
 80080d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d4:	4a08      	ldr	r2, [pc, #32]	; (80080f8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80080d6:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 80080da:	4610      	mov	r0, r2
 80080dc:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80080de:	4b07      	ldr	r3, [pc, #28]	; (80080fc <LoRaMacMibSetRequestConfirm+0x2fc>)
 80080e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e2:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80080e4:	e1df      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	791a      	ldrb	r2, [r3, #4]
 80080ea:	4b03      	ldr	r3, [pc, #12]	; (80080f8 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80080ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 80080f0:	e1d9      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
 80080f2:	bf00      	nop
 80080f4:	2000033c 	.word	0x2000033c
 80080f8:	20000848 	.word	0x20000848
 80080fc:	0800f3f0 	.word	0x0800f3f0
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	7a1b      	ldrb	r3, [r3, #8]
 8008104:	b25b      	sxtb	r3, r3
 8008106:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008108:	4bb3      	ldr	r3, [pc, #716]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 800810a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800810e:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8008110:	4bb1      	ldr	r3, [pc, #708]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8008112:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008116:	f107 0108 	add.w	r1, r7, #8
 800811a:	2207      	movs	r2, #7
 800811c:	4618      	mov	r0, r3
 800811e:	f001 fc26 	bl	800996e <RegionVerify>
 8008122:	4603      	mov	r3, r0
 8008124:	f083 0301 	eor.w	r3, r3, #1
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d002      	beq.n	8008134 <LoRaMacMibSetRequestConfirm+0x334>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800812e:	2303      	movs	r3, #3
 8008130:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8008132:	e1b8      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800813a:	4ba7      	ldr	r3, [pc, #668]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 800813c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008140:	f107 0108 	add.w	r1, r7, #8
 8008144:	2200      	movs	r2, #0
 8008146:	4618      	mov	r0, r3
 8008148:	f001 fc11 	bl	800996e <RegionVerify>
 800814c:	4603      	mov	r3, r0
 800814e:	f083 0301 	eor.w	r3, r3, #1
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <LoRaMacMibSetRequestConfirm+0x35e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008158:	2303      	movs	r3, #3
 800815a:	75fb      	strb	r3, [r7, #23]
            break;
 800815c:	e1a3      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800815e:	4b9e      	ldr	r3, [pc, #632]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	3364      	adds	r3, #100	; 0x64
 8008164:	3204      	adds	r2, #4
 8008166:	e892 0003 	ldmia.w	r2, {r0, r1}
 800816a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800816e:	e19a      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	7a1b      	ldrb	r3, [r3, #8]
 8008174:	b25b      	sxtb	r3, r3
 8008176:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008178:	4b97      	ldr	r3, [pc, #604]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 800817a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800817e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8008180:	4b95      	ldr	r3, [pc, #596]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8008182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008186:	f107 0108 	add.w	r1, r7, #8
 800818a:	2207      	movs	r2, #7
 800818c:	4618      	mov	r0, r3
 800818e:	f001 fbee 	bl	800996e <RegionVerify>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d008      	beq.n	80081aa <LoRaMacMibSetRequestConfirm+0x3aa>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8008198:	4b8f      	ldr	r3, [pc, #572]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	33a8      	adds	r3, #168	; 0xa8
 800819e:	3204      	adds	r2, #4
 80081a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80081a4:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80081a8:	e17d      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80081aa:	2303      	movs	r3, #3
 80081ac:	75fb      	strb	r3, [r7, #23]
            break;
 80081ae:	e17a      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	7a1b      	ldrb	r3, [r3, #8]
 80081b4:	b25b      	sxtb	r3, r3
 80081b6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80081b8:	4b87      	ldr	r3, [pc, #540]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80081ba:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80081be:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80081c0:	4b85      	ldr	r3, [pc, #532]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80081c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081c6:	f107 0108 	add.w	r1, r7, #8
 80081ca:	2207      	movs	r2, #7
 80081cc:	4618      	mov	r0, r3
 80081ce:	f001 fbce 	bl	800996e <RegionVerify>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d019      	beq.n	800820c <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80081d8:	4b7f      	ldr	r3, [pc, #508]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	336c      	adds	r3, #108	; 0x6c
 80081de:	3204      	adds	r2, #4
 80081e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80081e4:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80081e8:	4b7b      	ldr	r3, [pc, #492]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80081ea:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	f040 8152 	bne.w	8008498 <LoRaMacMibSetRequestConfirm+0x698>
 80081f4:	4b78      	ldr	r3, [pc, #480]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80081f6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 814c 	beq.w	8008498 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8008200:	4b76      	ldr	r3, [pc, #472]	; (80083dc <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008204:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8008206:	f7ff f8f3 	bl	80073f0 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800820a:	e145      	b.n	8008498 <LoRaMacMibSetRequestConfirm+0x698>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800820c:	2303      	movs	r3, #3
 800820e:	75fb      	strb	r3, [r7, #23]
            break;
 8008210:	e142      	b.n	8008498 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	7a1b      	ldrb	r3, [r3, #8]
 8008216:	b25b      	sxtb	r3, r3
 8008218:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800821a:	4b6f      	ldr	r3, [pc, #444]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 800821c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8008220:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8008222:	4b6d      	ldr	r3, [pc, #436]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8008224:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008228:	f107 0108 	add.w	r1, r7, #8
 800822c:	2207      	movs	r2, #7
 800822e:	4618      	mov	r0, r3
 8008230:	f001 fb9d 	bl	800996e <RegionVerify>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d008      	beq.n	800824c <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800823a:	4b67      	ldr	r3, [pc, #412]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	33b0      	adds	r3, #176	; 0xb0
 8008240:	3204      	adds	r2, #4
 8008242:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008246:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800824a:	e12c      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800824c:	2303      	movs	r3, #3
 800824e:	75fb      	strb	r3, [r7, #23]
            break;
 8008250:	e129      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8008258:	2301      	movs	r3, #1
 800825a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800825c:	4b5e      	ldr	r3, [pc, #376]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 800825e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008262:	f107 020c 	add.w	r2, r7, #12
 8008266:	4611      	mov	r1, r2
 8008268:	4618      	mov	r0, r3
 800826a:	f001 fb97 	bl	800999c <RegionChanMaskSet>
 800826e:	4603      	mov	r3, r0
 8008270:	f083 0301 	eor.w	r3, r3, #1
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 8110 	beq.w	800849c <LoRaMacMibSetRequestConfirm+0x69c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800827c:	2303      	movs	r3, #3
 800827e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8008280:	e10c      	b.n	800849c <LoRaMacMibSetRequestConfirm+0x69c>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8008288:	2300      	movs	r3, #0
 800828a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800828c:	4b52      	ldr	r3, [pc, #328]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 800828e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008292:	f107 020c 	add.w	r2, r7, #12
 8008296:	4611      	mov	r1, r2
 8008298:	4618      	mov	r0, r3
 800829a:	f001 fb7f 	bl	800999c <RegionChanMaskSet>
 800829e:	4603      	mov	r3, r0
 80082a0:	f083 0301 	eor.w	r3, r3, #1
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f000 80fa 	beq.w	80084a0 <LoRaMacMibSetRequestConfirm+0x6a0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80082ac:	2303      	movs	r3, #3
 80082ae:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80082b0:	e0f6      	b.n	80084a0 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	791b      	ldrb	r3, [r3, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d009      	beq.n	80082ce <LoRaMacMibSetRequestConfirm+0x4ce>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80082be:	2b0f      	cmp	r3, #15
 80082c0:	d805      	bhi.n	80082ce <LoRaMacMibSetRequestConfirm+0x4ce>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	791a      	ldrb	r2, [r3, #4]
 80082c6:	4b44      	ldr	r3, [pc, #272]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80082c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80082cc:	e0eb      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80082ce:	2303      	movs	r3, #3
 80082d0:	75fb      	strb	r3, [r7, #23]
            break;
 80082d2:	e0e8      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	4a3f      	ldr	r2, [pc, #252]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80082da:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 80082dc:	e0e3      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	4a3d      	ldr	r2, [pc, #244]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80082e4:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 80082e6:	e0de      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	4a3a      	ldr	r2, [pc, #232]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80082ee:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80082f0:	e0d9      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	4a38      	ldr	r2, [pc, #224]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80082f8:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 80082fa:	e0d4      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	4a35      	ldr	r2, [pc, #212]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8008302:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8008304:	e0cf      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800830c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800830e:	4b32      	ldr	r3, [pc, #200]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8008310:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008314:	f107 0108 	add.w	r1, r7, #8
 8008318:	2206      	movs	r2, #6
 800831a:	4618      	mov	r0, r3
 800831c:	f001 fb27 	bl	800996e <RegionVerify>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d005      	beq.n	8008332 <LoRaMacMibSetRequestConfirm+0x532>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8008326:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800832a:	4b2b      	ldr	r3, [pc, #172]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 800832c:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008330:	e0b9      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008332:	2303      	movs	r3, #3
 8008334:	75fb      	strb	r3, [r7, #23]
            break;
 8008336:	e0b6      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800833e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008340:	4b25      	ldr	r3, [pc, #148]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8008342:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008346:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8008348:	4b23      	ldr	r3, [pc, #140]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 800834a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800834e:	f107 0108 	add.w	r1, r7, #8
 8008352:	2205      	movs	r2, #5
 8008354:	4618      	mov	r0, r3
 8008356:	f001 fb0a 	bl	800996e <RegionVerify>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d005      	beq.n	800836c <LoRaMacMibSetRequestConfirm+0x56c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8008360:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8008364:	4b1c      	ldr	r3, [pc, #112]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8008366:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800836a:	e09c      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800836c:	2303      	movs	r3, #3
 800836e:	75fb      	strb	r3, [r7, #23]
            break;
 8008370:	e099      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008378:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800837a:	4b17      	ldr	r3, [pc, #92]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 800837c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008380:	f107 0108 	add.w	r1, r7, #8
 8008384:	220a      	movs	r2, #10
 8008386:	4618      	mov	r0, r3
 8008388:	f001 faf1 	bl	800996e <RegionVerify>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d005      	beq.n	800839e <LoRaMacMibSetRequestConfirm+0x59e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8008392:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8008396:	4b10      	ldr	r3, [pc, #64]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8008398:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800839c:	e083      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800839e:	2303      	movs	r3, #3
 80083a0:	75fb      	strb	r3, [r7, #23]
            break;
 80083a2:	e080      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80083aa:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80083ac:	4b0a      	ldr	r3, [pc, #40]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80083ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083b2:	f107 0108 	add.w	r1, r7, #8
 80083b6:	2209      	movs	r2, #9
 80083b8:	4618      	mov	r0, r3
 80083ba:	f001 fad8 	bl	800996e <RegionVerify>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d005      	beq.n	80083d0 <LoRaMacMibSetRequestConfirm+0x5d0>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80083c4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80083c8:	4b03      	ldr	r3, [pc, #12]	; (80083d8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80083ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80083ce:	e06a      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80083d0:	2303      	movs	r3, #3
 80083d2:	75fb      	strb	r3, [r7, #23]
            break;
 80083d4:	e067      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
 80083d6:	bf00      	nop
 80083d8:	20000848 	.word	0x20000848
 80083dc:	0800f3f0 	.word	0x0800f3f0
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	4a32      	ldr	r2, [pc, #200]	; (80084b0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 80083e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80083ea:	4b31      	ldr	r3, [pc, #196]	; (80084b0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 80083ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083f0:	4a2f      	ldr	r2, [pc, #188]	; (80084b0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 80083f2:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 80083f4:	e057      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	791a      	ldrb	r2, [r3, #4]
 80083fa:	4b2d      	ldr	r3, [pc, #180]	; (80084b0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 80083fc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8008400:	4b2b      	ldr	r3, [pc, #172]	; (80084b0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8008402:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8008406:	4b2a      	ldr	r3, [pc, #168]	; (80084b0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8008408:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 800840c:	e04b      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	4a27      	ldr	r2, [pc, #156]	; (80084b0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8008414:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8008416:	e046      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	4a24      	ldr	r2, [pc, #144]	; (80084b0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 800841e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 8008422:	e040      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8008424:	f7ff fa3e 	bl	80078a4 <RestoreNvmData>
 8008428:	4603      	mov	r3, r0
 800842a:	75fb      	strb	r3, [r7, #23]
            break;
 800842c:	e03b      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	799b      	ldrb	r3, [r3, #6]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d80d      	bhi.n	8008452 <LoRaMacMibSetRequestConfirm+0x652>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8008436:	4a1e      	ldr	r2, [pc, #120]	; (80084b0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6858      	ldr	r0, [r3, #4]
 8008444:	f000 ff8e 	bl	8009364 <LoRaMacCryptoSetLrWanVersion>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d02a      	beq.n	80084a4 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800844e:	2311      	movs	r3, #17
 8008450:	e02a      	b.n	80084a8 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008452:	2303      	movs	r3, #3
 8008454:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8008456:	e025      	b.n	80084a4 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	4a14      	ldr	r2, [pc, #80]	; (80084b0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 800845e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8008462:	e020      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fbab 	bl	8008bc0 <LoRaMacMibClassBSetRequestConfirm>
 800846a:	4603      	mov	r3, r0
 800846c:	75fb      	strb	r3, [r7, #23]
            break;
 800846e:	e01a      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8008470:	bf00      	nop
 8008472:	e018      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8008474:	bf00      	nop
 8008476:	e016      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8008478:	bf00      	nop
 800847a:	e014      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 800847c:	bf00      	nop
 800847e:	e012      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8008480:	bf00      	nop
 8008482:	e010      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8008484:	bf00      	nop
 8008486:	e00e      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8008488:	bf00      	nop
 800848a:	e00c      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 800848c:	bf00      	nop
 800848e:	e00a      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8008490:	bf00      	nop
 8008492:	e008      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8008494:	bf00      	nop
 8008496:	e006      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8008498:	bf00      	nop
 800849a:	e004      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 800849c:	bf00      	nop
 800849e:	e002      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80084a0:	bf00      	nop
 80084a2:	e000      	b.n	80084a6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80084a4:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	20000848 	.word	0x20000848

080084b4 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80084bc:	2302      	movs	r3, #2
 80084be:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80084c0:	2300      	movs	r3, #0
 80084c2:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e127      	b.n	800871e <LoRaMacMlmeRequest+0x26a>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80084ce:	f7fe fa23 	bl	8006918 <LoRaMacIsBusy>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80084d8:	2301      	movs	r3, #1
 80084da:	e120      	b.n	800871e <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80084dc:	f000 fdf0 	bl	80090c0 <LoRaMacConfirmQueueIsFull>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d001      	beq.n	80084ea <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e119      	b.n	800871e <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80084ea:	f000 fddd 	bl	80090a8 <LoRaMacConfirmQueueGetCnt>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d104      	bne.n	80084fe <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80084f4:	2214      	movs	r2, #20
 80084f6:	2100      	movs	r1, #0
 80084f8:	488b      	ldr	r0, [pc, #556]	; (8008728 <LoRaMacMlmeRequest+0x274>)
 80084fa:	f002 ffe1 	bl	800b4c0 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80084fe:	4b8b      	ldr	r3, [pc, #556]	; (800872c <LoRaMacMlmeRequest+0x278>)
 8008500:	2201      	movs	r2, #1
 8008502:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8008506:	4a89      	ldr	r2, [pc, #548]	; (800872c <LoRaMacMlmeRequest+0x278>)
 8008508:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800850c:	f043 0304 	orr.w	r3, r3, #4
 8008510:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 800851e:	2300      	movs	r3, #0
 8008520:	74fb      	strb	r3, [r7, #19]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	3b01      	subs	r3, #1
 8008528:	2b0d      	cmp	r3, #13
 800852a:	f200 80ce 	bhi.w	80086ca <LoRaMacMlmeRequest+0x216>
 800852e:	a201      	add	r2, pc, #4	; (adr r2, 8008534 <LoRaMacMlmeRequest+0x80>)
 8008530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008534:	0800856d 	.word	0x0800856d
 8008538:	080086cb 	.word	0x080086cb
 800853c:	080086cb 	.word	0x080086cb
 8008540:	080085d7 	.word	0x080085d7
 8008544:	080085f5 	.word	0x080085f5
 8008548:	08008605 	.word	0x08008605
 800854c:	080086cb 	.word	0x080086cb
 8008550:	080086cb 	.word	0x080086cb
 8008554:	080086cb 	.word	0x080086cb
 8008558:	08008621 	.word	0x08008621
 800855c:	080086cb 	.word	0x080086cb
 8008560:	0800869f 	.word	0x0800869f
 8008564:	0800863f 	.word	0x0800863f
 8008568:	08008681 	.word	0x08008681
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800856c:	4b6f      	ldr	r3, [pc, #444]	; (800872c <LoRaMacMlmeRequest+0x278>)
 800856e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8008572:	f003 0320 	and.w	r3, r3, #32
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 800857a:	2301      	movs	r3, #1
 800857c:	e0cf      	b.n	800871e <LoRaMacMlmeRequest+0x26a>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( );
 800857e:	f7fe fe49 	bl	8007214 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8008582:	4b6b      	ldr	r3, [pc, #428]	; (8008730 <LoRaMacMlmeRequest+0x27c>)
 8008584:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	795b      	ldrb	r3, [r3, #5]
 800858c:	b25b      	sxtb	r3, r3
 800858e:	2200      	movs	r2, #0
 8008590:	4619      	mov	r1, r3
 8008592:	f001 fa5c 	bl	8009a4e <RegionAlternateDr>
 8008596:	4603      	mov	r3, r0
 8008598:	461a      	mov	r2, r3
 800859a:	4b65      	ldr	r3, [pc, #404]	; (8008730 <LoRaMacMlmeRequest+0x27c>)
 800859c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80085a0:	2307      	movs	r3, #7
 80085a2:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 80085a4:	20ff      	movs	r0, #255	; 0xff
 80085a6:	f7fe fbcd 	bl	8006d44 <SendReJoinReq>
 80085aa:	4603      	mov	r3, r0
 80085ac:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 80085ae:	7dfb      	ldrb	r3, [r7, #23]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 808c 	beq.w	80086ce <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80085b6:	4b5e      	ldr	r3, [pc, #376]	; (8008730 <LoRaMacMlmeRequest+0x27c>)
 80085b8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	795b      	ldrb	r3, [r3, #5]
 80085c0:	b25b      	sxtb	r3, r3
 80085c2:	2201      	movs	r2, #1
 80085c4:	4619      	mov	r1, r3
 80085c6:	f001 fa42 	bl	8009a4e <RegionAlternateDr>
 80085ca:	4603      	mov	r3, r0
 80085cc:	461a      	mov	r2, r3
 80085ce:	4b58      	ldr	r3, [pc, #352]	; (8008730 <LoRaMacMlmeRequest+0x27c>)
 80085d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 80085d4:	e07b      	b.n	80086ce <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80085da:	f107 030c 	add.w	r3, r7, #12
 80085de:	2200      	movs	r2, #0
 80085e0:	4619      	mov	r1, r3
 80085e2:	2002      	movs	r0, #2
 80085e4:	f000 fbf8 	bl	8008dd8 <LoRaMacCommandsAddCmd>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d071      	beq.n	80086d2 <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80085ee:	2313      	movs	r3, #19
 80085f0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80085f2:	e06e      	b.n	80086d2 <LoRaMacMlmeRequest+0x21e>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	889b      	ldrh	r3, [r3, #4]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7ff f8ff 	bl	80077fc <SetTxContinuousWave>
 80085fe:	4603      	mov	r3, r0
 8008600:	75fb      	strb	r3, [r7, #23]
            break;
 8008602:	e06d      	b.n	80086e0 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	8898      	ldrh	r0, [r3, #4]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6899      	ldr	r1, [r3, #8]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	461a      	mov	r2, r3
 8008616:	f7ff f925 	bl	8007864 <SetTxContinuousWave1>
 800861a:	4603      	mov	r3, r0
 800861c:	75fb      	strb	r3, [r7, #23]
            break;
 800861e:	e05f      	b.n	80086e0 <LoRaMacMlmeRequest+0x22c>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8008624:	f107 030c 	add.w	r3, r7, #12
 8008628:	2200      	movs	r2, #0
 800862a:	4619      	mov	r1, r3
 800862c:	200d      	movs	r0, #13
 800862e:	f000 fbd3 	bl	8008dd8 <LoRaMacCommandsAddCmd>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d04e      	beq.n	80086d6 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008638:	2313      	movs	r3, #19
 800863a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800863c:	e04b      	b.n	80086d6 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800863e:	4b3c      	ldr	r3, [pc, #240]	; (8008730 <LoRaMacMlmeRequest+0x27c>)
 8008640:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008644:	2b00      	cmp	r3, #0
 8008646:	d148      	bne.n	80086da <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	791b      	ldrb	r3, [r3, #4]
 800864c:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	791b      	ldrb	r3, [r3, #4]
 8008652:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8008656:	b2db      	uxtb	r3, r3
 8008658:	4618      	mov	r0, r3
 800865a:	f000 fa8c 	bl	8008b76 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800865e:	7dbb      	ldrb	r3, [r7, #22]
 8008660:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8008662:	2300      	movs	r3, #0
 8008664:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8008666:	f107 030c 	add.w	r3, r7, #12
 800866a:	2201      	movs	r2, #1
 800866c:	4619      	mov	r1, r3
 800866e:	2010      	movs	r0, #16
 8008670:	f000 fbb2 	bl	8008dd8 <LoRaMacCommandsAddCmd>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d02f      	beq.n	80086da <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800867a:	2313      	movs	r3, #19
 800867c:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 800867e:	e02c      	b.n	80086da <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8008684:	f107 030c 	add.w	r3, r7, #12
 8008688:	2200      	movs	r2, #0
 800868a:	4619      	mov	r1, r3
 800868c:	2012      	movs	r0, #18
 800868e:	f000 fba3 	bl	8008dd8 <LoRaMacCommandsAddCmd>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d022      	beq.n	80086de <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008698:	2313      	movs	r3, #19
 800869a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800869c:	e01f      	b.n	80086de <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 800869e:	2301      	movs	r3, #1
 80086a0:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80086a2:	f000 fa3c 	bl	8008b1e <LoRaMacClassBIsAcquisitionInProgress>
 80086a6:	4603      	mov	r3, r0
 80086a8:	f083 0301 	eor.w	r3, r3, #1
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d008      	beq.n	80086c4 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80086b2:	2000      	movs	r0, #0
 80086b4:	f000 fa29 	bl	8008b0a <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80086b8:	2000      	movs	r0, #0
 80086ba:	f000 fa37 	bl	8008b2c <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80086c2:	e00d      	b.n	80086e0 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 80086c4:	2301      	movs	r3, #1
 80086c6:	75fb      	strb	r3, [r7, #23]
            break;
 80086c8:	e00a      	b.n	80086e0 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 80086ca:	bf00      	nop
 80086cc:	e008      	b.n	80086e0 <LoRaMacMlmeRequest+0x22c>
            break;
 80086ce:	bf00      	nop
 80086d0:	e006      	b.n	80086e0 <LoRaMacMlmeRequest+0x22c>
            break;
 80086d2:	bf00      	nop
 80086d4:	e004      	b.n	80086e0 <LoRaMacMlmeRequest+0x22c>
            break;
 80086d6:	bf00      	nop
 80086d8:	e002      	b.n	80086e0 <LoRaMacMlmeRequest+0x22c>
            break;
 80086da:	bf00      	nop
 80086dc:	e000      	b.n	80086e0 <LoRaMacMlmeRequest+0x22c>
            break;
 80086de:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80086e0:	4b12      	ldr	r3, [pc, #72]	; (800872c <LoRaMacMlmeRequest+0x278>)
 80086e2:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d010      	beq.n	8008712 <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80086f0:	f000 fcda 	bl	80090a8 <LoRaMacConfirmQueueGetCnt>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d110      	bne.n	800871c <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 80086fa:	4b0c      	ldr	r3, [pc, #48]	; (800872c <LoRaMacMlmeRequest+0x278>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8008702:	4a0a      	ldr	r2, [pc, #40]	; (800872c <LoRaMacMlmeRequest+0x278>)
 8008704:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8008708:	f36f 0382 	bfc	r3, #2, #1
 800870c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8008710:	e004      	b.n	800871c <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8008712:	f107 0310 	add.w	r3, r7, #16
 8008716:	4618      	mov	r0, r3
 8008718:	f000 fc8c 	bl	8009034 <LoRaMacConfirmQueueAdd>
    }
    return status;
 800871c:	7dfb      	ldrb	r3, [r7, #23]
}
 800871e:	4618      	mov	r0, r3
 8008720:	3718      	adds	r7, #24
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20000788 	.word	0x20000788
 800872c:	2000033c 	.word	0x2000033c
 8008730:	20000848 	.word	0x20000848

08008734 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b08c      	sub	sp, #48	; 0x30
 8008738:	af02      	add	r7, sp, #8
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	460b      	mov	r3, r1
 800873e:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8008740:	2302      	movs	r3, #2
 8008742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8008746:	2300      	movs	r3, #0
 8008748:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 800874c:	2300      	movs	r3, #0
 800874e:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8008750:	2300      	movs	r3, #0
 8008752:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8008754:	2300      	movs	r3, #0
 8008756:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d101      	bne.n	8008762 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800875e:	2303      	movs	r3, #3
 8008760:	e0d4      	b.n	800890c <LoRaMacMcpsRequest+0x1d8>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8008762:	f7fe f8d9 	bl	8006918 <LoRaMacIsBusy>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 800876c:	2301      	movs	r3, #1
 800876e:	e0cd      	b.n	800890c <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8008770:	2300      	movs	r3, #0
 8008772:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8008774:	2214      	movs	r2, #20
 8008776:	2100      	movs	r1, #0
 8008778:	4866      	ldr	r0, [pc, #408]	; (8008914 <LoRaMacMcpsRequest+0x1e0>)
 800877a:	f002 fea1 	bl	800b4c0 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800877e:	4b66      	ldr	r3, [pc, #408]	; (8008918 <LoRaMacMcpsRequest+0x1e4>)
 8008780:	2201      	movs	r2, #1
 8008782:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8008786:	4b64      	ldr	r3, [pc, #400]	; (8008918 <LoRaMacMcpsRequest+0x1e4>)
 8008788:	2201      	movs	r2, #1
 800878a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	2b03      	cmp	r3, #3
 8008794:	d03d      	beq.n	8008812 <LoRaMacMcpsRequest+0xde>
 8008796:	2b03      	cmp	r3, #3
 8008798:	dc4f      	bgt.n	800883a <LoRaMacMcpsRequest+0x106>
 800879a:	2b00      	cmp	r3, #0
 800879c:	d002      	beq.n	80087a4 <LoRaMacMcpsRequest+0x70>
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d019      	beq.n	80087d6 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80087a2:	e04a      	b.n	800883a <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 80087a4:	2301      	movs	r3, #1
 80087a6:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80087a8:	4b5b      	ldr	r3, [pc, #364]	; (8008918 <LoRaMacMcpsRequest+0x1e4>)
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80087b0:	7b3b      	ldrb	r3, [r7, #12]
 80087b2:	2202      	movs	r2, #2
 80087b4:	f362 1347 	bfi	r3, r2, #5, #3
 80087b8:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	791b      	ldrb	r3, [r3, #4]
 80087be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	899b      	ldrh	r3, [r3, #12]
 80087cc:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	7b9b      	ldrb	r3, [r3, #14]
 80087d2:	777b      	strb	r3, [r7, #29]
            break;
 80087d4:	e032      	b.n	800883c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80087d6:	2301      	movs	r3, #1
 80087d8:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	7bdb      	ldrb	r3, [r3, #15]
 80087de:	2b08      	cmp	r3, #8
 80087e0:	bf28      	it	cs
 80087e2:	2308      	movcs	r3, #8
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	4b4c      	ldr	r3, [pc, #304]	; (8008918 <LoRaMacMcpsRequest+0x1e4>)
 80087e8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80087ec:	7b3b      	ldrb	r3, [r7, #12]
 80087ee:	2204      	movs	r2, #4
 80087f0:	f362 1347 	bfi	r3, r2, #5, #3
 80087f4:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	791b      	ldrb	r3, [r3, #4]
 80087fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	899b      	ldrh	r3, [r3, #12]
 8008808:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	7b9b      	ldrb	r3, [r3, #14]
 800880e:	777b      	strb	r3, [r7, #29]
            break;
 8008810:	e014      	b.n	800883c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8008812:	2301      	movs	r3, #1
 8008814:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8008816:	4b40      	ldr	r3, [pc, #256]	; (8008918 <LoRaMacMcpsRequest+0x1e4>)
 8008818:	2201      	movs	r2, #1
 800881a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800881e:	7b3b      	ldrb	r3, [r7, #12]
 8008820:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8008824:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	891b      	ldrh	r3, [r3, #8]
 8008830:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	7a9b      	ldrb	r3, [r3, #10]
 8008836:	777b      	strb	r3, [r7, #29]
            break;
 8008838:	e000      	b.n	800883c <LoRaMacMcpsRequest+0x108>
            break;
 800883a:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800883c:	2302      	movs	r3, #2
 800883e:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008840:	4b36      	ldr	r3, [pc, #216]	; (800891c <LoRaMacMcpsRequest+0x1e8>)
 8008842:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008846:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008848:	4b34      	ldr	r3, [pc, #208]	; (800891c <LoRaMacMcpsRequest+0x1e8>)
 800884a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800884e:	f107 0214 	add.w	r2, r7, #20
 8008852:	4611      	mov	r1, r2
 8008854:	4618      	mov	r0, r3
 8008856:	f001 f860 	bl	800991a <RegionGetPhyParam>
 800885a:	4603      	mov	r3, r0
 800885c:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	b25b      	sxtb	r3, r3
 8008862:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8008866:	4293      	cmp	r3, r2
 8008868:	bfb8      	it	lt
 800886a:	4613      	movlt	r3, r2
 800886c:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 800886e:	7f3b      	ldrb	r3, [r7, #28]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d044      	beq.n	80088fe <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8008874:	4b29      	ldr	r3, [pc, #164]	; (800891c <LoRaMacMcpsRequest+0x1e8>)
 8008876:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800887a:	f083 0301 	eor.w	r3, r3, #1
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b00      	cmp	r3, #0
 8008882:	d019      	beq.n	80088b8 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8008884:	7f7b      	ldrb	r3, [r7, #29]
 8008886:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008888:	4b24      	ldr	r3, [pc, #144]	; (800891c <LoRaMacMcpsRequest+0x1e8>)
 800888a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800888e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8008890:	4b22      	ldr	r3, [pc, #136]	; (800891c <LoRaMacMcpsRequest+0x1e8>)
 8008892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008896:	f107 0108 	add.w	r1, r7, #8
 800889a:	2205      	movs	r2, #5
 800889c:	4618      	mov	r0, r3
 800889e:	f001 f866 	bl	800996e <RegionVerify>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d005      	beq.n	80088b4 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80088a8:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80088ac:	4b1b      	ldr	r3, [pc, #108]	; (800891c <LoRaMacMcpsRequest+0x1e8>)
 80088ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80088b2:	e001      	b.n	80088b8 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e029      	b.n	800890c <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80088b8:	8bfa      	ldrh	r2, [r7, #30]
 80088ba:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80088be:	f107 000c 	add.w	r0, r7, #12
 80088c2:	78fb      	ldrb	r3, [r7, #3]
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	4613      	mov	r3, r2
 80088c8:	6a3a      	ldr	r2, [r7, #32]
 80088ca:	f7fe f95b 	bl	8006b84 <Send>
 80088ce:	4603      	mov	r3, r0
 80088d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 80088d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10c      	bne.n	80088f6 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	781a      	ldrb	r2, [r3, #0]
 80088e0:	4b0d      	ldr	r3, [pc, #52]	; (8008918 <LoRaMacMcpsRequest+0x1e4>)
 80088e2:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80088e6:	4a0c      	ldr	r2, [pc, #48]	; (8008918 <LoRaMacMcpsRequest+0x1e4>)
 80088e8:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80088ec:	f043 0301 	orr.w	r3, r3, #1
 80088f0:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 80088f4:	e003      	b.n	80088fe <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80088f6:	4b08      	ldr	r3, [pc, #32]	; (8008918 <LoRaMacMcpsRequest+0x1e4>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80088fe:	4b06      	ldr	r3, [pc, #24]	; (8008918 <LoRaMacMcpsRequest+0x1e4>)
 8008900:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	611a      	str	r2, [r3, #16]

    return status;
 8008908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800890c:	4618      	mov	r0, r3
 800890e:	3728      	adds	r7, #40	; 0x28
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	20000774 	.word	0x20000774
 8008918:	2000033c 	.word	0x2000033c
 800891c:	20000848 	.word	0x20000848

08008920 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	4603      	mov	r3, r0
 8008928:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800892a:	79fb      	ldrb	r3, [r7, #7]
 800892c:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800892e:	4b0a      	ldr	r3, [pc, #40]	; (8008958 <LoRaMacTestSetDutyCycleOn+0x38>)
 8008930:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008934:	f107 010c 	add.w	r1, r7, #12
 8008938:	220f      	movs	r2, #15
 800893a:	4618      	mov	r0, r3
 800893c:	f001 f817 	bl	800996e <RegionVerify>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8008946:	4a04      	ldr	r2, [pc, #16]	; (8008958 <LoRaMacTestSetDutyCycleOn+0x38>)
 8008948:	79fb      	ldrb	r3, [r7, #7]
 800894a:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 800894e:	bf00      	nop
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	20000848 	.word	0x20000848

0800895c <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b08c      	sub	sp, #48	; 0x30
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
 8008968:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 800896a:	2300      	movs	r3, #0
 800896c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	7c1b      	ldrb	r3, [r3, #16]
 8008974:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	7c5b      	ldrb	r3, [r3, #17]
 800897c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	689a      	ldr	r2, [r3, #8]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	795b      	ldrb	r3, [r3, #5]
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 808b 	beq.w	8008aa8 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8008992:	2302      	movs	r3, #2
 8008994:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	7c9b      	ldrb	r3, [r3, #18]
 800899c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	7cdb      	ldrb	r3, [r3, #19]
 80089a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80089a8:	4611      	mov	r1, r2
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 ffb5 	bl	800991a <RegionGetPhyParam>
 80089b0:	4603      	mov	r3, r0
 80089b2:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 80089ba:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 80089be:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80089c2:	4293      	cmp	r3, r2
 80089c4:	bfb8      	it	lt
 80089c6:	4613      	movlt	r3, r2
 80089c8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 80089cc:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80089d0:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d106      	bne.n	80089e6 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2200      	movs	r2, #0
 80089dc:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80089de:	2300      	movs	r3, #0
 80089e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80089e4:	e060      	b.n	8008aa8 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	8992      	ldrh	r2, [r2, #12]
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d303      	bcc.n	80089fa <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 80089f2:	2301      	movs	r3, #1
 80089f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80089f8:	e002      	b.n	8008a00 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 80089fa:	2300      	movs	r3, #0
 80089fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	8992      	ldrh	r2, [r2, #12]
 8008a08:	4611      	mov	r1, r2
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	89d2      	ldrh	r2, [r2, #14]
 8008a0e:	440a      	add	r2, r1
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d349      	bcc.n	8008aa8 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8008a14:	2308      	movs	r3, #8
 8008a16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	7cdb      	ldrb	r3, [r3, #19]
 8008a1e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008a22:	4611      	mov	r1, r2
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 ff78 	bl	800991a <RegionGetPhyParam>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8008a2e:	6a3b      	ldr	r3, [r7, #32]
 8008a30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	89d2      	ldrh	r2, [r2, #14]
 8008a3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a40:	fb01 f202 	mul.w	r2, r1, r2
 8008a44:	1a9b      	subs	r3, r3, r2
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d12e      	bne.n	8008aa8 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8008a4a:	2322      	movs	r3, #34	; 0x22
 8008a4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8008a50:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008a54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	7c9b      	ldrb	r3, [r3, #18]
 8008a5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	7cdb      	ldrb	r3, [r3, #19]
 8008a64:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008a68:	4611      	mov	r1, r2
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 ff55 	bl	800991a <RegionGetPhyParam>
 8008a70:	4603      	mov	r3, r0
 8008a72:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8008a7a:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8008a7e:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d110      	bne.n	8008aa8 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8008a86:	2300      	movs	r3, #0
 8008a88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	791b      	ldrb	r3, [r3, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d009      	beq.n	8008aa8 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8008a94:	2302      	movs	r3, #2
 8008a96:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	7cdb      	ldrb	r3, [r3, #19]
 8008a9c:	f107 0214 	add.w	r2, r7, #20
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 ff51 	bl	800994a <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008aae:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8008ab6:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8008ab8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3730      	adds	r7, #48	; 0x30
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
 8008ad0:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	789b      	ldrb	r3, [r3, #2]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d107      	bne.n	8008aea <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	68b9      	ldr	r1, [r7, #8]
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f7ff ff3b 	bl	800895c <CalcNextV10X>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	e000      	b.n	8008aec <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b00:	bf00      	nop
 8008b02:	3714      	adds	r7, #20
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bc80      	pop	{r7}
 8008b08:	4770      	bx	lr

08008b0a <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b083      	sub	sp, #12
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	4603      	mov	r3, r0
 8008b12:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b14:	bf00      	nop
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bc80      	pop	{r7}
 8008b1c:	4770      	bx	lr

08008b1e <LoRaMacClassBIsAcquisitionInProgress>:
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8008b1e:	b480      	push	{r7}
 8008b20:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8008b22:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bc80      	pop	{r7}
 8008b2a:	4770      	bx	lr

08008b2c <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bc80      	pop	{r7}
 8008b3c:	4770      	bx	lr

08008b3e <LoRaMacClassBIsBeaconExpected>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconExpected( void )
{
 8008b3e:	b480      	push	{r7}
 8008b40:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8008b42:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bc80      	pop	{r7}
 8008b4a:	4770      	bx	lr

08008b4c <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8008b50:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bc80      	pop	{r7}
 8008b58:	4770      	bx	lr

08008b5a <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8008b5e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bc80      	pop	{r7}
 8008b66:	4770      	bx	lr

08008b68 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8008b68:	b480      	push	{r7}
 8008b6a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8008b6c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bc80      	pop	{r7}
 8008b74:	4770      	bx	lr

08008b76 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8008b76:	b480      	push	{r7}
 8008b78:	b083      	sub	sp, #12
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bc80      	pop	{r7}
 8008b88:	4770      	bx	lr

08008b8a <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b8e:	bf00      	nop
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bc80      	pop	{r7}
 8008b94:	4770      	bx	lr

08008b96 <LoRaMacClassBSwitchClass>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8008ba0:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bc80      	pop	{r7}
 8008baa:	4770      	bx	lr

08008bac <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8008bb4:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bc80      	pop	{r7}
 8008bbe:	4770      	bx	lr

08008bc0 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8008bc8:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bc80      	pop	{r7}
 8008bd2:	4770      	bx	lr

08008bd4 <LoRaMacClassBIsUplinkCollision>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8008bdc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bc80      	pop	{r7}
 8008be6:	4770      	bx	lr

08008be8 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8008be8:	b480      	push	{r7}
 8008bea:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008bec:	bf00      	nop
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bc80      	pop	{r7}
 8008bf2:	4770      	bx	lr

08008bf4 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8008c00:	2300      	movs	r3, #0
 8008c02:	81fb      	strh	r3, [r7, #14]
 8008c04:	e00a      	b.n	8008c1c <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8008c06:	89fb      	ldrh	r3, [r7, #14]
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d001      	beq.n	8008c16 <IsSlotFree+0x22>
        {
            return false;
 8008c12:	2300      	movs	r3, #0
 8008c14:	e006      	b.n	8008c24 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8008c16:	89fb      	ldrh	r3, [r7, #14]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	81fb      	strh	r3, [r7, #14]
 8008c1c:	89fb      	ldrh	r3, [r7, #14]
 8008c1e:	2b0f      	cmp	r3, #15
 8008c20:	d9f1      	bls.n	8008c06 <IsSlotFree+0x12>
        }
    }
    return true;
 8008c22:	2301      	movs	r3, #1
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bc80      	pop	{r7}
 8008c2c:	4770      	bx	lr
	...

08008c30 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8008c36:	2300      	movs	r3, #0
 8008c38:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8008c3a:	e007      	b.n	8008c4c <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8008c3c:	79fb      	ldrb	r3, [r7, #7]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8008c42:	79fb      	ldrb	r3, [r7, #7]
 8008c44:	2b0f      	cmp	r3, #15
 8008c46:	d101      	bne.n	8008c4c <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	e012      	b.n	8008c72 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8008c4c:	79fb      	ldrb	r3, [r7, #7]
 8008c4e:	011b      	lsls	r3, r3, #4
 8008c50:	3308      	adds	r3, #8
 8008c52:	4a0a      	ldr	r2, [pc, #40]	; (8008c7c <MallocNewMacCommandSlot+0x4c>)
 8008c54:	4413      	add	r3, r2
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7ff ffcc 	bl	8008bf4 <IsSlotFree>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	f083 0301 	eor.w	r3, r3, #1
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e9      	bne.n	8008c3c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8008c68:	79fb      	ldrb	r3, [r7, #7]
 8008c6a:	011b      	lsls	r3, r3, #4
 8008c6c:	3308      	adds	r3, #8
 8008c6e:	4a03      	ldr	r2, [pc, #12]	; (8008c7c <MallocNewMacCommandSlot+0x4c>)
 8008c70:	4413      	add	r3, r2
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20001698 	.word	0x20001698

08008c80 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d101      	bne.n	8008c92 <FreeMacCommandSlot+0x12>
    {
        return false;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	e005      	b.n	8008c9e <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8008c92:	2210      	movs	r2, #16
 8008c94:	2100      	movs	r1, #0
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f002 fc12 	bl	800b4c0 <memset1>

    return true;
 8008c9c:	2301      	movs	r3, #1
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b083      	sub	sp, #12
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <LinkedListAdd+0x16>
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d101      	bne.n	8008cc0 <LinkedListAdd+0x1a>
    {
        return false;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	e015      	b.n	8008cec <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d102      	bne.n	8008cce <LinkedListAdd+0x28>
    {
        list->First = element;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d003      	beq.n	8008cde <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	605a      	str	r2, [r3, #4]

    return true;
 8008cea:	2301      	movs	r3, #1
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bc80      	pop	{r7}
 8008cf4:	4770      	bx	lr

08008cf6 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b085      	sub	sp, #20
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d002      	beq.n	8008d0c <LinkedListGetPrevious+0x16>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d101      	bne.n	8008d10 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	e016      	b.n	8008d3e <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d00c      	beq.n	8008d38 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8008d1e:	e002      	b.n	8008d26 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d007      	beq.n	8008d3c <LinkedListGetPrevious+0x46>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	683a      	ldr	r2, [r7, #0]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d1f4      	bne.n	8008d20 <LinkedListGetPrevious+0x2a>
 8008d36:	e001      	b.n	8008d3c <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bc80      	pop	{r7}
 8008d46:	4770      	bx	lr

08008d48 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d002      	beq.n	8008d5e <LinkedListRemove+0x16>
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <LinkedListRemove+0x1a>
    {
        return false;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	e020      	b.n	8008da4 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7ff ffc6 	bl	8008cf6 <LinkedListGetPrevious>
 8008d6a:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d103      	bne.n	8008d7e <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d102      	bne.n	8008d8e <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d003      	beq.n	8008d9c <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	601a      	str	r2, [r3, #0]

    return true;
 8008da2:	2301      	movs	r3, #1
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	4603      	mov	r3, r0
 8008db4:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8008db6:	79fb      	ldrb	r3, [r7, #7]
 8008db8:	2b05      	cmp	r3, #5
 8008dba:	d004      	beq.n	8008dc6 <IsSticky+0x1a>
 8008dbc:	2b05      	cmp	r3, #5
 8008dbe:	db04      	blt.n	8008dca <IsSticky+0x1e>
 8008dc0:	3b08      	subs	r3, #8
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d801      	bhi.n	8008dca <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e000      	b.n	8008dcc <IsSticky+0x20>
        default:
            return false;
 8008dca:	2300      	movs	r3, #0
    }
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bc80      	pop	{r7}
 8008dd4:	4770      	bx	lr
	...

08008dd8 <LoRaMacCommandsAddCmd>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	4603      	mov	r3, r0
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
 8008de4:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e033      	b.n	8008e58 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8008df0:	f7ff ff1e 	bl	8008c30 <MallocNewMacCommandSlot>
 8008df4:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d101      	bne.n	8008e00 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	e02b      	b.n	8008e58 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8008e00:	6979      	ldr	r1, [r7, #20]
 8008e02:	4817      	ldr	r0, [pc, #92]	; (8008e60 <LoRaMacCommandsAddCmd+0x88>)
 8008e04:	f7ff ff4f 	bl	8008ca6 <LinkedListAdd>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	f083 0301 	eor.w	r3, r3, #1
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d001      	beq.n	8008e18 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8008e14:	2305      	movs	r3, #5
 8008e16:	e01f      	b.n	8008e58 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	7bfa      	ldrb	r2, [r7, #15]
 8008e1c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	3305      	adds	r3, #5
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	b292      	uxth	r2, r2
 8008e2c:	68b9      	ldr	r1, [r7, #8]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f002 fb0b 	bl	800b44a <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7ff ffb8 	bl	8008dac <IsSticky>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	461a      	mov	r2, r3
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8008e44:	4b06      	ldr	r3, [pc, #24]	; (8008e60 <LoRaMacCommandsAddCmd+0x88>)
 8008e46:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	3301      	adds	r3, #1
 8008e50:	4a03      	ldr	r2, [pc, #12]	; (8008e60 <LoRaMacCommandsAddCmd+0x88>)
 8008e52:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3718      	adds	r7, #24
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	20001698 	.word	0x20001698

08008e64 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e021      	b.n	8008eba <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8008e76:	6879      	ldr	r1, [r7, #4]
 8008e78:	4812      	ldr	r0, [pc, #72]	; (8008ec4 <LoRaMacCommandsRemoveCmd+0x60>)
 8008e7a:	f7ff ff65 	bl	8008d48 <LinkedListRemove>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	f083 0301 	eor.w	r3, r3, #1
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e015      	b.n	8008eba <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8008e8e:	4b0d      	ldr	r3, [pc, #52]	; (8008ec4 <LoRaMacCommandsRemoveCmd+0x60>)
 8008e90:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	4a09      	ldr	r2, [pc, #36]	; (8008ec4 <LoRaMacCommandsRemoveCmd+0x60>)
 8008e9e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7ff feec 	bl	8008c80 <FreeMacCommandSlot>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	f083 0301 	eor.w	r3, r3, #1
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8008eb4:	2305      	movs	r3, #5
 8008eb6:	e000      	b.n	8008eba <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20001698 	.word	0x20001698

08008ec8 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8008ece:	4b0f      	ldr	r3, [pc, #60]	; (8008f0c <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8008ed4:	e012      	b.n	8008efc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	7b1b      	ldrb	r3, [r3, #12]
 8008eda:	f083 0301 	eor.w	r3, r3, #1
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d008      	beq.n	8008ef6 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7ff ffba 	bl	8008e64 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	607b      	str	r3, [r7, #4]
 8008ef4:	e002      	b.n	8008efc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1e9      	bne.n	8008ed6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	20001698 	.word	0x20001698

08008f10 <LoRaMacCommandsGetSizeSerializedCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e005      	b.n	8008f2e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8008f22:	4b05      	ldr	r3, [pc, #20]	; (8008f38 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8008f24:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bc80      	pop	{r7}
 8008f36:	4770      	bx	lr
 8008f38:	20001698 	.word	0x20001698

08008f3c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b088      	sub	sp, #32
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8008f48:	4b25      	ldr	r3, [pc, #148]	; (8008fe0 <LoRaMacCommandsSerializeCmds+0xa4>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d002      	beq.n	8008f5e <LoRaMacCommandsSerializeCmds+0x22>
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d126      	bne.n	8008fac <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e039      	b.n	8008fd6 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8008f62:	7efb      	ldrb	r3, [r7, #27]
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	1ad2      	subs	r2, r2, r3
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d320      	bcc.n	8008fb4 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8008f72:	7efb      	ldrb	r3, [r7, #27]
 8008f74:	1c5a      	adds	r2, r3, #1
 8008f76:	76fa      	strb	r2, [r7, #27]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	69fa      	ldr	r2, [r7, #28]
 8008f80:	7912      	ldrb	r2, [r2, #4]
 8008f82:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8008f84:	7efb      	ldrb	r3, [r7, #27]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	18d0      	adds	r0, r2, r3
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	1d59      	adds	r1, r3, #5
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	461a      	mov	r2, r3
 8008f96:	f002 fa58 	bl	800b44a <memcpy1>
            itr += curElement->PayloadSize;
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	b2da      	uxtb	r2, r3
 8008fa0:	7efb      	ldrb	r3, [r7, #27]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1d7      	bne.n	8008f62 <LoRaMacCommandsSerializeCmds+0x26>
 8008fb2:	e009      	b.n	8008fc8 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8008fb4:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8008fb6:	e007      	b.n	8008fc8 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8008fbe:	69f8      	ldr	r0, [r7, #28]
 8008fc0:	f7ff ff50 	bl	8008e64 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1f4      	bne.n	8008fb8 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8008fce:	68b8      	ldr	r0, [r7, #8]
 8008fd0:	f7ff ff9e 	bl	8008f10 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3720      	adds	r7, #32
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20001698 	.word	0x20001698

08008fe4 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a07      	ldr	r2, [pc, #28]	; (800900c <IncreaseBufferPointer+0x28>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d102      	bne.n	8008ffa <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8008ff4:	4b06      	ldr	r3, [pc, #24]	; (8009010 <IncreaseBufferPointer+0x2c>)
 8008ff6:	607b      	str	r3, [r7, #4]
 8008ff8:	e002      	b.n	8009000 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8009000:	687b      	ldr	r3, [r7, #4]
}
 8009002:	4618      	mov	r0, r3
 8009004:	370c      	adds	r7, #12
 8009006:	46bd      	mov	sp, r7
 8009008:	bc80      	pop	{r7}
 800900a:	4770      	bx	lr
 800900c:	200017b0 	.word	0x200017b0
 8009010:	200017a0 	.word	0x200017a0

08009014 <IsListFull>:
    }
    return false;
}

static bool IsListFull( uint8_t count )
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800901e:	79fb      	ldrb	r3, [r7, #7]
 8009020:	2b04      	cmp	r3, #4
 8009022:	d901      	bls.n	8009028 <IsListFull+0x14>
    {
        return true;
 8009024:	2301      	movs	r3, #1
 8009026:	e000      	b.n	800902a <IsListFull+0x16>
    }
    return false;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	bc80      	pop	{r7}
 8009032:	4770      	bx	lr

08009034 <LoRaMacConfirmQueueAdd>:
    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
}

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800903c:	4b19      	ldr	r3, [pc, #100]	; (80090a4 <LoRaMacConfirmQueueAdd+0x70>)
 800903e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009042:	4618      	mov	r0, r3
 8009044:	f7ff ffe6 	bl	8009014 <IsListFull>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 800904e:	2300      	movs	r3, #0
 8009050:	e023      	b.n	800909a <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8009052:	4b14      	ldr	r3, [pc, #80]	; (80090a4 <LoRaMacConfirmQueueAdd+0x70>)
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	7812      	ldrb	r2, [r2, #0]
 800905a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800905c:	4b11      	ldr	r3, [pc, #68]	; (80090a4 <LoRaMacConfirmQueueAdd+0x70>)
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	7852      	ldrb	r2, [r2, #1]
 8009064:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8009066:	4b0f      	ldr	r3, [pc, #60]	; (80090a4 <LoRaMacConfirmQueueAdd+0x70>)
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	78d2      	ldrb	r2, [r2, #3]
 800906e:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8009070:	4b0c      	ldr	r3, [pc, #48]	; (80090a4 <LoRaMacConfirmQueueAdd+0x70>)
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	2200      	movs	r2, #0
 8009076:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8009078:	4b0a      	ldr	r3, [pc, #40]	; (80090a4 <LoRaMacConfirmQueueAdd+0x70>)
 800907a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800907e:	3301      	adds	r3, #1
 8009080:	b2da      	uxtb	r2, r3
 8009082:	4b08      	ldr	r3, [pc, #32]	; (80090a4 <LoRaMacConfirmQueueAdd+0x70>)
 8009084:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8009088:	4b06      	ldr	r3, [pc, #24]	; (80090a4 <LoRaMacConfirmQueueAdd+0x70>)
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	4618      	mov	r0, r3
 800908e:	f7ff ffa9 	bl	8008fe4 <IncreaseBufferPointer>
 8009092:	4603      	mov	r3, r0
 8009094:	4a03      	ldr	r2, [pc, #12]	; (80090a4 <LoRaMacConfirmQueueAdd+0x70>)
 8009096:	6093      	str	r3, [r2, #8]

    return true;
 8009098:	2301      	movs	r3, #1
}
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	20001794 	.word	0x20001794

080090a8 <LoRaMacConfirmQueueGetCnt>:
        }
    }
}

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80090a8:	b480      	push	{r7}
 80090aa:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80090ac:	4b03      	ldr	r3, [pc, #12]	; (80090bc <LoRaMacConfirmQueueGetCnt+0x14>)
 80090ae:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bc80      	pop	{r7}
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	20001794 	.word	0x20001794

080090c0 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80090c4:	4b06      	ldr	r3, [pc, #24]	; (80090e0 <LoRaMacConfirmQueueIsFull+0x20>)
 80090c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7ff ffa2 	bl	8009014 <IsListFull>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e000      	b.n	80090dc <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80090da:	2300      	movs	r3, #0
    }
}
 80090dc:	4618      	mov	r0, r3
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	20001794 	.word	0x20001794

080090e4 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b08e      	sub	sp, #56	; 0x38
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	607b      	str	r3, [r7, #4]
 80090ee:	460b      	mov	r3, r1
 80090f0:	817b      	strh	r3, [r7, #10]
 80090f2:	4613      	mov	r3, r2
 80090f4:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d101      	bne.n	8009100 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80090fc:	230a      	movs	r3, #10
 80090fe:	e086      	b.n	800920e <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8009106:	2301      	movs	r3, #1
 8009108:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 800910a:	2300      	movs	r3, #0
 800910c:	623b      	str	r3, [r7, #32]
 800910e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009112:	2200      	movs	r2, #0
 8009114:	601a      	str	r2, [r3, #0]
 8009116:	605a      	str	r2, [r3, #4]
 8009118:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 800911a:	2300      	movs	r3, #0
 800911c:	613b      	str	r3, [r7, #16]
 800911e:	f107 0314 	add.w	r3, r7, #20
 8009122:	2200      	movs	r2, #0
 8009124:	601a      	str	r2, [r3, #0]
 8009126:	605a      	str	r2, [r3, #4]
 8009128:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 800912a:	2301      	movs	r3, #1
 800912c:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 800912e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009132:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	b2db      	uxtb	r3, r3
 8009138:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	0a1b      	lsrs	r3, r3, #8
 800913e:	b2db      	uxtb	r3, r3
 8009140:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	0c1b      	lsrs	r3, r3, #16
 8009146:	b2db      	uxtb	r3, r3
 8009148:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	0e1b      	lsrs	r3, r3, #24
 800914e:	b2db      	uxtb	r3, r3
 8009150:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8009152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009154:	b2db      	uxtb	r3, r3
 8009156:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8009158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800915a:	0a1b      	lsrs	r3, r3, #8
 800915c:	b2db      	uxtb	r3, r3
 800915e:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8009160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009162:	0c1b      	lsrs	r3, r3, #16
 8009164:	b2db      	uxtb	r3, r3
 8009166:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8009168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800916a:	0e1b      	lsrs	r3, r3, #24
 800916c:	b2db      	uxtb	r3, r3
 800916e:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8009170:	e048      	b.n	8009204 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8009172:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009174:	b2db      	uxtb	r3, r3
 8009176:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8009178:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800917a:	3301      	adds	r3, #1
 800917c:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800917e:	f107 0320 	add.w	r3, r7, #32
 8009182:	7a7a      	ldrb	r2, [r7, #9]
 8009184:	f107 0010 	add.w	r0, r7, #16
 8009188:	2110      	movs	r1, #16
 800918a:	f7fc fa7d 	bl	8005688 <SecureElementAesEncrypt>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009194:	230f      	movs	r3, #15
 8009196:	e03a      	b.n	800920e <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8009198:	2300      	movs	r3, #0
 800919a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800919e:	e01e      	b.n	80091de <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80091a0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80091a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80091a8:	4413      	add	r3, r2
 80091aa:	461a      	mov	r2, r3
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	4413      	add	r3, r2
 80091b0:	7819      	ldrb	r1, [r3, #0]
 80091b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80091b6:	3338      	adds	r3, #56	; 0x38
 80091b8:	443b      	add	r3, r7
 80091ba:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80091be:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 80091c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80091c6:	4403      	add	r3, r0
 80091c8:	4618      	mov	r0, r3
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	4403      	add	r3, r0
 80091ce:	404a      	eors	r2, r1
 80091d0:	b2d2      	uxtb	r2, r2
 80091d2:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80091d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80091d8:	3301      	adds	r3, #1
 80091da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80091e2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80091e6:	2a10      	cmp	r2, #16
 80091e8:	bfa8      	it	ge
 80091ea:	2210      	movge	r2, #16
 80091ec:	b212      	sxth	r2, r2
 80091ee:	4293      	cmp	r3, r2
 80091f0:	dbd6      	blt.n	80091a0 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80091f2:	897b      	ldrh	r3, [r7, #10]
 80091f4:	3b10      	subs	r3, #16
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80091fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091fe:	3310      	adds	r3, #16
 8009200:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8009204:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009208:	2b00      	cmp	r3, #0
 800920a:	dcb2      	bgt.n	8009172 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3738      	adds	r7, #56	; 0x38
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8009216:	b490      	push	{r4, r7}
 8009218:	b082      	sub	sp, #8
 800921a:	af00      	add	r7, sp, #0
 800921c:	4604      	mov	r4, r0
 800921e:	4608      	mov	r0, r1
 8009220:	4611      	mov	r1, r2
 8009222:	461a      	mov	r2, r3
 8009224:	4623      	mov	r3, r4
 8009226:	80fb      	strh	r3, [r7, #6]
 8009228:	4603      	mov	r3, r0
 800922a:	717b      	strb	r3, [r7, #5]
 800922c:	460b      	mov	r3, r1
 800922e:	713b      	strb	r3, [r7, #4]
 8009230:	4613      	mov	r3, r2
 8009232:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800923a:	230a      	movs	r3, #10
 800923c:	e04e      	b.n	80092dc <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	2249      	movs	r2, #73	; 0x49
 8009242:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	3301      	adds	r3, #1
 8009248:	2200      	movs	r2, #0
 800924a:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	3302      	adds	r3, #2
 8009250:	2200      	movs	r2, #0
 8009252:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	3303      	adds	r3, #3
 8009258:	2200      	movs	r2, #0
 800925a:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	3304      	adds	r3, #4
 8009260:	2200      	movs	r2, #0
 8009262:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	3305      	adds	r3, #5
 8009268:	78fa      	ldrb	r2, [r7, #3]
 800926a:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	3306      	adds	r3, #6
 8009270:	693a      	ldr	r2, [r7, #16]
 8009272:	b2d2      	uxtb	r2, r2
 8009274:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	0a1a      	lsrs	r2, r3, #8
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	3307      	adds	r3, #7
 800927e:	b2d2      	uxtb	r2, r2
 8009280:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	0c1a      	lsrs	r2, r3, #16
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	3308      	adds	r3, #8
 800928a:	b2d2      	uxtb	r2, r2
 800928c:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	0e1a      	lsrs	r2, r3, #24
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	3309      	adds	r3, #9
 8009296:	b2d2      	uxtb	r2, r2
 8009298:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	330a      	adds	r3, #10
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	b2d2      	uxtb	r2, r2
 80092a2:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	0a1a      	lsrs	r2, r3, #8
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	330b      	adds	r3, #11
 80092ac:	b2d2      	uxtb	r2, r2
 80092ae:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	0c1a      	lsrs	r2, r3, #16
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	330c      	adds	r3, #12
 80092b8:	b2d2      	uxtb	r2, r2
 80092ba:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	0e1a      	lsrs	r2, r3, #24
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	330d      	adds	r3, #13
 80092c4:	b2d2      	uxtb	r2, r2
 80092c6:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	330e      	adds	r3, #14
 80092cc:	2200      	movs	r2, #0
 80092ce:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	330f      	adds	r3, #15
 80092d4:	88fa      	ldrh	r2, [r7, #6]
 80092d6:	b2d2      	uxtb	r2, r2
 80092d8:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bc90      	pop	{r4, r7}
 80092e4:	4770      	bx	lr

080092e6 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80092e6:	b590      	push	{r4, r7, lr}
 80092e8:	b08b      	sub	sp, #44	; 0x2c
 80092ea:	af04      	add	r7, sp, #16
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	4608      	mov	r0, r1
 80092f0:	4611      	mov	r1, r2
 80092f2:	461a      	mov	r2, r3
 80092f4:	4603      	mov	r3, r0
 80092f6:	807b      	strh	r3, [r7, #2]
 80092f8:	460b      	mov	r3, r1
 80092fa:	707b      	strb	r3, [r7, #1]
 80092fc:	4613      	mov	r3, r2
 80092fe:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d002      	beq.n	800930c <ComputeCmacB0+0x26>
 8009306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009308:	2b00      	cmp	r3, #0
 800930a:	d101      	bne.n	8009310 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800930c:	230a      	movs	r3, #10
 800930e:	e024      	b.n	800935a <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8009310:	887b      	ldrh	r3, [r7, #2]
 8009312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009316:	d901      	bls.n	800931c <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8009318:	230e      	movs	r3, #14
 800931a:	e01e      	b.n	800935a <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800931c:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8009320:	783a      	ldrb	r2, [r7, #0]
 8009322:	7879      	ldrb	r1, [r7, #1]
 8009324:	8878      	ldrh	r0, [r7, #2]
 8009326:	f107 0308 	add.w	r3, r7, #8
 800932a:	9302      	str	r3, [sp, #8]
 800932c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932e:	9301      	str	r3, [sp, #4]
 8009330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	4623      	mov	r3, r4
 8009336:	f7ff ff6e 	bl	8009216 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800933a:	7879      	ldrb	r1, [r7, #1]
 800933c:	887a      	ldrh	r2, [r7, #2]
 800933e:	f107 0008 	add.w	r0, r7, #8
 8009342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	460b      	mov	r3, r1
 8009348:	6879      	ldr	r1, [r7, #4]
 800934a:	f7fc f97f 	bl	800564c <SecureElementComputeAesCmac>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d001      	beq.n	8009358 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009354:	230f      	movs	r3, #15
 8009356:	e000      	b.n	800935a <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	371c      	adds	r7, #28
 800935e:	46bd      	mov	sp, r7
 8009360:	bd90      	pop	{r4, r7, pc}
	...

08009364 <LoRaMacCryptoSetLrWanVersion>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 800936c:	4b04      	ldr	r3, [pc, #16]	; (8009380 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	bc80      	pop	{r7}
 800937e:	4770      	bx	lr
 8009380:	200017b8 	.word	0x200017b8

08009384 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d101      	bne.n	8009396 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009392:	230a      	movs	r3, #10
 8009394:	e006      	b.n	80093a4 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8009396:	4b06      	ldr	r3, [pc, #24]	; (80093b0 <LoRaMacCryptoGetFCntUp+0x2c>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	1c5a      	adds	r2, r3, #1
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bc80      	pop	{r7}
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	200017b8 	.word	0x200017b8

080093b4 <LoRaMacCryptoSetKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	4603      	mov	r3, r0
 80093bc:	6039      	str	r1, [r7, #0]
 80093be:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80093c0:	79fb      	ldrb	r3, [r7, #7]
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fc f8e3 	bl	8005590 <SecureElementSetKey>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80093d0:	230f      	movs	r3, #15
 80093d2:	e018      	b.n	8009406 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 80093d4:	79fb      	ldrb	r3, [r7, #7]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d114      	bne.n	8009404 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 80093da:	4b0d      	ldr	r3, [pc, #52]	; (8009410 <LoRaMacCryptoSetKey+0x5c>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	789b      	ldrb	r3, [r3, #2]
 80093e0:	79fa      	ldrb	r2, [r7, #7]
 80093e2:	4611      	mov	r1, r2
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 f8d1 	bl	800958c <LoRaMacCryptoDeriveMcRootKey>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d001      	beq.n	80093f4 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80093f0:	230f      	movs	r3, #15
 80093f2:	e008      	b.n	8009406 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80093f4:	2004      	movs	r0, #4
 80093f6:	f000 f8f4 	bl	80095e2 <LoRaMacCryptoDeriveMcKEKey>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009400:	230f      	movs	r3, #15
 8009402:	e000      	b.n	8009406 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3708      	adds	r7, #8
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	200017b8 	.word	0x200017b8

08009414 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af02      	add	r7, sp, #8
 800941a:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d101      	bne.n	8009426 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009422:	230a      	movs	r3, #10
 8009424:	e033      	b.n	800948e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8009426:	2301      	movs	r3, #1
 8009428:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800942a:	2300      	movs	r3, #0
 800942c:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 800942e:	f107 0308 	add.w	r3, r7, #8
 8009432:	4618      	mov	r0, r3
 8009434:	f7fc f9d0 	bl	80057d8 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	4b17      	ldr	r3, [pc, #92]	; (8009498 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	b292      	uxth	r2, r2
 8009440:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8009442:	4b15      	ldr	r3, [pc, #84]	; (8009498 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	889a      	ldrh	r2, [r3, #4]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f8eb 	bl	8009628 <LoRaMacSerializerJoinRequest>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d001      	beq.n	800945c <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8009458:	2311      	movs	r3, #17
 800945a:	e018      	b.n	800948e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6819      	ldr	r1, [r3, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	3318      	adds	r3, #24
 8009464:	7bfa      	ldrb	r2, [r7, #15]
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	4613      	mov	r3, r2
 800946a:	2213      	movs	r2, #19
 800946c:	2000      	movs	r0, #0
 800946e:	f7fc f8ed 	bl	800564c <SecureElementComputeAesCmac>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d001      	beq.n	800947c <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009478:	230f      	movs	r3, #15
 800947a:	e008      	b.n	800948e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f8d3 	bl	8009628 <LoRaMacSerializerJoinRequest>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8009488:	2311      	movs	r3, #17
 800948a:	e000      	b.n	800948e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	200017b8 	.word	0x200017b8

0800949c <LoRaMacCryptoSecureMessage>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 800949c:	b590      	push	{r4, r7, lr}
 800949e:	b08b      	sub	sp, #44	; 0x2c
 80094a0:	af04      	add	r7, sp, #16
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	607b      	str	r3, [r7, #4]
 80094a6:	460b      	mov	r3, r1
 80094a8:	72fb      	strb	r3, [r7, #11]
 80094aa:	4613      	mov	r3, r2
 80094ac:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80094ae:	2313      	movs	r3, #19
 80094b0:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80094b2:	2303      	movs	r3, #3
 80094b4:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d101      	bne.n	80094c0 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80094bc:	230a      	movs	r3, #10
 80094be:	e05f      	b.n	8009580 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80094c0:	4b31      	ldr	r3, [pc, #196]	; (8009588 <LoRaMacCryptoSecureMessage+0xec>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d201      	bcs.n	80094d0 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80094cc:	2306      	movs	r3, #6
 80094ce:	e057      	b.n	8009580 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80094da:	2302      	movs	r3, #2
 80094dc:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80094de:	4b2a      	ldr	r3, [pc, #168]	; (8009588 <LoRaMacCryptoSecureMessage+0xec>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d916      	bls.n	8009518 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094f4:	b219      	sxth	r1, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	689c      	ldr	r4, [r3, #8]
 80094fa:	7dfa      	ldrb	r2, [r7, #23]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	9301      	str	r3, [sp, #4]
 8009500:	2300      	movs	r3, #0
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	4623      	mov	r3, r4
 8009506:	f7ff fded 	bl	80090e4 <PayloadEncrypt>
 800950a:	4603      	mov	r3, r0
 800950c:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800950e:	7dbb      	ldrb	r3, [r7, #22]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8009514:	7dbb      	ldrb	r3, [r7, #22]
 8009516:	e033      	b.n	8009580 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f907 	bl	800972c <LoRaMacSerializerData>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8009524:	2311      	movs	r3, #17
 8009526:	e02b      	b.n	8009580 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8009528:	2302      	movs	r3, #2
 800952a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6818      	ldr	r0, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	791b      	ldrb	r3, [r3, #4]
 8009534:	b29b      	uxth	r3, r3
 8009536:	3b04      	subs	r3, #4
 8009538:	b299      	uxth	r1, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	322c      	adds	r2, #44	; 0x2c
 8009542:	7dfc      	ldrb	r4, [r7, #23]
 8009544:	9203      	str	r2, [sp, #12]
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	9202      	str	r2, [sp, #8]
 800954a:	9301      	str	r3, [sp, #4]
 800954c:	2300      	movs	r3, #0
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	2300      	movs	r3, #0
 8009552:	4622      	mov	r2, r4
 8009554:	f7ff fec7 	bl	80092e6 <ComputeCmacB0>
 8009558:	4603      	mov	r3, r0
 800955a:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800955c:	7dbb      	ldrb	r3, [r7, #22]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8009562:	7dbb      	ldrb	r3, [r7, #22]
 8009564:	e00c      	b.n	8009580 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f8e0 	bl	800972c <LoRaMacSerializerData>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8009572:	2311      	movs	r3, #17
 8009574:	e004      	b.n	8009580 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8009576:	4b04      	ldr	r3, [pc, #16]	; (8009588 <LoRaMacCryptoSecureMessage+0xec>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	371c      	adds	r7, #28
 8009584:	46bd      	mov	sp, r7
 8009586:	bd90      	pop	{r4, r7, pc}
 8009588:	200017b8 	.word	0x200017b8

0800958c <LoRaMacCryptoDeriveMcRootKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	4603      	mov	r3, r0
 8009594:	460a      	mov	r2, r1
 8009596:	71fb      	strb	r3, [r7, #7]
 8009598:	4613      	mov	r3, r2
 800959a:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800959c:	79bb      	ldrb	r3, [r7, #6]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80095a2:	230b      	movs	r3, #11
 80095a4:	e019      	b.n	80095da <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 80095a6:	2300      	movs	r3, #0
 80095a8:	60bb      	str	r3, [r7, #8]
 80095aa:	f107 030c 	add.w	r3, r7, #12
 80095ae:	2200      	movs	r2, #0
 80095b0:	601a      	str	r2, [r3, #0]
 80095b2:	605a      	str	r2, [r3, #4]
 80095b4:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 80095b6:	79fb      	ldrb	r3, [r7, #7]
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d101      	bne.n	80095c0 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 80095bc:	2320      	movs	r3, #32
 80095be:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80095c0:	79b9      	ldrb	r1, [r7, #6]
 80095c2:	f107 0308 	add.w	r3, r7, #8
 80095c6:	2204      	movs	r2, #4
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fc f8c4 	bl	8005756 <SecureElementDeriveAndStoreKey>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80095d4:	230f      	movs	r3, #15
 80095d6:	e000      	b.n	80095da <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3718      	adds	r7, #24
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b086      	sub	sp, #24
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	4603      	mov	r3, r0
 80095ea:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 80095ec:	79fb      	ldrb	r3, [r7, #7]
 80095ee:	2b04      	cmp	r3, #4
 80095f0:	d001      	beq.n	80095f6 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80095f2:	230b      	movs	r3, #11
 80095f4:	e014      	b.n	8009620 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 80095f6:	2300      	movs	r3, #0
 80095f8:	60bb      	str	r3, [r7, #8]
 80095fa:	f107 030c 	add.w	r3, r7, #12
 80095fe:	2200      	movs	r2, #0
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	605a      	str	r2, [r3, #4]
 8009604:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8009606:	79f9      	ldrb	r1, [r7, #7]
 8009608:	f107 0308 	add.w	r3, r7, #8
 800960c:	227f      	movs	r2, #127	; 0x7f
 800960e:	4618      	mov	r0, r3
 8009610:	f7fc f8a1 	bl	8005756 <SecureElementDeriveAndStoreKey>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800961a:	230f      	movs	r3, #15
 800961c:	e000      	b.n	8009620 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3718      	adds	r7, #24
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <LoRaMacSerializerJoinRequest+0x16>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d101      	bne.n	8009642 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800963e:	2301      	movs	r3, #1
 8009640:	e070      	b.n	8009724 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	791b      	ldrb	r3, [r3, #4]
 800964a:	2b16      	cmp	r3, #22
 800964c:	d801      	bhi.n	8009652 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800964e:	2302      	movs	r3, #2
 8009650:	e068      	b.n	8009724 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	89fb      	ldrh	r3, [r7, #14]
 8009658:	1c59      	adds	r1, r3, #1
 800965a:	81f9      	strh	r1, [r7, #14]
 800965c:	4413      	add	r3, r2
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	7952      	ldrb	r2, [r2, #5]
 8009662:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	89fb      	ldrh	r3, [r7, #14]
 800966a:	18d0      	adds	r0, r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	3306      	adds	r3, #6
 8009670:	2208      	movs	r2, #8
 8009672:	4619      	mov	r1, r3
 8009674:	f001 ff04 	bl	800b480 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8009678:	89fb      	ldrh	r3, [r7, #14]
 800967a:	3308      	adds	r3, #8
 800967c:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	89fb      	ldrh	r3, [r7, #14]
 8009684:	18d0      	adds	r0, r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	330e      	adds	r3, #14
 800968a:	2208      	movs	r2, #8
 800968c:	4619      	mov	r1, r3
 800968e:	f001 fef7 	bl	800b480 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8009692:	89fb      	ldrh	r3, [r7, #14]
 8009694:	3308      	adds	r3, #8
 8009696:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	8ad9      	ldrh	r1, [r3, #22]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	89fb      	ldrh	r3, [r7, #14]
 80096a2:	1c58      	adds	r0, r3, #1
 80096a4:	81f8      	strh	r0, [r7, #14]
 80096a6:	4413      	add	r3, r2
 80096a8:	b2ca      	uxtb	r2, r1
 80096aa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	8adb      	ldrh	r3, [r3, #22]
 80096b0:	0a1b      	lsrs	r3, r3, #8
 80096b2:	b299      	uxth	r1, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	89fb      	ldrh	r3, [r7, #14]
 80096ba:	1c58      	adds	r0, r3, #1
 80096bc:	81f8      	strh	r0, [r7, #14]
 80096be:	4413      	add	r3, r2
 80096c0:	b2ca      	uxtb	r2, r1
 80096c2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6999      	ldr	r1, [r3, #24]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	89fb      	ldrh	r3, [r7, #14]
 80096ce:	1c58      	adds	r0, r3, #1
 80096d0:	81f8      	strh	r0, [r7, #14]
 80096d2:	4413      	add	r3, r2
 80096d4:	b2ca      	uxtb	r2, r1
 80096d6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	0a19      	lsrs	r1, r3, #8
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	89fb      	ldrh	r3, [r7, #14]
 80096e4:	1c58      	adds	r0, r3, #1
 80096e6:	81f8      	strh	r0, [r7, #14]
 80096e8:	4413      	add	r3, r2
 80096ea:	b2ca      	uxtb	r2, r1
 80096ec:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	699b      	ldr	r3, [r3, #24]
 80096f2:	0c19      	lsrs	r1, r3, #16
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	89fb      	ldrh	r3, [r7, #14]
 80096fa:	1c58      	adds	r0, r3, #1
 80096fc:	81f8      	strh	r0, [r7, #14]
 80096fe:	4413      	add	r3, r2
 8009700:	b2ca      	uxtb	r2, r1
 8009702:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	0e19      	lsrs	r1, r3, #24
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	89fb      	ldrh	r3, [r7, #14]
 8009710:	1c58      	adds	r0, r3, #1
 8009712:	81f8      	strh	r0, [r7, #14]
 8009714:	4413      	add	r3, r2
 8009716:	b2ca      	uxtb	r2, r1
 8009718:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 800971a:	89fb      	ldrh	r3, [r7, #14]
 800971c:	b2da      	uxtb	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d003      	beq.n	8009742 <LoRaMacSerializerData+0x16>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d101      	bne.n	8009746 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8009742:	2301      	movs	r3, #1
 8009744:	e0e5      	b.n	8009912 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8009746:	2300      	movs	r3, #0
 8009748:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 800974a:	2308      	movs	r3, #8
 800974c:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	7b1b      	ldrb	r3, [r3, #12]
 8009752:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009756:	b2db      	uxtb	r3, r3
 8009758:	b29a      	uxth	r2, r3
 800975a:	89bb      	ldrh	r3, [r7, #12]
 800975c:	4413      	add	r3, r2
 800975e:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009766:	2b00      	cmp	r3, #0
 8009768:	d002      	beq.n	8009770 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800976a:	89bb      	ldrh	r3, [r7, #12]
 800976c:	3301      	adds	r3, #1
 800976e:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009776:	b29a      	uxth	r2, r3
 8009778:	89bb      	ldrh	r3, [r7, #12]
 800977a:	4413      	add	r3, r2
 800977c:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800977e:	89bb      	ldrh	r3, [r7, #12]
 8009780:	3304      	adds	r3, #4
 8009782:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	791b      	ldrb	r3, [r3, #4]
 8009788:	b29b      	uxth	r3, r3
 800978a:	89ba      	ldrh	r2, [r7, #12]
 800978c:	429a      	cmp	r2, r3
 800978e:	d901      	bls.n	8009794 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8009790:	2302      	movs	r3, #2
 8009792:	e0be      	b.n	8009912 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	89fb      	ldrh	r3, [r7, #14]
 800979a:	1c59      	adds	r1, r3, #1
 800979c:	81f9      	strh	r1, [r7, #14]
 800979e:	4413      	add	r3, r2
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	7952      	ldrb	r2, [r2, #5]
 80097a4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6899      	ldr	r1, [r3, #8]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	89fb      	ldrh	r3, [r7, #14]
 80097b0:	1c58      	adds	r0, r3, #1
 80097b2:	81f8      	strh	r0, [r7, #14]
 80097b4:	4413      	add	r3, r2
 80097b6:	b2ca      	uxtb	r2, r1
 80097b8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	0a19      	lsrs	r1, r3, #8
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	89fb      	ldrh	r3, [r7, #14]
 80097c6:	1c58      	adds	r0, r3, #1
 80097c8:	81f8      	strh	r0, [r7, #14]
 80097ca:	4413      	add	r3, r2
 80097cc:	b2ca      	uxtb	r2, r1
 80097ce:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	0c19      	lsrs	r1, r3, #16
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	89fb      	ldrh	r3, [r7, #14]
 80097dc:	1c58      	adds	r0, r3, #1
 80097de:	81f8      	strh	r0, [r7, #14]
 80097e0:	4413      	add	r3, r2
 80097e2:	b2ca      	uxtb	r2, r1
 80097e4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	0e19      	lsrs	r1, r3, #24
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	89fb      	ldrh	r3, [r7, #14]
 80097f2:	1c58      	adds	r0, r3, #1
 80097f4:	81f8      	strh	r0, [r7, #14]
 80097f6:	4413      	add	r3, r2
 80097f8:	b2ca      	uxtb	r2, r1
 80097fa:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	89fb      	ldrh	r3, [r7, #14]
 8009802:	1c59      	adds	r1, r3, #1
 8009804:	81f9      	strh	r1, [r7, #14]
 8009806:	4413      	add	r3, r2
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	7b12      	ldrb	r2, [r2, #12]
 800980c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	89d9      	ldrh	r1, [r3, #14]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	89fb      	ldrh	r3, [r7, #14]
 8009818:	1c58      	adds	r0, r3, #1
 800981a:	81f8      	strh	r0, [r7, #14]
 800981c:	4413      	add	r3, r2
 800981e:	b2ca      	uxtb	r2, r1
 8009820:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	89db      	ldrh	r3, [r3, #14]
 8009826:	0a1b      	lsrs	r3, r3, #8
 8009828:	b299      	uxth	r1, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	89fb      	ldrh	r3, [r7, #14]
 8009830:	1c58      	adds	r0, r3, #1
 8009832:	81f8      	strh	r0, [r7, #14]
 8009834:	4413      	add	r3, r2
 8009836:	b2ca      	uxtb	r2, r1
 8009838:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	89fb      	ldrh	r3, [r7, #14]
 8009840:	18d0      	adds	r0, r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f103 0110 	add.w	r1, r3, #16
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	7b1b      	ldrb	r3, [r3, #12]
 800984c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009850:	b2db      	uxtb	r3, r3
 8009852:	b29b      	uxth	r3, r3
 8009854:	461a      	mov	r2, r3
 8009856:	f001 fdf8 	bl	800b44a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	7b1b      	ldrb	r3, [r3, #12]
 800985e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009862:	b2db      	uxtb	r3, r3
 8009864:	b29a      	uxth	r2, r3
 8009866:	89fb      	ldrh	r3, [r7, #14]
 8009868:	4413      	add	r3, r2
 800986a:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009872:	2b00      	cmp	r3, #0
 8009874:	d009      	beq.n	800988a <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	89fb      	ldrh	r3, [r7, #14]
 800987c:	1c59      	adds	r1, r3, #1
 800987e:	81f9      	strh	r1, [r7, #14]
 8009880:	4413      	add	r3, r2
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009888:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	89fb      	ldrh	r3, [r7, #14]
 8009890:	18d0      	adds	r0, r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800989c:	b29b      	uxth	r3, r3
 800989e:	461a      	mov	r2, r3
 80098a0:	f001 fdd3 	bl	800b44a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	89fb      	ldrh	r3, [r7, #14]
 80098ae:	4413      	add	r3, r2
 80098b0:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	89fb      	ldrh	r3, [r7, #14]
 80098bc:	1c58      	adds	r0, r3, #1
 80098be:	81f8      	strh	r0, [r7, #14]
 80098c0:	4413      	add	r3, r2
 80098c2:	b2ca      	uxtb	r2, r1
 80098c4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ca:	0a19      	lsrs	r1, r3, #8
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	89fb      	ldrh	r3, [r7, #14]
 80098d2:	1c58      	adds	r0, r3, #1
 80098d4:	81f8      	strh	r0, [r7, #14]
 80098d6:	4413      	add	r3, r2
 80098d8:	b2ca      	uxtb	r2, r1
 80098da:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	0c19      	lsrs	r1, r3, #16
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	89fb      	ldrh	r3, [r7, #14]
 80098e8:	1c58      	adds	r0, r3, #1
 80098ea:	81f8      	strh	r0, [r7, #14]
 80098ec:	4413      	add	r3, r2
 80098ee:	b2ca      	uxtb	r2, r1
 80098f0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f6:	0e19      	lsrs	r1, r3, #24
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	89fb      	ldrh	r3, [r7, #14]
 80098fe:	1c58      	adds	r0, r3, #1
 8009900:	81f8      	strh	r0, [r7, #14]
 8009902:	4413      	add	r3, r2
 8009904:	b2ca      	uxtb	r2, r1
 8009906:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8009908:	89fb      	ldrh	r3, [r7, #14]
 800990a:	b2da      	uxtb	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <RegionGetPhyParam>:
        }
    }
}

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b084      	sub	sp, #16
 800991e:	af00      	add	r7, sp, #0
 8009920:	4603      	mov	r3, r0
 8009922:	6039      	str	r1, [r7, #0]
 8009924:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8009926:	2300      	movs	r3, #0
 8009928:	60bb      	str	r3, [r7, #8]
    switch( region )
 800992a:	79fb      	ldrb	r3, [r7, #7]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d105      	bne.n	800993c <RegionGetPhyParam+0x22>
    {
        AS923_GET_PHY_PARAM( );
 8009930:	6838      	ldr	r0, [r7, #0]
 8009932:	f000 f975 	bl	8009c20 <RegionAS923GetPhyParam>
 8009936:	4603      	mov	r3, r0
 8009938:	60fb      	str	r3, [r7, #12]
 800993a:	e001      	b.n	8009940 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <RegionInitDefaults>:
        }
    }
}

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b082      	sub	sp, #8
 800994e:	af00      	add	r7, sp, #0
 8009950:	4603      	mov	r3, r0
 8009952:	6039      	str	r1, [r7, #0]
 8009954:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009956:	79fb      	ldrb	r3, [r7, #7]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d103      	bne.n	8009964 <RegionInitDefaults+0x1a>
    {
        AS923_INIT_DEFAULTS( );
 800995c:	6838      	ldr	r0, [r7, #0]
 800995e:	f000 fadb 	bl	8009f18 <RegionAS923InitDefaults>
 8009962:	e000      	b.n	8009966 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8009964:	bf00      	nop
        }
    }
}
 8009966:	bf00      	nop
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b082      	sub	sp, #8
 8009972:	af00      	add	r7, sp, #0
 8009974:	4603      	mov	r3, r0
 8009976:	6039      	str	r1, [r7, #0]
 8009978:	71fb      	strb	r3, [r7, #7]
 800997a:	4613      	mov	r3, r2
 800997c:	71bb      	strb	r3, [r7, #6]
    switch( region )
 800997e:	79fb      	ldrb	r3, [r7, #7]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d106      	bne.n	8009992 <RegionVerify+0x24>
    {
        AS923_VERIFY( );
 8009984:	79bb      	ldrb	r3, [r7, #6]
 8009986:	4619      	mov	r1, r3
 8009988:	6838      	ldr	r0, [r7, #0]
 800998a:	f000 fb59 	bl	800a040 <RegionAS923Verify>
 800998e:	4603      	mov	r3, r0
 8009990:	e000      	b.n	8009994 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8009992:	2300      	movs	r3, #0
        }
    }
}
 8009994:	4618      	mov	r0, r3
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <RegionChanMaskSet>:
        }
    }
}

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	4603      	mov	r3, r0
 80099a4:	6039      	str	r1, [r7, #0]
 80099a6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80099a8:	79fb      	ldrb	r3, [r7, #7]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d104      	bne.n	80099b8 <RegionChanMaskSet+0x1c>
    {
        AS923_CHAN_MASK_SET( );
 80099ae:	6838      	ldr	r0, [r7, #0]
 80099b0:	f000 fbe4 	bl	800a17c <RegionAS923ChanMaskSet>
 80099b4:	4603      	mov	r3, r0
 80099b6:	e000      	b.n	80099ba <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80099b8:	2300      	movs	r3, #0
        }
    }
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b082      	sub	sp, #8
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	603b      	str	r3, [r7, #0]
 80099ca:	4603      	mov	r3, r0
 80099cc:	71fb      	strb	r3, [r7, #7]
 80099ce:	460b      	mov	r3, r1
 80099d0:	71bb      	strb	r3, [r7, #6]
 80099d2:	4613      	mov	r3, r2
 80099d4:	717b      	strb	r3, [r7, #5]
    switch( region )
 80099d6:	79fb      	ldrb	r3, [r7, #7]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d107      	bne.n	80099ec <RegionComputeRxWindowParameters+0x2a>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 80099dc:	7979      	ldrb	r1, [r7, #5]
 80099de:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	f000 fbf3 	bl	800a1d0 <RegionAS923ComputeRxWindowParameters>
 80099ea:	e000      	b.n	80099ee <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80099ec:	bf00      	nop
        }
    }
}
 80099ee:	bf00      	nop
 80099f0:	3708      	adds	r7, #8
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b084      	sub	sp, #16
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	4603      	mov	r3, r0
 80099fe:	60b9      	str	r1, [r7, #8]
 8009a00:	607a      	str	r2, [r7, #4]
 8009a02:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d105      	bne.n	8009a16 <RegionRxConfig+0x20>
    {
        AS923_RX_CONFIG( );
 8009a0a:	6879      	ldr	r1, [r7, #4]
 8009a0c:	68b8      	ldr	r0, [r7, #8]
 8009a0e:	f000 fc39 	bl	800a284 <RegionAS923RxConfig>
 8009a12:	4603      	mov	r3, r0
 8009a14:	e000      	b.n	8009a18 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8009a16:	2300      	movs	r3, #0
        }
    }
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60b9      	str	r1, [r7, #8]
 8009a28:	607a      	str	r2, [r7, #4]
 8009a2a:	603b      	str	r3, [r7, #0]
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d106      	bne.n	8009a44 <RegionTxConfig+0x24>
    {
        AS923_TX_CONFIG( );
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	6879      	ldr	r1, [r7, #4]
 8009a3a:	68b8      	ldr	r0, [r7, #8]
 8009a3c:	f000 fcf2 	bl	800a424 <RegionAS923TxConfig>
 8009a40:	4603      	mov	r3, r0
 8009a42:	e000      	b.n	8009a46 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8009a44:	2300      	movs	r3, #0
        }
    }
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <RegionAlternateDr>:
        }
    }
}

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b082      	sub	sp, #8
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	4603      	mov	r3, r0
 8009a56:	71fb      	strb	r3, [r7, #7]
 8009a58:	460b      	mov	r3, r1
 8009a5a:	71bb      	strb	r3, [r7, #6]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	717b      	strb	r3, [r7, #5]
    switch( region )
 8009a60:	79fb      	ldrb	r3, [r7, #7]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d108      	bne.n	8009a78 <RegionAlternateDr+0x2a>
    {
        AS923_ALTERNATE_DR( );
 8009a66:	797a      	ldrb	r2, [r7, #5]
 8009a68:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009a6c:	4611      	mov	r1, r2
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f000 fda8 	bl	800a5c4 <RegionAS923AlternateDr>
 8009a74:	4603      	mov	r3, r0
 8009a76:	e000      	b.n	8009a7a <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8009a78:	2300      	movs	r3, #0
        }
    }
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b084      	sub	sp, #16
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
 8009a8c:	603b      	str	r3, [r7, #0]
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d107      	bne.n	8009aa8 <RegionNextChannel+0x26>
    {
        AS923_NEXT_CHANNEL( );
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	683a      	ldr	r2, [r7, #0]
 8009a9c:	6879      	ldr	r1, [r7, #4]
 8009a9e:	68b8      	ldr	r0, [r7, #8]
 8009aa0:	f000 fd9e 	bl	800a5e0 <RegionAS923NextChannel>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	e000      	b.n	8009aaa <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8009aa8:	2309      	movs	r3, #9
        }
    }
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b082      	sub	sp, #8
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	4603      	mov	r3, r0
 8009aba:	6039      	str	r1, [r7, #0]
 8009abc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009abe:	79fb      	ldrb	r3, [r7, #7]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d103      	bne.n	8009acc <RegionSetContinuousWave+0x1a>
    {
        AS923_SET_CONTINUOUS_WAVE( );
 8009ac4:	6838      	ldr	r0, [r7, #0]
 8009ac6:	f000 fe39 	bl	800a73c <RegionAS923SetContinuousWave>
 8009aca:	e000      	b.n	8009ace <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8009acc:	bf00      	nop
        }
    }
}
 8009ace:	bf00      	nop
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8009ad6:	b590      	push	{r4, r7, lr}
 8009ad8:	b083      	sub	sp, #12
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	4604      	mov	r4, r0
 8009ade:	4608      	mov	r0, r1
 8009ae0:	4611      	mov	r1, r2
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	4623      	mov	r3, r4
 8009ae6:	71fb      	strb	r3, [r7, #7]
 8009ae8:	4603      	mov	r3, r0
 8009aea:	71bb      	strb	r3, [r7, #6]
 8009aec:	460b      	mov	r3, r1
 8009aee:	717b      	strb	r3, [r7, #5]
 8009af0:	4613      	mov	r3, r2
 8009af2:	713b      	strb	r3, [r7, #4]
    switch( region )
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d109      	bne.n	8009b0e <RegionApplyDrOffset+0x38>
    {
        AS923_APPLY_DR_OFFSET( );
 8009afa:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8009afe:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8009b02:	79bb      	ldrb	r3, [r7, #6]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f000 fe67 	bl	800a7d8 <RegionAS923ApplyDrOffset>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	e000      	b.n	8009b10 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8009b0e:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd90      	pop	{r4, r7, pc}

08009b18 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8009b1e:	4b04      	ldr	r3, [pc, #16]	; (8009b30 <RegionGetVersion+0x18>)
 8009b20:	607b      	str	r3, [r7, #4]

    return version;
 8009b22:	687b      	ldr	r3, [r7, #4]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bc80      	pop	{r7}
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	01010003 	.word	0x01010003

08009b34 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8009b3c:	4b0d      	ldr	r3, [pc, #52]	; (8009b74 <VerifyRfFreq+0x40>)
 8009b3e:	6a1b      	ldr	r3, [r3, #32]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	4798      	blx	r3
 8009b44:	4603      	mov	r3, r0
 8009b46:	f083 0301 	eor.w	r3, r3, #1
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d001      	beq.n	8009b54 <VerifyRfFreq+0x20>
    {
        return false;
 8009b50:	2300      	movs	r3, #0
 8009b52:	e00a      	b.n	8009b6a <VerifyRfFreq+0x36>
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a08      	ldr	r2, [pc, #32]	; (8009b78 <VerifyRfFreq+0x44>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d903      	bls.n	8009b64 <VerifyRfFreq+0x30>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a07      	ldr	r2, [pc, #28]	; (8009b7c <VerifyRfFreq+0x48>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d901      	bls.n	8009b68 <VerifyRfFreq+0x34>
    {
        return false;
 8009b64:	2300      	movs	r3, #0
 8009b66:	e000      	b.n	8009b6a <VerifyRfFreq+0x36>
    }
    return true;
 8009b68:	2301      	movs	r3, #1
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	0800f3f0 	.word	0x0800f3f0
 8009b78:	366b463f 	.word	0x366b463f
 8009b7c:	37502800 	.word	0x37502800

08009b80 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8009b80:	b590      	push	{r4, r7, lr}
 8009b82:	b08b      	sub	sp, #44	; 0x2c
 8009b84:	af04      	add	r7, sp, #16
 8009b86:	4603      	mov	r3, r0
 8009b88:	460a      	mov	r2, r1
 8009b8a:	71fb      	strb	r3, [r7, #7]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesAS923[datarate];
 8009b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b94:	4a1f      	ldr	r2, [pc, #124]	; (8009c14 <GetTimeOnAir+0x94>)
 8009b96:	5cd3      	ldrb	r3, [r2, r3]
 8009b98:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 8009b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b9e:	491e      	ldr	r1, [pc, #120]	; (8009c18 <GetTimeOnAir+0x98>)
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f001 fbe3 	bl	800b36c <RegionCommonGetBandwidth>
 8009ba6:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8009bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bb0:	2b07      	cmp	r3, #7
 8009bb2:	d118      	bne.n	8009be6 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8009bb4:	4b19      	ldr	r3, [pc, #100]	; (8009c1c <GetTimeOnAir+0x9c>)
 8009bb6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009bb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009bbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009bc0:	fb02 f303 	mul.w	r3, r2, r3
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	88bb      	ldrh	r3, [r7, #4]
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	2201      	movs	r2, #1
 8009bcc:	9203      	str	r2, [sp, #12]
 8009bce:	9302      	str	r3, [sp, #8]
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	9301      	str	r3, [sp, #4]
 8009bd4:	2305      	movs	r3, #5
 8009bd6:	9300      	str	r3, [sp, #0]
 8009bd8:	2300      	movs	r3, #0
 8009bda:	460a      	mov	r2, r1
 8009bdc:	68f9      	ldr	r1, [r7, #12]
 8009bde:	2000      	movs	r0, #0
 8009be0:	47a0      	blx	r4
 8009be2:	6178      	str	r0, [r7, #20]
 8009be4:	e011      	b.n	8009c0a <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8009be6:	4b0d      	ldr	r3, [pc, #52]	; (8009c1c <GetTimeOnAir+0x9c>)
 8009be8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009bea:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009bee:	88bb      	ldrh	r3, [r7, #4]
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	9103      	str	r1, [sp, #12]
 8009bf6:	9302      	str	r3, [sp, #8]
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	9301      	str	r3, [sp, #4]
 8009bfc:	2308      	movs	r3, #8
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	2301      	movs	r3, #1
 8009c02:	68f9      	ldr	r1, [r7, #12]
 8009c04:	2001      	movs	r0, #1
 8009c06:	47a0      	blx	r4
 8009c08:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8009c0a:	697b      	ldr	r3, [r7, #20]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	371c      	adds	r7, #28
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd90      	pop	{r4, r7, pc}
 8009c14:	0800f3a8 	.word	0x0800f3a8
 8009c18:	0800f3b0 	.word	0x0800f3b0
 8009c1c:	0800f3f0 	.word	0x0800f3f0

08009c20 <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8009c28:	2300      	movs	r3, #0
 8009c2a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	3b01      	subs	r3, #1
 8009c32:	2b38      	cmp	r3, #56	; 0x38
 8009c34:	f200 8154 	bhi.w	8009ee0 <RegionAS923GetPhyParam+0x2c0>
 8009c38:	a201      	add	r2, pc, #4	; (adr r2, 8009c40 <RegionAS923GetPhyParam+0x20>)
 8009c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3e:	bf00      	nop
 8009c40:	08009d25 	.word	0x08009d25
 8009c44:	08009d39 	.word	0x08009d39
 8009c48:	08009ee1 	.word	0x08009ee1
 8009c4c:	08009ee1 	.word	0x08009ee1
 8009c50:	08009ee1 	.word	0x08009ee1
 8009c54:	08009d4d 	.word	0x08009d4d
 8009c58:	08009ee1 	.word	0x08009ee1
 8009c5c:	08009d93 	.word	0x08009d93
 8009c60:	08009ee1 	.word	0x08009ee1
 8009c64:	08009d99 	.word	0x08009d99
 8009c68:	08009d9f 	.word	0x08009d9f
 8009c6c:	08009da5 	.word	0x08009da5
 8009c70:	08009dab 	.word	0x08009dab
 8009c74:	08009dd3 	.word	0x08009dd3
 8009c78:	08009dfb 	.word	0x08009dfb
 8009c7c:	08009e01 	.word	0x08009e01
 8009c80:	08009e09 	.word	0x08009e09
 8009c84:	08009e11 	.word	0x08009e11
 8009c88:	08009e19 	.word	0x08009e19
 8009c8c:	08009e21 	.word	0x08009e21
 8009c90:	08009e29 	.word	0x08009e29
 8009c94:	08009e31 	.word	0x08009e31
 8009c98:	08009e45 	.word	0x08009e45
 8009c9c:	08009e4b 	.word	0x08009e4b
 8009ca0:	08009e51 	.word	0x08009e51
 8009ca4:	08009e57 	.word	0x08009e57
 8009ca8:	08009e63 	.word	0x08009e63
 8009cac:	08009e6f 	.word	0x08009e6f
 8009cb0:	08009e75 	.word	0x08009e75
 8009cb4:	08009e7d 	.word	0x08009e7d
 8009cb8:	08009e83 	.word	0x08009e83
 8009cbc:	08009e89 	.word	0x08009e89
 8009cc0:	08009e91 	.word	0x08009e91
 8009cc4:	08009d53 	.word	0x08009d53
 8009cc8:	08009ee1 	.word	0x08009ee1
 8009ccc:	08009ee1 	.word	0x08009ee1
 8009cd0:	08009ee1 	.word	0x08009ee1
 8009cd4:	08009ee1 	.word	0x08009ee1
 8009cd8:	08009ee1 	.word	0x08009ee1
 8009cdc:	08009ee1 	.word	0x08009ee1
 8009ce0:	08009ee1 	.word	0x08009ee1
 8009ce4:	08009ee1 	.word	0x08009ee1
 8009ce8:	08009ee1 	.word	0x08009ee1
 8009cec:	08009ee1 	.word	0x08009ee1
 8009cf0:	08009ee1 	.word	0x08009ee1
 8009cf4:	08009ee1 	.word	0x08009ee1
 8009cf8:	08009ee1 	.word	0x08009ee1
 8009cfc:	08009e97 	.word	0x08009e97
 8009d00:	08009e9d 	.word	0x08009e9d
 8009d04:	08009eab 	.word	0x08009eab
 8009d08:	08009ee1 	.word	0x08009ee1
 8009d0c:	08009ee1 	.word	0x08009ee1
 8009d10:	08009eb1 	.word	0x08009eb1
 8009d14:	08009eb7 	.word	0x08009eb7
 8009d18:	08009ee1 	.word	0x08009ee1
 8009d1c:	08009ebd 	.word	0x08009ebd
 8009d20:	08009ecd 	.word	0x08009ecd
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	78db      	ldrb	r3, [r3, #3]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d102      	bne.n	8009d32 <RegionAS923GetPhyParam+0x112>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8009d30:	e0d7      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8009d32:	2302      	movs	r3, #2
 8009d34:	61bb      	str	r3, [r7, #24]
            break;
 8009d36:	e0d4      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	789b      	ldrb	r3, [r3, #2]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d102      	bne.n	8009d46 <RegionAS923GetPhyParam+0x126>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
 8009d40:	2300      	movs	r3, #0
 8009d42:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8009d44:	e0cd      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8009d46:	2302      	movs	r3, #2
 8009d48:	61bb      	str	r3, [r7, #24]
            break;
 8009d4a:	e0ca      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	61bb      	str	r3, [r7, #24]
            break;
 8009d50:	e0c7      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8009d58:	733b      	strb	r3, [r7, #12]
 8009d5a:	2307      	movs	r3, #7
 8009d5c:	737b      	strb	r3, [r7, #13]
                .MaxDr = ( int8_t )AS923_TX_MAX_DATARATE,
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	789b      	ldrb	r3, [r3, #2]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d101      	bne.n	8009d6a <RegionAS923GetPhyParam+0x14a>
 8009d66:	2300      	movs	r3, #0
 8009d68:	e000      	b.n	8009d6c <RegionAS923GetPhyParam+0x14c>
 8009d6a:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8009d6c:	73bb      	strb	r3, [r7, #14]
 8009d6e:	2310      	movs	r3, #16
 8009d70:	73fb      	strb	r3, [r7, #15]
                .NbChannels = AS923_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8009d72:	4b5f      	ldr	r3, [pc, #380]	; (8009ef0 <RegionAS923GetPhyParam+0x2d0>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8009d7a:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8009d7c:	4b5c      	ldr	r3, [pc, #368]	; (8009ef0 <RegionAS923GetPhyParam+0x2d0>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8009d80:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8009d82:	f107 030c 	add.w	r3, r7, #12
 8009d86:	4618      	mov	r0, r3
 8009d88:	f001 fa9d 	bl	800b2c6 <RegionCommonGetNextLowerTxDr>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	61bb      	str	r3, [r7, #24]
            break;
 8009d90:	e0a7      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AS923_MAX_TX_POWER;
 8009d92:	2300      	movs	r3, #0
 8009d94:	61bb      	str	r3, [r7, #24]
            break;
 8009d96:	e0a4      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AS923_DEFAULT_TX_POWER;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	61bb      	str	r3, [r7, #24]
            break;
 8009d9c:	e0a1      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8009d9e:	2340      	movs	r3, #64	; 0x40
 8009da0:	61bb      	str	r3, [r7, #24]
            break;
 8009da2:	e09e      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8009da4:	2320      	movs	r3, #32
 8009da6:	61bb      	str	r3, [r7, #24]
            break;
 8009da8:	e09b      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	789b      	ldrb	r3, [r3, #2]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d107      	bne.n	8009dc2 <RegionAS923GetPhyParam+0x1a2>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8009db8:	461a      	mov	r2, r3
 8009dba:	4b4e      	ldr	r3, [pc, #312]	; (8009ef4 <RegionAS923GetPhyParam+0x2d4>)
 8009dbc:	5c9b      	ldrb	r3, [r3, r2]
 8009dbe:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 8009dc0:	e08f      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8009dc8:	461a      	mov	r2, r3
 8009dca:	4b4b      	ldr	r3, [pc, #300]	; (8009ef8 <RegionAS923GetPhyParam+0x2d8>)
 8009dcc:	5c9b      	ldrb	r3, [r3, r2]
 8009dce:	61bb      	str	r3, [r7, #24]
            break;
 8009dd0:	e087      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	789b      	ldrb	r3, [r3, #2]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d107      	bne.n	8009dea <RegionAS923GetPhyParam+0x1ca>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8009de0:	461a      	mov	r2, r3
 8009de2:	4b46      	ldr	r3, [pc, #280]	; (8009efc <RegionAS923GetPhyParam+0x2dc>)
 8009de4:	5c9b      	ldrb	r3, [r3, r2]
 8009de6:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 8009de8:	e07b      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8009df0:	461a      	mov	r2, r3
 8009df2:	4b41      	ldr	r3, [pc, #260]	; (8009ef8 <RegionAS923GetPhyParam+0x2d8>)
 8009df4:	5c9b      	ldrb	r3, [r3, r2]
 8009df6:	61bb      	str	r3, [r7, #24]
            break;
 8009df8:	e073      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AS923_DUTY_CYCLE_ENABLED;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	61bb      	str	r3, [r7, #24]
            break;
 8009dfe:	e070      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AS923_MAX_RX_WINDOW;
 8009e00:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009e04:	61bb      	str	r3, [r7, #24]
            break;
 8009e06:	e06c      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8009e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009e0c:	61bb      	str	r3, [r7, #24]
            break;
 8009e0e:	e068      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8009e10:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009e14:	61bb      	str	r3, [r7, #24]
            break;
 8009e16:	e064      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8009e18:	f241 3388 	movw	r3, #5000	; 0x1388
 8009e1c:	61bb      	str	r3, [r7, #24]
            break;
 8009e1e:	e060      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8009e20:	f241 7370 	movw	r3, #6000	; 0x1770
 8009e24:	61bb      	str	r3, [r7, #24]
            break;
 8009e26:	e05c      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8009e28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009e2c:	61bb      	str	r3, [r7, #24]
            break;
 8009e2e:	e058      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8009e30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009e34:	4832      	ldr	r0, [pc, #200]	; (8009f00 <RegionAS923GetPhyParam+0x2e0>)
 8009e36:	f001 faf1 	bl	800b41c <randr>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8009e40:	61bb      	str	r3, [r7, #24]
            break;
 8009e42:	e04e      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8009e44:	2300      	movs	r3, #0
 8009e46:	61bb      	str	r3, [r7, #24]
            break;
 8009e48:	e04b      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 8009e4a:	4b2e      	ldr	r3, [pc, #184]	; (8009f04 <RegionAS923GetPhyParam+0x2e4>)
 8009e4c:	61bb      	str	r3, [r7, #24]
            break;
 8009e4e:	e048      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AS923_RX_WND_2_DR;
 8009e50:	2302      	movs	r3, #2
 8009e52:	61bb      	str	r3, [r7, #24]
            break;
 8009e54:	e045      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8009e56:	4b26      	ldr	r3, [pc, #152]	; (8009ef0 <RegionAS923GetPhyParam+0x2d0>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8009e5e:	61bb      	str	r3, [r7, #24]
            break;
 8009e60:	e03f      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8009e62:	4b23      	ldr	r3, [pc, #140]	; (8009ef0 <RegionAS923GetPhyParam+0x2d0>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8009e6a:	61bb      	str	r3, [r7, #24]
            break;
 8009e6c:	e039      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 8009e6e:	2310      	movs	r3, #16
 8009e70:	61bb      	str	r3, [r7, #24]
            break;
 8009e72:	e036      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8009e74:	4b1e      	ldr	r3, [pc, #120]	; (8009ef0 <RegionAS923GetPhyParam+0x2d0>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	61bb      	str	r3, [r7, #24]
            break;
 8009e7a:	e032      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	61bb      	str	r3, [r7, #24]
            break;
 8009e80:	e02f      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 8009e82:	2301      	movs	r3, #1
 8009e84:	61bb      	str	r3, [r7, #24]
            break;
 8009e86:	e02c      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 8009e88:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8009e8c:	61bb      	str	r3, [r7, #24]
            break;
 8009e8e:	e028      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 8009e90:	4b1d      	ldr	r3, [pc, #116]	; (8009f08 <RegionAS923GetPhyParam+0x2e8>)
 8009e92:	61bb      	str	r3, [r7, #24]
            break;
 8009e94:	e025      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 8009e96:	4b1d      	ldr	r3, [pc, #116]	; (8009f0c <RegionAS923GetPhyParam+0x2ec>)
 8009e98:	61bb      	str	r3, [r7, #24]
            break;
 8009e9a:	e022      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 8009e9c:	2311      	movs	r3, #17
 8009e9e:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	76bb      	strb	r3, [r7, #26]
            break;
 8009ea8:	e01b      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	61bb      	str	r3, [r7, #24]
            break;
 8009eae:	e018      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
 8009eb0:	4b16      	ldr	r3, [pc, #88]	; (8009f0c <RegionAS923GetPhyParam+0x2ec>)
 8009eb2:	61bb      	str	r3, [r7, #24]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
#endif /* REGION_VERSION */
            break;
 8009eb4:	e015      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 8009eb6:	2303      	movs	r3, #3
 8009eb8:	61bb      	str	r3, [r7, #24]
            break;
 8009eba:	e012      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	4b12      	ldr	r3, [pc, #72]	; (8009f10 <RegionAS923GetPhyParam+0x2f0>)
 8009ec6:	5c9b      	ldrb	r3, [r3, r2]
 8009ec8:	61bb      	str	r3, [r7, #24]
            break;
 8009eca:	e00a      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8009ed2:	4910      	ldr	r1, [pc, #64]	; (8009f14 <RegionAS923GetPhyParam+0x2f4>)
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f001 fa49 	bl	800b36c <RegionCommonGetBandwidth>
 8009eda:	4603      	mov	r3, r0
 8009edc:	61bb      	str	r3, [r7, #24]
            break;
 8009ede:	e000      	b.n	8009ee2 <RegionAS923GetPhyParam+0x2c2>
        }
        default:
        {
            break;
 8009ee0:	bf00      	nop
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	61fb      	str	r3, [r7, #28]
 8009ee6:	69fb      	ldr	r3, [r7, #28]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3720      	adds	r7, #32
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	200017c0 	.word	0x200017c0
 8009ef4:	0800f3d0 	.word	0x0800f3d0
 8009ef8:	0800f3e0 	.word	0x0800f3e0
 8009efc:	0800f3d8 	.word	0x0800f3d8
 8009f00:	fffffc18 	.word	0xfffffc18
 8009f04:	3706ea00 	.word	0x3706ea00
 8009f08:	4009999a 	.word	0x4009999a
 8009f0c:	3709f740 	.word	0x3709f740
 8009f10:	0800f3a8 	.word	0x0800f3a8
 8009f14:	0800f3b0 	.word	0x0800f3b0

08009f18 <RegionAS923InitDefaults>:
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b08e      	sub	sp, #56	; 0x38
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 8009f20:	2364      	movs	r3, #100	; 0x64
 8009f22:	843b      	strh	r3, [r7, #32]
 8009f24:	2300      	movs	r3, #0
 8009f26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8009f2e:	2300      	movs	r3, #0
 8009f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f32:	2300      	movs	r3, #0
 8009f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f36:	2300      	movs	r3, #0
 8009f38:	633b      	str	r3, [r7, #48]	; 0x30
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    {
        AS923_BAND0
    };

    switch( params->Type )
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	7a1b      	ldrb	r3, [r3, #8]
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d05f      	beq.n	800a008 <RegionAS923InitDefaults+0xf0>
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	dc6c      	bgt.n	800a026 <RegionAS923InitDefaults+0x10e>
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d002      	beq.n	8009f56 <RegionAS923InitDefaults+0x3e>
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d044      	beq.n	8009fde <RegionAS923InitDefaults+0xc6>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8009f54:	e067      	b.n	800a026 <RegionAS923InitDefaults+0x10e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d064      	beq.n	800a028 <RegionAS923InitDefaults+0x110>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d060      	beq.n	800a028 <RegionAS923InitDefaults+0x110>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a31      	ldr	r2, [pc, #196]	; (800a030 <RegionAS923InitDefaults+0x118>)
 8009f6c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	4a30      	ldr	r2, [pc, #192]	; (800a034 <RegionAS923InitDefaults+0x11c>)
 8009f74:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 8009f76:	4b2e      	ldr	r3, [pc, #184]	; (800a030 <RegionAS923InitDefaults+0x118>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f107 0320 	add.w	r3, r7, #32
 8009f80:	2218      	movs	r2, #24
 8009f82:	4619      	mov	r1, r3
 8009f84:	f001 fa61 	bl	800b44a <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 8009f88:	4b2a      	ldr	r3, [pc, #168]	; (800a034 <RegionAS923InitDefaults+0x11c>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a2a      	ldr	r2, [pc, #168]	; (800a038 <RegionAS923InitDefaults+0x120>)
 8009f8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 8009f94:	4b27      	ldr	r3, [pc, #156]	; (800a034 <RegionAS923InitDefaults+0x11c>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a28      	ldr	r2, [pc, #160]	; (800a03c <RegionAS923InitDefaults+0x124>)
 8009f9a:	330c      	adds	r3, #12
 8009f9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 8009fa2:	4b24      	ldr	r3, [pc, #144]	; (800a034 <RegionAS923InitDefaults+0x11c>)
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	4b23      	ldr	r3, [pc, #140]	; (800a034 <RegionAS923InitDefaults+0x11c>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6812      	ldr	r2, [r2, #0]
 8009fac:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 8009fae:	4b21      	ldr	r3, [pc, #132]	; (800a034 <RegionAS923InitDefaults+0x11c>)
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	4b20      	ldr	r3, [pc, #128]	; (800a034 <RegionAS923InitDefaults+0x11c>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68d2      	ldr	r2, [r2, #12]
 8009fb8:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 8009fba:	4b1e      	ldr	r3, [pc, #120]	; (800a034 <RegionAS923InitDefaults+0x11c>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2203      	movs	r2, #3
 8009fc0:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8009fc4:	4b1b      	ldr	r3, [pc, #108]	; (800a034 <RegionAS923InitDefaults+0x11c>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8009fcc:	4b19      	ldr	r3, [pc, #100]	; (800a034 <RegionAS923InitDefaults+0x11c>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	f000 fe30 	bl	800ac3c <RegionCommonChanMaskCopy>
 8009fdc:	e024      	b.n	800a028 <RegionAS923InitDefaults+0x110>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8009fde:	4b15      	ldr	r3, [pc, #84]	; (800a034 <RegionAS923InitDefaults+0x11c>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8009fe6:	4b13      	ldr	r3, [pc, #76]	; (800a034 <RegionAS923InitDefaults+0x11c>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2200      	movs	r2, #0
 8009fec:	611a      	str	r2, [r3, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8009fee:	4b11      	ldr	r3, [pc, #68]	; (800a034 <RegionAS923InitDefaults+0x11c>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8009ff6:	4b0f      	ldr	r3, [pc, #60]	; (800a034 <RegionAS923InitDefaults+0x11c>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8009ffe:	2201      	movs	r2, #1
 800a000:	4619      	mov	r1, r3
 800a002:	f000 fe1b 	bl	800ac3c <RegionCommonChanMaskCopy>
            break;
 800a006:	e00f      	b.n	800a028 <RegionAS923InitDefaults+0x110>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800a008:	4b0a      	ldr	r3, [pc, #40]	; (800a034 <RegionAS923InitDefaults+0x11c>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 800a010:	4b08      	ldr	r3, [pc, #32]	; (800a034 <RegionAS923InitDefaults+0x11c>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 800a018:	4b06      	ldr	r3, [pc, #24]	; (800a034 <RegionAS923InitDefaults+0x11c>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	430a      	orrs	r2, r1
 800a01e:	b292      	uxth	r2, r2
 800a020:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 800a024:	e000      	b.n	800a028 <RegionAS923InitDefaults+0x110>
            break;
 800a026:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 800a028:	3738      	adds	r7, #56	; 0x38
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	200017bc 	.word	0x200017bc
 800a034:	200017c0 	.word	0x200017c0
 800a038:	0800ef64 	.word	0x0800ef64
 800a03c:	0800ef70 	.word	0x0800ef70

0800a040 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_AS923 )
    switch( phyAttribute )
 800a04c:	78fb      	ldrb	r3, [r7, #3]
 800a04e:	2b0f      	cmp	r3, #15
 800a050:	f200 808f 	bhi.w	800a172 <RegionAS923Verify+0x132>
 800a054:	a201      	add	r2, pc, #4	; (adr r2, 800a05c <RegionAS923Verify+0x1c>)
 800a056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05a:	bf00      	nop
 800a05c:	0800a09d 	.word	0x0800a09d
 800a060:	0800a173 	.word	0x0800a173
 800a064:	0800a173 	.word	0x0800a173
 800a068:	0800a173 	.word	0x0800a173
 800a06c:	0800a173 	.word	0x0800a173
 800a070:	0800a0ab 	.word	0x0800a0ab
 800a074:	0800a0ef 	.word	0x0800a0ef
 800a078:	0800a10d 	.word	0x0800a10d
 800a07c:	0800a173 	.word	0x0800a173
 800a080:	0800a151 	.word	0x0800a151
 800a084:	0800a151 	.word	0x0800a151
 800a088:	0800a173 	.word	0x0800a173
 800a08c:	0800a173 	.word	0x0800a173
 800a090:	0800a173 	.word	0x0800a173
 800a094:	0800a173 	.word	0x0800a173
 800a098:	0800a16f 	.word	0x0800a16f
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7ff fd47 	bl	8009b34 <VerifyRfFreq>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	e064      	b.n	800a174 <RegionAS923Verify+0x134>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	789b      	ldrb	r3, [r3, #2]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10e      	bne.n	800a0d0 <RegionAS923Verify+0x90>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f993 3000 	ldrsb.w	r3, [r3]
 800a0b8:	2207      	movs	r2, #7
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 fd74 	bl	800abaa <RegionCommonValueInRange>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	bf14      	ite	ne
 800a0c8:	2301      	movne	r3, #1
 800a0ca:	2300      	moveq	r3, #0
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	e051      	b.n	800a174 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f993 3000 	ldrsb.w	r3, [r3]
 800a0d6:	2207      	movs	r2, #7
 800a0d8:	2102      	movs	r1, #2
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f000 fd65 	bl	800abaa <RegionCommonValueInRange>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	bf14      	ite	ne
 800a0e6:	2301      	movne	r3, #1
 800a0e8:	2300      	moveq	r3, #0
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	e042      	b.n	800a174 <RegionAS923Verify+0x134>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f993 3000 	ldrsb.w	r3, [r3]
 800a0f4:	2205      	movs	r2, #5
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 fd56 	bl	800abaa <RegionCommonValueInRange>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	bf14      	ite	ne
 800a104:	2301      	movne	r3, #1
 800a106:	2300      	moveq	r3, #0
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	e033      	b.n	800a174 <RegionAS923Verify+0x134>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	785b      	ldrb	r3, [r3, #1]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10e      	bne.n	800a132 <RegionAS923Verify+0xf2>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f993 3000 	ldrsb.w	r3, [r3]
 800a11a:	2207      	movs	r2, #7
 800a11c:	2100      	movs	r1, #0
 800a11e:	4618      	mov	r0, r3
 800a120:	f000 fd43 	bl	800abaa <RegionCommonValueInRange>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	bf14      	ite	ne
 800a12a:	2301      	movne	r3, #1
 800a12c:	2300      	moveq	r3, #0
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	e020      	b.n	800a174 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f993 3000 	ldrsb.w	r3, [r3]
 800a138:	2207      	movs	r2, #7
 800a13a:	2102      	movs	r1, #2
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 fd34 	bl	800abaa <RegionCommonValueInRange>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	bf14      	ite	ne
 800a148:	2301      	movne	r3, #1
 800a14a:	2300      	moveq	r3, #0
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	e011      	b.n	800a174 <RegionAS923Verify+0x134>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f993 3000 	ldrsb.w	r3, [r3]
 800a156:	2207      	movs	r2, #7
 800a158:	2100      	movs	r1, #0
 800a15a:	4618      	mov	r0, r3
 800a15c:	f000 fd25 	bl	800abaa <RegionCommonValueInRange>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	bf14      	ite	ne
 800a166:	2301      	movne	r3, #1
 800a168:	2300      	moveq	r3, #0
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	e002      	b.n	800a174 <RegionAS923Verify+0x134>
        }
        case PHY_DUTY_CYCLE:
        {
            return AS923_DUTY_CYCLE_ENABLED;
 800a16e:	2300      	movs	r3, #0
 800a170:	e000      	b.n	800a174 <RegionAS923Verify+0x134>
        }
        default:
            return false;
 800a172:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 800a174:	4618      	mov	r0, r3
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <RegionAS923ChanMaskSet>:
    }
#endif /* REGION_AS923 */
}

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	791b      	ldrb	r3, [r3, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <RegionAS923ChanMaskSet+0x16>
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d00b      	beq.n	800a1a8 <RegionAS923ChanMaskSet+0x2c>
 800a190:	e015      	b.n	800a1be <RegionAS923ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800a192:	4b0e      	ldr	r3, [pc, #56]	; (800a1cc <RegionAS923ChanMaskSet+0x50>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	f000 fd4b 	bl	800ac3c <RegionCommonChanMaskCopy>
            break;
 800a1a6:	e00c      	b.n	800a1c2 <RegionAS923ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800a1a8:	4b08      	ldr	r3, [pc, #32]	; (800a1cc <RegionAS923ChanMaskSet+0x50>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	f000 fd40 	bl	800ac3c <RegionCommonChanMaskCopy>
            break;
 800a1bc:	e001      	b.n	800a1c2 <RegionAS923ChanMaskSet+0x46>
        }
        default:
            return false;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	e000      	b.n	800a1c4 <RegionAS923ChanMaskSet+0x48>
    }
    return true;
 800a1c2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3708      	adds	r7, #8
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	200017c0 	.word	0x200017c0

0800a1d0 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b088      	sub	sp, #32
 800a1d4:	af02      	add	r7, sp, #8
 800a1d6:	60ba      	str	r2, [r7, #8]
 800a1d8:	607b      	str	r3, [r7, #4]
 800a1da:	4603      	mov	r3, r0
 800a1dc:	73fb      	strb	r3, [r7, #15]
 800a1de:	460b      	mov	r3, r1
 800a1e0:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 800a1e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1ea:	2b07      	cmp	r3, #7
 800a1ec:	bfa8      	it	ge
 800a1ee:	2307      	movge	r3, #7
 800a1f0:	b25a      	sxtb	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a1fc:	491e      	ldr	r1, [pc, #120]	; (800a278 <RegionAS923ComputeRxWindowParameters+0xa8>)
 800a1fe:	4618      	mov	r0, r3
 800a200:	f001 f8b4 	bl	800b36c <RegionCommonGetBandwidth>
 800a204:	4603      	mov	r3, r0
 800a206:	b2da      	uxtb	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a212:	2b07      	cmp	r3, #7
 800a214:	d10a      	bne.n	800a22c <RegionAS923ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a21c:	461a      	mov	r2, r3
 800a21e:	4b17      	ldr	r3, [pc, #92]	; (800a27c <RegionAS923ComputeRxWindowParameters+0xac>)
 800a220:	5c9b      	ldrb	r3, [r3, r2]
 800a222:	4618      	mov	r0, r3
 800a224:	f000 fe36 	bl	800ae94 <RegionCommonComputeSymbolTimeFsk>
 800a228:	6178      	str	r0, [r7, #20]
 800a22a:	e011      	b.n	800a250 <RegionAS923ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a232:	461a      	mov	r2, r3
 800a234:	4b11      	ldr	r3, [pc, #68]	; (800a27c <RegionAS923ComputeRxWindowParameters+0xac>)
 800a236:	5c9a      	ldrb	r2, [r3, r2]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a23e:	4619      	mov	r1, r3
 800a240:	4b0d      	ldr	r3, [pc, #52]	; (800a278 <RegionAS923ComputeRxWindowParameters+0xa8>)
 800a242:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a246:	4619      	mov	r1, r3
 800a248:	4610      	mov	r0, r2
 800a24a:	f000 fe0d 	bl	800ae68 <RegionCommonComputeSymbolTimeLoRa>
 800a24e:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800a250:	4b0b      	ldr	r3, [pc, #44]	; (800a280 <RegionAS923ComputeRxWindowParameters+0xb0>)
 800a252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a254:	4798      	blx	r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	3308      	adds	r3, #8
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	320c      	adds	r2, #12
 800a25e:	7bb9      	ldrb	r1, [r7, #14]
 800a260:	9201      	str	r2, [sp, #4]
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	4603      	mov	r3, r0
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	6978      	ldr	r0, [r7, #20]
 800a26a:	f000 fe23 	bl	800aeb4 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 800a26e:	bf00      	nop
 800a270:	3718      	adds	r7, #24
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	0800f3b0 	.word	0x0800f3b0
 800a27c:	0800f3a8 	.word	0x0800f3a8
 800a280:	0800f3f0 	.word	0x0800f3f0

0800a284 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800a284:	b5b0      	push	{r4, r5, r7, lr}
 800a286:	b090      	sub	sp, #64	; 0x40
 800a288:	af0a      	add	r7, sp, #40	; 0x28
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	785b      	ldrb	r3, [r3, #1]
 800a292:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 800a294:	2300      	movs	r3, #0
 800a296:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 800a2a2:	4b5a      	ldr	r3, [pc, #360]	; (800a40c <RegionAS923RxConfig+0x188>)
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	4798      	blx	r3
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <RegionAS923RxConfig+0x2e>
    {
        return false;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	e0a8      	b.n	800a404 <RegionAS923RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	7cdb      	ldrb	r3, [r3, #19]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d126      	bne.n	800a308 <RegionAS923RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800a2ba:	4b55      	ldr	r3, [pc, #340]	; (800a410 <RegionAS923RxConfig+0x18c>)
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	005b      	lsls	r3, r3, #1
 800a2c8:	440b      	add	r3, r1
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4413      	add	r3, r2
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800a2d2:	4b4f      	ldr	r3, [pc, #316]	; (800a410 <RegionAS923RxConfig+0x18c>)
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	4619      	mov	r1, r3
 800a2dc:	460b      	mov	r3, r1
 800a2de:	005b      	lsls	r3, r3, #1
 800a2e0:	440b      	add	r3, r1
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	4413      	add	r3, r2
 800a2e6:	3304      	adds	r3, #4
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00c      	beq.n	800a308 <RegionAS923RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 800a2ee:	4b48      	ldr	r3, [pc, #288]	; (800a410 <RegionAS923RxConfig+0x18c>)
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	005b      	lsls	r3, r3, #1
 800a2fc:	440b      	add	r3, r1
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	4413      	add	r3, r2
 800a302:	3304      	adds	r3, #4
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 800a308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a30c:	4a41      	ldr	r2, [pc, #260]	; (800a414 <RegionAS923RxConfig+0x190>)
 800a30e:	5cd3      	ldrb	r3, [r2, r3]
 800a310:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 800a312:	4b3e      	ldr	r3, [pc, #248]	; (800a40c <RegionAS923RxConfig+0x188>)
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	6938      	ldr	r0, [r7, #16]
 800a318:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800a31a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a31e:	2b07      	cmp	r3, #7
 800a320:	d128      	bne.n	800a374 <RegionAS923RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 800a322:	2300      	movs	r3, #0
 800a324:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800a326:	4b39      	ldr	r3, [pc, #228]	; (800a40c <RegionAS923RxConfig+0x188>)
 800a328:	699c      	ldr	r4, [r3, #24]
 800a32a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a32e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a332:	fb02 f303 	mul.w	r3, r2, r3
 800a336:	4619      	mov	r1, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	7c92      	ldrb	r2, [r2, #18]
 800a342:	7df8      	ldrb	r0, [r7, #23]
 800a344:	9209      	str	r2, [sp, #36]	; 0x24
 800a346:	2200      	movs	r2, #0
 800a348:	9208      	str	r2, [sp, #32]
 800a34a:	2200      	movs	r2, #0
 800a34c:	9207      	str	r2, [sp, #28]
 800a34e:	2200      	movs	r2, #0
 800a350:	9206      	str	r2, [sp, #24]
 800a352:	2201      	movs	r2, #1
 800a354:	9205      	str	r2, [sp, #20]
 800a356:	2200      	movs	r2, #0
 800a358:	9204      	str	r2, [sp, #16]
 800a35a:	2200      	movs	r2, #0
 800a35c:	9203      	str	r2, [sp, #12]
 800a35e:	9302      	str	r3, [sp, #8]
 800a360:	2305      	movs	r3, #5
 800a362:	9301      	str	r3, [sp, #4]
 800a364:	4b2c      	ldr	r3, [pc, #176]	; (800a418 <RegionAS923RxConfig+0x194>)
 800a366:	9300      	str	r3, [sp, #0]
 800a368:	2300      	movs	r3, #0
 800a36a:	460a      	mov	r2, r1
 800a36c:	f24c 3150 	movw	r1, #50000	; 0xc350
 800a370:	47a0      	blx	r4
 800a372:	e024      	b.n	800a3be <RegionAS923RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 800a374:	2301      	movs	r3, #1
 800a376:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800a378:	4b24      	ldr	r3, [pc, #144]	; (800a40c <RegionAS923RxConfig+0x188>)
 800a37a:	699c      	ldr	r4, [r3, #24]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	789b      	ldrb	r3, [r3, #2]
 800a380:	461d      	mov	r5, r3
 800a382:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	7c92      	ldrb	r2, [r2, #18]
 800a390:	7df8      	ldrb	r0, [r7, #23]
 800a392:	9209      	str	r2, [sp, #36]	; 0x24
 800a394:	2201      	movs	r2, #1
 800a396:	9208      	str	r2, [sp, #32]
 800a398:	2200      	movs	r2, #0
 800a39a:	9207      	str	r2, [sp, #28]
 800a39c:	2200      	movs	r2, #0
 800a39e:	9206      	str	r2, [sp, #24]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	9205      	str	r2, [sp, #20]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	9204      	str	r2, [sp, #16]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	9203      	str	r2, [sp, #12]
 800a3ac:	9302      	str	r3, [sp, #8]
 800a3ae:	2308      	movs	r3, #8
 800a3b0:	9301      	str	r3, [sp, #4]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	460a      	mov	r2, r1
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	7c5b      	ldrb	r3, [r3, #17]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d005      	beq.n	800a3d2 <RegionAS923RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 800a3c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3ca:	4a14      	ldr	r2, [pc, #80]	; (800a41c <RegionAS923RxConfig+0x198>)
 800a3cc:	5cd3      	ldrb	r3, [r2, r3]
 800a3ce:	75bb      	strb	r3, [r7, #22]
 800a3d0:	e004      	b.n	800a3dc <RegionAS923RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 800a3d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3d6:	4a12      	ldr	r2, [pc, #72]	; (800a420 <RegionAS923RxConfig+0x19c>)
 800a3d8:	5cd3      	ldrb	r3, [r2, r3]
 800a3da:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800a3dc:	4b0b      	ldr	r3, [pc, #44]	; (800a40c <RegionAS923RxConfig+0x188>)
 800a3de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3e0:	7dba      	ldrb	r2, [r7, #22]
 800a3e2:	320d      	adds	r2, #13
 800a3e4:	b2d1      	uxtb	r1, r2
 800a3e6:	7dfa      	ldrb	r2, [r7, #23]
 800a3e8:	4610      	mov	r0, r2
 800a3ea:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	7cdb      	ldrb	r3, [r3, #19]
 800a3f0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800a3f4:	6939      	ldr	r1, [r7, #16]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f000 ffd6 	bl	800b3a8 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	7bfa      	ldrb	r2, [r7, #15]
 800a400:	701a      	strb	r2, [r3, #0]
    return true;
 800a402:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 800a404:	4618      	mov	r0, r3
 800a406:	3718      	adds	r7, #24
 800a408:	46bd      	mov	sp, r7
 800a40a:	bdb0      	pop	{r4, r5, r7, pc}
 800a40c:	0800f3f0 	.word	0x0800f3f0
 800a410:	200017c0 	.word	0x200017c0
 800a414:	0800f3a8 	.word	0x0800f3a8
 800a418:	00014585 	.word	0x00014585
 800a41c:	0800f3d8 	.word	0x0800f3d8
 800a420:	0800f3d0 	.word	0x0800f3d0

0800a424 <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800a424:	b590      	push	{r4, r7, lr}
 800a426:	b093      	sub	sp, #76	; 0x4c
 800a428:	af0a      	add	r7, sp, #40	; 0x28
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a436:	461a      	mov	r2, r3
 800a438:	4b5d      	ldr	r3, [pc, #372]	; (800a5b0 <RegionAS923TxConfig+0x18c>)
 800a43a:	5c9b      	ldrb	r3, [r3, r2]
 800a43c:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f993 0002 	ldrsb.w	r0, [r3, #2]
 800a444:	4b5b      	ldr	r3, [pc, #364]	; (800a5b4 <RegionAS923TxConfig+0x190>)
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	4b5b      	ldr	r3, [pc, #364]	; (800a5b8 <RegionAS923TxConfig+0x194>)
 800a44a:	6819      	ldr	r1, [r3, #0]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	461c      	mov	r4, r3
 800a452:	4623      	mov	r3, r4
 800a454:	005b      	lsls	r3, r3, #1
 800a456:	4423      	add	r3, r4
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	440b      	add	r3, r1
 800a45c:	3309      	adds	r3, #9
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	4619      	mov	r1, r3
 800a462:	460b      	mov	r3, r1
 800a464:	005b      	lsls	r3, r3, #1
 800a466:	440b      	add	r3, r1
 800a468:	00db      	lsls	r3, r3, #3
 800a46a:	4413      	add	r3, r2
 800a46c:	3302      	adds	r3, #2
 800a46e:	f993 3000 	ldrsb.w	r3, [r3]
 800a472:	4619      	mov	r1, r3
 800a474:	f000 ff65 	bl	800b342 <RegionCommonLimitTxPower>
 800a478:	4603      	mov	r3, r0
 800a47a:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a482:	494e      	ldr	r1, [pc, #312]	; (800a5bc <RegionAS923TxConfig+0x198>)
 800a484:	4618      	mov	r0, r3
 800a486:	f000 ff71 	bl	800b36c <RegionCommonGetBandwidth>
 800a48a:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 800a48c:	2300      	movs	r3, #0
 800a48e:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6859      	ldr	r1, [r3, #4]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	689a      	ldr	r2, [r3, #8]
 800a498:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a49c:	4618      	mov	r0, r3
 800a49e:	f000 fdc1 	bl	800b024 <RegionCommonComputeTxPower>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800a4a6:	4b46      	ldr	r3, [pc, #280]	; (800a5c0 <RegionAS923TxConfig+0x19c>)
 800a4a8:	68da      	ldr	r2, [r3, #12]
 800a4aa:	4b43      	ldr	r3, [pc, #268]	; (800a5b8 <RegionAS923TxConfig+0x194>)
 800a4ac:	6819      	ldr	r1, [r3, #0]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	005b      	lsls	r3, r3, #1
 800a4b8:	4403      	add	r3, r0
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	440b      	add	r3, r1
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a4ca:	2b07      	cmp	r3, #7
 800a4cc:	d124      	bne.n	800a518 <RegionAS923TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800a4d2:	4b3b      	ldr	r3, [pc, #236]	; (800a5c0 <RegionAS923TxConfig+0x19c>)
 800a4d4:	69dc      	ldr	r4, [r3, #28]
 800a4d6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800a4da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a4de:	fb02 f303 	mul.w	r3, r2, r3
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	f997 1017 	ldrsb.w	r1, [r7, #23]
 800a4e8:	7ff8      	ldrb	r0, [r7, #31]
 800a4ea:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800a4ee:	9308      	str	r3, [sp, #32]
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	9307      	str	r3, [sp, #28]
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	9306      	str	r3, [sp, #24]
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	9305      	str	r3, [sp, #20]
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	9304      	str	r3, [sp, #16]
 800a500:	2300      	movs	r3, #0
 800a502:	9303      	str	r3, [sp, #12]
 800a504:	2305      	movs	r3, #5
 800a506:	9302      	str	r3, [sp, #8]
 800a508:	2300      	movs	r3, #0
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	9200      	str	r2, [sp, #0]
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800a514:	47a0      	blx	r4
 800a516:	e01d      	b.n	800a554 <RegionAS923TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 800a518:	2301      	movs	r3, #1
 800a51a:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800a51c:	4b28      	ldr	r3, [pc, #160]	; (800a5c0 <RegionAS923TxConfig+0x19c>)
 800a51e:	69dc      	ldr	r4, [r3, #28]
 800a520:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800a524:	f997 1017 	ldrsb.w	r1, [r7, #23]
 800a528:	7ff8      	ldrb	r0, [r7, #31]
 800a52a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800a52e:	9208      	str	r2, [sp, #32]
 800a530:	2200      	movs	r2, #0
 800a532:	9207      	str	r2, [sp, #28]
 800a534:	2200      	movs	r2, #0
 800a536:	9206      	str	r2, [sp, #24]
 800a538:	2200      	movs	r2, #0
 800a53a:	9205      	str	r2, [sp, #20]
 800a53c:	2201      	movs	r2, #1
 800a53e:	9204      	str	r2, [sp, #16]
 800a540:	2200      	movs	r2, #0
 800a542:	9203      	str	r2, [sp, #12]
 800a544:	2208      	movs	r2, #8
 800a546:	9202      	str	r2, [sp, #8]
 800a548:	2201      	movs	r2, #1
 800a54a:	9201      	str	r2, [sp, #4]
 800a54c:	9300      	str	r3, [sp, #0]
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	2200      	movs	r2, #0
 800a552:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800a554:	4b18      	ldr	r3, [pc, #96]	; (800a5b8 <RegionAS923TxConfig+0x194>)
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	4619      	mov	r1, r3
 800a55e:	460b      	mov	r3, r1
 800a560:	005b      	lsls	r3, r3, #1
 800a562:	440b      	add	r3, r1
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a570:	4619      	mov	r1, r3
 800a572:	4610      	mov	r0, r2
 800a574:	f000 ff25 	bl	800b3c2 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	899b      	ldrh	r3, [r3, #12]
 800a582:	4619      	mov	r1, r3
 800a584:	4610      	mov	r0, r2
 800a586:	f7ff fafb 	bl	8009b80 <GetTimeOnAir>
 800a58a:	4602      	mov	r2, r0
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800a590:	4b0b      	ldr	r3, [pc, #44]	; (800a5c0 <RegionAS923TxConfig+0x19c>)
 800a592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	8992      	ldrh	r2, [r2, #12]
 800a598:	b2d1      	uxtb	r1, r2
 800a59a:	7ffa      	ldrb	r2, [r7, #31]
 800a59c:	4610      	mov	r0, r2
 800a59e:	4798      	blx	r3

    *txPower = txPowerLimited;
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	7f7a      	ldrb	r2, [r7, #29]
 800a5a4:	701a      	strb	r2, [r3, #0]
    return true;
 800a5a6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3724      	adds	r7, #36	; 0x24
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd90      	pop	{r4, r7, pc}
 800a5b0:	0800f3a8 	.word	0x0800f3a8
 800a5b4:	200017bc 	.word	0x200017bc
 800a5b8:	200017c0 	.word	0x200017c0
 800a5bc:	0800f3b0 	.word	0x0800f3b0
 800a5c0:	0800f3f0 	.word	0x0800f3f0

0800a5c4 <RegionAS923AlternateDr>:
#endif /* REGION_AS923 */
    return status;
}

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	460a      	mov	r2, r1
 800a5ce:	71fb      	strb	r3, [r7, #7]
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_AS923 )
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
 800a5d4:	2302      	movs	r3, #2
#else
    return -1;
#endif /* REGION_AS923 */
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bc80      	pop	{r7}
 800a5de:	4770      	bx	lr

0800a5e0 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b09a      	sub	sp, #104	; 0x68
 800a5e4:	af02      	add	r7, sp, #8
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	603b      	str	r3, [r7, #0]
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a602:	2200      	movs	r2, #0
 800a604:	601a      	str	r2, [r3, #0]
 800a606:	605a      	str	r2, [r3, #4]
 800a608:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800a60a:	230c      	movs	r3, #12
 800a60c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 800a610:	2303      	movs	r3, #3
 800a612:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800a614:	4b47      	ldr	r3, [pc, #284]	; (800a734 <RegionAS923NextChannel+0x154>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800a61c:	2201      	movs	r2, #1
 800a61e:	2100      	movs	r1, #0
 800a620:	4618      	mov	r0, r3
 800a622:	f000 fadf 	bl	800abe4 <RegionCommonCountChannels>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d10a      	bne.n	800a642 <RegionAS923NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800a62c:	4b41      	ldr	r3, [pc, #260]	; (800a734 <RegionAS923NextChannel+0x154>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 800a634:	4b3f      	ldr	r3, [pc, #252]	; (800a734 <RegionAS923NextChannel+0x154>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f042 0203 	orr.w	r2, r2, #3
 800a63c:	b292      	uxth	r2, r2
 800a63e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	7a5b      	ldrb	r3, [r3, #9]
 800a646:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800a652:	4b38      	ldr	r3, [pc, #224]	; (800a734 <RegionAS923NextChannel+0x154>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800a65a:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800a65c:	4b35      	ldr	r3, [pc, #212]	; (800a734 <RegionAS923NextChannel+0x154>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800a662:	4b35      	ldr	r3, [pc, #212]	; (800a738 <RegionAS923NextChannel+0x158>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 800a668:	2310      	movs	r3, #16
 800a66a:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 800a66c:	f107 0312 	add.w	r3, r7, #18
 800a670:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	7a9b      	ldrb	r3, [r3, #10]
 800a682:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 800a686:	2301      	movs	r3, #1
 800a688:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a692:	320c      	adds	r2, #12
 800a694:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a698:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	7d1b      	ldrb	r3, [r3, #20]
 800a6a0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	8adb      	ldrh	r3, [r3, #22]
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	f7ff fa65 	bl	8009b80 <GetTimeOnAir>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800a6ba:	f107 0314 	add.w	r3, r7, #20
 800a6be:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800a6c0:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 800a6c4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800a6c8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	9301      	str	r3, [sp, #4]
 800a6d0:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	6839      	ldr	r1, [r7, #0]
 800a6da:	f000 fd92 	bl	800b202 <RegionCommonIdentifyChannels>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800a6e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d10e      	bne.n	800a70a <RegionAS923NextChannel+0x12a>
        // Even if one or more channels are available according to the channel plan, no free channel
        // was found during the LBT procedure.
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800a6ec:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	f000 fe91 	bl	800b41c <randr>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	3360      	adds	r3, #96	; 0x60
 800a6fe:	443b      	add	r3, r7
 800a700:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	701a      	strb	r2, [r3, #0]
 800a708:	e00e      	b.n	800a728 <RegionAS923NextChannel+0x148>
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800a70a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a70e:	2b0c      	cmp	r3, #12
 800a710:	d10a      	bne.n	800a728 <RegionAS923NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800a712:	4b08      	ldr	r3, [pc, #32]	; (800a734 <RegionAS923NextChannel+0x154>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 800a71a:	4b06      	ldr	r3, [pc, #24]	; (800a734 <RegionAS923NextChannel+0x154>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f042 0203 	orr.w	r2, r2, #3
 800a722:	b292      	uxth	r2, r2
 800a724:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 800a728:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3760      	adds	r7, #96	; 0x60
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	200017c0 	.word	0x200017c0
 800a738:	200017bc 	.word	0x200017bc

0800a73c <RegionAS923SetContinuousWave>:
#endif /* REGION_AS923 */
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionAS923SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800a73c:	b590      	push	{r4, r7, lr}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f993 0002 	ldrsb.w	r0, [r3, #2]
 800a74a:	4b20      	ldr	r3, [pc, #128]	; (800a7cc <RegionAS923SetContinuousWave+0x90>)
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	4b20      	ldr	r3, [pc, #128]	; (800a7d0 <RegionAS923SetContinuousWave+0x94>)
 800a750:	6819      	ldr	r1, [r3, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	461c      	mov	r4, r3
 800a758:	4623      	mov	r3, r4
 800a75a:	005b      	lsls	r3, r3, #1
 800a75c:	4423      	add	r3, r4
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	440b      	add	r3, r1
 800a762:	3309      	adds	r3, #9
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	4619      	mov	r1, r3
 800a768:	460b      	mov	r3, r1
 800a76a:	005b      	lsls	r3, r3, #1
 800a76c:	440b      	add	r3, r1
 800a76e:	00db      	lsls	r3, r3, #3
 800a770:	4413      	add	r3, r2
 800a772:	3302      	adds	r3, #2
 800a774:	f993 3000 	ldrsb.w	r3, [r3]
 800a778:	4619      	mov	r1, r3
 800a77a:	f000 fde2 	bl	800b342 <RegionCommonLimitTxPower>
 800a77e:	4603      	mov	r3, r0
 800a780:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 800a782:	2300      	movs	r3, #0
 800a784:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800a786:	4b12      	ldr	r3, [pc, #72]	; (800a7d0 <RegionAS923SetContinuousWave+0x94>)
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	4619      	mov	r1, r3
 800a790:	460b      	mov	r3, r1
 800a792:	005b      	lsls	r3, r3, #1
 800a794:	440b      	add	r3, r1
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	4413      	add	r3, r2
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6859      	ldr	r1, [r3, #4]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	689a      	ldr	r2, [r3, #8]
 800a7a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f000 fc3a 	bl	800b024 <RegionCommonComputeTxPower>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800a7b4:	4b07      	ldr	r3, [pc, #28]	; (800a7d4 <RegionAS923SetContinuousWave+0x98>)
 800a7b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	8992      	ldrh	r2, [r2, #12]
 800a7bc:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800a7c0:	68b8      	ldr	r0, [r7, #8]
 800a7c2:	4798      	blx	r3
#endif /* REGION_AS923 */
}
 800a7c4:	bf00      	nop
 800a7c6:	3714      	adds	r7, #20
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd90      	pop	{r4, r7, pc}
 800a7cc:	200017bc 	.word	0x200017bc
 800a7d0:	200017c0 	.word	0x200017c0
 800a7d4:	0800f3f0 	.word	0x0800f3f0

0800a7d8 <RegionAS923ApplyDrOffset>:

uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	4603      	mov	r3, r0
 800a7e0:	71fb      	strb	r3, [r7, #7]
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	71bb      	strb	r3, [r7, #6]
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	717b      	strb	r3, [r7, #5]
#if defined( REGION_AS923 )
    // Initialize minDr for a downlink dwell time configuration of 0
    int8_t minDr = DR_0;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	73fb      	strb	r3, [r7, #15]

    // Update the minDR for a downlink dwell time configuration of 1
    if( downlinkDwellTime == 1 )
 800a7ee:	79fb      	ldrb	r3, [r7, #7]
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d101      	bne.n	800a7f8 <RegionAS923ApplyDrOffset+0x20>
    {
        minDr = AS923_DWELL_LIMIT_DATARATE;
 800a7f4:	2302      	movs	r3, #2
 800a7f6:	73fb      	strb	r3, [r7, #15]
    }

    // Apply offset formula
    return MIN( DR_5, MAX( minDr, dr - EffectiveRx1DrOffsetAS923[drOffset] ) );
 800a7f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a7fc:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800a800:	4908      	ldr	r1, [pc, #32]	; (800a824 <RegionAS923ApplyDrOffset+0x4c>)
 800a802:	568a      	ldrsb	r2, [r1, r2]
 800a804:	1a9a      	subs	r2, r3, r2
 800a806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a80a:	4293      	cmp	r3, r2
 800a80c:	bfb8      	it	lt
 800a80e:	4613      	movlt	r3, r2
 800a810:	2b05      	cmp	r3, #5
 800a812:	bfa8      	it	ge
 800a814:	2305      	movge	r3, #5
 800a816:	b2db      	uxtb	r3, r3
#else
    return 0;
#endif /* REGION_AS923 */

}
 800a818:	4618      	mov	r0, r3
 800a81a:	3714      	adds	r7, #20
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bc80      	pop	{r7}
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	0800f3e8 	.word	0x0800f3e8

0800a828 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800a828:	b480      	push	{r7}
 800a82a:	b087      	sub	sp, #28
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	4608      	mov	r0, r1
 800a832:	4639      	mov	r1, r7
 800a834:	e881 000c 	stmia.w	r1, {r2, r3}
 800a838:	4603      	mov	r3, r0
 800a83a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	881b      	ldrh	r3, [r3, #0]
 800a840:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 800a842:	7afb      	ldrb	r3, [r7, #11]
 800a844:	f083 0301 	eor.w	r3, r3, #1
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d01b      	beq.n	800a886 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 800a84e:	f242 7310 	movw	r3, #10000	; 0x2710
 800a852:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800a85a:	d202      	bcs.n	800a862 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800a85c:	2364      	movs	r3, #100	; 0x64
 800a85e:	82bb      	strh	r3, [r7, #20]
 800a860:	e00b      	b.n	800a87a <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800a868:	4293      	cmp	r3, r2
 800a86a:	d803      	bhi.n	800a874 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800a86c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a870:	82bb      	strh	r3, [r7, #20]
 800a872:	e002      	b.n	800a87a <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800a874:	f242 7310 	movw	r3, #10000	; 0x2710
 800a878:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800a87a:	8aba      	ldrh	r2, [r7, #20]
 800a87c:	8afb      	ldrh	r3, [r7, #22]
 800a87e:	4293      	cmp	r3, r2
 800a880:	bf38      	it	cc
 800a882:	4613      	movcc	r3, r2
 800a884:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800a886:	8afb      	ldrh	r3, [r7, #22]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d101      	bne.n	800a890 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 800a88c:	2301      	movs	r3, #1
 800a88e:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 800a890:	8afb      	ldrh	r3, [r7, #22]
}
 800a892:	4618      	mov	r0, r3
 800a894:	371c      	adds	r7, #28
 800a896:	46bd      	mov	sp, r7
 800a898:	bc80      	pop	{r7}
 800a89a:	4770      	bx	lr

0800a89c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b08e      	sub	sp, #56	; 0x38
 800a8a0:	af02      	add	r7, sp, #8
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	4608      	mov	r0, r1
 800a8a6:	4639      	mov	r1, r7
 800a8a8:	e881 000c 	stmia.w	r1, {r2, r3}
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	881b      	ldrh	r3, [r3, #0]
 800a8b4:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800a8b6:	4b4b      	ldr	r3, [pc, #300]	; (800a9e4 <SetMaxTimeCredits+0x148>)
 800a8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800a8ba:	463b      	mov	r3, r7
 800a8bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a8c0:	f004 f822 	bl	800e908 <SysTimeToMs>
 800a8c4:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 800a8c6:	f107 0314 	add.w	r3, r7, #20
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	601a      	str	r2, [r3, #0]
 800a8ce:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800a8d0:	7af9      	ldrb	r1, [r7, #11]
 800a8d2:	463b      	mov	r3, r7
 800a8d4:	cb0c      	ldmia	r3, {r2, r3}
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f7ff ffa6 	bl	800a828 <GetDutyCycle>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 800a8e0:	7afb      	ldrb	r3, [r7, #11]
 800a8e2:	f083 0301 	eor.w	r3, r3, #1
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d062      	beq.n	800a9b2 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800a8ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a8ee:	2b64      	cmp	r3, #100	; 0x64
 800a8f0:	d105      	bne.n	800a8fe <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800a8f2:	4b3c      	ldr	r3, [pc, #240]	; (800a9e4 <SetMaxTimeCredits+0x148>)
 800a8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8fa:	609a      	str	r2, [r3, #8]
 800a8fc:	e00b      	b.n	800a916 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800a8fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a900:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a904:	d105      	bne.n	800a912 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800a906:	4b38      	ldr	r3, [pc, #224]	; (800a9e8 <SetMaxTimeCredits+0x14c>)
 800a908:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a90e:	609a      	str	r2, [r3, #8]
 800a910:	e001      	b.n	800a916 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800a912:	4b36      	ldr	r3, [pc, #216]	; (800a9ec <SetMaxTimeCredits+0x150>)
 800a914:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	689a      	ldr	r2, [r3, #8]
 800a91a:	f107 031c 	add.w	r3, r7, #28
 800a91e:	4611      	mov	r1, r2
 800a920:	4618      	mov	r0, r3
 800a922:	f004 f819 	bl	800e958 <SysTimeFromMs>
 800a926:	f107 0014 	add.w	r0, r7, #20
 800a92a:	6a3b      	ldr	r3, [r7, #32]
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	463a      	mov	r2, r7
 800a932:	ca06      	ldmia	r2, {r1, r2}
 800a934:	f003 ff90 	bl	800e858 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800a938:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a93c:	f083 0301 	eor.w	r3, r3, #1
 800a940:	b2db      	uxtb	r3, r3
 800a942:	2b00      	cmp	r3, #0
 800a944:	d006      	beq.n	800a954 <SetMaxTimeCredits+0xb8>
 800a946:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a94a:	f083 0301 	eor.w	r3, r3, #1
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	2b00      	cmp	r3, #0
 800a952:	d108      	bne.n	800a966 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800a958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d103      	bne.n	800a966 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 800a95e:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 800a960:	4a23      	ldr	r2, [pc, #140]	; (800a9f0 <SetMaxTimeCredits+0x154>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d92f      	bls.n	800a9c6 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a96a:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	4a21      	ldr	r2, [pc, #132]	; (800a9f4 <SetMaxTimeCredits+0x158>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d928      	bls.n	800a9c6 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800a97a:	3b30      	subs	r3, #48	; 0x30
 800a97c:	4a1e      	ldr	r2, [pc, #120]	; (800a9f8 <SetMaxTimeCredits+0x15c>)
 800a97e:	fba2 2303 	umull	r2, r3, r2, r3
 800a982:	0c1b      	lsrs	r3, r3, #16
 800a984:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	4a1c      	ldr	r2, [pc, #112]	; (800a9fc <SetMaxTimeCredits+0x160>)
 800a98a:	fb02 f303 	mul.w	r3, r2, r3
 800a98e:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800a996:	3330      	adds	r3, #48	; 0x30
 800a998:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 800a99a:	2300      	movs	r3, #0
 800a99c:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800a99e:	f107 0314 	add.w	r3, r7, #20
 800a9a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a9a6:	f003 ffaf 	bl	800e908 <SysTimeToMs>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	609a      	str	r2, [r3, #8]
 800a9b0:	e009      	b.n	800a9c6 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 800a9b2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a9b6:	f083 0301 	eor.w	r3, r3, #1
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d002      	beq.n	800a9c6 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9c4:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d102      	bne.n	800a9d4 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9d2:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9d8:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 800a9da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3730      	adds	r7, #48	; 0x30
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	001b7740 	.word	0x001b7740
 800a9e8:	0112a880 	.word	0x0112a880
 800a9ec:	02932e00 	.word	0x02932e00
 800a9f0:	0001517f 	.word	0x0001517f
 800a9f4:	0001ec2f 	.word	0x0001ec2f
 800a9f8:	c22e4507 	.word	0xc22e4507
 800a9fc:	00015180 	.word	0x00015180

0800aa00 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b086      	sub	sp, #24
 800aa04:	af02      	add	r7, sp, #8
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	4608      	mov	r0, r1
 800aa0a:	4611      	mov	r1, r2
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	4603      	mov	r3, r0
 800aa10:	70fb      	strb	r3, [r7, #3]
 800aa12:	460b      	mov	r3, r1
 800aa14:	70bb      	strb	r3, [r7, #2]
 800aa16:	4613      	mov	r3, r2
 800aa18:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800aa1a:	78f9      	ldrb	r1, [r7, #3]
 800aa1c:	787b      	ldrb	r3, [r7, #1]
 800aa1e:	9301      	str	r3, [sp, #4]
 800aa20:	78bb      	ldrb	r3, [r7, #2]
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	f107 0318 	add.w	r3, r7, #24
 800aa28:	cb0c      	ldmia	r3, {r2, r3}
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f7ff ff36 	bl	800a89c <SetMaxTimeCredits>
 800aa30:	4603      	mov	r3, r0
 800aa32:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 800aa34:	78fb      	ldrb	r3, [r7, #3]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00a      	beq.n	800aa50 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f004 f918 	bl	800ec74 <UTIL_TIMER_GetElapsedTime>
 800aa44:	4602      	mov	r2, r0
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	441a      	add	r2, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	68da      	ldr	r2, [r3, #12]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d903      	bls.n	800aa64 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	691a      	ldr	r2, [r3, #16]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6a3a      	ldr	r2, [r7, #32]
 800aa68:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 800aa6a:	89fb      	ldrh	r3, [r7, #14]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3710      	adds	r7, #16
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	460a      	mov	r2, r1
 800aa7e:	80fb      	strh	r3, [r7, #6]
 800aa80:	4613      	mov	r3, r2
 800aa82:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 800aa84:	2300      	movs	r3, #0
 800aa86:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 800aa88:	2300      	movs	r3, #0
 800aa8a:	73bb      	strb	r3, [r7, #14]
 800aa8c:	e011      	b.n	800aab2 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800aa8e:	88fa      	ldrh	r2, [r7, #6]
 800aa90:	7bbb      	ldrb	r3, [r7, #14]
 800aa92:	2101      	movs	r1, #1
 800aa94:	fa01 f303 	lsl.w	r3, r1, r3
 800aa98:	401a      	ands	r2, r3
 800aa9a:	7bbb      	ldrb	r3, [r7, #14]
 800aa9c:	2101      	movs	r1, #1
 800aa9e:	fa01 f303 	lsl.w	r3, r1, r3
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d102      	bne.n	800aaac <CountChannels+0x38>
        {
            nbActiveBits++;
 800aaa6:	7bfb      	ldrb	r3, [r7, #15]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 800aaac:	7bbb      	ldrb	r3, [r7, #14]
 800aaae:	3301      	adds	r3, #1
 800aab0:	73bb      	strb	r3, [r7, #14]
 800aab2:	7bba      	ldrb	r2, [r7, #14]
 800aab4:	797b      	ldrb	r3, [r7, #5]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d3e9      	bcc.n	800aa8e <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 800aaba:	7bfb      	ldrb	r3, [r7, #15]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3714      	adds	r7, #20
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bc80      	pop	{r7}
 800aac4:	4770      	bx	lr

0800aac6 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b084      	sub	sp, #16
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6039      	str	r1, [r7, #0]
 800aace:	4611      	mov	r1, r2
 800aad0:	461a      	mov	r2, r3
 800aad2:	4603      	mov	r3, r0
 800aad4:	71fb      	strb	r3, [r7, #7]
 800aad6:	460b      	mov	r3, r1
 800aad8:	71bb      	strb	r3, [r7, #6]
 800aada:	4613      	mov	r3, r2
 800aadc:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800aade:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800aae2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800aae6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f000 f85d 	bl	800abaa <RegionCommonValueInRange>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d101      	bne.n	800aafa <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	e053      	b.n	800aba2 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800aafa:	2300      	movs	r3, #0
 800aafc:	73fb      	strb	r3, [r7, #15]
 800aafe:	2300      	movs	r3, #0
 800ab00:	73bb      	strb	r3, [r7, #14]
 800ab02:	e049      	b.n	800ab98 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 800ab04:	2300      	movs	r3, #0
 800ab06:	737b      	strb	r3, [r7, #13]
 800ab08:	e03d      	b.n	800ab86 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800ab0a:	7bbb      	ldrb	r3, [r7, #14]
 800ab0c:	005b      	lsls	r3, r3, #1
 800ab0e:	683a      	ldr	r2, [r7, #0]
 800ab10:	4413      	add	r3, r2
 800ab12:	881b      	ldrh	r3, [r3, #0]
 800ab14:	461a      	mov	r2, r3
 800ab16:	7b7b      	ldrb	r3, [r7, #13]
 800ab18:	fa42 f303 	asr.w	r3, r2, r3
 800ab1c:	f003 0301 	and.w	r3, r3, #1
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d02d      	beq.n	800ab80 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800ab24:	7bfa      	ldrb	r2, [r7, #15]
 800ab26:	7b7b      	ldrb	r3, [r7, #13]
 800ab28:	4413      	add	r3, r2
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	005b      	lsls	r3, r3, #1
 800ab30:	4413      	add	r3, r2
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	461a      	mov	r2, r3
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	4413      	add	r3, r2
 800ab3a:	7a1b      	ldrb	r3, [r3, #8]
 800ab3c:	f343 0303 	sbfx	r3, r3, #0, #4
 800ab40:	b25b      	sxtb	r3, r3
 800ab42:	f003 030f 	and.w	r3, r3, #15
 800ab46:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800ab48:	7bfa      	ldrb	r2, [r7, #15]
 800ab4a:	7b7b      	ldrb	r3, [r7, #13]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	461a      	mov	r2, r3
 800ab50:	4613      	mov	r3, r2
 800ab52:	005b      	lsls	r3, r3, #1
 800ab54:	4413      	add	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	461a      	mov	r2, r3
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	7a1b      	ldrb	r3, [r3, #8]
 800ab60:	f343 1303 	sbfx	r3, r3, #4, #4
 800ab64:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800ab66:	f003 030f 	and.w	r3, r3, #15
 800ab6a:	b25a      	sxtb	r2, r3
 800ab6c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ab70:	4618      	mov	r0, r3
 800ab72:	f000 f81a 	bl	800abaa <RegionCommonValueInRange>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d101      	bne.n	800ab80 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e010      	b.n	800aba2 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 800ab80:	7b7b      	ldrb	r3, [r7, #13]
 800ab82:	3301      	adds	r3, #1
 800ab84:	737b      	strb	r3, [r7, #13]
 800ab86:	7b7b      	ldrb	r3, [r7, #13]
 800ab88:	2b0f      	cmp	r3, #15
 800ab8a:	d9be      	bls.n	800ab0a <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
 800ab8e:	3310      	adds	r3, #16
 800ab90:	73fb      	strb	r3, [r7, #15]
 800ab92:	7bbb      	ldrb	r3, [r7, #14]
 800ab94:	3301      	adds	r3, #1
 800ab96:	73bb      	strb	r3, [r7, #14]
 800ab98:	7bfa      	ldrb	r2, [r7, #15]
 800ab9a:	79fb      	ldrb	r3, [r7, #7]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d3b1      	bcc.n	800ab04 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 800abaa:	b480      	push	{r7}
 800abac:	b083      	sub	sp, #12
 800abae:	af00      	add	r7, sp, #0
 800abb0:	4603      	mov	r3, r0
 800abb2:	71fb      	strb	r3, [r7, #7]
 800abb4:	460b      	mov	r3, r1
 800abb6:	71bb      	strb	r3, [r7, #6]
 800abb8:	4613      	mov	r3, r2
 800abba:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 800abbc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800abc0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	db07      	blt.n	800abd8 <RegionCommonValueInRange+0x2e>
 800abc8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800abcc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	dc01      	bgt.n	800abd8 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 800abd4:	2301      	movs	r3, #1
 800abd6:	e000      	b.n	800abda <RegionCommonValueInRange+0x30>
    }
    return 0;
 800abd8:	2300      	movs	r3, #0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	370c      	adds	r7, #12
 800abde:	46bd      	mov	sp, r7
 800abe0:	bc80      	pop	{r7}
 800abe2:	4770      	bx	lr

0800abe4 <RegionCommonCountChannels>:

    return true;
}

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	460b      	mov	r3, r1
 800abee:	70fb      	strb	r3, [r7, #3]
 800abf0:	4613      	mov	r3, r2
 800abf2:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d101      	bne.n	800ac02 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 800abfe:	2300      	movs	r3, #0
 800ac00:	e018      	b.n	800ac34 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800ac02:	78fb      	ldrb	r3, [r7, #3]
 800ac04:	73bb      	strb	r3, [r7, #14]
 800ac06:	e010      	b.n	800ac2a <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800ac08:	7bbb      	ldrb	r3, [r7, #14]
 800ac0a:	005b      	lsls	r3, r3, #1
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	4413      	add	r3, r2
 800ac10:	881b      	ldrh	r3, [r3, #0]
 800ac12:	2110      	movs	r1, #16
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7ff ff2d 	bl	800aa74 <CountChannels>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	7bfb      	ldrb	r3, [r7, #15]
 800ac20:	4413      	add	r3, r2
 800ac22:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800ac24:	7bbb      	ldrb	r3, [r7, #14]
 800ac26:	3301      	adds	r3, #1
 800ac28:	73bb      	strb	r3, [r7, #14]
 800ac2a:	7bba      	ldrb	r2, [r7, #14]
 800ac2c:	78bb      	ldrb	r3, [r7, #2]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d3ea      	bcc.n	800ac08 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 800ac32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3710      	adds	r7, #16
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b087      	sub	sp, #28
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	4613      	mov	r3, r2
 800ac48:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d016      	beq.n	800ac7e <RegionCommonChanMaskCopy+0x42>
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d013      	beq.n	800ac7e <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 800ac56:	2300      	movs	r3, #0
 800ac58:	75fb      	strb	r3, [r7, #23]
 800ac5a:	e00c      	b.n	800ac76 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800ac5c:	7dfb      	ldrb	r3, [r7, #23]
 800ac5e:	005b      	lsls	r3, r3, #1
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	441a      	add	r2, r3
 800ac64:	7dfb      	ldrb	r3, [r7, #23]
 800ac66:	005b      	lsls	r3, r3, #1
 800ac68:	68f9      	ldr	r1, [r7, #12]
 800ac6a:	440b      	add	r3, r1
 800ac6c:	8812      	ldrh	r2, [r2, #0]
 800ac6e:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 800ac70:	7dfb      	ldrb	r3, [r7, #23]
 800ac72:	3301      	adds	r3, #1
 800ac74:	75fb      	strb	r3, [r7, #23]
 800ac76:	7dfa      	ldrb	r2, [r7, #23]
 800ac78:	79fb      	ldrb	r3, [r7, #7]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d3ee      	bcc.n	800ac5c <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 800ac7e:	bf00      	nop
 800ac80:	371c      	adds	r7, #28
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bc80      	pop	{r7}
 800ac86:	4770      	bx	lr

0800ac88 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800ac88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac8a:	b08f      	sub	sp, #60	; 0x3c
 800ac8c:	af04      	add	r7, sp, #16
 800ac8e:	6039      	str	r1, [r7, #0]
 800ac90:	4611      	mov	r1, r2
 800ac92:	461a      	mov	r2, r3
 800ac94:	4603      	mov	r3, r0
 800ac96:	71fb      	strb	r3, [r7, #7]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	71bb      	strb	r3, [r7, #6]
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800aca0:	f04f 33ff 	mov.w	r3, #4294967295
 800aca4:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800aca6:	f003 ffd3 	bl	800ec50 <UTIL_TIMER_GetCurrentTime>
 800acaa:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 800acac:	2300      	movs	r3, #0
 800acae:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 800acb0:	2301      	movs	r3, #1
 800acb2:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 800acb4:	2300      	movs	r3, #0
 800acb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 800acba:	2300      	movs	r3, #0
 800acbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800acc0:	e0ba      	b.n	800ae38 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800acc2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800acc6:	4613      	mov	r3, r2
 800acc8:	005b      	lsls	r3, r3, #1
 800acca:	4413      	add	r3, r2
 800accc:	00db      	lsls	r3, r3, #3
 800acce:	461a      	mov	r2, r3
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	189c      	adds	r4, r3, r2
 800acd4:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 800acd8:	797a      	ldrb	r2, [r7, #5]
 800acda:	79fd      	ldrb	r5, [r7, #7]
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	9302      	str	r3, [sp, #8]
 800ace0:	46ec      	mov	ip, sp
 800ace2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ace6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800acea:	e88c 0003 	stmia.w	ip, {r0, r1}
 800acee:	4633      	mov	r3, r6
 800acf0:	4629      	mov	r1, r5
 800acf2:	4620      	mov	r0, r4
 800acf4:	f7ff fe84 	bl	800aa00 <UpdateTimeCredits>
 800acf8:	4603      	mov	r3, r0
 800acfa:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 800acfc:	8afa      	ldrh	r2, [r7, #22]
 800acfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad00:	fb02 f303 	mul.w	r3, r2, r3
 800ad04:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800ad06:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	005b      	lsls	r3, r3, #1
 800ad0e:	4413      	add	r3, r2
 800ad10:	00db      	lsls	r3, r3, #3
 800ad12:	461a      	mov	r2, r3
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	4413      	add	r3, r2
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	69ba      	ldr	r2, [r7, #24]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d308      	bcc.n	800ad32 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800ad20:	797b      	ldrb	r3, [r7, #5]
 800ad22:	f083 0301 	eor.w	r3, r3, #1
 800ad26:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d013      	beq.n	800ad54 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800ad2c:	79fb      	ldrb	r3, [r7, #7]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d010      	beq.n	800ad54 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 800ad32:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ad36:	4613      	mov	r3, r2
 800ad38:	005b      	lsls	r3, r3, #1
 800ad3a:	4413      	add	r3, r2
 800ad3c:	00db      	lsls	r3, r3, #3
 800ad3e:	461a      	mov	r2, r3
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	4413      	add	r3, r2
 800ad44:	2201      	movs	r2, #1
 800ad46:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800ad48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ad52:	e06c      	b.n	800ae2e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800ad54:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ad58:	4613      	mov	r3, r2
 800ad5a:	005b      	lsls	r3, r3, #1
 800ad5c:	4413      	add	r3, r2
 800ad5e:	00db      	lsls	r3, r3, #3
 800ad60:	461a      	mov	r2, r3
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	4413      	add	r3, r2
 800ad66:	2200      	movs	r2, #0
 800ad68:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800ad6a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ad6e:	4613      	mov	r3, r2
 800ad70:	005b      	lsls	r3, r3, #1
 800ad72:	4413      	add	r3, r2
 800ad74:	00db      	lsls	r3, r3, #3
 800ad76:	461a      	mov	r2, r3
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	69ba      	ldr	r2, [r7, #24]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d215      	bcs.n	800adb0 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800ad84:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ad88:	4613      	mov	r3, r2
 800ad8a:	005b      	lsls	r3, r3, #1
 800ad8c:	4413      	add	r3, r2
 800ad8e:	00db      	lsls	r3, r3, #3
 800ad90:	461a      	mov	r2, r3
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	4413      	add	r3, r2
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	69ba      	ldr	r2, [r7, #24]
 800ad9a:	1ad3      	subs	r3, r2, r3
 800ad9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	bf28      	it	cs
 800ada2:	4613      	movcs	r3, r2
 800ada4:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800ada6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800adaa:	3301      	adds	r3, #1
 800adac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800adb0:	79fb      	ldrb	r3, [r7, #7]
 800adb2:	f083 0301 	eor.w	r3, r3, #1
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d038      	beq.n	800ae2e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 800adbc:	2300      	movs	r3, #0
 800adbe:	60fb      	str	r3, [r7, #12]
 800adc0:	2300      	movs	r3, #0
 800adc2:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800adc4:	8afb      	ldrh	r3, [r7, #22]
 800adc6:	2b64      	cmp	r3, #100	; 0x64
 800adc8:	d103      	bne.n	800add2 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800adca:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800adce:	60fb      	str	r3, [r7, #12]
 800add0:	e009      	b.n	800ade6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800add2:	8afb      	ldrh	r3, [r7, #22]
 800add4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800add8:	d103      	bne.n	800ade2 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800adda:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800adde:	60fb      	str	r3, [r7, #12]
 800ade0:	e001      	b.n	800ade6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800ade2:	4b1e      	ldr	r3, [pc, #120]	; (800ae5c <RegionCommonUpdateBandTimeOff+0x1d4>)
 800ade4:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800ade6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ade8:	4a1c      	ldr	r2, [pc, #112]	; (800ae5c <RegionCommonUpdateBandTimeOff+0x1d4>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d90e      	bls.n	800ae0c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adf2:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800adf6:	3b30      	subs	r3, #48	; 0x30
 800adf8:	4919      	ldr	r1, [pc, #100]	; (800ae60 <RegionCommonUpdateBandTimeOff+0x1d8>)
 800adfa:	fba1 1303 	umull	r1, r3, r1, r3
 800adfe:	0c1b      	lsrs	r3, r3, #16
 800ae00:	3301      	adds	r3, #1
 800ae02:	4918      	ldr	r1, [pc, #96]	; (800ae64 <RegionCommonUpdateBandTimeOff+0x1dc>)
 800ae04:	fb01 f303 	mul.w	r3, r1, r3
 800ae08:	4413      	add	r3, r2
 800ae0a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800ae0c:	f107 000c 	add.w	r0, r7, #12
 800ae10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae16:	f107 020c 	add.w	r2, r7, #12
 800ae1a:	ca06      	ldmia	r2, {r1, r2}
 800ae1c:	f003 fd1c 	bl	800e858 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800ae20:	f107 030c 	add.w	r3, r7, #12
 800ae24:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ae28:	f003 fd6e 	bl	800e908 <SysTimeToMs>
 800ae2c:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 800ae2e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ae32:	3301      	adds	r3, #1
 800ae34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ae38:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ae3c:	79bb      	ldrb	r3, [r7, #6]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	f4ff af3f 	bcc.w	800acc2 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 800ae44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d102      	bne.n	800ae52 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800ae4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae50:	e000      	b.n	800ae54 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 800ae52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	372c      	adds	r7, #44	; 0x2c
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae5c:	0001ec30 	.word	0x0001ec30
 800ae60:	c22e4507 	.word	0xc22e4507
 800ae64:	00015180 	.word	0x00015180

0800ae68 <RegionCommonComputeSymbolTimeLoRa>:

    return status;
}

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	4603      	mov	r3, r0
 800ae70:	6039      	str	r1, [r7, #0]
 800ae72:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800ae74:	79fb      	ldrb	r3, [r7, #7]
 800ae76:	4a06      	ldr	r2, [pc, #24]	; (800ae90 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 800ae78:	fa02 f303 	lsl.w	r3, r2, r3
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bc80      	pop	{r7}
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	000f4240 	.word	0x000f4240

0800ae94 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 800ae9e:	79fb      	ldrb	r3, [r7, #7]
 800aea0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800aea4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bc80      	pop	{r7}
 800aeb0:	4770      	bx	lr
	...

0800aeb4 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	607a      	str	r2, [r7, #4]
 800aebe:	603b      	str	r3, [r7, #0]
 800aec0:	460b      	mov	r3, r1
 800aec2:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800aec4:	7afa      	ldrb	r2, [r7, #11]
 800aec6:	7afb      	ldrb	r3, [r7, #11]
 800aec8:	3b04      	subs	r3, #4
 800aeca:	4619      	mov	r1, r3
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	fb03 f101 	mul.w	r1, r3, r1
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aed8:	fb00 f303 	mul.w	r3, r0, r3
 800aedc:	440b      	add	r3, r1
 800aede:	005b      	lsls	r3, r3, #1
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d013      	beq.n	800af0c <RegionCommonComputeRxWindowParameters+0x58>
 800aee4:	7afb      	ldrb	r3, [r7, #11]
 800aee6:	3b04      	subs	r3, #4
 800aee8:	4619      	mov	r1, r3
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	fb03 f101 	mul.w	r1, r3, r1
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aef6:	fb00 f303 	mul.w	r3, r0, r3
 800aefa:	440b      	add	r3, r1
 800aefc:	0059      	lsls	r1, r3, #1
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	440b      	add	r3, r1
 800af02:	1e59      	subs	r1, r3, #1
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	fbb1 f3f3 	udiv	r3, r1, r3
 800af0a:	e00f      	b.n	800af2c <RegionCommonComputeRxWindowParameters+0x78>
 800af0c:	7afb      	ldrb	r3, [r7, #11]
 800af0e:	3b04      	subs	r3, #4
 800af10:	4619      	mov	r1, r3
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	fb03 f101 	mul.w	r1, r3, r1
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800af1e:	fb00 f303 	mul.w	r3, r0, r3
 800af22:	440b      	add	r3, r1
 800af24:	0059      	lsls	r1, r3, #1
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	fbb1 f3f3 	udiv	r3, r1, r3
 800af2c:	429a      	cmp	r2, r3
 800af2e:	bf38      	it	cc
 800af30:	461a      	movcc	r2, r3
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	4619      	mov	r1, r3
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	fb02 f303 	mul.w	r3, r2, r3
 800af46:	2b00      	cmp	r3, #0
 800af48:	d007      	beq.n	800af5a <RegionCommonComputeRxWindowParameters+0xa6>
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	fb02 f303 	mul.w	r3, r2, r3
 800af54:	3301      	adds	r3, #1
 800af56:	085b      	lsrs	r3, r3, #1
 800af58:	e005      	b.n	800af66 <RegionCommonComputeRxWindowParameters+0xb2>
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	fb02 f303 	mul.w	r3, r2, r3
 800af64:	085b      	lsrs	r3, r3, #1
 800af66:	1acb      	subs	r3, r1, r3
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800af6e:	fb01 f202 	mul.w	r2, r1, r2
 800af72:	1a9b      	subs	r3, r3, r2
 800af74:	2b00      	cmp	r3, #0
 800af76:	dd27      	ble.n	800afc8 <RegionCommonComputeRxWindowParameters+0x114>
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4619      	mov	r1, r3
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	fb02 f303 	mul.w	r3, r2, r3
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d007      	beq.n	800af9c <RegionCommonComputeRxWindowParameters+0xe8>
 800af8c:	69bb      	ldr	r3, [r7, #24]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68fa      	ldr	r2, [r7, #12]
 800af92:	fb02 f303 	mul.w	r3, r2, r3
 800af96:	3301      	adds	r3, #1
 800af98:	085b      	lsrs	r3, r3, #1
 800af9a:	e005      	b.n	800afa8 <RegionCommonComputeRxWindowParameters+0xf4>
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	fb02 f303 	mul.w	r3, r2, r3
 800afa6:	085b      	lsrs	r3, r3, #1
 800afa8:	1acb      	subs	r3, r1, r3
 800afaa:	683a      	ldr	r2, [r7, #0]
 800afac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800afb0:	fb01 f202 	mul.w	r2, r1, r2
 800afb4:	1a9b      	subs	r3, r3, r2
 800afb6:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800afba:	4a19      	ldr	r2, [pc, #100]	; (800b020 <RegionCommonComputeRxWindowParameters+0x16c>)
 800afbc:	fb82 1203 	smull	r1, r2, r2, r3
 800afc0:	1192      	asrs	r2, r2, #6
 800afc2:	17db      	asrs	r3, r3, #31
 800afc4:	1ad3      	subs	r3, r2, r3
 800afc6:	e024      	b.n	800b012 <RegionCommonComputeRxWindowParameters+0x15e>
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	4619      	mov	r1, r3
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	fb02 f303 	mul.w	r3, r2, r3
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d007      	beq.n	800afec <RegionCommonComputeRxWindowParameters+0x138>
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	fb02 f303 	mul.w	r3, r2, r3
 800afe6:	3301      	adds	r3, #1
 800afe8:	085b      	lsrs	r3, r3, #1
 800afea:	e005      	b.n	800aff8 <RegionCommonComputeRxWindowParameters+0x144>
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	68fa      	ldr	r2, [r7, #12]
 800aff2:	fb02 f303 	mul.w	r3, r2, r3
 800aff6:	085b      	lsrs	r3, r3, #1
 800aff8:	1acb      	subs	r3, r1, r3
 800affa:	683a      	ldr	r2, [r7, #0]
 800affc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b000:	fb01 f202 	mul.w	r2, r1, r2
 800b004:	1a9b      	subs	r3, r3, r2
 800b006:	4a06      	ldr	r2, [pc, #24]	; (800b020 <RegionCommonComputeRxWindowParameters+0x16c>)
 800b008:	fb82 1203 	smull	r1, r2, r2, r3
 800b00c:	1192      	asrs	r2, r2, #6
 800b00e:	17db      	asrs	r3, r3, #31
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	69fa      	ldr	r2, [r7, #28]
 800b014:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800b016:	bf00      	nop
 800b018:	3714      	adds	r7, #20
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bc80      	pop	{r7}
 800b01e:	4770      	bx	lr
 800b020:	10624dd3 	.word	0x10624dd3

0800b024 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b086      	sub	sp, #24
 800b028:	af00      	add	r7, sp, #0
 800b02a:	4603      	mov	r3, r0
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
 800b030:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 800b032:	2300      	movs	r3, #0
 800b034:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800b036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b03a:	005b      	lsls	r3, r3, #1
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7f5 fbbd 	bl	80007bc <__aeabi_ui2f>
 800b042:	4603      	mov	r3, r0
 800b044:	4619      	mov	r1, r3
 800b046:	68b8      	ldr	r0, [r7, #8]
 800b048:	f7f5 fb06 	bl	8000658 <__aeabi_fsub>
 800b04c:	4603      	mov	r3, r0
 800b04e:	6879      	ldr	r1, [r7, #4]
 800b050:	4618      	mov	r0, r3
 800b052:	f7f5 fb01 	bl	8000658 <__aeabi_fsub>
 800b056:	4603      	mov	r3, r0
 800b058:	4618      	mov	r0, r3
 800b05a:	f7f5 f9f1 	bl	8000440 <__aeabi_f2d>
 800b05e:	4602      	mov	r2, r0
 800b060:	460b      	mov	r3, r1
 800b062:	4610      	mov	r0, r2
 800b064:	4619      	mov	r1, r3
 800b066:	f003 fee3 	bl	800ee30 <floor>
 800b06a:	4602      	mov	r2, r0
 800b06c:	460b      	mov	r3, r1
 800b06e:	4610      	mov	r0, r2
 800b070:	4619      	mov	r1, r3
 800b072:	f7f5 fac5 	bl	8000600 <__aeabi_d2iz>
 800b076:	4603      	mov	r3, r0
 800b078:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 800b07a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3718      	adds	r7, #24
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800b086:	b590      	push	{r4, r7, lr}
 800b088:	b087      	sub	sp, #28
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	60f8      	str	r0, [r7, #12]
 800b08e:	60b9      	str	r1, [r7, #8]
 800b090:	607a      	str	r2, [r7, #4]
 800b092:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 800b094:	2300      	movs	r3, #0
 800b096:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 800b098:	2300      	movs	r3, #0
 800b09a:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800b09c:	2300      	movs	r3, #0
 800b09e:	757b      	strb	r3, [r7, #21]
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	753b      	strb	r3, [r7, #20]
 800b0a4:	e09c      	b.n	800b1e0 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	74fb      	strb	r3, [r7, #19]
 800b0aa:	e08f      	b.n	800b1cc <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	685a      	ldr	r2, [r3, #4]
 800b0b0:	7d3b      	ldrb	r3, [r7, #20]
 800b0b2:	005b      	lsls	r3, r3, #1
 800b0b4:	4413      	add	r3, r2
 800b0b6:	881b      	ldrh	r3, [r3, #0]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	7cfb      	ldrb	r3, [r7, #19]
 800b0bc:	fa42 f303 	asr.w	r3, r2, r3
 800b0c0:	f003 0301 	and.w	r3, r3, #1
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d07e      	beq.n	800b1c6 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	689a      	ldr	r2, [r3, #8]
 800b0cc:	7d79      	ldrb	r1, [r7, #21]
 800b0ce:	7cfb      	ldrb	r3, [r7, #19]
 800b0d0:	440b      	add	r3, r1
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	005b      	lsls	r3, r3, #1
 800b0d8:	440b      	add	r3, r1
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	4413      	add	r3, r2
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d06b      	beq.n	800b1bc <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	f083 0301 	eor.w	r3, r3, #1
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d011      	beq.n	800b116 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00d      	beq.n	800b116 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	695a      	ldr	r2, [r3, #20]
 800b0fe:	7d3b      	ldrb	r3, [r7, #20]
 800b100:	005b      	lsls	r3, r3, #1
 800b102:	4413      	add	r3, r2
 800b104:	881b      	ldrh	r3, [r3, #0]
 800b106:	461a      	mov	r2, r3
 800b108:	7cfb      	ldrb	r3, [r7, #19]
 800b10a:	fa42 f303 	asr.w	r3, r2, r3
 800b10e:	f003 0301 	and.w	r3, r3, #1
 800b112:	2b00      	cmp	r3, #0
 800b114:	d054      	beq.n	800b1c0 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	785b      	ldrb	r3, [r3, #1]
 800b11a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	689a      	ldr	r2, [r3, #8]
 800b120:	7d79      	ldrb	r1, [r7, #21]
 800b122:	7cfb      	ldrb	r3, [r7, #19]
 800b124:	440b      	add	r3, r1
 800b126:	4619      	mov	r1, r3
 800b128:	460b      	mov	r3, r1
 800b12a:	005b      	lsls	r3, r3, #1
 800b12c:	440b      	add	r3, r1
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4413      	add	r3, r2
 800b132:	7a1b      	ldrb	r3, [r3, #8]
 800b134:	f343 0303 	sbfx	r3, r3, #0, #4
 800b138:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800b13a:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	689a      	ldr	r2, [r3, #8]
 800b140:	7d79      	ldrb	r1, [r7, #21]
 800b142:	7cfb      	ldrb	r3, [r7, #19]
 800b144:	440b      	add	r3, r1
 800b146:	4619      	mov	r1, r3
 800b148:	460b      	mov	r3, r1
 800b14a:	005b      	lsls	r3, r3, #1
 800b14c:	440b      	add	r3, r1
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	4413      	add	r3, r2
 800b152:	7a1b      	ldrb	r3, [r3, #8]
 800b154:	f343 1303 	sbfx	r3, r3, #4, #4
 800b158:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800b15a:	461a      	mov	r2, r3
 800b15c:	4621      	mov	r1, r4
 800b15e:	f7ff fd24 	bl	800abaa <RegionCommonValueInRange>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d02d      	beq.n	800b1c4 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	68da      	ldr	r2, [r3, #12]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	6899      	ldr	r1, [r3, #8]
 800b170:	7d78      	ldrb	r0, [r7, #21]
 800b172:	7cfb      	ldrb	r3, [r7, #19]
 800b174:	4403      	add	r3, r0
 800b176:	4618      	mov	r0, r3
 800b178:	4603      	mov	r3, r0
 800b17a:	005b      	lsls	r3, r3, #1
 800b17c:	4403      	add	r3, r0
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	440b      	add	r3, r1
 800b182:	7a5b      	ldrb	r3, [r3, #9]
 800b184:	4619      	mov	r1, r3
 800b186:	460b      	mov	r3, r1
 800b188:	005b      	lsls	r3, r3, #1
 800b18a:	440b      	add	r3, r1
 800b18c:	00db      	lsls	r3, r3, #3
 800b18e:	4413      	add	r3, r2
 800b190:	7d1b      	ldrb	r3, [r3, #20]
 800b192:	f083 0301 	eor.w	r3, r3, #1
 800b196:	b2db      	uxtb	r3, r3
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d003      	beq.n	800b1a4 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 800b19c:	7dbb      	ldrb	r3, [r7, #22]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	75bb      	strb	r3, [r7, #22]
                    continue;
 800b1a2:	e010      	b.n	800b1c6 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 800b1a4:	7dfb      	ldrb	r3, [r7, #23]
 800b1a6:	1c5a      	adds	r2, r3, #1
 800b1a8:	75fa      	strb	r2, [r7, #23]
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	7d79      	ldrb	r1, [r7, #21]
 800b1b2:	7cfa      	ldrb	r2, [r7, #19]
 800b1b4:	440a      	add	r2, r1
 800b1b6:	b2d2      	uxtb	r2, r2
 800b1b8:	701a      	strb	r2, [r3, #0]
 800b1ba:	e004      	b.n	800b1c6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 800b1bc:	bf00      	nop
 800b1be:	e002      	b.n	800b1c6 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 800b1c0:	bf00      	nop
 800b1c2:	e000      	b.n	800b1c6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 800b1c4:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 800b1c6:	7cfb      	ldrb	r3, [r7, #19]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	74fb      	strb	r3, [r7, #19]
 800b1cc:	7cfb      	ldrb	r3, [r7, #19]
 800b1ce:	2b0f      	cmp	r3, #15
 800b1d0:	f67f af6c 	bls.w	800b0ac <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800b1d4:	7d7b      	ldrb	r3, [r7, #21]
 800b1d6:	3310      	adds	r3, #16
 800b1d8:	757b      	strb	r3, [r7, #21]
 800b1da:	7d3b      	ldrb	r3, [r7, #20]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	753b      	strb	r3, [r7, #20]
 800b1e0:	7d7b      	ldrb	r3, [r7, #21]
 800b1e2:	b29a      	uxth	r2, r3
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	8a1b      	ldrh	r3, [r3, #16]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	f4ff af5c 	bcc.w	800b0a6 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	7dfa      	ldrb	r2, [r7, #23]
 800b1f2:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	7dba      	ldrb	r2, [r7, #22]
 800b1f8:	701a      	strb	r2, [r3, #0]
}
 800b1fa:	bf00      	nop
 800b1fc:	371c      	adds	r7, #28
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd90      	pop	{r4, r7, pc}

0800b202 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800b202:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b204:	b08b      	sub	sp, #44	; 0x2c
 800b206:	af04      	add	r7, sp, #16
 800b208:	60f8      	str	r0, [r7, #12]
 800b20a:	60b9      	str	r1, [r7, #8]
 800b20c:	607a      	str	r2, [r7, #4]
 800b20e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	4618      	mov	r0, r3
 800b216:	f003 fd2d 	bl	800ec74 <UTIL_TIMER_GetElapsedTime>
 800b21a:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	1ad2      	subs	r2, r2, r3
 800b224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b226:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 800b228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22a:	2201      	movs	r2, #1
 800b22c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	2200      	movs	r2, #0
 800b232:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d004      	beq.n	800b246 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800b240:	697a      	ldr	r2, [r7, #20]
 800b242:	429a      	cmp	r2, r3
 800b244:	d32b      	bcc.n	800b29e <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	2200      	movs	r2, #0
 800b24a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	69db      	ldr	r3, [r3, #28]
 800b250:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800b256:	68dd      	ldr	r5, [r3, #12]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	7a5e      	ldrb	r6, [r3, #9]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f893 c008 	ldrb.w	ip, [r3, #8]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	7d1b      	ldrb	r3, [r3, #20]
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	6992      	ldr	r2, [r2, #24]
 800b26a:	9203      	str	r2, [sp, #12]
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	f10d 0e04 	add.w	lr, sp, #4
 800b272:	320c      	adds	r2, #12
 800b274:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b278:	e88e 0003 	stmia.w	lr, {r0, r1}
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	4663      	mov	r3, ip
 800b280:	4632      	mov	r2, r6
 800b282:	4629      	mov	r1, r5
 800b284:	4620      	mov	r0, r4
 800b286:	f7ff fcff 	bl	800ac88 <RegionCommonUpdateBandTimeOff>
 800b28a:	4602      	mov	r2, r0
 800b28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b28e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	69d8      	ldr	r0, [r3, #28]
 800b294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b296:	683a      	ldr	r2, [r7, #0]
 800b298:	6879      	ldr	r1, [r7, #4]
 800b29a:	f7ff fef4 	bl	800b086 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d004      	beq.n	800b2b0 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 800b2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	e006      	b.n	800b2be <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 800b2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d001      	beq.n	800b2bc <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800b2b8:	230b      	movs	r3, #11
 800b2ba:	e000      	b.n	800b2be <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800b2bc:	230c      	movs	r3, #12
    }
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	371c      	adds	r7, #28
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b2c6 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800b2c6:	b5b0      	push	{r4, r5, r7, lr}
 800b2c8:	b086      	sub	sp, #24
 800b2ca:	af02      	add	r7, sp, #8
 800b2cc:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f993 2000 	ldrsb.w	r2, [r3]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d103      	bne.n	800b2ec <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800b2ea:	e026      	b.n	800b33a <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800b2ec:	7bfb      	ldrb	r3, [r7, #15]
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800b2fa:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d019      	beq.n	800b336 <RegionCommonGetNextLowerTxDr+0x70>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	78d8      	ldrb	r0, [r3, #3]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6859      	ldr	r1, [r3, #4]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	6892      	ldr	r2, [r2, #8]
 800b31a:	f997 400f 	ldrsb.w	r4, [r7, #15]
 800b31e:	9201      	str	r2, [sp, #4]
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	462b      	mov	r3, r5
 800b324:	4622      	mov	r2, r4
 800b326:	f7ff fbce 	bl	800aac6 <RegionCommonChanVerifyDr>
 800b32a:	4603      	mov	r3, r0
 800b32c:	f083 0301 	eor.w	r3, r3, #1
 800b330:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 800b332:	2b00      	cmp	r3, #0
 800b334:	d1da      	bne.n	800b2ec <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 800b336:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bdb0      	pop	{r4, r5, r7, pc}

0800b342 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 800b342:	b480      	push	{r7}
 800b344:	b083      	sub	sp, #12
 800b346:	af00      	add	r7, sp, #0
 800b348:	4603      	mov	r3, r0
 800b34a:	460a      	mov	r2, r1
 800b34c:	71fb      	strb	r3, [r7, #7]
 800b34e:	4613      	mov	r3, r2
 800b350:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 800b352:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800b356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b35a:	4293      	cmp	r3, r2
 800b35c:	bfb8      	it	lt
 800b35e:	4613      	movlt	r3, r2
 800b360:	b25b      	sxtb	r3, r3
}
 800b362:	4618      	mov	r0, r3
 800b364:	370c      	adds	r7, #12
 800b366:	46bd      	mov	sp, r7
 800b368:	bc80      	pop	{r7}
 800b36a:	4770      	bx	lr

0800b36c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	683a      	ldr	r2, [r7, #0]
 800b37c:	4413      	add	r3, r2
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a07      	ldr	r2, [pc, #28]	; (800b3a0 <RegionCommonGetBandwidth+0x34>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d004      	beq.n	800b390 <RegionCommonGetBandwidth+0x24>
 800b386:	4a07      	ldr	r2, [pc, #28]	; (800b3a4 <RegionCommonGetBandwidth+0x38>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d003      	beq.n	800b394 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 800b38c:	2300      	movs	r3, #0
 800b38e:	e002      	b.n	800b396 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 800b390:	2301      	movs	r3, #1
 800b392:	e000      	b.n	800b396 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 800b394:	2302      	movs	r3, #2
    }
}
 800b396:	4618      	mov	r0, r3
 800b398:	370c      	adds	r7, #12
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bc80      	pop	{r7}
 800b39e:	4770      	bx	lr
 800b3a0:	0003d090 	.word	0x0003d090
 800b3a4:	0007a120 	.word	0x0007a120

0800b3a8 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	6039      	str	r1, [r7, #0]
 800b3b2:	71fb      	strb	r3, [r7, #7]
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	71bb      	strb	r3, [r7, #6]
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800b3b8:	bf00      	nop
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bc80      	pop	{r7}
 800b3c0:	4770      	bx	lr

0800b3c2 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800b3c2:	b480      	push	{r7}
 800b3c4:	b083      	sub	sp, #12
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
}
 800b3ce:	bf00      	nop
 800b3d0:	370c      	adds	r7, #12
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bc80      	pop	{r7}
 800b3d6:	4770      	bx	lr

0800b3d8 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 800b3d8:	b480      	push	{r7}
 800b3da:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800b3dc:	4b0d      	ldr	r3, [pc, #52]	; (800b414 <rand1+0x3c>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a0d      	ldr	r2, [pc, #52]	; (800b418 <rand1+0x40>)
 800b3e2:	fb02 f303 	mul.w	r3, r2, r3
 800b3e6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800b3ea:	3339      	adds	r3, #57	; 0x39
 800b3ec:	4a09      	ldr	r2, [pc, #36]	; (800b414 <rand1+0x3c>)
 800b3ee:	6013      	str	r3, [r2, #0]
 800b3f0:	4b08      	ldr	r3, [pc, #32]	; (800b414 <rand1+0x3c>)
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	fba3 1302 	umull	r1, r3, r3, r2
 800b3fa:	1ad1      	subs	r1, r2, r3
 800b3fc:	0849      	lsrs	r1, r1, #1
 800b3fe:	440b      	add	r3, r1
 800b400:	0f99      	lsrs	r1, r3, #30
 800b402:	460b      	mov	r3, r1
 800b404:	07db      	lsls	r3, r3, #31
 800b406:	1a5b      	subs	r3, r3, r1
 800b408:	1ad1      	subs	r1, r2, r3
 800b40a:	460b      	mov	r3, r1
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	46bd      	mov	sp, r7
 800b410:	bc80      	pop	{r7}
 800b412:	4770      	bx	lr
 800b414:	200000f4 	.word	0x200000f4
 800b418:	41c64e6d 	.word	0x41c64e6d

0800b41c <randr>:
    next = seed;
}
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800b426:	f7ff ffd7 	bl	800b3d8 <rand1>
 800b42a:	4602      	mov	r2, r0
 800b42c:	6839      	ldr	r1, [r7, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	1acb      	subs	r3, r1, r3
 800b432:	3301      	adds	r3, #1
 800b434:	fb92 f1f3 	sdiv	r1, r2, r3
 800b438:	fb01 f303 	mul.w	r3, r1, r3
 800b43c:	1ad2      	subs	r2, r2, r3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4413      	add	r3, r2
}
 800b442:	4618      	mov	r0, r3
 800b444:	3708      	adds	r7, #8
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 800b44a:	b480      	push	{r7}
 800b44c:	b085      	sub	sp, #20
 800b44e:	af00      	add	r7, sp, #0
 800b450:	60f8      	str	r0, [r7, #12]
 800b452:	60b9      	str	r1, [r7, #8]
 800b454:	4613      	mov	r3, r2
 800b456:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 800b458:	e007      	b.n	800b46a <memcpy1+0x20>
    {
        *dst++ = *src++;
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	1c53      	adds	r3, r2, #1
 800b45e:	60bb      	str	r3, [r7, #8]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	1c59      	adds	r1, r3, #1
 800b464:	60f9      	str	r1, [r7, #12]
 800b466:	7812      	ldrb	r2, [r2, #0]
 800b468:	701a      	strb	r2, [r3, #0]
    while( size-- )
 800b46a:	88fb      	ldrh	r3, [r7, #6]
 800b46c:	1e5a      	subs	r2, r3, #1
 800b46e:	80fa      	strh	r2, [r7, #6]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1f2      	bne.n	800b45a <memcpy1+0x10>
    }
}
 800b474:	bf00      	nop
 800b476:	bf00      	nop
 800b478:	3714      	adds	r7, #20
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bc80      	pop	{r7}
 800b47e:	4770      	bx	lr

0800b480 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 800b480:	b480      	push	{r7}
 800b482:	b085      	sub	sp, #20
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	4613      	mov	r3, r2
 800b48c:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 800b48e:	88fb      	ldrh	r3, [r7, #6]
 800b490:	3b01      	subs	r3, #1
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	4413      	add	r3, r2
 800b496:	60fb      	str	r3, [r7, #12]
    while( size-- )
 800b498:	e007      	b.n	800b4aa <memcpyr+0x2a>
    {
        *dst-- = *src++;
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	1c53      	adds	r3, r2, #1
 800b49e:	60bb      	str	r3, [r7, #8]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	1e59      	subs	r1, r3, #1
 800b4a4:	60f9      	str	r1, [r7, #12]
 800b4a6:	7812      	ldrb	r2, [r2, #0]
 800b4a8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 800b4aa:	88fb      	ldrh	r3, [r7, #6]
 800b4ac:	1e5a      	subs	r2, r3, #1
 800b4ae:	80fa      	strh	r2, [r7, #6]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1f2      	bne.n	800b49a <memcpyr+0x1a>
    }
}
 800b4b4:	bf00      	nop
 800b4b6:	bf00      	nop
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bc80      	pop	{r7}
 800b4be:	4770      	bx	lr

0800b4c0 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	70fb      	strb	r3, [r7, #3]
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	803b      	strh	r3, [r7, #0]
    while( size-- )
 800b4d0:	e004      	b.n	800b4dc <memset1+0x1c>
    {
        *dst++ = value;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	1c5a      	adds	r2, r3, #1
 800b4d6:	607a      	str	r2, [r7, #4]
 800b4d8:	78fa      	ldrb	r2, [r7, #3]
 800b4da:	701a      	strb	r2, [r3, #0]
    while( size-- )
 800b4dc:	883b      	ldrh	r3, [r7, #0]
 800b4de:	1e5a      	subs	r2, r3, #1
 800b4e0:	803a      	strh	r2, [r7, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d1f5      	bne.n	800b4d2 <memset1+0x12>
    }
}
 800b4e6:	bf00      	nop
 800b4e8:	bf00      	nop
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bc80      	pop	{r7}
 800b4f0:	4770      	bx	lr
	...

0800b4f4 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b085      	sub	sp, #20
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 800b500:	f04f 33ff 	mov.w	r3, #4294967295
 800b504:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d101      	bne.n	800b510 <Crc32+0x1c>
    {
        return 0;
 800b50c:	2300      	movs	r3, #0
 800b50e:	e026      	b.n	800b55e <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 800b510:	2300      	movs	r3, #0
 800b512:	817b      	strh	r3, [r7, #10]
 800b514:	e01d      	b.n	800b552 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 800b516:	897b      	ldrh	r3, [r7, #10]
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	4413      	add	r3, r2
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	461a      	mov	r2, r3
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	4053      	eors	r3, r2
 800b524:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 800b526:	2300      	movs	r3, #0
 800b528:	813b      	strh	r3, [r7, #8]
 800b52a:	e00c      	b.n	800b546 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	085a      	lsrs	r2, r3, #1
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f003 0301 	and.w	r3, r3, #1
 800b536:	425b      	negs	r3, r3
 800b538:	490b      	ldr	r1, [pc, #44]	; (800b568 <Crc32+0x74>)
 800b53a:	400b      	ands	r3, r1
 800b53c:	4053      	eors	r3, r2
 800b53e:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 800b540:	893b      	ldrh	r3, [r7, #8]
 800b542:	3301      	adds	r3, #1
 800b544:	813b      	strh	r3, [r7, #8]
 800b546:	893b      	ldrh	r3, [r7, #8]
 800b548:	2b07      	cmp	r3, #7
 800b54a:	d9ef      	bls.n	800b52c <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 800b54c:	897b      	ldrh	r3, [r7, #10]
 800b54e:	3301      	adds	r3, #1
 800b550:	817b      	strh	r3, [r7, #10]
 800b552:	897a      	ldrh	r2, [r7, #10]
 800b554:	887b      	ldrh	r3, [r7, #2]
 800b556:	429a      	cmp	r2, r3
 800b558:	d3dd      	bcc.n	800b516 <Crc32+0x22>
        }
    }

    return ~crc;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	43db      	mvns	r3, r3
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3714      	adds	r7, #20
 800b562:	46bd      	mov	sp, r7
 800b564:	bc80      	pop	{r7}
 800b566:	4770      	bx	lr
 800b568:	edb88320 	.word	0xedb88320

0800b56c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af02      	add	r7, sp, #8
 800b572:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 800b574:	4a24      	ldr	r2, [pc, #144]	; (800b608 <RadioInit+0x9c>)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800b57a:	4b24      	ldr	r3, [pc, #144]	; (800b60c <RadioInit+0xa0>)
 800b57c:	2200      	movs	r2, #0
 800b57e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 800b580:	4b22      	ldr	r3, [pc, #136]	; (800b60c <RadioInit+0xa0>)
 800b582:	2200      	movs	r2, #0
 800b584:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800b586:	4b21      	ldr	r3, [pc, #132]	; (800b60c <RadioInit+0xa0>)
 800b588:	2200      	movs	r2, #0
 800b58a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800b58c:	4b1f      	ldr	r3, [pc, #124]	; (800b60c <RadioInit+0xa0>)
 800b58e:	2200      	movs	r2, #0
 800b590:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 800b592:	481f      	ldr	r0, [pc, #124]	; (800b610 <RadioInit+0xa4>)
 800b594:	f001 ff50 	bl	800d438 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 800b598:	4b1c      	ldr	r3, [pc, #112]	; (800b60c <RadioInit+0xa0>)
 800b59a:	2200      	movs	r2, #0
 800b59c:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 800b59e:	4b1b      	ldr	r3, [pc, #108]	; (800b60c <RadioInit+0xa0>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 800b5a4:	f002 f9de 	bl	800d964 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	f002 fda6 	bl	800e0fc <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800b5b0:	2204      	movs	r2, #4
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	2001      	movs	r0, #1
 800b5b6:	f002 fb63 	bl	800dc80 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b5c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b5c6:	f002 fa93 	bl	800daf0 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 800b5ca:	f000 fe7d 	bl	800c2c8 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	4b10      	ldr	r3, [pc, #64]	; (800b614 <RadioInit+0xa8>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f04f 31ff 	mov.w	r1, #4294967295
 800b5da:	480f      	ldr	r0, [pc, #60]	; (800b618 <RadioInit+0xac>)
 800b5dc:	f003 f9fa 	bl	800e9d4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	9300      	str	r3, [sp, #0]
 800b5e4:	4b0d      	ldr	r3, [pc, #52]	; (800b61c <RadioInit+0xb0>)
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f04f 31ff 	mov.w	r1, #4294967295
 800b5ec:	480c      	ldr	r0, [pc, #48]	; (800b620 <RadioInit+0xb4>)
 800b5ee:	f003 f9f1 	bl	800e9d4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800b5f2:	4809      	ldr	r0, [pc, #36]	; (800b618 <RadioInit+0xac>)
 800b5f4:	f003 fa92 	bl	800eb1c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800b5f8:	4809      	ldr	r0, [pc, #36]	; (800b620 <RadioInit+0xb4>)
 800b5fa:	f003 fa8f 	bl	800eb1c <UTIL_TIMER_Stop>
}
 800b5fe:	bf00      	nop
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	200018c4 	.word	0x200018c4
 800b60c:	200018c8 	.word	0x200018c8
 800b610:	0800c6b5 	.word	0x0800c6b5
 800b614:	0800c63d 	.word	0x0800c63d
 800b618:	20001924 	.word	0x20001924
 800b61c:	0800c651 	.word	0x0800c651
 800b620:	2000193c 	.word	0x2000193c

0800b624 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 800b628:	f001 ff48 	bl	800d4bc <SUBGRF_GetOperatingMode>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b07      	cmp	r3, #7
 800b630:	d00a      	beq.n	800b648 <RadioGetStatus+0x24>
 800b632:	2b07      	cmp	r3, #7
 800b634:	dc0a      	bgt.n	800b64c <RadioGetStatus+0x28>
 800b636:	2b04      	cmp	r3, #4
 800b638:	d002      	beq.n	800b640 <RadioGetStatus+0x1c>
 800b63a:	2b05      	cmp	r3, #5
 800b63c:	d002      	beq.n	800b644 <RadioGetStatus+0x20>
 800b63e:	e005      	b.n	800b64c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800b640:	2302      	movs	r3, #2
 800b642:	e004      	b.n	800b64e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800b644:	2301      	movs	r3, #1
 800b646:	e002      	b.n	800b64e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 800b648:	2303      	movs	r3, #3
 800b64a:	e000      	b.n	800b64e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 800b64c:	2300      	movs	r3, #0
    }
}
 800b64e:	4618      	mov	r0, r3
 800b650:	bd80      	pop	{r7, pc}
	...

0800b654 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	4603      	mov	r3, r0
 800b65c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800b65e:	4a2a      	ldr	r2, [pc, #168]	; (800b708 <RadioSetModem+0xb4>)
 800b660:	79fb      	ldrb	r3, [r7, #7]
 800b662:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 800b664:	79fb      	ldrb	r3, [r7, #7]
 800b666:	4618      	mov	r0, r3
 800b668:	f003 f879 	bl	800e75e <RFW_SetRadioModem>
    switch( modem )
 800b66c:	79fb      	ldrb	r3, [r7, #7]
 800b66e:	2b05      	cmp	r3, #5
 800b670:	d80e      	bhi.n	800b690 <RadioSetModem+0x3c>
 800b672:	a201      	add	r2, pc, #4	; (adr r2, 800b678 <RadioSetModem+0x24>)
 800b674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b678:	0800b69f 	.word	0x0800b69f
 800b67c:	0800b6ad 	.word	0x0800b6ad
 800b680:	0800b691 	.word	0x0800b691
 800b684:	0800b6d3 	.word	0x0800b6d3
 800b688:	0800b6e1 	.word	0x0800b6e1
 800b68c:	0800b6ef 	.word	0x0800b6ef
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800b690:	2003      	movs	r0, #3
 800b692:	f002 facf 	bl	800dc34 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800b696:	4b1c      	ldr	r3, [pc, #112]	; (800b708 <RadioSetModem+0xb4>)
 800b698:	2200      	movs	r2, #0
 800b69a:	735a      	strb	r2, [r3, #13]
        break;
 800b69c:	e02f      	b.n	800b6fe <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800b69e:	2000      	movs	r0, #0
 800b6a0:	f002 fac8 	bl	800dc34 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800b6a4:	4b18      	ldr	r3, [pc, #96]	; (800b708 <RadioSetModem+0xb4>)
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	735a      	strb	r2, [r3, #13]
        break;
 800b6aa:	e028      	b.n	800b6fe <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800b6ac:	2001      	movs	r0, #1
 800b6ae:	f002 fac1 	bl	800dc34 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800b6b2:	4b15      	ldr	r3, [pc, #84]	; (800b708 <RadioSetModem+0xb4>)
 800b6b4:	7b5a      	ldrb	r2, [r3, #13]
 800b6b6:	4b14      	ldr	r3, [pc, #80]	; (800b708 <RadioSetModem+0xb4>)
 800b6b8:	7b1b      	ldrb	r3, [r3, #12]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d01e      	beq.n	800b6fc <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800b6be:	4b12      	ldr	r3, [pc, #72]	; (800b708 <RadioSetModem+0xb4>)
 800b6c0:	7b1a      	ldrb	r2, [r3, #12]
 800b6c2:	4b11      	ldr	r3, [pc, #68]	; (800b708 <RadioSetModem+0xb4>)
 800b6c4:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800b6c6:	4b10      	ldr	r3, [pc, #64]	; (800b708 <RadioSetModem+0xb4>)
 800b6c8:	7b5b      	ldrb	r3, [r3, #13]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f000 ff80 	bl	800c5d0 <RadioSetPublicNetwork>
        }
        break;
 800b6d0:	e014      	b.n	800b6fc <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800b6d2:	2002      	movs	r0, #2
 800b6d4:	f002 faae 	bl	800dc34 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800b6d8:	4b0b      	ldr	r3, [pc, #44]	; (800b708 <RadioSetModem+0xb4>)
 800b6da:	2200      	movs	r2, #0
 800b6dc:	735a      	strb	r2, [r3, #13]
        break;
 800b6de:	e00e      	b.n	800b6fe <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800b6e0:	2002      	movs	r0, #2
 800b6e2:	f002 faa7 	bl	800dc34 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800b6e6:	4b08      	ldr	r3, [pc, #32]	; (800b708 <RadioSetModem+0xb4>)
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	735a      	strb	r2, [r3, #13]
        break;
 800b6ec:	e007      	b.n	800b6fe <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	f002 faa0 	bl	800dc34 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800b6f4:	4b04      	ldr	r3, [pc, #16]	; (800b708 <RadioSetModem+0xb4>)
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	735a      	strb	r2, [r3, #13]
        break;
 800b6fa:	e000      	b.n	800b6fe <RadioSetModem+0xaa>
        break;
 800b6fc:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800b6fe:	bf00      	nop
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	200018c8 	.word	0x200018c8

0800b70c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f002 fa47 	bl	800dba8 <SUBGRF_SetRfFrequency>
}
 800b71a:	bf00      	nop
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b090      	sub	sp, #64	; 0x40
 800b726:	af0a      	add	r7, sp, #40	; 0x28
 800b728:	60f8      	str	r0, [r7, #12]
 800b72a:	60b9      	str	r1, [r7, #8]
 800b72c:	603b      	str	r3, [r7, #0]
 800b72e:	4613      	mov	r3, r2
 800b730:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800b732:	2301      	movs	r3, #1
 800b734:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800b736:	2300      	movs	r3, #0
 800b738:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800b73a:	2300      	movs	r3, #0
 800b73c:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 800b73e:	f000 fdd6 	bl	800c2ee <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800b742:	2000      	movs	r0, #0
 800b744:	f7ff ff86 	bl	800b654 <RadioSetModem>

    RadioSetChannel( freq );
 800b748:	68f8      	ldr	r0, [r7, #12]
 800b74a:	f7ff ffdf 	bl	800b70c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800b74e:	2301      	movs	r3, #1
 800b750:	9309      	str	r3, [sp, #36]	; 0x24
 800b752:	2300      	movs	r3, #0
 800b754:	9308      	str	r3, [sp, #32]
 800b756:	2300      	movs	r3, #0
 800b758:	9307      	str	r3, [sp, #28]
 800b75a:	2300      	movs	r3, #0
 800b75c:	9306      	str	r3, [sp, #24]
 800b75e:	2300      	movs	r3, #0
 800b760:	9305      	str	r3, [sp, #20]
 800b762:	2300      	movs	r3, #0
 800b764:	9304      	str	r3, [sp, #16]
 800b766:	2300      	movs	r3, #0
 800b768:	9303      	str	r3, [sp, #12]
 800b76a:	2300      	movs	r3, #0
 800b76c:	9302      	str	r3, [sp, #8]
 800b76e:	2303      	movs	r3, #3
 800b770:	9301      	str	r3, [sp, #4]
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	9300      	str	r3, [sp, #0]
 800b776:	2300      	movs	r3, #0
 800b778:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b77c:	68b9      	ldr	r1, [r7, #8]
 800b77e:	2000      	movs	r0, #0
 800b780:	f000 f83c 	bl	800b7fc <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 800b784:	2000      	movs	r0, #0
 800b786:	f000 fdb9 	bl	800c2fc <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800b78a:	f000 ff4f 	bl	800c62c <RadioGetWakeupTime>
 800b78e:	4603      	mov	r3, r0
 800b790:	4618      	mov	r0, r3
 800b792:	f7f5 fcf1 	bl	8001178 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800b796:	f003 fa5b 	bl	800ec50 <UTIL_TIMER_GetCurrentTime>
 800b79a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800b79c:	e00d      	b.n	800b7ba <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800b79e:	2000      	movs	r0, #0
 800b7a0:	f000 fe94 	bl	800c4cc <RadioRssi>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 800b7a8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800b7ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	dd02      	ble.n	800b7ba <RadioIsChannelFree+0x98>
        {
            status = false;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	75fb      	strb	r3, [r7, #23]
            break;
 800b7b8:	e006      	b.n	800b7c8 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800b7ba:	6938      	ldr	r0, [r7, #16]
 800b7bc:	f003 fa5a 	bl	800ec74 <UTIL_TIMER_GetElapsedTime>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d8ea      	bhi.n	800b79e <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 800b7c8:	f000 fd91 	bl	800c2ee <RadioStandby>

    return status;
 800b7cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3718      	adds	r7, #24
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b082      	sub	sp, #8
 800b7da:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	2000      	movs	r0, #0
 800b7e8:	f002 f982 	bl	800daf0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 800b7ec:	f001 ff37 	bl	800d65e <SUBGRF_GetRandom>
 800b7f0:	6078      	str	r0, [r7, #4]

    return rnd;
 800b7f2:	687b      	ldr	r3, [r7, #4]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3708      	adds	r7, #8
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b08a      	sub	sp, #40	; 0x28
 800b800:	af00      	add	r7, sp, #0
 800b802:	60b9      	str	r1, [r7, #8]
 800b804:	607a      	str	r2, [r7, #4]
 800b806:	461a      	mov	r2, r3
 800b808:	4603      	mov	r3, r0
 800b80a:	73fb      	strb	r3, [r7, #15]
 800b80c:	4613      	mov	r3, r2
 800b80e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 800b810:	4ab9      	ldr	r2, [pc, #740]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b812:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800b816:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800b818:	f002 ff5f 	bl	800e6da <RFW_DeInit>
    if( rxContinuous == true )
 800b81c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800b820:	2b00      	cmp	r3, #0
 800b822:	d001      	beq.n	800b828 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 800b824:	2300      	movs	r3, #0
 800b826:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 800b828:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d004      	beq.n	800b83a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800b830:	4ab2      	ldr	r2, [pc, #712]	; (800bafc <RadioSetRxConfig+0x300>)
 800b832:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b836:	7013      	strb	r3, [r2, #0]
 800b838:	e002      	b.n	800b840 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800b83a:	4bb0      	ldr	r3, [pc, #704]	; (800bafc <RadioSetRxConfig+0x300>)
 800b83c:	22ff      	movs	r2, #255	; 0xff
 800b83e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800b840:	7bfb      	ldrb	r3, [r7, #15]
 800b842:	2b05      	cmp	r3, #5
 800b844:	d009      	beq.n	800b85a <RadioSetRxConfig+0x5e>
 800b846:	2b05      	cmp	r3, #5
 800b848:	f300 81ca 	bgt.w	800bbe0 <RadioSetRxConfig+0x3e4>
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f000 80bf 	beq.w	800b9d0 <RadioSetRxConfig+0x1d4>
 800b852:	2b01      	cmp	r3, #1
 800b854:	f000 8124 	beq.w	800baa0 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800b858:	e1c2      	b.n	800bbe0 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800b85a:	2001      	movs	r0, #1
 800b85c:	f002 f844 	bl	800d8e8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800b860:	4ba5      	ldr	r3, [pc, #660]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b862:	2200      	movs	r2, #0
 800b864:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800b868:	4aa3      	ldr	r2, [pc, #652]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800b86e:	4ba2      	ldr	r3, [pc, #648]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b870:	2209      	movs	r2, #9
 800b872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800b876:	4ba0      	ldr	r3, [pc, #640]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b878:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b87c:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800b87e:	68b8      	ldr	r0, [r7, #8]
 800b880:	f002 fe5e 	bl	800e540 <SUBGRF_GetFskBandwidthRegValue>
 800b884:	4603      	mov	r3, r0
 800b886:	461a      	mov	r2, r3
 800b888:	4b9b      	ldr	r3, [pc, #620]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b88a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800b88e:	4b9a      	ldr	r3, [pc, #616]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b890:	2200      	movs	r2, #0
 800b892:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800b894:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b896:	00db      	lsls	r3, r3, #3
 800b898:	b29a      	uxth	r2, r3
 800b89a:	4b97      	ldr	r3, [pc, #604]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b89c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800b89e:	4b96      	ldr	r3, [pc, #600]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800b8a4:	4b94      	ldr	r3, [pc, #592]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b8a6:	2210      	movs	r2, #16
 800b8a8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800b8aa:	4b93      	ldr	r3, [pc, #588]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800b8b0:	4b91      	ldr	r3, [pc, #580]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800b8b6:	4b91      	ldr	r3, [pc, #580]	; (800bafc <RadioSetRxConfig+0x300>)
 800b8b8:	781a      	ldrb	r2, [r3, #0]
 800b8ba:	4b8f      	ldr	r3, [pc, #572]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b8bc:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800b8be:	4b8e      	ldr	r3, [pc, #568]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800b8c4:	4b8c      	ldr	r3, [pc, #560]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800b8ca:	2005      	movs	r0, #5
 800b8cc:	f7ff fec2 	bl	800b654 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b8d0:	488b      	ldr	r0, [pc, #556]	; (800bb00 <RadioSetRxConfig+0x304>)
 800b8d2:	f002 faa3 	bl	800de1c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b8d6:	488b      	ldr	r0, [pc, #556]	; (800bb04 <RadioSetRxConfig+0x308>)
 800b8d8:	f002 fb72 	bl	800dfc0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800b8dc:	4a8a      	ldr	r2, [pc, #552]	; (800bb08 <RadioSetRxConfig+0x30c>)
 800b8de:	f107 031c 	add.w	r3, r7, #28
 800b8e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b8e6:	e883 0003 	stmia.w	r3, {r0, r1}
 800b8ea:	f107 031c 	add.w	r3, r7, #28
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f001 fe33 	bl	800d55a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800b8f4:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b8f8:	f001 fe7e 	bl	800d5f8 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 800b8fc:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800b900:	f000 fe03 	bl	800c50a <RadioRead>
 800b904:	4603      	mov	r3, r0
 800b906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 800b90a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b90e:	f023 0310 	bic.w	r3, r3, #16
 800b912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800b916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b91a:	4619      	mov	r1, r3
 800b91c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800b920:	f000 fde1 	bl	800c4e6 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 800b924:	2104      	movs	r1, #4
 800b926:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800b92a:	f000 fddc 	bl	800c4e6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800b92e:	f640 009b 	movw	r0, #2203	; 0x89b
 800b932:	f000 fdea 	bl	800c50a <RadioRead>
 800b936:	4603      	mov	r3, r0
 800b938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800b93c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b940:	f023 031c 	bic.w	r3, r3, #28
 800b944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800b948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b94c:	f043 0308 	orr.w	r3, r3, #8
 800b950:	b2db      	uxtb	r3, r3
 800b952:	4619      	mov	r1, r3
 800b954:	f640 009b 	movw	r0, #2203	; 0x89b
 800b958:	f000 fdc5 	bl	800c4e6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 800b95c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800b960:	f000 fdd3 	bl	800c50a <RadioRead>
 800b964:	4603      	mov	r3, r0
 800b966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800b96a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b96e:	f023 0318 	bic.w	r3, r3, #24
 800b972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800b976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b97a:	f043 0318 	orr.w	r3, r3, #24
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	4619      	mov	r1, r3
 800b982:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800b986:	f000 fdae 	bl	800c4e6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800b98a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800b98e:	f000 fdbc 	bl	800c50a <RadioRead>
 800b992:	4603      	mov	r3, r0
 800b994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800b998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b99c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 800b9a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9a8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800b9b4:	f000 fd97 	bl	800c4e6 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800b9b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b9ba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800b9be:	fb02 f303 	mul.w	r3, r2, r3
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9ca:	4a4b      	ldr	r2, [pc, #300]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b9cc:	6093      	str	r3, [r2, #8]
            break;
 800b9ce:	e108      	b.n	800bbe2 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	f001 ff89 	bl	800d8e8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800b9d6:	4b48      	ldr	r3, [pc, #288]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800b9de:	4a46      	ldr	r2, [pc, #280]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800b9e4:	4b44      	ldr	r3, [pc, #272]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b9e6:	220b      	movs	r2, #11
 800b9e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800b9ec:	68b8      	ldr	r0, [r7, #8]
 800b9ee:	f002 fda7 	bl	800e540 <SUBGRF_GetFskBandwidthRegValue>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	4b40      	ldr	r3, [pc, #256]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b9f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800b9fc:	4b3e      	ldr	r3, [pc, #248]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800ba02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ba04:	00db      	lsls	r3, r3, #3
 800ba06:	b29a      	uxth	r2, r3
 800ba08:	4b3b      	ldr	r3, [pc, #236]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800ba0a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800ba0c:	4b3a      	ldr	r3, [pc, #232]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800ba0e:	2204      	movs	r2, #4
 800ba10:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800ba12:	4b39      	ldr	r3, [pc, #228]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800ba14:	2218      	movs	r2, #24
 800ba16:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800ba18:	4b37      	ldr	r3, [pc, #220]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800ba1e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ba22:	f083 0301 	eor.w	r3, r3, #1
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	461a      	mov	r2, r3
 800ba2a:	4b33      	ldr	r3, [pc, #204]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800ba2c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800ba2e:	4b33      	ldr	r3, [pc, #204]	; (800bafc <RadioSetRxConfig+0x300>)
 800ba30:	781a      	ldrb	r2, [r3, #0]
 800ba32:	4b31      	ldr	r3, [pc, #196]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800ba34:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800ba36:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d003      	beq.n	800ba46 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800ba3e:	4b2e      	ldr	r3, [pc, #184]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800ba40:	22f2      	movs	r2, #242	; 0xf2
 800ba42:	75da      	strb	r2, [r3, #23]
 800ba44:	e002      	b.n	800ba4c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800ba46:	4b2c      	ldr	r3, [pc, #176]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800ba48:	2201      	movs	r2, #1
 800ba4a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800ba4c:	4b2a      	ldr	r3, [pc, #168]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800ba4e:	2201      	movs	r2, #1
 800ba50:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800ba52:	f000 fc4c 	bl	800c2ee <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800ba56:	2000      	movs	r0, #0
 800ba58:	f7ff fdfc 	bl	800b654 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ba5c:	4828      	ldr	r0, [pc, #160]	; (800bb00 <RadioSetRxConfig+0x304>)
 800ba5e:	f002 f9dd 	bl	800de1c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ba62:	4828      	ldr	r0, [pc, #160]	; (800bb04 <RadioSetRxConfig+0x308>)
 800ba64:	f002 faac 	bl	800dfc0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800ba68:	4a28      	ldr	r2, [pc, #160]	; (800bb0c <RadioSetRxConfig+0x310>)
 800ba6a:	f107 0314 	add.w	r3, r7, #20
 800ba6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ba72:	e883 0003 	stmia.w	r3, {r0, r1}
 800ba76:	f107 0314 	add.w	r3, r7, #20
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f001 fd6d 	bl	800d55a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800ba80:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ba84:	f001 fdb8 	bl	800d5f8 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800ba88:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ba8a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800ba8e:	fb02 f303 	mul.w	r3, r2, r3
 800ba92:	461a      	mov	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba9a:	4a17      	ldr	r2, [pc, #92]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800ba9c:	6093      	str	r3, [r2, #8]
            break;
 800ba9e:	e0a0      	b.n	800bbe2 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800baa0:	2000      	movs	r0, #0
 800baa2:	f001 ff21 	bl	800d8e8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800baa6:	4b14      	ldr	r3, [pc, #80]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800baa8:	2201      	movs	r2, #1
 800baaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	b2da      	uxtb	r2, r3
 800bab2:	4b11      	ldr	r3, [pc, #68]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800bab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800bab8:	4a15      	ldr	r2, [pc, #84]	; (800bb10 <RadioSetRxConfig+0x314>)
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	4413      	add	r3, r2
 800babe:	781a      	ldrb	r2, [r3, #0]
 800bac0:	4b0d      	ldr	r3, [pc, #52]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800bac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800bac6:	4a0c      	ldr	r2, [pc, #48]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800bac8:	7bbb      	ldrb	r3, [r7, #14]
 800baca:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d105      	bne.n	800bae0 <RadioSetRxConfig+0x2e4>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2b0b      	cmp	r3, #11
 800bad8:	d008      	beq.n	800baec <RadioSetRxConfig+0x2f0>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2b0c      	cmp	r3, #12
 800bade:	d005      	beq.n	800baec <RadioSetRxConfig+0x2f0>
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d116      	bne.n	800bb14 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2b0c      	cmp	r3, #12
 800baea:	d113      	bne.n	800bb14 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800baec:	4b02      	ldr	r3, [pc, #8]	; (800baf8 <RadioSetRxConfig+0x2fc>)
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800baf4:	e012      	b.n	800bb1c <RadioSetRxConfig+0x320>
 800baf6:	bf00      	nop
 800baf8:	200018c8 	.word	0x200018c8
 800bafc:	200000f8 	.word	0x200000f8
 800bb00:	20001900 	.word	0x20001900
 800bb04:	200018d6 	.word	0x200018d6
 800bb08:	0800ef7c 	.word	0x0800ef7c
 800bb0c:	0800ef84 	.word	0x0800ef84
 800bb10:	0800f474 	.word	0x0800f474
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800bb14:	4b35      	ldr	r3, [pc, #212]	; (800bbec <RadioSetRxConfig+0x3f0>)
 800bb16:	2200      	movs	r2, #0
 800bb18:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800bb1c:	4b33      	ldr	r3, [pc, #204]	; (800bbec <RadioSetRxConfig+0x3f0>)
 800bb1e:	2201      	movs	r2, #1
 800bb20:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800bb22:	4b32      	ldr	r3, [pc, #200]	; (800bbec <RadioSetRxConfig+0x3f0>)
 800bb24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bb28:	2b05      	cmp	r3, #5
 800bb2a:	d004      	beq.n	800bb36 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800bb2c:	4b2f      	ldr	r3, [pc, #188]	; (800bbec <RadioSetRxConfig+0x3f0>)
 800bb2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800bb32:	2b06      	cmp	r3, #6
 800bb34:	d10a      	bne.n	800bb4c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800bb36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bb38:	2b0b      	cmp	r3, #11
 800bb3a:	d803      	bhi.n	800bb44 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800bb3c:	4b2b      	ldr	r3, [pc, #172]	; (800bbec <RadioSetRxConfig+0x3f0>)
 800bb3e:	220c      	movs	r2, #12
 800bb40:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800bb42:	e006      	b.n	800bb52 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800bb44:	4a29      	ldr	r2, [pc, #164]	; (800bbec <RadioSetRxConfig+0x3f0>)
 800bb46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bb48:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800bb4a:	e002      	b.n	800bb52 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800bb4c:	4a27      	ldr	r2, [pc, #156]	; (800bbec <RadioSetRxConfig+0x3f0>)
 800bb4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bb50:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800bb52:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800bb56:	4b25      	ldr	r3, [pc, #148]	; (800bbec <RadioSetRxConfig+0x3f0>)
 800bb58:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800bb5a:	4b25      	ldr	r3, [pc, #148]	; (800bbf0 <RadioSetRxConfig+0x3f4>)
 800bb5c:	781a      	ldrb	r2, [r3, #0]
 800bb5e:	4b23      	ldr	r3, [pc, #140]	; (800bbec <RadioSetRxConfig+0x3f0>)
 800bb60:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800bb62:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800bb66:	4b21      	ldr	r3, [pc, #132]	; (800bbec <RadioSetRxConfig+0x3f0>)
 800bb68:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800bb6c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800bb70:	4b1e      	ldr	r3, [pc, #120]	; (800bbec <RadioSetRxConfig+0x3f0>)
 800bb72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800bb76:	f000 fbba 	bl	800c2ee <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800bb7a:	2001      	movs	r0, #1
 800bb7c:	f7ff fd6a 	bl	800b654 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800bb80:	481c      	ldr	r0, [pc, #112]	; (800bbf4 <RadioSetRxConfig+0x3f8>)
 800bb82:	f002 f94b 	bl	800de1c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800bb86:	481c      	ldr	r0, [pc, #112]	; (800bbf8 <RadioSetRxConfig+0x3fc>)
 800bb88:	f002 fa1a 	bl	800dfc0 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800bb8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	4618      	mov	r0, r3
 800bb92:	f001 feb8 	bl	800d906 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800bb96:	4b15      	ldr	r3, [pc, #84]	; (800bbec <RadioSetRxConfig+0x3f0>)
 800bb98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d10d      	bne.n	800bbbc <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800bba0:	f240 7036 	movw	r0, #1846	; 0x736
 800bba4:	f002 fb68 	bl	800e278 <SUBGRF_ReadRegister>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	f023 0304 	bic.w	r3, r3, #4
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	f240 7036 	movw	r0, #1846	; 0x736
 800bbb6:	f002 fb4b 	bl	800e250 <SUBGRF_WriteRegister>
 800bbba:	e00c      	b.n	800bbd6 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800bbbc:	f240 7036 	movw	r0, #1846	; 0x736
 800bbc0:	f002 fb5a 	bl	800e278 <SUBGRF_ReadRegister>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	f043 0304 	orr.w	r3, r3, #4
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	4619      	mov	r1, r3
 800bbce:	f240 7036 	movw	r0, #1846	; 0x736
 800bbd2:	f002 fb3d 	bl	800e250 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800bbd6:	4b05      	ldr	r3, [pc, #20]	; (800bbec <RadioSetRxConfig+0x3f0>)
 800bbd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbdc:	609a      	str	r2, [r3, #8]
            break;
 800bbde:	e000      	b.n	800bbe2 <RadioSetRxConfig+0x3e6>
            break;
 800bbe0:	bf00      	nop
    }
}
 800bbe2:	bf00      	nop
 800bbe4:	3728      	adds	r7, #40	; 0x28
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	200018c8 	.word	0x200018c8
 800bbf0:	200000f8 	.word	0x200000f8
 800bbf4:	20001900 	.word	0x20001900
 800bbf8:	200018d6 	.word	0x200018d6

0800bbfc <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b086      	sub	sp, #24
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60ba      	str	r2, [r7, #8]
 800bc04:	607b      	str	r3, [r7, #4]
 800bc06:	4603      	mov	r3, r0
 800bc08:	73fb      	strb	r3, [r7, #15]
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800bc0e:	f002 fd64 	bl	800e6da <RFW_DeInit>
    switch( modem )
 800bc12:	7bfb      	ldrb	r3, [r7, #15]
 800bc14:	2b04      	cmp	r3, #4
 800bc16:	f000 80c7 	beq.w	800bda8 <RadioSetTxConfig+0x1ac>
 800bc1a:	2b04      	cmp	r3, #4
 800bc1c:	f300 80d6 	bgt.w	800bdcc <RadioSetTxConfig+0x1d0>
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d002      	beq.n	800bc2a <RadioSetTxConfig+0x2e>
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d059      	beq.n	800bcdc <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800bc28:	e0d0      	b.n	800bdcc <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800bc2a:	4b74      	ldr	r3, [pc, #464]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800bc32:	4a72      	ldr	r2, [pc, #456]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bc34:	6a3b      	ldr	r3, [r7, #32]
 800bc36:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800bc38:	4b70      	ldr	r3, [pc, #448]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bc3a:	220b      	movs	r2, #11
 800bc3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f002 fc7d 	bl	800e540 <SUBGRF_GetFskBandwidthRegValue>
 800bc46:	4603      	mov	r3, r0
 800bc48:	461a      	mov	r2, r3
 800bc4a:	4b6c      	ldr	r3, [pc, #432]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bc4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800bc50:	4a6a      	ldr	r2, [pc, #424]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800bc56:	4b69      	ldr	r3, [pc, #420]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bc58:	2200      	movs	r2, #0
 800bc5a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800bc5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bc5e:	00db      	lsls	r3, r3, #3
 800bc60:	b29a      	uxth	r2, r3
 800bc62:	4b66      	ldr	r3, [pc, #408]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bc64:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800bc66:	4b65      	ldr	r3, [pc, #404]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bc68:	2204      	movs	r2, #4
 800bc6a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800bc6c:	4b63      	ldr	r3, [pc, #396]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bc6e:	2218      	movs	r2, #24
 800bc70:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800bc72:	4b62      	ldr	r3, [pc, #392]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bc74:	2200      	movs	r2, #0
 800bc76:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800bc78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bc7c:	f083 0301 	eor.w	r3, r3, #1
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	461a      	mov	r2, r3
 800bc84:	4b5d      	ldr	r3, [pc, #372]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bc86:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 800bc88:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d003      	beq.n	800bc98 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800bc90:	4b5a      	ldr	r3, [pc, #360]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bc92:	22f2      	movs	r2, #242	; 0xf2
 800bc94:	75da      	strb	r2, [r3, #23]
 800bc96:	e002      	b.n	800bc9e <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800bc98:	4b58      	ldr	r3, [pc, #352]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800bc9e:	4b57      	ldr	r3, [pc, #348]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bca0:	2201      	movs	r2, #1
 800bca2:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800bca4:	f000 fb23 	bl	800c2ee <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 800bca8:	2000      	movs	r0, #0
 800bcaa:	f7ff fcd3 	bl	800b654 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800bcae:	4854      	ldr	r0, [pc, #336]	; (800be00 <RadioSetTxConfig+0x204>)
 800bcb0:	f002 f8b4 	bl	800de1c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800bcb4:	4853      	ldr	r0, [pc, #332]	; (800be04 <RadioSetTxConfig+0x208>)
 800bcb6:	f002 f983 	bl	800dfc0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800bcba:	4a53      	ldr	r2, [pc, #332]	; (800be08 <RadioSetTxConfig+0x20c>)
 800bcbc:	f107 0310 	add.w	r3, r7, #16
 800bcc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bcc4:	e883 0003 	stmia.w	r3, {r0, r1}
 800bcc8:	f107 0310 	add.w	r3, r7, #16
 800bccc:	4618      	mov	r0, r3
 800bcce:	f001 fc44 	bl	800d55a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800bcd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bcd6:	f001 fc8f 	bl	800d5f8 <SUBGRF_SetWhiteningSeed>
            break;
 800bcda:	e078      	b.n	800bdce <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800bcdc:	4b47      	ldr	r3, [pc, #284]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bcde:	2201      	movs	r2, #1
 800bce0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800bce4:	6a3b      	ldr	r3, [r7, #32]
 800bce6:	b2da      	uxtb	r2, r3
 800bce8:	4b44      	ldr	r3, [pc, #272]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bcea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800bcee:	4a47      	ldr	r2, [pc, #284]	; (800be0c <RadioSetTxConfig+0x210>)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	781a      	ldrb	r2, [r3, #0]
 800bcf6:	4b41      	ldr	r3, [pc, #260]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bcf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800bcfc:	4a3f      	ldr	r2, [pc, #252]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bcfe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd02:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d105      	bne.n	800bd18 <RadioSetTxConfig+0x11c>
 800bd0c:	6a3b      	ldr	r3, [r7, #32]
 800bd0e:	2b0b      	cmp	r3, #11
 800bd10:	d008      	beq.n	800bd24 <RadioSetTxConfig+0x128>
 800bd12:	6a3b      	ldr	r3, [r7, #32]
 800bd14:	2b0c      	cmp	r3, #12
 800bd16:	d005      	beq.n	800bd24 <RadioSetTxConfig+0x128>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d107      	bne.n	800bd2e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800bd1e:	6a3b      	ldr	r3, [r7, #32]
 800bd20:	2b0c      	cmp	r3, #12
 800bd22:	d104      	bne.n	800bd2e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800bd24:	4b35      	ldr	r3, [pc, #212]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bd26:	2201      	movs	r2, #1
 800bd28:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800bd2c:	e003      	b.n	800bd36 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800bd2e:	4b33      	ldr	r3, [pc, #204]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bd30:	2200      	movs	r2, #0
 800bd32:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800bd36:	4b31      	ldr	r3, [pc, #196]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bd38:	2201      	movs	r2, #1
 800bd3a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800bd3c:	4b2f      	ldr	r3, [pc, #188]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bd3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bd42:	2b05      	cmp	r3, #5
 800bd44:	d004      	beq.n	800bd50 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800bd46:	4b2d      	ldr	r3, [pc, #180]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bd48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800bd4c:	2b06      	cmp	r3, #6
 800bd4e:	d10a      	bne.n	800bd66 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 800bd50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bd52:	2b0b      	cmp	r3, #11
 800bd54:	d803      	bhi.n	800bd5e <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800bd56:	4b29      	ldr	r3, [pc, #164]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bd58:	220c      	movs	r2, #12
 800bd5a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800bd5c:	e006      	b.n	800bd6c <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800bd5e:	4a27      	ldr	r2, [pc, #156]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bd60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bd62:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800bd64:	e002      	b.n	800bd6c <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800bd66:	4a25      	ldr	r2, [pc, #148]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bd68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bd6a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800bd6c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800bd70:	4b22      	ldr	r3, [pc, #136]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bd72:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800bd74:	4b26      	ldr	r3, [pc, #152]	; (800be10 <RadioSetTxConfig+0x214>)
 800bd76:	781a      	ldrb	r2, [r3, #0]
 800bd78:	4b20      	ldr	r3, [pc, #128]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bd7a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800bd7c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800bd80:	4b1e      	ldr	r3, [pc, #120]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bd82:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800bd86:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800bd8a:	4b1c      	ldr	r3, [pc, #112]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bd8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800bd90:	f000 faad 	bl	800c2ee <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800bd94:	2001      	movs	r0, #1
 800bd96:	f7ff fc5d 	bl	800b654 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800bd9a:	4819      	ldr	r0, [pc, #100]	; (800be00 <RadioSetTxConfig+0x204>)
 800bd9c:	f002 f83e 	bl	800de1c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800bda0:	4818      	ldr	r0, [pc, #96]	; (800be04 <RadioSetTxConfig+0x208>)
 800bda2:	f002 f90d 	bl	800dfc0 <SUBGRF_SetPacketParams>
            break;
 800bda6:	e012      	b.n	800bdce <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800bda8:	2004      	movs	r0, #4
 800bdaa:	f7ff fc53 	bl	800b654 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800bdae:	4b13      	ldr	r3, [pc, #76]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bdb0:	2202      	movs	r2, #2
 800bdb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800bdb6:	4a11      	ldr	r2, [pc, #68]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bdb8:	6a3b      	ldr	r3, [r7, #32]
 800bdba:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800bdbc:	4b0f      	ldr	r3, [pc, #60]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bdbe:	2216      	movs	r2, #22
 800bdc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800bdc4:	480e      	ldr	r0, [pc, #56]	; (800be00 <RadioSetTxConfig+0x204>)
 800bdc6:	f002 f829 	bl	800de1c <SUBGRF_SetModulationParams>
            break;
 800bdca:	e000      	b.n	800bdce <RadioSetTxConfig+0x1d2>
            break;
 800bdcc:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800bdce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f002 fb58 	bl	800e488 <SUBGRF_SetRfTxPower>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	461a      	mov	r2, r3
 800bddc:	4b07      	ldr	r3, [pc, #28]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bdde:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800bde2:	4b06      	ldr	r3, [pc, #24]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bde4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800bde8:	4618      	mov	r0, r3
 800bdea:	f002 fc8a 	bl	800e702 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800bdee:	4a03      	ldr	r2, [pc, #12]	; (800bdfc <RadioSetTxConfig+0x200>)
 800bdf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdf2:	6053      	str	r3, [r2, #4]
}
 800bdf4:	bf00      	nop
 800bdf6:	3718      	adds	r7, #24
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	200018c8 	.word	0x200018c8
 800be00:	20001900 	.word	0x20001900
 800be04:	200018d6 	.word	0x200018d6
 800be08:	0800ef84 	.word	0x0800ef84
 800be0c:	0800f474 	.word	0x0800f474
 800be10:	200000f8 	.word	0x200000f8

0800be14 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
    return true;
 800be1c:	2301      	movs	r3, #1
}
 800be1e:	4618      	mov	r0, r3
 800be20:	370c      	adds	r7, #12
 800be22:	46bd      	mov	sp, r7
 800be24:	bc80      	pop	{r7}
 800be26:	4770      	bx	lr

0800be28 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800be28:	b480      	push	{r7}
 800be2a:	b085      	sub	sp, #20
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	4603      	mov	r3, r0
 800be30:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800be32:	2300      	movs	r3, #0
 800be34:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800be36:	79fb      	ldrb	r3, [r7, #7]
 800be38:	2b0a      	cmp	r3, #10
 800be3a:	d83e      	bhi.n	800beba <RadioGetLoRaBandwidthInHz+0x92>
 800be3c:	a201      	add	r2, pc, #4	; (adr r2, 800be44 <RadioGetLoRaBandwidthInHz+0x1c>)
 800be3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be42:	bf00      	nop
 800be44:	0800be71 	.word	0x0800be71
 800be48:	0800be81 	.word	0x0800be81
 800be4c:	0800be91 	.word	0x0800be91
 800be50:	0800bea1 	.word	0x0800bea1
 800be54:	0800bea9 	.word	0x0800bea9
 800be58:	0800beaf 	.word	0x0800beaf
 800be5c:	0800beb5 	.word	0x0800beb5
 800be60:	0800bebb 	.word	0x0800bebb
 800be64:	0800be79 	.word	0x0800be79
 800be68:	0800be89 	.word	0x0800be89
 800be6c:	0800be99 	.word	0x0800be99
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 800be70:	f641 6384 	movw	r3, #7812	; 0x1e84
 800be74:	60fb      	str	r3, [r7, #12]
        break;
 800be76:	e020      	b.n	800beba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800be78:	f642 03b1 	movw	r3, #10417	; 0x28b1
 800be7c:	60fb      	str	r3, [r7, #12]
        break;
 800be7e:	e01c      	b.n	800beba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800be80:	f643 5309 	movw	r3, #15625	; 0x3d09
 800be84:	60fb      	str	r3, [r7, #12]
        break;
 800be86:	e018      	b.n	800beba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800be88:	f245 1361 	movw	r3, #20833	; 0x5161
 800be8c:	60fb      	str	r3, [r7, #12]
        break;
 800be8e:	e014      	b.n	800beba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800be90:	f647 2312 	movw	r3, #31250	; 0x7a12
 800be94:	60fb      	str	r3, [r7, #12]
        break;
 800be96:	e010      	b.n	800beba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800be98:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 800be9c:	60fb      	str	r3, [r7, #12]
        break;
 800be9e:	e00c      	b.n	800beba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800bea0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800bea4:	60fb      	str	r3, [r7, #12]
        break;
 800bea6:	e008      	b.n	800beba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800bea8:	4b07      	ldr	r3, [pc, #28]	; (800bec8 <RadioGetLoRaBandwidthInHz+0xa0>)
 800beaa:	60fb      	str	r3, [r7, #12]
        break;
 800beac:	e005      	b.n	800beba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800beae:	4b07      	ldr	r3, [pc, #28]	; (800becc <RadioGetLoRaBandwidthInHz+0xa4>)
 800beb0:	60fb      	str	r3, [r7, #12]
        break;
 800beb2:	e002      	b.n	800beba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800beb4:	4b06      	ldr	r3, [pc, #24]	; (800bed0 <RadioGetLoRaBandwidthInHz+0xa8>)
 800beb6:	60fb      	str	r3, [r7, #12]
        break;
 800beb8:	bf00      	nop
    }

    return bandwidthInHz;
 800beba:	68fb      	ldr	r3, [r7, #12]
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3714      	adds	r7, #20
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bc80      	pop	{r7}
 800bec4:	4770      	bx	lr
 800bec6:	bf00      	nop
 800bec8:	0001e848 	.word	0x0001e848
 800becc:	0003d090 	.word	0x0003d090
 800bed0:	0007a120 	.word	0x0007a120

0800bed4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	4608      	mov	r0, r1
 800bede:	4611      	mov	r1, r2
 800bee0:	461a      	mov	r2, r3
 800bee2:	4603      	mov	r3, r0
 800bee4:	70fb      	strb	r3, [r7, #3]
 800bee6:	460b      	mov	r3, r1
 800bee8:	803b      	strh	r3, [r7, #0]
 800beea:	4613      	mov	r3, r2
 800beec:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800beee:	883b      	ldrh	r3, [r7, #0]
 800bef0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800bef2:	78ba      	ldrb	r2, [r7, #2]
 800bef4:	f082 0201 	eor.w	r2, r2, #1
 800bef8:	b2d2      	uxtb	r2, r2
 800befa:	2a00      	cmp	r2, #0
 800befc:	d001      	beq.n	800bf02 <RadioGetGfskTimeOnAirNumerator+0x2e>
 800befe:	2208      	movs	r2, #8
 800bf00:	e000      	b.n	800bf04 <RadioGetGfskTimeOnAirNumerator+0x30>
 800bf02:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 800bf04:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800bf06:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800bf0a:	7c3b      	ldrb	r3, [r7, #16]
 800bf0c:	7d39      	ldrb	r1, [r7, #20]
 800bf0e:	2900      	cmp	r1, #0
 800bf10:	d001      	beq.n	800bf16 <RadioGetGfskTimeOnAirNumerator+0x42>
 800bf12:	2102      	movs	r1, #2
 800bf14:	e000      	b.n	800bf18 <RadioGetGfskTimeOnAirNumerator+0x44>
 800bf16:	2100      	movs	r1, #0
 800bf18:	440b      	add	r3, r1
 800bf1a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800bf1c:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	370c      	adds	r7, #12
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bc80      	pop	{r7}
 800bf26:	4770      	bx	lr

0800bf28 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b08b      	sub	sp, #44	; 0x2c
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	4611      	mov	r1, r2
 800bf34:	461a      	mov	r2, r3
 800bf36:	460b      	mov	r3, r1
 800bf38:	71fb      	strb	r3, [r7, #7]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800bf3e:	79fb      	ldrb	r3, [r7, #7]
 800bf40:	3304      	adds	r3, #4
 800bf42:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800bf44:	2300      	movs	r3, #0
 800bf46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	2b05      	cmp	r3, #5
 800bf4e:	d002      	beq.n	800bf56 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	2b06      	cmp	r3, #6
 800bf54:	d104      	bne.n	800bf60 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800bf56:	88bb      	ldrh	r3, [r7, #4]
 800bf58:	2b0b      	cmp	r3, #11
 800bf5a:	d801      	bhi.n	800bf60 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 800bf5c:	230c      	movs	r3, #12
 800bf5e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d105      	bne.n	800bf72 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	2b0b      	cmp	r3, #11
 800bf6a:	d008      	beq.n	800bf7e <RadioGetLoRaTimeOnAirNumerator+0x56>
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	2b0c      	cmp	r3, #12
 800bf70:	d005      	beq.n	800bf7e <RadioGetLoRaTimeOnAirNumerator+0x56>
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d105      	bne.n	800bf84 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	2b0c      	cmp	r3, #12
 800bf7c:	d102      	bne.n	800bf84 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800bf84:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800bf88:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800bf8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bf8e:	2a00      	cmp	r2, #0
 800bf90:	d001      	beq.n	800bf96 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800bf92:	2210      	movs	r2, #16
 800bf94:	e000      	b.n	800bf98 <RadioGetLoRaTimeOnAirNumerator+0x70>
 800bf96:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800bf98:	4413      	add	r3, r2
 800bf9a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 800bfa0:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800bfa2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800bfa6:	2a00      	cmp	r2, #0
 800bfa8:	d001      	beq.n	800bfae <RadioGetLoRaTimeOnAirNumerator+0x86>
 800bfaa:	2200      	movs	r2, #0
 800bfac:	e000      	b.n	800bfb0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 800bfae:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 800bfb0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800bfb2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	2b06      	cmp	r3, #6
 800bfb8:	d803      	bhi.n	800bfc2 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	623b      	str	r3, [r7, #32]
 800bfc0:	e00e      	b.n	800bfe0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	3308      	adds	r3, #8
 800bfc6:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800bfc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d004      	beq.n	800bfda <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	3b02      	subs	r3, #2
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	623b      	str	r3, [r7, #32]
 800bfd8:	e002      	b.n	800bfe0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	da01      	bge.n	800bfea <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800bfea:	69fa      	ldr	r2, [r7, #28]
 800bfec:	6a3b      	ldr	r3, [r7, #32]
 800bfee:	4413      	add	r3, r2
 800bff0:	1e5a      	subs	r2, r3, #1
 800bff2:	6a3b      	ldr	r3, [r7, #32]
 800bff4:	fb92 f3f3 	sdiv	r3, r2, r3
 800bff8:	697a      	ldr	r2, [r7, #20]
 800bffa:	fb03 f202 	mul.w	r2, r3, r2
 800bffe:	88bb      	ldrh	r3, [r7, #4]
 800c000:	4413      	add	r3, r2
    int32_t intermediate =
 800c002:	330c      	adds	r3, #12
 800c004:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	2b06      	cmp	r3, #6
 800c00a:	d802      	bhi.n	800c012 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	3302      	adds	r3, #2
 800c010:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	1c5a      	adds	r2, r3, #1
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	3b02      	subs	r3, #2
 800c01c:	fa02 f303 	lsl.w	r3, r2, r3
}
 800c020:	4618      	mov	r0, r3
 800c022:	372c      	adds	r7, #44	; 0x2c
 800c024:	46bd      	mov	sp, r7
 800c026:	bc80      	pop	{r7}
 800c028:	4770      	bx	lr
	...

0800c02c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b08a      	sub	sp, #40	; 0x28
 800c030:	af04      	add	r7, sp, #16
 800c032:	60b9      	str	r1, [r7, #8]
 800c034:	607a      	str	r2, [r7, #4]
 800c036:	461a      	mov	r2, r3
 800c038:	4603      	mov	r3, r0
 800c03a:	73fb      	strb	r3, [r7, #15]
 800c03c:	4613      	mov	r3, r2
 800c03e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 800c040:	2300      	movs	r3, #0
 800c042:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800c044:	2301      	movs	r3, #1
 800c046:	613b      	str	r3, [r7, #16]

    switch( modem )
 800c048:	7bfb      	ldrb	r3, [r7, #15]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d002      	beq.n	800c054 <RadioTimeOnAir+0x28>
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d017      	beq.n	800c082 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800c052:	e035      	b.n	800c0c0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800c054:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800c058:	8c3a      	ldrh	r2, [r7, #32]
 800c05a:	7bb9      	ldrb	r1, [r7, #14]
 800c05c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c060:	9301      	str	r3, [sp, #4]
 800c062:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	4603      	mov	r3, r0
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f7ff ff32 	bl	800bed4 <RadioGetGfskTimeOnAirNumerator>
 800c070:	4603      	mov	r3, r0
 800c072:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c076:	fb02 f303 	mul.w	r3, r2, r3
 800c07a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	613b      	str	r3, [r7, #16]
        break;
 800c080:	e01e      	b.n	800c0c0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800c082:	8c39      	ldrh	r1, [r7, #32]
 800c084:	7bba      	ldrb	r2, [r7, #14]
 800c086:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c08a:	9302      	str	r3, [sp, #8]
 800c08c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c090:	9301      	str	r3, [sp, #4]
 800c092:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	460b      	mov	r3, r1
 800c09a:	6879      	ldr	r1, [r7, #4]
 800c09c:	68b8      	ldr	r0, [r7, #8]
 800c09e:	f7ff ff43 	bl	800bf28 <RadioGetLoRaTimeOnAirNumerator>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c0a8:	fb02 f303 	mul.w	r3, r2, r3
 800c0ac:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800c0ae:	4a0a      	ldr	r2, [pc, #40]	; (800c0d8 <RadioTimeOnAir+0xac>)
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7ff feb6 	bl	800be28 <RadioGetLoRaBandwidthInHz>
 800c0bc:	6138      	str	r0, [r7, #16]
        break;
 800c0be:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 800c0c0:	697a      	ldr	r2, [r7, #20]
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	1e5a      	subs	r2, r3, #1
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3718      	adds	r7, #24
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	bf00      	nop
 800c0d8:	0800f474 	.word	0x0800f474

0800c0dc <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f240 2101 	movw	r1, #513	; 0x201
 800c0f0:	f240 2001 	movw	r0, #513	; 0x201
 800c0f4:	f001 fcfc 	bl	800daf0 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800c0f8:	4b6f      	ldr	r3, [pc, #444]	; (800c2b8 <RadioSend+0x1dc>)
 800c0fa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800c0fe:	2101      	movs	r1, #1
 800c100:	4618      	mov	r0, r3
 800c102:	f002 f999 	bl	800e438 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800c106:	4b6c      	ldr	r3, [pc, #432]	; (800c2b8 <RadioSend+0x1dc>)
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d112      	bne.n	800c134 <RadioSend+0x58>
 800c10e:	4b6a      	ldr	r3, [pc, #424]	; (800c2b8 <RadioSend+0x1dc>)
 800c110:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c114:	2b06      	cmp	r3, #6
 800c116:	d10d      	bne.n	800c134 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800c118:	f640 0089 	movw	r0, #2185	; 0x889
 800c11c:	f002 f8ac 	bl	800e278 <SUBGRF_ReadRegister>
 800c120:	4603      	mov	r3, r0
 800c122:	f023 0304 	bic.w	r3, r3, #4
 800c126:	b2db      	uxtb	r3, r3
 800c128:	4619      	mov	r1, r3
 800c12a:	f640 0089 	movw	r0, #2185	; 0x889
 800c12e:	f002 f88f 	bl	800e250 <SUBGRF_WriteRegister>
 800c132:	e00c      	b.n	800c14e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800c134:	f640 0089 	movw	r0, #2185	; 0x889
 800c138:	f002 f89e 	bl	800e278 <SUBGRF_ReadRegister>
 800c13c:	4603      	mov	r3, r0
 800c13e:	f043 0304 	orr.w	r3, r3, #4
 800c142:	b2db      	uxtb	r3, r3
 800c144:	4619      	mov	r1, r3
 800c146:	f640 0089 	movw	r0, #2185	; 0x889
 800c14a:	f002 f881 	bl	800e250 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 800c14e:	4b5a      	ldr	r3, [pc, #360]	; (800c2b8 <RadioSend+0x1dc>)
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	2b04      	cmp	r3, #4
 800c154:	f200 80a1 	bhi.w	800c29a <RadioSend+0x1be>
 800c158:	a201      	add	r2, pc, #4	; (adr r2, 800c160 <RadioSend+0x84>)
 800c15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c15e:	bf00      	nop
 800c160:	0800c18f 	.word	0x0800c18f
 800c164:	0800c175 	.word	0x0800c175
 800c168:	0800c18f 	.word	0x0800c18f
 800c16c:	0800c1e3 	.word	0x0800c1e3
 800c170:	0800c203 	.word	0x0800c203
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800c174:	4a50      	ldr	r2, [pc, #320]	; (800c2b8 <RadioSend+0x1dc>)
 800c176:	78fb      	ldrb	r3, [r7, #3]
 800c178:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c17a:	4850      	ldr	r0, [pc, #320]	; (800c2bc <RadioSend+0x1e0>)
 800c17c:	f001 ff20 	bl	800dfc0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800c180:	78fb      	ldrb	r3, [r7, #3]
 800c182:	2200      	movs	r2, #0
 800c184:	4619      	mov	r1, r3
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f001 f9d4 	bl	800d534 <SUBGRF_SendPayload>
            break;
 800c18c:	e086      	b.n	800c29c <RadioSend+0x1c0>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 800c18e:	f002 faaa 	bl	800e6e6 <RFW_Is_Init>
 800c192:	4603      	mov	r3, r0
 800c194:	2b01      	cmp	r3, #1
 800c196:	d117      	bne.n	800c1c8 <RadioSend+0xec>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800c198:	f107 020d 	add.w	r2, r7, #13
 800c19c:	78fb      	ldrb	r3, [r7, #3]
 800c19e:	4619      	mov	r1, r3
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f002 fab8 	bl	800e716 <RFW_TransmitInit>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f040 8081 	bne.w	800c2b0 <RadioSend+0x1d4>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800c1ae:	7b7a      	ldrb	r2, [r7, #13]
 800c1b0:	4b41      	ldr	r3, [pc, #260]	; (800c2b8 <RadioSend+0x1dc>)
 800c1b2:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c1b4:	4841      	ldr	r0, [pc, #260]	; (800c2bc <RadioSend+0x1e0>)
 800c1b6:	f001 ff03 	bl	800dfc0 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 800c1ba:	7b7b      	ldrb	r3, [r7, #13]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	4619      	mov	r1, r3
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f001 f9b7 	bl	800d534 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 800c1c6:	e069      	b.n	800c29c <RadioSend+0x1c0>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800c1c8:	4a3b      	ldr	r2, [pc, #236]	; (800c2b8 <RadioSend+0x1dc>)
 800c1ca:	78fb      	ldrb	r3, [r7, #3]
 800c1cc:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c1ce:	483b      	ldr	r0, [pc, #236]	; (800c2bc <RadioSend+0x1e0>)
 800c1d0:	f001 fef6 	bl	800dfc0 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800c1d4:	78fb      	ldrb	r3, [r7, #3]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	4619      	mov	r1, r3
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f001 f9aa 	bl	800d534 <SUBGRF_SendPayload>
            break;
 800c1e0:	e05c      	b.n	800c29c <RadioSend+0x1c0>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800c1e2:	4b35      	ldr	r3, [pc, #212]	; (800c2b8 <RadioSend+0x1dc>)
 800c1e4:	2202      	movs	r2, #2
 800c1e6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800c1e8:	4a33      	ldr	r2, [pc, #204]	; (800c2b8 <RadioSend+0x1dc>)
 800c1ea:	78fb      	ldrb	r3, [r7, #3]
 800c1ec:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c1ee:	4833      	ldr	r0, [pc, #204]	; (800c2bc <RadioSend+0x1e0>)
 800c1f0:	f001 fee6 	bl	800dfc0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800c1f4:	78fb      	ldrb	r3, [r7, #3]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f001 f99a 	bl	800d534 <SUBGRF_SendPayload>
            break;
 800c200:	e04c      	b.n	800c29c <RadioSend+0x1c0>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 800c202:	78fb      	ldrb	r3, [r7, #3]
 800c204:	461a      	mov	r2, r3
 800c206:	6879      	ldr	r1, [r7, #4]
 800c208:	482d      	ldr	r0, [pc, #180]	; (800c2c0 <RadioSend+0x1e4>)
 800c20a:	f000 fc8a 	bl	800cb22 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800c20e:	4b2a      	ldr	r3, [pc, #168]	; (800c2b8 <RadioSend+0x1dc>)
 800c210:	2202      	movs	r2, #2
 800c212:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800c214:	78fb      	ldrb	r3, [r7, #3]
 800c216:	3301      	adds	r3, #1
 800c218:	b2da      	uxtb	r2, r3
 800c21a:	4b27      	ldr	r3, [pc, #156]	; (800c2b8 <RadioSend+0x1dc>)
 800c21c:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c21e:	4827      	ldr	r0, [pc, #156]	; (800c2bc <RadioSend+0x1e0>)
 800c220:	f001 fece 	bl	800dfc0 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 800c224:	2100      	movs	r1, #0
 800c226:	20f1      	movs	r0, #241	; 0xf1
 800c228:	f000 f95d 	bl	800c4e6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800c22c:	2100      	movs	r1, #0
 800c22e:	20f0      	movs	r0, #240	; 0xf0
 800c230:	f000 f959 	bl	800c4e6 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800c234:	4b20      	ldr	r3, [pc, #128]	; (800c2b8 <RadioSend+0x1dc>)
 800c236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c238:	2b64      	cmp	r3, #100	; 0x64
 800c23a:	d108      	bne.n	800c24e <RadioSend+0x172>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 800c23c:	2170      	movs	r1, #112	; 0x70
 800c23e:	20f3      	movs	r0, #243	; 0xf3
 800c240:	f000 f951 	bl	800c4e6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 800c244:	211d      	movs	r1, #29
 800c246:	20f2      	movs	r0, #242	; 0xf2
 800c248:	f000 f94d 	bl	800c4e6 <RadioWrite>
 800c24c:	e007      	b.n	800c25e <RadioSend+0x182>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 800c24e:	21e1      	movs	r1, #225	; 0xe1
 800c250:	20f3      	movs	r0, #243	; 0xf3
 800c252:	f000 f948 	bl	800c4e6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 800c256:	2104      	movs	r1, #4
 800c258:	20f2      	movs	r0, #242	; 0xf2
 800c25a:	f000 f944 	bl	800c4e6 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 800c25e:	78fb      	ldrb	r3, [r7, #3]
 800c260:	b29b      	uxth	r3, r3
 800c262:	00db      	lsls	r3, r3, #3
 800c264:	b29b      	uxth	r3, r3
 800c266:	3302      	adds	r3, #2
 800c268:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800c26a:	89fb      	ldrh	r3, [r7, #14]
 800c26c:	0a1b      	lsrs	r3, r3, #8
 800c26e:	b29b      	uxth	r3, r3
 800c270:	b2db      	uxtb	r3, r3
 800c272:	4619      	mov	r1, r3
 800c274:	20f4      	movs	r0, #244	; 0xf4
 800c276:	f000 f936 	bl	800c4e6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 800c27a:	89fb      	ldrh	r3, [r7, #14]
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	4619      	mov	r1, r3
 800c280:	20f5      	movs	r0, #245	; 0xf5
 800c282:	f000 f930 	bl	800c4e6 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 800c286:	78fb      	ldrb	r3, [r7, #3]
 800c288:	3301      	adds	r3, #1
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c290:	4619      	mov	r1, r3
 800c292:	480b      	ldr	r0, [pc, #44]	; (800c2c0 <RadioSend+0x1e4>)
 800c294:	f001 f94e 	bl	800d534 <SUBGRF_SendPayload>
            break;
 800c298:	e000      	b.n	800c29c <RadioSend+0x1c0>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800c29a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800c29c:	4b06      	ldr	r3, [pc, #24]	; (800c2b8 <RadioSend+0x1dc>)
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	4808      	ldr	r0, [pc, #32]	; (800c2c4 <RadioSend+0x1e8>)
 800c2a4:	f002 fcaa 	bl	800ebfc <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800c2a8:	4806      	ldr	r0, [pc, #24]	; (800c2c4 <RadioSend+0x1e8>)
 800c2aa:	f002 fbc9 	bl	800ea40 <UTIL_TIMER_Start>
 800c2ae:	e000      	b.n	800c2b2 <RadioSend+0x1d6>
                return;
 800c2b0:	bf00      	nop
}
 800c2b2:	3710      	adds	r7, #16
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	200018c8 	.word	0x200018c8
 800c2bc:	200018d6 	.word	0x200018d6
 800c2c0:	200017c4 	.word	0x200017c4
 800c2c4:	20001924 	.word	0x20001924

0800c2c8 <RadioSleep>:

static void RadioSleep( void )
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800c2d2:	793b      	ldrb	r3, [r7, #4]
 800c2d4:	f043 0304 	orr.w	r3, r3, #4
 800c2d8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800c2da:	7938      	ldrb	r0, [r7, #4]
 800c2dc:	f001 fa06 	bl	800d6ec <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 800c2e0:	2002      	movs	r0, #2
 800c2e2:	f7f4 ff49 	bl	8001178 <HAL_Delay>
}
 800c2e6:	bf00      	nop
 800c2e8:	3708      	adds	r7, #8
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}

0800c2ee <RadioStandby>:

static void RadioStandby( void )
{
 800c2ee:	b580      	push	{r7, lr}
 800c2f0:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800c2f2:	2000      	movs	r0, #0
 800c2f4:	f001 fa2c 	bl	800d750 <SUBGRF_SetStandby>
}
 800c2f8:	bf00      	nop
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 800c304:	f002 f9ef 	bl	800e6e6 <RFW_Is_Init>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d102      	bne.n	800c314 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 800c30e:	f002 fa12 	bl	800e736 <RFW_ReceiveInit>
 800c312:	e007      	b.n	800c324 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800c314:	2300      	movs	r3, #0
 800c316:	2200      	movs	r2, #0
 800c318:	f240 2162 	movw	r1, #610	; 0x262
 800c31c:	f240 2062 	movw	r0, #610	; 0x262
 800c320:	f001 fbe6 	bl	800daf0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d006      	beq.n	800c338 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800c32a:	6879      	ldr	r1, [r7, #4]
 800c32c:	4811      	ldr	r0, [pc, #68]	; (800c374 <RadioRx+0x78>)
 800c32e:	f002 fc65 	bl	800ebfc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800c332:	4810      	ldr	r0, [pc, #64]	; (800c374 <RadioRx+0x78>)
 800c334:	f002 fb84 	bl	800ea40 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800c338:	4b0f      	ldr	r3, [pc, #60]	; (800c378 <RadioRx+0x7c>)
 800c33a:	2200      	movs	r2, #0
 800c33c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800c33e:	4b0e      	ldr	r3, [pc, #56]	; (800c378 <RadioRx+0x7c>)
 800c340:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800c344:	2100      	movs	r1, #0
 800c346:	4618      	mov	r0, r3
 800c348:	f002 f876 	bl	800e438 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 800c34c:	4b0a      	ldr	r3, [pc, #40]	; (800c378 <RadioRx+0x7c>)
 800c34e:	785b      	ldrb	r3, [r3, #1]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d004      	beq.n	800c35e <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800c354:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c358:	f001 fa36 	bl	800d7c8 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800c35c:	e005      	b.n	800c36a <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800c35e:	4b06      	ldr	r3, [pc, #24]	; (800c378 <RadioRx+0x7c>)
 800c360:	689b      	ldr	r3, [r3, #8]
 800c362:	019b      	lsls	r3, r3, #6
 800c364:	4618      	mov	r0, r3
 800c366:	f001 fa2f 	bl	800d7c8 <SUBGRF_SetRx>
}
 800c36a:	bf00      	nop
 800c36c:	3708      	adds	r7, #8
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	2000193c 	.word	0x2000193c
 800c378:	200018c8 	.word	0x200018c8

0800c37c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 800c384:	f002 f9af 	bl	800e6e6 <RFW_Is_Init>
 800c388:	4603      	mov	r3, r0
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	d102      	bne.n	800c394 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 800c38e:	f002 f9d2 	bl	800e736 <RFW_ReceiveInit>
 800c392:	e007      	b.n	800c3a4 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800c394:	2300      	movs	r3, #0
 800c396:	2200      	movs	r2, #0
 800c398:	f240 2162 	movw	r1, #610	; 0x262
 800c39c:	f240 2062 	movw	r0, #610	; 0x262
 800c3a0:	f001 fba6 	bl	800daf0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d006      	beq.n	800c3b8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800c3aa:	6879      	ldr	r1, [r7, #4]
 800c3ac:	4811      	ldr	r0, [pc, #68]	; (800c3f4 <RadioRxBoosted+0x78>)
 800c3ae:	f002 fc25 	bl	800ebfc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800c3b2:	4810      	ldr	r0, [pc, #64]	; (800c3f4 <RadioRxBoosted+0x78>)
 800c3b4:	f002 fb44 	bl	800ea40 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800c3b8:	4b0f      	ldr	r3, [pc, #60]	; (800c3f8 <RadioRxBoosted+0x7c>)
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800c3be:	4b0e      	ldr	r3, [pc, #56]	; (800c3f8 <RadioRxBoosted+0x7c>)
 800c3c0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f002 f836 	bl	800e438 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 800c3cc:	4b0a      	ldr	r3, [pc, #40]	; (800c3f8 <RadioRxBoosted+0x7c>)
 800c3ce:	785b      	ldrb	r3, [r3, #1]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d004      	beq.n	800c3de <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800c3d4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c3d8:	f001 fa16 	bl	800d808 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800c3dc:	e005      	b.n	800c3ea <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800c3de:	4b06      	ldr	r3, [pc, #24]	; (800c3f8 <RadioRxBoosted+0x7c>)
 800c3e0:	689b      	ldr	r3, [r3, #8]
 800c3e2:	019b      	lsls	r3, r3, #6
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f001 fa0f 	bl	800d808 <SUBGRF_SetRxBoosted>
}
 800c3ea:	bf00      	nop
 800c3ec:	3708      	adds	r7, #8
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	2000193c 	.word	0x2000193c
 800c3f8:	200018c8 	.word	0x200018c8

0800c3fc <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	005a      	lsls	r2, r3, #1
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	4413      	add	r3, r2
 800c40e:	4a0c      	ldr	r2, [pc, #48]	; (800c440 <RadioSetRxDutyCycle+0x44>)
 800c410:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800c412:	2300      	movs	r3, #0
 800c414:	2200      	movs	r2, #0
 800c416:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c41a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c41e:	f001 fb67 	bl	800daf0 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800c422:	4b07      	ldr	r3, [pc, #28]	; (800c440 <RadioSetRxDutyCycle+0x44>)
 800c424:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800c428:	2100      	movs	r1, #0
 800c42a:	4618      	mov	r0, r3
 800c42c:	f002 f804 	bl	800e438 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800c430:	6839      	ldr	r1, [r7, #0]
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f001 fa0c 	bl	800d850 <SUBGRF_SetRxDutyCycle>
}
 800c438:	bf00      	nop
 800c43a:	3708      	adds	r7, #8
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}
 800c440:	200018c8 	.word	0x200018c8

0800c444 <RadioStartCad>:

static void RadioStartCad( void )
{
 800c444:	b580      	push	{r7, lr}
 800c446:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800c448:	4b09      	ldr	r3, [pc, #36]	; (800c470 <RadioStartCad+0x2c>)
 800c44a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800c44e:	2100      	movs	r1, #0
 800c450:	4618      	mov	r0, r3
 800c452:	f001 fff1 	bl	800e438 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800c456:	2300      	movs	r3, #0
 800c458:	2200      	movs	r2, #0
 800c45a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800c45e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800c462:	f001 fb45 	bl	800daf0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800c466:	f001 fa1f 	bl	800d8a8 <SUBGRF_SetCad>
}
 800c46a:	bf00      	nop
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	200018c8 	.word	0x200018c8

0800c474 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	460b      	mov	r3, r1
 800c47e:	70fb      	strb	r3, [r7, #3]
 800c480:	4613      	mov	r3, r2
 800c482:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 800c484:	883b      	ldrh	r3, [r7, #0]
 800c486:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c48a:	fb02 f303 	mul.w	r3, r2, r3
 800c48e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f001 fb89 	bl	800dba8 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800c496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f001 fff4 	bl	800e488 <SUBGRF_SetRfTxPower>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800c4a4:	7afb      	ldrb	r3, [r7, #11]
 800c4a6:	2101      	movs	r1, #1
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f001 ffc5 	bl	800e438 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800c4ae:	f001 fa09 	bl	800d8c4 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800c4b2:	68f9      	ldr	r1, [r7, #12]
 800c4b4:	4804      	ldr	r0, [pc, #16]	; (800c4c8 <RadioSetTxContinuousWave+0x54>)
 800c4b6:	f002 fba1 	bl	800ebfc <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800c4ba:	4803      	ldr	r0, [pc, #12]	; (800c4c8 <RadioSetTxContinuousWave+0x54>)
 800c4bc:	f002 fac0 	bl	800ea40 <UTIL_TIMER_Start>
}
 800c4c0:	bf00      	nop
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	20001924 	.word	0x20001924

0800c4cc <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800c4d6:	f001 fe28 	bl	800e12a <SUBGRF_GetRssiInst>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	b21b      	sxth	r3, r3
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b082      	sub	sp, #8
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	460a      	mov	r2, r1
 800c4f0:	80fb      	strh	r3, [r7, #6]
 800c4f2:	4613      	mov	r3, r2
 800c4f4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 800c4f6:	797a      	ldrb	r2, [r7, #5]
 800c4f8:	88fb      	ldrh	r3, [r7, #6]
 800c4fa:	4611      	mov	r1, r2
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f001 fea7 	bl	800e250 <SUBGRF_WriteRegister>
}
 800c502:	bf00      	nop
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b082      	sub	sp, #8
 800c50e:	af00      	add	r7, sp, #0
 800c510:	4603      	mov	r3, r0
 800c512:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 800c514:	88fb      	ldrh	r3, [r7, #6]
 800c516:	4618      	mov	r0, r3
 800c518:	f001 feae 	bl	800e278 <SUBGRF_ReadRegister>
 800c51c:	4603      	mov	r3, r0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3708      	adds	r7, #8
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b082      	sub	sp, #8
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	4603      	mov	r3, r0
 800c52e:	6039      	str	r1, [r7, #0]
 800c530:	80fb      	strh	r3, [r7, #6]
 800c532:	4613      	mov	r3, r2
 800c534:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800c536:	797b      	ldrb	r3, [r7, #5]
 800c538:	b29a      	uxth	r2, r3
 800c53a:	88fb      	ldrh	r3, [r7, #6]
 800c53c:	6839      	ldr	r1, [r7, #0]
 800c53e:	4618      	mov	r0, r3
 800c540:	f001 feae 	bl	800e2a0 <SUBGRF_WriteRegisters>
}
 800c544:	bf00      	nop
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	4603      	mov	r3, r0
 800c554:	6039      	str	r1, [r7, #0]
 800c556:	80fb      	strh	r3, [r7, #6]
 800c558:	4613      	mov	r3, r2
 800c55a:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800c55c:	797b      	ldrb	r3, [r7, #5]
 800c55e:	b29a      	uxth	r2, r3
 800c560:	88fb      	ldrh	r3, [r7, #6]
 800c562:	6839      	ldr	r1, [r7, #0]
 800c564:	4618      	mov	r0, r3
 800c566:	f001 febd 	bl	800e2e4 <SUBGRF_ReadRegisters>
}
 800c56a:	bf00      	nop
 800c56c:	3708      	adds	r7, #8
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
	...

0800c574 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	4603      	mov	r3, r0
 800c57c:	460a      	mov	r2, r1
 800c57e:	71fb      	strb	r3, [r7, #7]
 800c580:	4613      	mov	r3, r2
 800c582:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 800c584:	79fb      	ldrb	r3, [r7, #7]
 800c586:	2b01      	cmp	r3, #1
 800c588:	d10a      	bne.n	800c5a0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800c58a:	4a0e      	ldr	r2, [pc, #56]	; (800c5c4 <RadioSetMaxPayloadLength+0x50>)
 800c58c:	79bb      	ldrb	r3, [r7, #6]
 800c58e:	7013      	strb	r3, [r2, #0]
 800c590:	4b0c      	ldr	r3, [pc, #48]	; (800c5c4 <RadioSetMaxPayloadLength+0x50>)
 800c592:	781a      	ldrb	r2, [r3, #0]
 800c594:	4b0c      	ldr	r3, [pc, #48]	; (800c5c8 <RadioSetMaxPayloadLength+0x54>)
 800c596:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c598:	480c      	ldr	r0, [pc, #48]	; (800c5cc <RadioSetMaxPayloadLength+0x58>)
 800c59a:	f001 fd11 	bl	800dfc0 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800c59e:	e00d      	b.n	800c5bc <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800c5a0:	4b09      	ldr	r3, [pc, #36]	; (800c5c8 <RadioSetMaxPayloadLength+0x54>)
 800c5a2:	7d5b      	ldrb	r3, [r3, #21]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d109      	bne.n	800c5bc <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800c5a8:	4a06      	ldr	r2, [pc, #24]	; (800c5c4 <RadioSetMaxPayloadLength+0x50>)
 800c5aa:	79bb      	ldrb	r3, [r7, #6]
 800c5ac:	7013      	strb	r3, [r2, #0]
 800c5ae:	4b05      	ldr	r3, [pc, #20]	; (800c5c4 <RadioSetMaxPayloadLength+0x50>)
 800c5b0:	781a      	ldrb	r2, [r3, #0]
 800c5b2:	4b05      	ldr	r3, [pc, #20]	; (800c5c8 <RadioSetMaxPayloadLength+0x54>)
 800c5b4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c5b6:	4805      	ldr	r0, [pc, #20]	; (800c5cc <RadioSetMaxPayloadLength+0x58>)
 800c5b8:	f001 fd02 	bl	800dfc0 <SUBGRF_SetPacketParams>
}
 800c5bc:	bf00      	nop
 800c5be:	3708      	adds	r7, #8
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	200000f8 	.word	0x200000f8
 800c5c8:	200018c8 	.word	0x200018c8
 800c5cc:	200018d6 	.word	0x200018d6

0800c5d0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800c5da:	4a13      	ldr	r2, [pc, #76]	; (800c628 <RadioSetPublicNetwork+0x58>)
 800c5dc:	79fb      	ldrb	r3, [r7, #7]
 800c5de:	7313      	strb	r3, [r2, #12]
 800c5e0:	4b11      	ldr	r3, [pc, #68]	; (800c628 <RadioSetPublicNetwork+0x58>)
 800c5e2:	7b1a      	ldrb	r2, [r3, #12]
 800c5e4:	4b10      	ldr	r3, [pc, #64]	; (800c628 <RadioSetPublicNetwork+0x58>)
 800c5e6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800c5e8:	2001      	movs	r0, #1
 800c5ea:	f7ff f833 	bl	800b654 <RadioSetModem>
    if( enable == true )
 800c5ee:	79fb      	ldrb	r3, [r7, #7]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d00a      	beq.n	800c60a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800c5f4:	2134      	movs	r1, #52	; 0x34
 800c5f6:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800c5fa:	f001 fe29 	bl	800e250 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800c5fe:	2144      	movs	r1, #68	; 0x44
 800c600:	f240 7041 	movw	r0, #1857	; 0x741
 800c604:	f001 fe24 	bl	800e250 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800c608:	e009      	b.n	800c61e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800c60a:	2114      	movs	r1, #20
 800c60c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800c610:	f001 fe1e 	bl	800e250 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800c614:	2124      	movs	r1, #36	; 0x24
 800c616:	f240 7041 	movw	r0, #1857	; 0x741
 800c61a:	f001 fe19 	bl	800e250 <SUBGRF_WriteRegister>
}
 800c61e:	bf00      	nop
 800c620:	3708      	adds	r7, #8
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	200018c8 	.word	0x200018c8

0800c62c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800c630:	f001 ff5e 	bl	800e4f0 <SUBGRF_GetRadioWakeUpTime>
 800c634:	4603      	mov	r3, r0
 800c636:	3303      	adds	r3, #3
}
 800c638:	4618      	mov	r0, r3
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800c644:	f000 f80e 	bl	800c664 <RadioOnTxTimeoutProcess>
}
 800c648:	bf00      	nop
 800c64a:	3708      	adds	r7, #8
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800c658:	f000 f818 	bl	800c68c <RadioOnRxTimeoutProcess>
}
 800c65c:	bf00      	nop
 800c65e:	3708      	adds	r7, #8
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 800c664:	b580      	push	{r7, lr}
 800c666:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800c668:	4b07      	ldr	r3, [pc, #28]	; (800c688 <RadioOnTxTimeoutProcess+0x24>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d008      	beq.n	800c682 <RadioOnTxTimeoutProcess+0x1e>
 800c670:	4b05      	ldr	r3, [pc, #20]	; (800c688 <RadioOnTxTimeoutProcess+0x24>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d003      	beq.n	800c682 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800c67a:	4b03      	ldr	r3, [pc, #12]	; (800c688 <RadioOnTxTimeoutProcess+0x24>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	4798      	blx	r3
    }
}
 800c682:	bf00      	nop
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	200018c4 	.word	0x200018c4

0800c68c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800c690:	4b07      	ldr	r3, [pc, #28]	; (800c6b0 <RadioOnRxTimeoutProcess+0x24>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d008      	beq.n	800c6aa <RadioOnRxTimeoutProcess+0x1e>
 800c698:	4b05      	ldr	r3, [pc, #20]	; (800c6b0 <RadioOnRxTimeoutProcess+0x24>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	68db      	ldr	r3, [r3, #12]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d003      	beq.n	800c6aa <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800c6a2:	4b03      	ldr	r3, [pc, #12]	; (800c6b0 <RadioOnRxTimeoutProcess+0x24>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	4798      	blx	r3
    }
}
 800c6aa:	bf00      	nop
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	200018c4 	.word	0x200018c4

0800c6b4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800c6be:	4a05      	ldr	r2, [pc, #20]	; (800c6d4 <RadioOnDioIrq+0x20>)
 800c6c0:	88fb      	ldrh	r3, [r7, #6]
 800c6c2:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800c6c6:	f000 f807 	bl	800c6d8 <RadioIrqProcess>
}
 800c6ca:	bf00      	nop
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	200018c8 	.word	0x200018c8

0800c6d8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800c6d8:	b590      	push	{r4, r7, lr}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 800c6e6:	4ba5      	ldr	r3, [pc, #660]	; (800c97c <RadioIrqProcess+0x2a4>)
 800c6e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c6ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6f0:	f000 810c 	beq.w	800c90c <RadioIrqProcess+0x234>
 800c6f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6f8:	f300 81c0 	bgt.w	800ca7c <RadioIrqProcess+0x3a4>
 800c6fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c700:	f000 80f0 	beq.w	800c8e4 <RadioIrqProcess+0x20c>
 800c704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c708:	f300 81b8 	bgt.w	800ca7c <RadioIrqProcess+0x3a4>
 800c70c:	2b80      	cmp	r3, #128	; 0x80
 800c70e:	f000 80d5 	beq.w	800c8bc <RadioIrqProcess+0x1e4>
 800c712:	2b80      	cmp	r3, #128	; 0x80
 800c714:	f300 81b2 	bgt.w	800ca7c <RadioIrqProcess+0x3a4>
 800c718:	2b20      	cmp	r3, #32
 800c71a:	dc49      	bgt.n	800c7b0 <RadioIrqProcess+0xd8>
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f340 81ad 	ble.w	800ca7c <RadioIrqProcess+0x3a4>
 800c722:	3b01      	subs	r3, #1
 800c724:	2b1f      	cmp	r3, #31
 800c726:	f200 81a9 	bhi.w	800ca7c <RadioIrqProcess+0x3a4>
 800c72a:	a201      	add	r2, pc, #4	; (adr r2, 800c730 <RadioIrqProcess+0x58>)
 800c72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c730:	0800c7b9 	.word	0x0800c7b9
 800c734:	0800c7f3 	.word	0x0800c7f3
 800c738:	0800ca7d 	.word	0x0800ca7d
 800c73c:	0800c999 	.word	0x0800c999
 800c740:	0800ca7d 	.word	0x0800ca7d
 800c744:	0800ca7d 	.word	0x0800ca7d
 800c748:	0800ca7d 	.word	0x0800ca7d
 800c74c:	0800ca07 	.word	0x0800ca07
 800c750:	0800ca7d 	.word	0x0800ca7d
 800c754:	0800ca7d 	.word	0x0800ca7d
 800c758:	0800ca7d 	.word	0x0800ca7d
 800c75c:	0800ca7d 	.word	0x0800ca7d
 800c760:	0800ca7d 	.word	0x0800ca7d
 800c764:	0800ca7d 	.word	0x0800ca7d
 800c768:	0800ca7d 	.word	0x0800ca7d
 800c76c:	0800ca7d 	.word	0x0800ca7d
 800c770:	0800ca7d 	.word	0x0800ca7d
 800c774:	0800ca7d 	.word	0x0800ca7d
 800c778:	0800ca7d 	.word	0x0800ca7d
 800c77c:	0800ca7d 	.word	0x0800ca7d
 800c780:	0800ca7d 	.word	0x0800ca7d
 800c784:	0800ca7d 	.word	0x0800ca7d
 800c788:	0800ca7d 	.word	0x0800ca7d
 800c78c:	0800ca7d 	.word	0x0800ca7d
 800c790:	0800ca7d 	.word	0x0800ca7d
 800c794:	0800ca7d 	.word	0x0800ca7d
 800c798:	0800ca7d 	.word	0x0800ca7d
 800c79c:	0800ca7d 	.word	0x0800ca7d
 800c7a0:	0800ca7d 	.word	0x0800ca7d
 800c7a4:	0800ca7d 	.word	0x0800ca7d
 800c7a8:	0800ca7d 	.word	0x0800ca7d
 800c7ac:	0800ca17 	.word	0x0800ca17
 800c7b0:	2b40      	cmp	r3, #64	; 0x40
 800c7b2:	f000 814b 	beq.w	800ca4c <RadioIrqProcess+0x374>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 800c7b6:	e161      	b.n	800ca7c <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 800c7b8:	4871      	ldr	r0, [pc, #452]	; (800c980 <RadioIrqProcess+0x2a8>)
 800c7ba:	f002 f9af 	bl	800eb1c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800c7be:	2000      	movs	r0, #0
 800c7c0:	f000 ffc6 	bl	800d750 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800c7c4:	f001 ff96 	bl	800e6f4 <RFW_Is_LongPacketModeEnabled>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d101      	bne.n	800c7d2 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800c7ce:	f001 ffba 	bl	800e746 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800c7d2:	4b6c      	ldr	r3, [pc, #432]	; (800c984 <RadioIrqProcess+0x2ac>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	f000 8152 	beq.w	800ca80 <RadioIrqProcess+0x3a8>
 800c7dc:	4b69      	ldr	r3, [pc, #420]	; (800c984 <RadioIrqProcess+0x2ac>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	f000 814c 	beq.w	800ca80 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 800c7e8:	4b66      	ldr	r3, [pc, #408]	; (800c984 <RadioIrqProcess+0x2ac>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4798      	blx	r3
        break;
 800c7f0:	e146      	b.n	800ca80 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 800c7f2:	4865      	ldr	r0, [pc, #404]	; (800c988 <RadioIrqProcess+0x2b0>)
 800c7f4:	f002 f992 	bl	800eb1c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800c7f8:	4b60      	ldr	r3, [pc, #384]	; (800c97c <RadioIrqProcess+0x2a4>)
 800c7fa:	785b      	ldrb	r3, [r3, #1]
 800c7fc:	f083 0301 	eor.w	r3, r3, #1
 800c800:	b2db      	uxtb	r3, r3
 800c802:	2b00      	cmp	r3, #0
 800c804:	d014      	beq.n	800c830 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800c806:	2000      	movs	r0, #0
 800c808:	f000 ffa2 	bl	800d750 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800c80c:	2100      	movs	r1, #0
 800c80e:	f640 1002 	movw	r0, #2306	; 0x902
 800c812:	f001 fd1d 	bl	800e250 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800c816:	f640 1044 	movw	r0, #2372	; 0x944
 800c81a:	f001 fd2d 	bl	800e278 <SUBGRF_ReadRegister>
 800c81e:	4603      	mov	r3, r0
 800c820:	f043 0302 	orr.w	r3, r3, #2
 800c824:	b2db      	uxtb	r3, r3
 800c826:	4619      	mov	r1, r3
 800c828:	f640 1044 	movw	r0, #2372	; 0x944
 800c82c:	f001 fd10 	bl	800e250 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800c830:	1dfb      	adds	r3, r7, #7
 800c832:	22ff      	movs	r2, #255	; 0xff
 800c834:	4619      	mov	r1, r3
 800c836:	4855      	ldr	r0, [pc, #340]	; (800c98c <RadioIrqProcess+0x2b4>)
 800c838:	f000 fe5a 	bl	800d4f0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800c83c:	4854      	ldr	r0, [pc, #336]	; (800c990 <RadioIrqProcess+0x2b8>)
 800c83e:	f001 fcb5 	bl	800e1ac <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800c842:	4b50      	ldr	r3, [pc, #320]	; (800c984 <RadioIrqProcess+0x2ac>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d036      	beq.n	800c8b8 <RadioIrqProcess+0x1e0>
 800c84a:	4b4e      	ldr	r3, [pc, #312]	; (800c984 <RadioIrqProcess+0x2ac>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d031      	beq.n	800c8b8 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 800c854:	4b49      	ldr	r3, [pc, #292]	; (800c97c <RadioIrqProcess+0x2a4>)
 800c856:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d10e      	bne.n	800c87c <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800c85e:	4b49      	ldr	r3, [pc, #292]	; (800c984 <RadioIrqProcess+0x2ac>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	689c      	ldr	r4, [r3, #8]
 800c864:	79fb      	ldrb	r3, [r7, #7]
 800c866:	b299      	uxth	r1, r3
 800c868:	4b44      	ldr	r3, [pc, #272]	; (800c97c <RadioIrqProcess+0x2a4>)
 800c86a:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800c86e:	b21a      	sxth	r2, r3
 800c870:	4b42      	ldr	r3, [pc, #264]	; (800c97c <RadioIrqProcess+0x2a4>)
 800c872:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800c876:	4845      	ldr	r0, [pc, #276]	; (800c98c <RadioIrqProcess+0x2b4>)
 800c878:	47a0      	blx	r4
                break;
 800c87a:	e01e      	b.n	800c8ba <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800c87c:	4b3f      	ldr	r3, [pc, #252]	; (800c97c <RadioIrqProcess+0x2a4>)
 800c87e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c880:	463a      	mov	r2, r7
 800c882:	4611      	mov	r1, r2
 800c884:	4618      	mov	r0, r3
 800c886:	f001 fe83 	bl	800e590 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800c88a:	4b3e      	ldr	r3, [pc, #248]	; (800c984 <RadioIrqProcess+0x2ac>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	689c      	ldr	r4, [r3, #8]
 800c890:	79fb      	ldrb	r3, [r7, #7]
 800c892:	b299      	uxth	r1, r3
 800c894:	4b39      	ldr	r3, [pc, #228]	; (800c97c <RadioIrqProcess+0x2a4>)
 800c896:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800c89a:	b218      	sxth	r0, r3
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c8a2:	4a3c      	ldr	r2, [pc, #240]	; (800c994 <RadioIrqProcess+0x2bc>)
 800c8a4:	fb82 c203 	smull	ip, r2, r2, r3
 800c8a8:	1192      	asrs	r2, r2, #6
 800c8aa:	17db      	asrs	r3, r3, #31
 800c8ac:	1ad3      	subs	r3, r2, r3
 800c8ae:	b25b      	sxtb	r3, r3
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	4836      	ldr	r0, [pc, #216]	; (800c98c <RadioIrqProcess+0x2b4>)
 800c8b4:	47a0      	blx	r4
                break;
 800c8b6:	e000      	b.n	800c8ba <RadioIrqProcess+0x1e2>
        }
 800c8b8:	bf00      	nop
        break;
 800c8ba:	e0f0      	b.n	800ca9e <RadioIrqProcess+0x3c6>
        SUBGRF_SetStandby( STDBY_RC );
 800c8bc:	2000      	movs	r0, #0
 800c8be:	f000 ff47 	bl	800d750 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800c8c2:	4b30      	ldr	r3, [pc, #192]	; (800c984 <RadioIrqProcess+0x2ac>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	f000 80dc 	beq.w	800ca84 <RadioIrqProcess+0x3ac>
 800c8cc:	4b2d      	ldr	r3, [pc, #180]	; (800c984 <RadioIrqProcess+0x2ac>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	699b      	ldr	r3, [r3, #24]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	f000 80d6 	beq.w	800ca84 <RadioIrqProcess+0x3ac>
            RadioEvents->CadDone( false );
 800c8d8:	4b2a      	ldr	r3, [pc, #168]	; (800c984 <RadioIrqProcess+0x2ac>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	699b      	ldr	r3, [r3, #24]
 800c8de:	2000      	movs	r0, #0
 800c8e0:	4798      	blx	r3
        break;
 800c8e2:	e0cf      	b.n	800ca84 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 800c8e4:	2000      	movs	r0, #0
 800c8e6:	f000 ff33 	bl	800d750 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800c8ea:	4b26      	ldr	r3, [pc, #152]	; (800c984 <RadioIrqProcess+0x2ac>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	f000 80ca 	beq.w	800ca88 <RadioIrqProcess+0x3b0>
 800c8f4:	4b23      	ldr	r3, [pc, #140]	; (800c984 <RadioIrqProcess+0x2ac>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	699b      	ldr	r3, [r3, #24]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	f000 80c4 	beq.w	800ca88 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( true );
 800c900:	4b20      	ldr	r3, [pc, #128]	; (800c984 <RadioIrqProcess+0x2ac>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	699b      	ldr	r3, [r3, #24]
 800c906:	2001      	movs	r0, #1
 800c908:	4798      	blx	r3
        break;
 800c90a:	e0bd      	b.n	800ca88 <RadioIrqProcess+0x3b0>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800c90c:	f000 fdd6 	bl	800d4bc <SUBGRF_GetOperatingMode>
 800c910:	4603      	mov	r3, r0
 800c912:	2b04      	cmp	r3, #4
 800c914:	d115      	bne.n	800c942 <RadioIrqProcess+0x26a>
            TimerStop( &TxTimeoutTimer );
 800c916:	481a      	ldr	r0, [pc, #104]	; (800c980 <RadioIrqProcess+0x2a8>)
 800c918:	f002 f900 	bl	800eb1c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800c91c:	2000      	movs	r0, #0
 800c91e:	f000 ff17 	bl	800d750 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800c922:	4b18      	ldr	r3, [pc, #96]	; (800c984 <RadioIrqProcess+0x2ac>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	f000 80b0 	beq.w	800ca8c <RadioIrqProcess+0x3b4>
 800c92c:	4b15      	ldr	r3, [pc, #84]	; (800c984 <RadioIrqProcess+0x2ac>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	2b00      	cmp	r3, #0
 800c934:	f000 80aa 	beq.w	800ca8c <RadioIrqProcess+0x3b4>
                RadioEvents->TxTimeout( );
 800c938:	4b12      	ldr	r3, [pc, #72]	; (800c984 <RadioIrqProcess+0x2ac>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	4798      	blx	r3
        break;
 800c940:	e0a4      	b.n	800ca8c <RadioIrqProcess+0x3b4>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800c942:	f000 fdbb 	bl	800d4bc <SUBGRF_GetOperatingMode>
 800c946:	4603      	mov	r3, r0
 800c948:	2b05      	cmp	r3, #5
 800c94a:	f040 809f 	bne.w	800ca8c <RadioIrqProcess+0x3b4>
            TimerStop( &RxTimeoutTimer );
 800c94e:	480e      	ldr	r0, [pc, #56]	; (800c988 <RadioIrqProcess+0x2b0>)
 800c950:	f002 f8e4 	bl	800eb1c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800c954:	2000      	movs	r0, #0
 800c956:	f000 fefb 	bl	800d750 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800c95a:	4b0a      	ldr	r3, [pc, #40]	; (800c984 <RadioIrqProcess+0x2ac>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	f000 8094 	beq.w	800ca8c <RadioIrqProcess+0x3b4>
 800c964:	4b07      	ldr	r3, [pc, #28]	; (800c984 <RadioIrqProcess+0x2ac>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f000 808e 	beq.w	800ca8c <RadioIrqProcess+0x3b4>
                RadioEvents->RxTimeout( );
 800c970:	4b04      	ldr	r3, [pc, #16]	; (800c984 <RadioIrqProcess+0x2ac>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	68db      	ldr	r3, [r3, #12]
 800c976:	4798      	blx	r3
        break;
 800c978:	e088      	b.n	800ca8c <RadioIrqProcess+0x3b4>
 800c97a:	bf00      	nop
 800c97c:	200018c8 	.word	0x200018c8
 800c980:	20001924 	.word	0x20001924
 800c984:	200018c4 	.word	0x200018c4
 800c988:	2000193c 	.word	0x2000193c
 800c98c:	200017c4 	.word	0x200017c4
 800c990:	200018ec 	.word	0x200018ec
 800c994:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800c998:	4b43      	ldr	r3, [pc, #268]	; (800caa8 <RadioIrqProcess+0x3d0>)
 800c99a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d077      	beq.n	800ca90 <RadioIrqProcess+0x3b8>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 800c9a0:	4a42      	ldr	r2, [pc, #264]	; (800caac <RadioIrqProcess+0x3d4>)
 800c9a2:	4b41      	ldr	r3, [pc, #260]	; (800caa8 <RadioIrqProcess+0x3d0>)
 800c9a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9a6:	0c1b      	lsrs	r3, r3, #16
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	f640 1003 	movw	r0, #2307	; 0x903
 800c9b0:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 800c9b2:	4a3e      	ldr	r2, [pc, #248]	; (800caac <RadioIrqProcess+0x3d4>)
 800c9b4:	4b3c      	ldr	r3, [pc, #240]	; (800caa8 <RadioIrqProcess+0x3d0>)
 800c9b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9b8:	0a1b      	lsrs	r3, r3, #8
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	4619      	mov	r1, r3
 800c9be:	f640 1004 	movw	r0, #2308	; 0x904
 800c9c2:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 800c9c4:	4a39      	ldr	r2, [pc, #228]	; (800caac <RadioIrqProcess+0x3d4>)
 800c9c6:	4b38      	ldr	r3, [pc, #224]	; (800caa8 <RadioIrqProcess+0x3d0>)
 800c9c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	f640 1005 	movw	r0, #2309	; 0x905
 800c9d2:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 800c9d4:	4c35      	ldr	r4, [pc, #212]	; (800caac <RadioIrqProcess+0x3d4>)
 800c9d6:	4b36      	ldr	r3, [pc, #216]	; (800cab0 <RadioIrqProcess+0x3d8>)
 800c9d8:	f640 1002 	movw	r0, #2306	; 0x902
 800c9dc:	4798      	blx	r3
 800c9de:	4603      	mov	r3, r0
 800c9e0:	f043 0301 	orr.w	r3, r3, #1
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	f640 1002 	movw	r0, #2306	; 0x902
 800c9ec:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 800c9ee:	4b2e      	ldr	r3, [pc, #184]	; (800caa8 <RadioIrqProcess+0x3d0>)
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	f240 2162 	movw	r1, #610	; 0x262
 800c9fc:	f240 2062 	movw	r0, #610	; 0x262
 800ca00:	f001 f876 	bl	800daf0 <SUBGRF_SetDioIrqParams>
        break;
 800ca04:	e044      	b.n	800ca90 <RadioIrqProcess+0x3b8>
        if( 1UL == RFW_Is_Init( ) )
 800ca06:	f001 fe6e 	bl	800e6e6 <RFW_Is_Init>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d141      	bne.n	800ca94 <RadioIrqProcess+0x3bc>
            RFW_ReceivePayload( );
 800ca10:	f001 fe9f 	bl	800e752 <RFW_ReceivePayload>
        break;
 800ca14:	e03e      	b.n	800ca94 <RadioIrqProcess+0x3bc>
        TimerStop( &RxTimeoutTimer );
 800ca16:	4827      	ldr	r0, [pc, #156]	; (800cab4 <RadioIrqProcess+0x3dc>)
 800ca18:	f002 f880 	bl	800eb1c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800ca1c:	4b22      	ldr	r3, [pc, #136]	; (800caa8 <RadioIrqProcess+0x3d0>)
 800ca1e:	785b      	ldrb	r3, [r3, #1]
 800ca20:	f083 0301 	eor.w	r3, r3, #1
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d002      	beq.n	800ca30 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 800ca2a:	2000      	movs	r0, #0
 800ca2c:	f000 fe90 	bl	800d750 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ca30:	4b21      	ldr	r3, [pc, #132]	; (800cab8 <RadioIrqProcess+0x3e0>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d02f      	beq.n	800ca98 <RadioIrqProcess+0x3c0>
 800ca38:	4b1f      	ldr	r3, [pc, #124]	; (800cab8 <RadioIrqProcess+0x3e0>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d02a      	beq.n	800ca98 <RadioIrqProcess+0x3c0>
            RadioEvents->RxTimeout( );
 800ca42:	4b1d      	ldr	r3, [pc, #116]	; (800cab8 <RadioIrqProcess+0x3e0>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	4798      	blx	r3
        break;
 800ca4a:	e025      	b.n	800ca98 <RadioIrqProcess+0x3c0>
        if( SubgRf.RxContinuous == false )
 800ca4c:	4b16      	ldr	r3, [pc, #88]	; (800caa8 <RadioIrqProcess+0x3d0>)
 800ca4e:	785b      	ldrb	r3, [r3, #1]
 800ca50:	f083 0301 	eor.w	r3, r3, #1
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d002      	beq.n	800ca60 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 800ca5a:	2000      	movs	r0, #0
 800ca5c:	f000 fe78 	bl	800d750 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800ca60:	4b15      	ldr	r3, [pc, #84]	; (800cab8 <RadioIrqProcess+0x3e0>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d019      	beq.n	800ca9c <RadioIrqProcess+0x3c4>
 800ca68:	4b13      	ldr	r3, [pc, #76]	; (800cab8 <RadioIrqProcess+0x3e0>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	691b      	ldr	r3, [r3, #16]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d014      	beq.n	800ca9c <RadioIrqProcess+0x3c4>
            RadioEvents->RxError( );
 800ca72:	4b11      	ldr	r3, [pc, #68]	; (800cab8 <RadioIrqProcess+0x3e0>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	691b      	ldr	r3, [r3, #16]
 800ca78:	4798      	blx	r3
        break;
 800ca7a:	e00f      	b.n	800ca9c <RadioIrqProcess+0x3c4>
        break;
 800ca7c:	bf00      	nop
 800ca7e:	e00e      	b.n	800ca9e <RadioIrqProcess+0x3c6>
        break;
 800ca80:	bf00      	nop
 800ca82:	e00c      	b.n	800ca9e <RadioIrqProcess+0x3c6>
        break;
 800ca84:	bf00      	nop
 800ca86:	e00a      	b.n	800ca9e <RadioIrqProcess+0x3c6>
        break;
 800ca88:	bf00      	nop
 800ca8a:	e008      	b.n	800ca9e <RadioIrqProcess+0x3c6>
        break;
 800ca8c:	bf00      	nop
 800ca8e:	e006      	b.n	800ca9e <RadioIrqProcess+0x3c6>
        break;
 800ca90:	bf00      	nop
 800ca92:	e004      	b.n	800ca9e <RadioIrqProcess+0x3c6>
        break;
 800ca94:	bf00      	nop
 800ca96:	e002      	b.n	800ca9e <RadioIrqProcess+0x3c6>
        break;
 800ca98:	bf00      	nop
 800ca9a:	e000      	b.n	800ca9e <RadioIrqProcess+0x3c6>
        break;
 800ca9c:	bf00      	nop
    }
}
 800ca9e:	bf00      	nop
 800caa0:	370c      	adds	r7, #12
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd90      	pop	{r4, r7, pc}
 800caa6:	bf00      	nop
 800caa8:	200018c8 	.word	0x200018c8
 800caac:	0800c4e7 	.word	0x0800c4e7
 800cab0:	0800c50b 	.word	0x0800c50b
 800cab4:	2000193c 	.word	0x2000193c
 800cab8:	200018c4 	.word	0x200018c4

0800cabc <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800cac0:	4b09      	ldr	r3, [pc, #36]	; (800cae8 <RadioTxPrbs+0x2c>)
 800cac2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800cac6:	2101      	movs	r1, #1
 800cac8:	4618      	mov	r0, r3
 800caca:	f001 fcb5 	bl	800e438 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800cace:	4b07      	ldr	r3, [pc, #28]	; (800caec <RadioTxPrbs+0x30>)
 800cad0:	212d      	movs	r1, #45	; 0x2d
 800cad2:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800cad6:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800cad8:	f000 fefd 	bl	800d8d6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800cadc:	4804      	ldr	r0, [pc, #16]	; (800caf0 <RadioTxPrbs+0x34>)
 800cade:	f000 fe53 	bl	800d788 <SUBGRF_SetTx>
}
 800cae2:	bf00      	nop
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	200018c8 	.word	0x200018c8
 800caec:	0800c4e7 	.word	0x0800c4e7
 800caf0:	000fffff 	.word	0x000fffff

0800caf4 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	4603      	mov	r3, r0
 800cafc:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800cafe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb02:	4618      	mov	r0, r3
 800cb04:	f001 fcc0 	bl	800e488 <SUBGRF_SetRfTxPower>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800cb0c:	7bfb      	ldrb	r3, [r7, #15]
 800cb0e:	2101      	movs	r1, #1
 800cb10:	4618      	mov	r0, r3
 800cb12:	f001 fc91 	bl	800e438 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800cb16:	f000 fed5 	bl	800d8c4 <SUBGRF_SetTxContinuousWave>
}
 800cb1a:	bf00      	nop
 800cb1c:	3710      	adds	r7, #16
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}

0800cb22 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800cb22:	b480      	push	{r7}
 800cb24:	b089      	sub	sp, #36	; 0x24
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	60f8      	str	r0, [r7, #12]
 800cb2a:	60b9      	str	r1, [r7, #8]
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800cb30:	2300      	movs	r3, #0
 800cb32:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800cb34:	2300      	movs	r3, #0
 800cb36:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800cb38:	2300      	movs	r3, #0
 800cb3a:	61bb      	str	r3, [r7, #24]
 800cb3c:	e011      	b.n	800cb62 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800cb3e:	69bb      	ldr	r3, [r7, #24]
 800cb40:	68ba      	ldr	r2, [r7, #8]
 800cb42:	4413      	add	r3, r2
 800cb44:	781a      	ldrb	r2, [r3, #0]
 800cb46:	69bb      	ldr	r3, [r7, #24]
 800cb48:	68b9      	ldr	r1, [r7, #8]
 800cb4a:	440b      	add	r3, r1
 800cb4c:	43d2      	mvns	r2, r2
 800cb4e:	b2d2      	uxtb	r2, r2
 800cb50:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800cb52:	69bb      	ldr	r3, [r7, #24]
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	4413      	add	r3, r2
 800cb58:	2200      	movs	r2, #0
 800cb5a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800cb5c:	69bb      	ldr	r3, [r7, #24]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	61bb      	str	r3, [r7, #24]
 800cb62:	79fb      	ldrb	r3, [r7, #7]
 800cb64:	69ba      	ldr	r2, [r7, #24]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	dbe9      	blt.n	800cb3e <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	61bb      	str	r3, [r7, #24]
 800cb6e:	e049      	b.n	800cc04 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800cb70:	69bb      	ldr	r3, [r7, #24]
 800cb72:	425a      	negs	r2, r3
 800cb74:	f003 0307 	and.w	r3, r3, #7
 800cb78:	f002 0207 	and.w	r2, r2, #7
 800cb7c:	bf58      	it	pl
 800cb7e:	4253      	negpl	r3, r2
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	f1c3 0307 	rsb	r3, r3, #7
 800cb86:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800cb88:	69bb      	ldr	r3, [r7, #24]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	da00      	bge.n	800cb90 <payload_integration+0x6e>
 800cb8e:	3307      	adds	r3, #7
 800cb90:	10db      	asrs	r3, r3, #3
 800cb92:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	3301      	adds	r3, #1
 800cb98:	425a      	negs	r2, r3
 800cb9a:	f003 0307 	and.w	r3, r3, #7
 800cb9e:	f002 0207 	and.w	r2, r2, #7
 800cba2:	bf58      	it	pl
 800cba4:	4253      	negpl	r3, r2
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	f1c3 0307 	rsb	r3, r3, #7
 800cbac:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800cbae:	69bb      	ldr	r3, [r7, #24]
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	da00      	bge.n	800cbb8 <payload_integration+0x96>
 800cbb6:	3307      	adds	r3, #7
 800cbb8:	10db      	asrs	r3, r3, #3
 800cbba:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800cbbc:	7dbb      	ldrb	r3, [r7, #22]
 800cbbe:	68ba      	ldr	r2, [r7, #8]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	7dfb      	ldrb	r3, [r7, #23]
 800cbc8:	fa42 f303 	asr.w	r3, r2, r3
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	f003 0301 	and.w	r3, r3, #1
 800cbd2:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800cbd4:	7ffa      	ldrb	r2, [r7, #31]
 800cbd6:	7cfb      	ldrb	r3, [r7, #19]
 800cbd8:	4053      	eors	r3, r2
 800cbda:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800cbdc:	7d3b      	ldrb	r3, [r7, #20]
 800cbde:	68fa      	ldr	r2, [r7, #12]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	b25a      	sxtb	r2, r3
 800cbe6:	7ff9      	ldrb	r1, [r7, #31]
 800cbe8:	7d7b      	ldrb	r3, [r7, #21]
 800cbea:	fa01 f303 	lsl.w	r3, r1, r3
 800cbee:	b25b      	sxtb	r3, r3
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	b259      	sxtb	r1, r3
 800cbf4:	7d3b      	ldrb	r3, [r7, #20]
 800cbf6:	68fa      	ldr	r2, [r7, #12]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	b2ca      	uxtb	r2, r1
 800cbfc:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	3301      	adds	r3, #1
 800cc02:	61bb      	str	r3, [r7, #24]
 800cc04:	79fb      	ldrb	r3, [r7, #7]
 800cc06:	00db      	lsls	r3, r3, #3
 800cc08:	69ba      	ldr	r2, [r7, #24]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	dbb0      	blt.n	800cb70 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800cc0e:	7ffb      	ldrb	r3, [r7, #31]
 800cc10:	01db      	lsls	r3, r3, #7
 800cc12:	b25a      	sxtb	r2, r3
 800cc14:	7ffb      	ldrb	r3, [r7, #31]
 800cc16:	019b      	lsls	r3, r3, #6
 800cc18:	b25b      	sxtb	r3, r3
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	b25b      	sxtb	r3, r3
 800cc1e:	7ffa      	ldrb	r2, [r7, #31]
 800cc20:	2a00      	cmp	r2, #0
 800cc22:	d101      	bne.n	800cc28 <payload_integration+0x106>
 800cc24:	2220      	movs	r2, #32
 800cc26:	e000      	b.n	800cc2a <payload_integration+0x108>
 800cc28:	2200      	movs	r2, #0
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	b259      	sxtb	r1, r3
 800cc2e:	79fb      	ldrb	r3, [r7, #7]
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	4413      	add	r3, r2
 800cc34:	b2ca      	uxtb	r2, r1
 800cc36:	701a      	strb	r2, [r3, #0]
}
 800cc38:	bf00      	nop
 800cc3a:	3724      	adds	r7, #36	; 0x24
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bc80      	pop	{r7}
 800cc40:	4770      	bx	lr
	...

0800cc44 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b08c      	sub	sp, #48	; 0x30
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60b9      	str	r1, [r7, #8]
 800cc4c:	607a      	str	r2, [r7, #4]
 800cc4e:	603b      	str	r3, [r7, #0]
 800cc50:	4603      	mov	r3, r0
 800cc52:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 800cc54:	2300      	movs	r3, #0
 800cc56:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 800cc58:	2300      	movs	r3, #0
 800cc5a:	623b      	str	r3, [r7, #32]
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800cc60:	f001 fd3b 	bl	800e6da <RFW_DeInit>

    if( rxContinuous != 0 )
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d001      	beq.n	800cc6e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	bf14      	ite	ne
 800cc74:	2301      	movne	r3, #1
 800cc76:	2300      	moveq	r3, #0
 800cc78:	b2da      	uxtb	r2, r3
 800cc7a:	4ba3      	ldr	r3, [pc, #652]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cc7c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800cc7e:	7bfb      	ldrb	r3, [r7, #15]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d003      	beq.n	800cc8c <RadioSetRxGenericConfig+0x48>
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	f000 80dc 	beq.w	800ce42 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800cc8a:	e194      	b.n	800cfb6 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d003      	beq.n	800cc9c <RadioSetRxGenericConfig+0x58>
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d102      	bne.n	800cca2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 800cc9c:	f04f 33ff 	mov.w	r3, #4294967295
 800cca0:	e18a      	b.n	800cfb8 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	7f9b      	ldrb	r3, [r3, #30]
 800cca6:	2b08      	cmp	r3, #8
 800cca8:	d902      	bls.n	800ccb0 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800ccaa:	f04f 33ff 	mov.w	r3, #4294967295
 800ccae:	e183      	b.n	800cfb8 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	6919      	ldr	r1, [r3, #16]
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	7f9b      	ldrb	r3, [r3, #30]
 800ccb8:	b29a      	uxth	r2, r3
 800ccba:	f107 0320 	add.w	r3, r7, #32
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f001 fd57 	bl	800e772 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	bf14      	ite	ne
 800cccc:	2301      	movne	r3, #1
 800ccce:	2300      	moveq	r3, #0
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f000 fe08 	bl	800d8e8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ccd8:	4b8b      	ldr	r3, [pc, #556]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	689b      	ldr	r3, [r3, #8]
 800cce4:	4a88      	ldr	r2, [pc, #544]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cce6:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ccee:	4b86      	ldr	r3, [pc, #536]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800ccf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	685b      	ldr	r3, [r3, #4]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f001 fc21 	bl	800e540 <SUBGRF_GetFskBandwidthRegValue>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	461a      	mov	r2, r3
 800cd02:	4b81      	ldr	r3, [pc, #516]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cd04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800cd08:	4b7f      	ldr	r3, [pc, #508]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	00db      	lsls	r3, r3, #3
 800cd16:	b29a      	uxth	r2, r3
 800cd18:	4b7b      	ldr	r3, [pc, #492]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cd1a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	7fda      	ldrb	r2, [r3, #31]
 800cd20:	4b79      	ldr	r3, [pc, #484]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cd22:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	7f9b      	ldrb	r3, [r3, #30]
 800cd28:	00db      	lsls	r3, r3, #3
 800cd2a:	b2da      	uxtb	r2, r3
 800cd2c:	4b76      	ldr	r3, [pc, #472]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cd2e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800cd36:	4b74      	ldr	r3, [pc, #464]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cd38:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d105      	bne.n	800cd50 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	695b      	ldr	r3, [r3, #20]
 800cd48:	b2da      	uxtb	r2, r3
 800cd4a:	4b6f      	ldr	r3, [pc, #444]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cd4c:	759a      	strb	r2, [r3, #22]
 800cd4e:	e00b      	b.n	800cd68 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	d103      	bne.n	800cd62 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800cd5a:	4b6b      	ldr	r3, [pc, #428]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cd5c:	22ff      	movs	r2, #255	; 0xff
 800cd5e:	759a      	strb	r2, [r3, #22]
 800cd60:	e002      	b.n	800cd68 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800cd62:	4b69      	ldr	r3, [pc, #420]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cd64:	22ff      	movs	r2, #255	; 0xff
 800cd66:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d004      	beq.n	800cd7c <RadioSetRxGenericConfig+0x138>
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800cd78:	2b02      	cmp	r3, #2
 800cd7a:	d12d      	bne.n	800cdd8 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800cd82:	2bf1      	cmp	r3, #241	; 0xf1
 800cd84:	d00c      	beq.n	800cda0 <RadioSetRxGenericConfig+0x15c>
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800cd8c:	2bf2      	cmp	r3, #242	; 0xf2
 800cd8e:	d007      	beq.n	800cda0 <RadioSetRxGenericConfig+0x15c>
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d002      	beq.n	800cda0 <RadioSetRxGenericConfig+0x15c>
            return -1;
 800cd9a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd9e:	e10b      	b.n	800cfb8 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 800cda0:	2300      	movs	r3, #0
 800cda2:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800cda8:	4b58      	ldr	r3, [pc, #352]	; (800cf0c <RadioSetRxGenericConfig+0x2c8>)
 800cdaa:	6819      	ldr	r1, [r3, #0]
 800cdac:	f107 0314 	add.w	r3, r7, #20
 800cdb0:	4a57      	ldr	r2, [pc, #348]	; (800cf10 <RadioSetRxGenericConfig+0x2cc>)
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f001 fc84 	bl	800e6c0 <RFW_Init>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d002      	beq.n	800cdc4 <RadioSetRxGenericConfig+0x180>
            return -1;
 800cdbe:	f04f 33ff 	mov.w	r3, #4294967295
 800cdc2:	e0f9      	b.n	800cfb8 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800cdc4:	4b50      	ldr	r3, [pc, #320]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800cdca:	4b4f      	ldr	r3, [pc, #316]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cdcc:	2201      	movs	r2, #1
 800cdce:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800cdd0:	4b4d      	ldr	r3, [pc, #308]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	755a      	strb	r2, [r3, #21]
        {
 800cdd6:	e00e      	b.n	800cdf6 <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800cdde:	4b4a      	ldr	r3, [pc, #296]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cde0:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800cde8:	4b47      	ldr	r3, [pc, #284]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cdea:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800cdf2:	4b45      	ldr	r3, [pc, #276]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cdf4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800cdf6:	f7ff fa7a 	bl	800c2ee <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800cdfa:	2000      	movs	r0, #0
 800cdfc:	f7fe fc2a 	bl	800b654 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ce00:	4844      	ldr	r0, [pc, #272]	; (800cf14 <RadioSetRxGenericConfig+0x2d0>)
 800ce02:	f001 f80b 	bl	800de1c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ce06:	4844      	ldr	r0, [pc, #272]	; (800cf18 <RadioSetRxGenericConfig+0x2d4>)
 800ce08:	f001 f8da 	bl	800dfc0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800ce0c:	f107 0320 	add.w	r3, r7, #32
 800ce10:	4618      	mov	r0, r3
 800ce12:	f000 fba2 	bl	800d55a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	8b9b      	ldrh	r3, [r3, #28]
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f000 fbec 	bl	800d5f8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	8b1b      	ldrh	r3, [r3, #24]
 800ce24:	4618      	mov	r0, r3
 800ce26:	f000 fbc7 	bl	800d5b8 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800ce30:	fb03 f202 	mul.w	r2, r3, r2
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	689b      	ldr	r3, [r3, #8]
 800ce38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce3c:	4a32      	ldr	r2, [pc, #200]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800ce3e:	6093      	str	r3, [r2, #8]
        break;
 800ce40:	e0b9      	b.n	800cfb6 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d102      	bne.n	800ce50 <RadioSetRxGenericConfig+0x20c>
            return -1;
 800ce4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ce4e:	e0b3      	b.n	800cfb8 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d104      	bne.n	800ce64 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	695b      	ldr	r3, [r3, #20]
 800ce5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ce62:	e002      	b.n	800ce6a <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 800ce64:	23ff      	movs	r3, #255	; 0xff
 800ce66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	bf14      	ite	ne
 800ce72:	2301      	movne	r3, #1
 800ce74:	2300      	moveq	r3, #0
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f000 fd35 	bl	800d8e8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	4618      	mov	r0, r3
 800ce84:	f000 fd3f 	bl	800d906 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800ce88:	4b1f      	ldr	r3, [pc, #124]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800ce96:	4b1c      	ldr	r3, [pc, #112]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800ce98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800cea2:	4b19      	ldr	r3, [pc, #100]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800ceae:	4b16      	ldr	r3, [pc, #88]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800ceb0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ceba:	2b02      	cmp	r3, #2
 800cebc:	d010      	beq.n	800cee0 <RadioSetRxGenericConfig+0x29c>
 800cebe:	2b02      	cmp	r3, #2
 800cec0:	dc2c      	bgt.n	800cf1c <RadioSetRxGenericConfig+0x2d8>
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d002      	beq.n	800cecc <RadioSetRxGenericConfig+0x288>
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d005      	beq.n	800ced6 <RadioSetRxGenericConfig+0x292>
            break;
 800ceca:	e027      	b.n	800cf1c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800cecc:	4b0e      	ldr	r3, [pc, #56]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cece:	2200      	movs	r2, #0
 800ced0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800ced4:	e023      	b.n	800cf1e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800ced6:	4b0c      	ldr	r3, [pc, #48]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800ced8:	2201      	movs	r2, #1
 800ceda:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800cede:	e01e      	b.n	800cf1e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cee6:	2b0b      	cmp	r3, #11
 800cee8:	d004      	beq.n	800cef4 <RadioSetRxGenericConfig+0x2b0>
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cef0:	2b0c      	cmp	r3, #12
 800cef2:	d104      	bne.n	800cefe <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800cef4:	4b04      	ldr	r3, [pc, #16]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cef6:	2201      	movs	r2, #1
 800cef8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800cefc:	e00f      	b.n	800cf1e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800cefe:	4b02      	ldr	r3, [pc, #8]	; (800cf08 <RadioSetRxGenericConfig+0x2c4>)
 800cf00:	2200      	movs	r2, #0
 800cf02:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800cf06:	e00a      	b.n	800cf1e <RadioSetRxGenericConfig+0x2da>
 800cf08:	200018c8 	.word	0x200018c8
 800cf0c:	200018c4 	.word	0x200018c4
 800cf10:	2000193c 	.word	0x2000193c
 800cf14:	20001900 	.word	0x20001900
 800cf18:	200018d6 	.word	0x200018d6
            break;
 800cf1c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800cf1e:	4b28      	ldr	r3, [pc, #160]	; (800cfc0 <RadioSetRxGenericConfig+0x37c>)
 800cf20:	2201      	movs	r2, #1
 800cf22:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800cf28:	4b25      	ldr	r3, [pc, #148]	; (800cfc0 <RadioSetRxGenericConfig+0x37c>)
 800cf2a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800cf32:	4b23      	ldr	r3, [pc, #140]	; (800cfc0 <RadioSetRxGenericConfig+0x37c>)
 800cf34:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800cf36:	4a22      	ldr	r2, [pc, #136]	; (800cfc0 <RadioSetRxGenericConfig+0x37c>)
 800cf38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf3c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800cf44:	4b1e      	ldr	r3, [pc, #120]	; (800cfc0 <RadioSetRxGenericConfig+0x37c>)
 800cf46:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800cf50:	4b1b      	ldr	r3, [pc, #108]	; (800cfc0 <RadioSetRxGenericConfig+0x37c>)
 800cf52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800cf56:	f7ff f9ca 	bl	800c2ee <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800cf5a:	2001      	movs	r0, #1
 800cf5c:	f7fe fb7a 	bl	800b654 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800cf60:	4818      	ldr	r0, [pc, #96]	; (800cfc4 <RadioSetRxGenericConfig+0x380>)
 800cf62:	f000 ff5b 	bl	800de1c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800cf66:	4818      	ldr	r0, [pc, #96]	; (800cfc8 <RadioSetRxGenericConfig+0x384>)
 800cf68:	f001 f82a 	bl	800dfc0 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800cf6c:	4b14      	ldr	r3, [pc, #80]	; (800cfc0 <RadioSetRxGenericConfig+0x37c>)
 800cf6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d10d      	bne.n	800cf92 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800cf76:	f240 7036 	movw	r0, #1846	; 0x736
 800cf7a:	f001 f97d 	bl	800e278 <SUBGRF_ReadRegister>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	f023 0304 	bic.w	r3, r3, #4
 800cf84:	b2db      	uxtb	r3, r3
 800cf86:	4619      	mov	r1, r3
 800cf88:	f240 7036 	movw	r0, #1846	; 0x736
 800cf8c:	f001 f960 	bl	800e250 <SUBGRF_WriteRegister>
 800cf90:	e00c      	b.n	800cfac <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800cf92:	f240 7036 	movw	r0, #1846	; 0x736
 800cf96:	f001 f96f 	bl	800e278 <SUBGRF_ReadRegister>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	f043 0304 	orr.w	r3, r3, #4
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	f240 7036 	movw	r0, #1846	; 0x736
 800cfa8:	f001 f952 	bl	800e250 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800cfac:	4b04      	ldr	r3, [pc, #16]	; (800cfc0 <RadioSetRxGenericConfig+0x37c>)
 800cfae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cfb2:	609a      	str	r2, [r3, #8]
        break;
 800cfb4:	bf00      	nop
    }
    return status;
 800cfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3730      	adds	r7, #48	; 0x30
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	200018c8 	.word	0x200018c8
 800cfc4:	20001900 	.word	0x20001900
 800cfc8:	200018d6 	.word	0x200018d6

0800cfcc <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b08e      	sub	sp, #56	; 0x38
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60b9      	str	r1, [r7, #8]
 800cfd4:	607b      	str	r3, [r7, #4]
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	73fb      	strb	r3, [r7, #15]
 800cfda:	4613      	mov	r3, r2
 800cfdc:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800cfde:	2300      	movs	r3, #0
 800cfe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800cfe6:	f001 fb78 	bl	800e6da <RFW_DeInit>
    switch( modem )
 800cfea:	7bfb      	ldrb	r3, [r7, #15]
 800cfec:	2b03      	cmp	r3, #3
 800cfee:	f200 8204 	bhi.w	800d3fa <RadioSetTxGenericConfig+0x42e>
 800cff2:	a201      	add	r2, pc, #4	; (adr r2, 800cff8 <RadioSetTxGenericConfig+0x2c>)
 800cff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cff8:	0800d17d 	.word	0x0800d17d
 800cffc:	0800d2c5 	.word	0x0800d2c5
 800d000:	0800d3bd 	.word	0x0800d3bd
 800d004:	0800d009 	.word	0x0800d009
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	7c9b      	ldrb	r3, [r3, #18]
 800d00c:	2b08      	cmp	r3, #8
 800d00e:	d902      	bls.n	800d016 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 800d010:	f04f 33ff 	mov.w	r3, #4294967295
 800d014:	e206      	b.n	800d424 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	6899      	ldr	r1, [r3, #8]
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	7c9b      	ldrb	r3, [r3, #18]
 800d01e:	b29a      	uxth	r2, r3
 800d020:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d024:	4618      	mov	r0, r3
 800d026:	f001 fba4 	bl	800e772 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d102      	bne.n	800d038 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 800d032:	f04f 33ff 	mov.w	r3, #4294967295
 800d036:	e1f5      	b.n	800d424 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f242 7210 	movw	r2, #10000	; 0x2710
 800d040:	4293      	cmp	r3, r2
 800d042:	d813      	bhi.n	800d06c <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 800d044:	2302      	movs	r3, #2
 800d046:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800d04a:	4b99      	ldr	r3, [pc, #612]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d04c:	2203      	movs	r2, #3
 800d04e:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800d050:	4b97      	ldr	r3, [pc, #604]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d052:	2203      	movs	r2, #3
 800d054:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a94      	ldr	r2, [pc, #592]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d05e:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	7cda      	ldrb	r2, [r3, #19]
 800d064:	4b92      	ldr	r3, [pc, #584]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d06a:	e017      	b.n	800d09c <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 800d06c:	2300      	movs	r3, #0
 800d06e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800d072:	4b8f      	ldr	r3, [pc, #572]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d074:	2200      	movs	r2, #0
 800d076:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800d078:	4b8d      	ldr	r3, [pc, #564]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d07a:	2200      	movs	r2, #0
 800d07c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4a8a      	ldr	r2, [pc, #552]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d086:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	7cda      	ldrb	r2, [r3, #19]
 800d08c:	4b88      	ldr	r3, [pc, #544]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d08e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	089b      	lsrs	r3, r3, #2
 800d098:	4a85      	ldr	r2, [pc, #532]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d09a:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	00db      	lsls	r3, r3, #3
 800d0a4:	b29a      	uxth	r2, r3
 800d0a6:	4b82      	ldr	r3, [pc, #520]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d0a8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800d0aa:	4b81      	ldr	r3, [pc, #516]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d0ac:	2204      	movs	r2, #4
 800d0ae:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	7c9b      	ldrb	r3, [r3, #18]
 800d0b4:	00db      	lsls	r3, r3, #3
 800d0b6:	b2da      	uxtb	r2, r3
 800d0b8:	4b7d      	ldr	r3, [pc, #500]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d0ba:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800d0bc:	4b7c      	ldr	r3, [pc, #496]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d0be:	2200      	movs	r2, #0
 800d0c0:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	7d9b      	ldrb	r3, [r3, #22]
 800d0c6:	2b02      	cmp	r3, #2
 800d0c8:	d003      	beq.n	800d0d2 <RadioSetTxGenericConfig+0x106>
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	7d1b      	ldrb	r3, [r3, #20]
 800d0ce:	2b02      	cmp	r3, #2
 800d0d0:	d12b      	bne.n	800d12a <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	7d5b      	ldrb	r3, [r3, #21]
 800d0d6:	2bf1      	cmp	r3, #241	; 0xf1
 800d0d8:	d00a      	beq.n	800d0f0 <RadioSetTxGenericConfig+0x124>
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	7d5b      	ldrb	r3, [r3, #21]
 800d0de:	2bf2      	cmp	r3, #242	; 0xf2
 800d0e0:	d006      	beq.n	800d0f0 <RadioSetTxGenericConfig+0x124>
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	7d5b      	ldrb	r3, [r3, #21]
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d002      	beq.n	800d0f0 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800d0ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d0ee:	e199      	b.n	800d424 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800d0fa:	4b6e      	ldr	r3, [pc, #440]	; (800d2b4 <RadioSetTxGenericConfig+0x2e8>)
 800d0fc:	6819      	ldr	r1, [r3, #0]
 800d0fe:	f107 0320 	add.w	r3, r7, #32
 800d102:	4a6d      	ldr	r2, [pc, #436]	; (800d2b8 <RadioSetTxGenericConfig+0x2ec>)
 800d104:	4618      	mov	r0, r3
 800d106:	f001 fadb 	bl	800e6c0 <RFW_Init>
 800d10a:	4603      	mov	r3, r0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d002      	beq.n	800d116 <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 800d110:	f04f 33ff 	mov.w	r3, #4294967295
 800d114:	e186      	b.n	800d424 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800d116:	4b66      	ldr	r3, [pc, #408]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d118:	2200      	movs	r2, #0
 800d11a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800d11c:	4b64      	ldr	r3, [pc, #400]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d11e:	2201      	movs	r2, #1
 800d120:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800d122:	4b63      	ldr	r3, [pc, #396]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d124:	2200      	movs	r2, #0
 800d126:	755a      	strb	r2, [r3, #21]
        {
 800d128:	e00b      	b.n	800d142 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	7d5a      	ldrb	r2, [r3, #21]
 800d12e:	4b60      	ldr	r3, [pc, #384]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d130:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	7d9a      	ldrb	r2, [r3, #22]
 800d136:	4b5e      	ldr	r3, [pc, #376]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d138:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	7d1a      	ldrb	r2, [r3, #20]
 800d13e:	4b5c      	ldr	r3, [pc, #368]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d140:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800d142:	f7ff f8d4 	bl	800c2ee <RadioStandby>
        RadioSetModem( radio_modem );
 800d146:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7fe fa82 	bl	800b654 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800d150:	485a      	ldr	r0, [pc, #360]	; (800d2bc <RadioSetTxGenericConfig+0x2f0>)
 800d152:	f000 fe63 	bl	800de1c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d156:	485a      	ldr	r0, [pc, #360]	; (800d2c0 <RadioSetTxGenericConfig+0x2f4>)
 800d158:	f000 ff32 	bl	800dfc0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800d15c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d160:	4618      	mov	r0, r3
 800d162:	f000 f9fa 	bl	800d55a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	8a1b      	ldrh	r3, [r3, #16]
 800d16a:	4618      	mov	r0, r3
 800d16c:	f000 fa44 	bl	800d5f8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	899b      	ldrh	r3, [r3, #12]
 800d174:	4618      	mov	r0, r3
 800d176:	f000 fa1f 	bl	800d5b8 <SUBGRF_SetCrcPolynomial>
        break;
 800d17a:	e13f      	b.n	800d3fc <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d102      	bne.n	800d18a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 800d184:	f04f 33ff 	mov.w	r3, #4294967295
 800d188:	e14c      	b.n	800d424 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	7c9b      	ldrb	r3, [r3, #18]
 800d18e:	2b08      	cmp	r3, #8
 800d190:	d902      	bls.n	800d198 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 800d192:	f04f 33ff 	mov.w	r3, #4294967295
 800d196:	e145      	b.n	800d424 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	6899      	ldr	r1, [r3, #8]
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	7c9b      	ldrb	r3, [r3, #18]
 800d1a0:	b29a      	uxth	r2, r3
 800d1a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f001 fae3 	bl	800e772 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800d1ac:	4b40      	ldr	r3, [pc, #256]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4a3d      	ldr	r2, [pc, #244]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d1ba:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	7cda      	ldrb	r2, [r3, #19]
 800d1c0:	4b3b      	ldr	r3, [pc, #236]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d1c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	699b      	ldr	r3, [r3, #24]
 800d1ca:	4a39      	ldr	r2, [pc, #228]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d1cc:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800d1ce:	4b38      	ldr	r3, [pc, #224]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	00db      	lsls	r3, r3, #3
 800d1dc:	b29a      	uxth	r2, r3
 800d1de:	4b34      	ldr	r3, [pc, #208]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d1e0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800d1e2:	4b33      	ldr	r3, [pc, #204]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d1e4:	2204      	movs	r2, #4
 800d1e6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	7c9b      	ldrb	r3, [r3, #18]
 800d1ec:	00db      	lsls	r3, r3, #3
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	4b2f      	ldr	r3, [pc, #188]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d1f2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800d1f4:	4b2e      	ldr	r3, [pc, #184]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	7d9b      	ldrb	r3, [r3, #22]
 800d1fe:	2b02      	cmp	r3, #2
 800d200:	d003      	beq.n	800d20a <RadioSetTxGenericConfig+0x23e>
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	7d1b      	ldrb	r3, [r3, #20]
 800d206:	2b02      	cmp	r3, #2
 800d208:	d12a      	bne.n	800d260 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	7d5b      	ldrb	r3, [r3, #21]
 800d20e:	2bf1      	cmp	r3, #241	; 0xf1
 800d210:	d00a      	beq.n	800d228 <RadioSetTxGenericConfig+0x25c>
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	7d5b      	ldrb	r3, [r3, #21]
 800d216:	2bf2      	cmp	r3, #242	; 0xf2
 800d218:	d006      	beq.n	800d228 <RadioSetTxGenericConfig+0x25c>
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	7d5b      	ldrb	r3, [r3, #21]
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d002      	beq.n	800d228 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800d222:	f04f 33ff 	mov.w	r3, #4294967295
 800d226:	e0fd      	b.n	800d424 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800d228:	2301      	movs	r3, #1
 800d22a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800d230:	4b20      	ldr	r3, [pc, #128]	; (800d2b4 <RadioSetTxGenericConfig+0x2e8>)
 800d232:	6819      	ldr	r1, [r3, #0]
 800d234:	f107 0314 	add.w	r3, r7, #20
 800d238:	4a1f      	ldr	r2, [pc, #124]	; (800d2b8 <RadioSetTxGenericConfig+0x2ec>)
 800d23a:	4618      	mov	r0, r3
 800d23c:	f001 fa40 	bl	800e6c0 <RFW_Init>
 800d240:	4603      	mov	r3, r0
 800d242:	2b00      	cmp	r3, #0
 800d244:	d002      	beq.n	800d24c <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 800d246:	f04f 33ff 	mov.w	r3, #4294967295
 800d24a:	e0eb      	b.n	800d424 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800d24c:	4b18      	ldr	r3, [pc, #96]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d24e:	2200      	movs	r2, #0
 800d250:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800d252:	4b17      	ldr	r3, [pc, #92]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d254:	2201      	movs	r2, #1
 800d256:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800d258:	4b15      	ldr	r3, [pc, #84]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d25a:	2200      	movs	r2, #0
 800d25c:	755a      	strb	r2, [r3, #21]
        {
 800d25e:	e00b      	b.n	800d278 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	7d5a      	ldrb	r2, [r3, #21]
 800d264:	4b12      	ldr	r3, [pc, #72]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d266:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	7d9a      	ldrb	r2, [r3, #22]
 800d26c:	4b10      	ldr	r3, [pc, #64]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d26e:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	7d1a      	ldrb	r2, [r3, #20]
 800d274:	4b0e      	ldr	r3, [pc, #56]	; (800d2b0 <RadioSetTxGenericConfig+0x2e4>)
 800d276:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800d278:	f7ff f839 	bl	800c2ee <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800d27c:	2000      	movs	r0, #0
 800d27e:	f7fe f9e9 	bl	800b654 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800d282:	480e      	ldr	r0, [pc, #56]	; (800d2bc <RadioSetTxGenericConfig+0x2f0>)
 800d284:	f000 fdca 	bl	800de1c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d288:	480d      	ldr	r0, [pc, #52]	; (800d2c0 <RadioSetTxGenericConfig+0x2f4>)
 800d28a:	f000 fe99 	bl	800dfc0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800d28e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d292:	4618      	mov	r0, r3
 800d294:	f000 f961 	bl	800d55a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	8a1b      	ldrh	r3, [r3, #16]
 800d29c:	4618      	mov	r0, r3
 800d29e:	f000 f9ab 	bl	800d5f8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	899b      	ldrh	r3, [r3, #12]
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f000 f986 	bl	800d5b8 <SUBGRF_SetCrcPolynomial>
        break;
 800d2ac:	e0a6      	b.n	800d3fc <RadioSetTxGenericConfig+0x430>
 800d2ae:	bf00      	nop
 800d2b0:	200018c8 	.word	0x200018c8
 800d2b4:	200018c4 	.word	0x200018c4
 800d2b8:	20001924 	.word	0x20001924
 800d2bc:	20001900 	.word	0x20001900
 800d2c0:	200018d6 	.word	0x200018d6
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800d2c4:	4b59      	ldr	r3, [pc, #356]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	781a      	ldrb	r2, [r3, #0]
 800d2d0:	4b56      	ldr	r3, [pc, #344]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d2d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	785a      	ldrb	r2, [r3, #1]
 800d2da:	4b54      	ldr	r3, [pc, #336]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d2dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	789a      	ldrb	r2, [r3, #2]
 800d2e4:	4b51      	ldr	r3, [pc, #324]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d2e6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	78db      	ldrb	r3, [r3, #3]
 800d2ee:	2b02      	cmp	r3, #2
 800d2f0:	d010      	beq.n	800d314 <RadioSetTxGenericConfig+0x348>
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	dc20      	bgt.n	800d338 <RadioSetTxGenericConfig+0x36c>
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d002      	beq.n	800d300 <RadioSetTxGenericConfig+0x334>
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d005      	beq.n	800d30a <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 800d2fe:	e01b      	b.n	800d338 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800d300:	4b4a      	ldr	r3, [pc, #296]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d302:	2200      	movs	r2, #0
 800d304:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800d308:	e017      	b.n	800d33a <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800d30a:	4b48      	ldr	r3, [pc, #288]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d30c:	2201      	movs	r2, #1
 800d30e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800d312:	e012      	b.n	800d33a <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	2b0b      	cmp	r3, #11
 800d31a:	d003      	beq.n	800d324 <RadioSetTxGenericConfig+0x358>
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	2b0c      	cmp	r3, #12
 800d322:	d104      	bne.n	800d32e <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800d324:	4b41      	ldr	r3, [pc, #260]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d326:	2201      	movs	r2, #1
 800d328:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800d32c:	e005      	b.n	800d33a <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800d32e:	4b3f      	ldr	r3, [pc, #252]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d330:	2200      	movs	r2, #0
 800d332:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800d336:	e000      	b.n	800d33a <RadioSetTxGenericConfig+0x36e>
            break;
 800d338:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800d33a:	4b3c      	ldr	r3, [pc, #240]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d33c:	2201      	movs	r2, #1
 800d33e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	889a      	ldrh	r2, [r3, #4]
 800d344:	4b39      	ldr	r3, [pc, #228]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d346:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	799a      	ldrb	r2, [r3, #6]
 800d34c:	4b37      	ldr	r3, [pc, #220]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d34e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	79da      	ldrb	r2, [r3, #7]
 800d354:	4b35      	ldr	r3, [pc, #212]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d356:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	7a1a      	ldrb	r2, [r3, #8]
 800d35e:	4b33      	ldr	r3, [pc, #204]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d360:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 800d364:	f7fe ffc3 	bl	800c2ee <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800d368:	2001      	movs	r0, #1
 800d36a:	f7fe f973 	bl	800b654 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800d36e:	4830      	ldr	r0, [pc, #192]	; (800d430 <RadioSetTxGenericConfig+0x464>)
 800d370:	f000 fd54 	bl	800de1c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d374:	482f      	ldr	r0, [pc, #188]	; (800d434 <RadioSetTxGenericConfig+0x468>)
 800d376:	f000 fe23 	bl	800dfc0 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800d37a:	4b2c      	ldr	r3, [pc, #176]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d37c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d380:	2b06      	cmp	r3, #6
 800d382:	d10d      	bne.n	800d3a0 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800d384:	f640 0089 	movw	r0, #2185	; 0x889
 800d388:	f000 ff76 	bl	800e278 <SUBGRF_ReadRegister>
 800d38c:	4603      	mov	r3, r0
 800d38e:	f023 0304 	bic.w	r3, r3, #4
 800d392:	b2db      	uxtb	r3, r3
 800d394:	4619      	mov	r1, r3
 800d396:	f640 0089 	movw	r0, #2185	; 0x889
 800d39a:	f000 ff59 	bl	800e250 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 800d39e:	e02d      	b.n	800d3fc <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800d3a0:	f640 0089 	movw	r0, #2185	; 0x889
 800d3a4:	f000 ff68 	bl	800e278 <SUBGRF_ReadRegister>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	f043 0304 	orr.w	r3, r3, #4
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	f640 0089 	movw	r0, #2185	; 0x889
 800d3b6:	f000 ff4b 	bl	800e250 <SUBGRF_WriteRegister>
        break;
 800d3ba:	e01f      	b.n	800d3fc <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d004      	beq.n	800d3ce <RadioSetTxGenericConfig+0x402>
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d3cc:	d902      	bls.n	800d3d4 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800d3ce:	f04f 33ff 	mov.w	r3, #4294967295
 800d3d2:	e027      	b.n	800d424 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 800d3d4:	2003      	movs	r0, #3
 800d3d6:	f7fe f93d 	bl	800b654 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800d3da:	4b14      	ldr	r3, [pc, #80]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d3dc:	2202      	movs	r2, #2
 800d3de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4a11      	ldr	r2, [pc, #68]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d3e8:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800d3ea:	4b10      	ldr	r3, [pc, #64]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d3ec:	2216      	movs	r2, #22
 800d3ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800d3f2:	480f      	ldr	r0, [pc, #60]	; (800d430 <RadioSetTxGenericConfig+0x464>)
 800d3f4:	f000 fd12 	bl	800de1c <SUBGRF_SetModulationParams>
        break;
 800d3f8:	e000      	b.n	800d3fc <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800d3fa:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800d3fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d400:	4618      	mov	r0, r3
 800d402:	f001 f841 	bl	800e488 <SUBGRF_SetRfTxPower>
 800d406:	4603      	mov	r3, r0
 800d408:	461a      	mov	r2, r3
 800d40a:	4b08      	ldr	r3, [pc, #32]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d40c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800d410:	4b06      	ldr	r3, [pc, #24]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d412:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d416:	4618      	mov	r0, r3
 800d418:	f001 f973 	bl	800e702 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800d41c:	4a03      	ldr	r2, [pc, #12]	; (800d42c <RadioSetTxGenericConfig+0x460>)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6053      	str	r3, [r2, #4]
    return 0;
 800d422:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800d424:	4618      	mov	r0, r3
 800d426:	3738      	adds	r7, #56	; 0x38
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	200018c8 	.word	0x200018c8
 800d430:	20001900 	.word	0x20001900
 800d434:	200018d6 	.word	0x200018d6

0800d438 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d002      	beq.n	800d44c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800d446:	4a1a      	ldr	r2, [pc, #104]	; (800d4b0 <SUBGRF_Init+0x78>)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800d44c:	f7f3 fc24 	bl	8000c98 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800d450:	2002      	movs	r0, #2
 800d452:	f001 f854 	bl	800e4fe <Radio_SMPS_Set>

    ImageCalibrated = false;
 800d456:	4b17      	ldr	r3, [pc, #92]	; (800d4b4 <SUBGRF_Init+0x7c>)
 800d458:	2200      	movs	r2, #0
 800d45a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800d45c:	2000      	movs	r0, #0
 800d45e:	f000 f977 	bl	800d750 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800d462:	f7f7 f802 	bl	800446a <RBI_IsTCXO>
 800d466:	4603      	mov	r3, r0
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d10e      	bne.n	800d48a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800d46c:	2140      	movs	r1, #64	; 0x40
 800d46e:	2001      	movs	r0, #1
 800d470:	f000 fb78 	bl	800db64 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800d474:	2100      	movs	r1, #0
 800d476:	f640 1011 	movw	r0, #2321	; 0x911
 800d47a:	f000 fee9 	bl	800e250 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800d47e:	237f      	movs	r3, #127	; 0x7f
 800d480:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800d482:	7b38      	ldrb	r0, [r7, #12]
 800d484:	f000 fa85 	bl	800d992 <SUBGRF_Calibrate>
 800d488:	e009      	b.n	800d49e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800d48a:	2120      	movs	r1, #32
 800d48c:	f640 1011 	movw	r0, #2321	; 0x911
 800d490:	f000 fede 	bl	800e250 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800d494:	2120      	movs	r1, #32
 800d496:	f640 1012 	movw	r0, #2322	; 0x912
 800d49a:	f000 fed9 	bl	800e250 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 800d49e:	f7f6 ffc1 	bl	8004424 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800d4a2:	4b05      	ldr	r3, [pc, #20]	; (800d4b8 <SUBGRF_Init+0x80>)
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	701a      	strb	r2, [r3, #0]
}
 800d4a8:	bf00      	nop
 800d4aa:	3710      	adds	r7, #16
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	20001960 	.word	0x20001960
 800d4b4:	2000195c 	.word	0x2000195c
 800d4b8:	20001954 	.word	0x20001954

0800d4bc <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800d4bc:	b480      	push	{r7}
 800d4be:	af00      	add	r7, sp, #0
    return OperatingMode;
 800d4c0:	4b02      	ldr	r3, [pc, #8]	; (800d4cc <SUBGRF_GetOperatingMode+0x10>)
 800d4c2:	781b      	ldrb	r3, [r3, #0]
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bc80      	pop	{r7}
 800d4ca:	4770      	bx	lr
 800d4cc:	20001954 	.word	0x20001954

0800d4d0 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	460b      	mov	r3, r1
 800d4da:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800d4dc:	78fb      	ldrb	r3, [r7, #3]
 800d4de:	461a      	mov	r2, r3
 800d4e0:	6879      	ldr	r1, [r7, #4]
 800d4e2:	2000      	movs	r0, #0
 800d4e4:	f000 ff20 	bl	800e328 <SUBGRF_WriteBuffer>
}
 800d4e8:	bf00      	nop
 800d4ea:	3708      	adds	r7, #8
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b086      	sub	sp, #24
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	4613      	mov	r3, r2
 800d4fc:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800d4fe:	2300      	movs	r3, #0
 800d500:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800d502:	f107 0317 	add.w	r3, r7, #23
 800d506:	4619      	mov	r1, r3
 800d508:	68b8      	ldr	r0, [r7, #8]
 800d50a:	f000 fe23 	bl	800e154 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	79fa      	ldrb	r2, [r7, #7]
 800d514:	429a      	cmp	r2, r3
 800d516:	d201      	bcs.n	800d51c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800d518:	2301      	movs	r3, #1
 800d51a:	e007      	b.n	800d52c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800d51c:	7df8      	ldrb	r0, [r7, #23]
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	461a      	mov	r2, r3
 800d524:	68f9      	ldr	r1, [r7, #12]
 800d526:	f000 ff21 	bl	800e36c <SUBGRF_ReadBuffer>

    return 0;
 800d52a:	2300      	movs	r3, #0
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3718      	adds	r7, #24
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b084      	sub	sp, #16
 800d538:	af00      	add	r7, sp, #0
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	460b      	mov	r3, r1
 800d53e:	607a      	str	r2, [r7, #4]
 800d540:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800d542:	7afb      	ldrb	r3, [r7, #11]
 800d544:	4619      	mov	r1, r3
 800d546:	68f8      	ldr	r0, [r7, #12]
 800d548:	f7ff ffc2 	bl	800d4d0 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 f91b 	bl	800d788 <SUBGRF_SetTx>
}
 800d552:	bf00      	nop
 800d554:	3710      	adds	r7, #16
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}

0800d55a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800d55a:	b580      	push	{r7, lr}
 800d55c:	b082      	sub	sp, #8
 800d55e:	af00      	add	r7, sp, #0
 800d560:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800d562:	2208      	movs	r2, #8
 800d564:	6879      	ldr	r1, [r7, #4]
 800d566:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800d56a:	f000 fe99 	bl	800e2a0 <SUBGRF_WriteRegisters>
    return 0;
 800d56e:	2300      	movs	r3, #0
}
 800d570:	4618      	mov	r0, r3
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	4603      	mov	r3, r0
 800d580:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800d582:	88fb      	ldrh	r3, [r7, #6]
 800d584:	0a1b      	lsrs	r3, r3, #8
 800d586:	b29b      	uxth	r3, r3
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800d58c:	88fb      	ldrh	r3, [r7, #6]
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800d592:	f000 fb6b 	bl	800dc6c <SUBGRF_GetPacketType>
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d108      	bne.n	800d5ae <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800d59c:	f107 030c 	add.w	r3, r7, #12
 800d5a0:	2202      	movs	r2, #2
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800d5a8:	f000 fe7a 	bl	800e2a0 <SUBGRF_WriteRegisters>
            break;
 800d5ac:	e000      	b.n	800d5b0 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800d5ae:	bf00      	nop
    }
}
 800d5b0:	bf00      	nop
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	4603      	mov	r3, r0
 800d5c0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800d5c2:	88fb      	ldrh	r3, [r7, #6]
 800d5c4:	0a1b      	lsrs	r3, r3, #8
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800d5cc:	88fb      	ldrh	r3, [r7, #6]
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800d5d2:	f000 fb4b 	bl	800dc6c <SUBGRF_GetPacketType>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d108      	bne.n	800d5ee <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800d5dc:	f107 030c 	add.w	r3, r7, #12
 800d5e0:	2202      	movs	r2, #2
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	f240 60be 	movw	r0, #1726	; 0x6be
 800d5e8:	f000 fe5a 	bl	800e2a0 <SUBGRF_WriteRegisters>
            break;
 800d5ec:	e000      	b.n	800d5f0 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800d5ee:	bf00      	nop
    }
}
 800d5f0:	bf00      	nop
 800d5f2:	3710      	adds	r7, #16
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	4603      	mov	r3, r0
 800d600:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800d602:	2300      	movs	r3, #0
 800d604:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800d606:	f000 fb31 	bl	800dc6c <SUBGRF_GetPacketType>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d121      	bne.n	800d654 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800d610:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800d614:	f000 fe30 	bl	800e278 <SUBGRF_ReadRegister>
 800d618:	4603      	mov	r3, r0
 800d61a:	f023 0301 	bic.w	r3, r3, #1
 800d61e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800d620:	88fb      	ldrh	r3, [r7, #6]
 800d622:	0a1b      	lsrs	r3, r3, #8
 800d624:	b29b      	uxth	r3, r3
 800d626:	b25b      	sxtb	r3, r3
 800d628:	f003 0301 	and.w	r3, r3, #1
 800d62c:	b25a      	sxtb	r2, r3
 800d62e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d632:	4313      	orrs	r3, r2
 800d634:	b25b      	sxtb	r3, r3
 800d636:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800d638:	7bfb      	ldrb	r3, [r7, #15]
 800d63a:	4619      	mov	r1, r3
 800d63c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800d640:	f000 fe06 	bl	800e250 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800d644:	88fb      	ldrh	r3, [r7, #6]
 800d646:	b2db      	uxtb	r3, r3
 800d648:	4619      	mov	r1, r3
 800d64a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800d64e:	f000 fdff 	bl	800e250 <SUBGRF_WriteRegister>
            break;
 800d652:	e000      	b.n	800d656 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800d654:	bf00      	nop
    }
}
 800d656:	bf00      	nop
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b082      	sub	sp, #8
 800d662:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800d664:	2300      	movs	r3, #0
 800d666:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800d668:	2300      	movs	r3, #0
 800d66a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800d66c:	2300      	movs	r3, #0
 800d66e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800d670:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800d674:	f000 fe00 	bl	800e278 <SUBGRF_ReadRegister>
 800d678:	4603      	mov	r3, r0
 800d67a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800d67c:	79fb      	ldrb	r3, [r7, #7]
 800d67e:	f023 0301 	bic.w	r3, r3, #1
 800d682:	b2db      	uxtb	r3, r3
 800d684:	4619      	mov	r1, r3
 800d686:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800d68a:	f000 fde1 	bl	800e250 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800d68e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800d692:	f000 fdf1 	bl	800e278 <SUBGRF_ReadRegister>
 800d696:	4603      	mov	r3, r0
 800d698:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800d69a:	79bb      	ldrb	r3, [r7, #6]
 800d69c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800d6a8:	f000 fdd2 	bl	800e250 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800d6ac:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800d6b0:	f000 f88a 	bl	800d7c8 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800d6b4:	463b      	mov	r3, r7
 800d6b6:	2204      	movs	r2, #4
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	f640 0019 	movw	r0, #2073	; 0x819
 800d6be:	f000 fe11 	bl	800e2e4 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800d6c2:	2000      	movs	r0, #0
 800d6c4:	f000 f844 	bl	800d750 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800d6c8:	79fb      	ldrb	r3, [r7, #7]
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800d6d0:	f000 fdbe 	bl	800e250 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800d6d4:	79bb      	ldrb	r3, [r7, #6]
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800d6dc:	f000 fdb8 	bl	800e250 <SUBGRF_WriteRegister>

    return number;
 800d6e0:	683b      	ldr	r3, [r7, #0]
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3708      	adds	r7, #8
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
	...

0800d6ec <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800d6f4:	2000      	movs	r0, #0
 800d6f6:	f7f6 fea0 	bl	800443a <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800d6fa:	2002      	movs	r0, #2
 800d6fc:	f000 feff 	bl	800e4fe <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800d700:	793b      	ldrb	r3, [r7, #4]
 800d702:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d706:	b2db      	uxtb	r3, r3
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800d70c:	793b      	ldrb	r3, [r7, #4]
 800d70e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d712:	b2db      	uxtb	r3, r3
 800d714:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800d716:	b25b      	sxtb	r3, r3
 800d718:	4313      	orrs	r3, r2
 800d71a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800d71c:	793b      	ldrb	r3, [r7, #4]
 800d71e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d722:	b2db      	uxtb	r3, r3
 800d724:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800d726:	4313      	orrs	r3, r2
 800d728:	b25b      	sxtb	r3, r3
 800d72a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800d72c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800d72e:	f107 030f 	add.w	r3, r7, #15
 800d732:	2201      	movs	r2, #1
 800d734:	4619      	mov	r1, r3
 800d736:	2084      	movs	r0, #132	; 0x84
 800d738:	f000 fe3a 	bl	800e3b0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800d73c:	4b03      	ldr	r3, [pc, #12]	; (800d74c <SUBGRF_SetSleep+0x60>)
 800d73e:	2200      	movs	r2, #0
 800d740:	701a      	strb	r2, [r3, #0]
}
 800d742:	bf00      	nop
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	20001954 	.word	0x20001954

0800d750 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	4603      	mov	r3, r0
 800d758:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800d75a:	1dfb      	adds	r3, r7, #7
 800d75c:	2201      	movs	r2, #1
 800d75e:	4619      	mov	r1, r3
 800d760:	2080      	movs	r0, #128	; 0x80
 800d762:	f000 fe25 	bl	800e3b0 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800d766:	79fb      	ldrb	r3, [r7, #7]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d103      	bne.n	800d774 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800d76c:	4b05      	ldr	r3, [pc, #20]	; (800d784 <SUBGRF_SetStandby+0x34>)
 800d76e:	2201      	movs	r2, #1
 800d770:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800d772:	e002      	b.n	800d77a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800d774:	4b03      	ldr	r3, [pc, #12]	; (800d784 <SUBGRF_SetStandby+0x34>)
 800d776:	2202      	movs	r2, #2
 800d778:	701a      	strb	r2, [r3, #0]
}
 800d77a:	bf00      	nop
 800d77c:	3708      	adds	r7, #8
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	20001954 	.word	0x20001954

0800d788 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800d790:	4b0c      	ldr	r3, [pc, #48]	; (800d7c4 <SUBGRF_SetTx+0x3c>)
 800d792:	2204      	movs	r2, #4
 800d794:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	0c1b      	lsrs	r3, r3, #16
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	0a1b      	lsrs	r3, r3, #8
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800d7ac:	f107 030c 	add.w	r3, r7, #12
 800d7b0:	2203      	movs	r2, #3
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	2083      	movs	r0, #131	; 0x83
 800d7b6:	f000 fdfb 	bl	800e3b0 <SUBGRF_WriteCommand>
}
 800d7ba:	bf00      	nop
 800d7bc:	3710      	adds	r7, #16
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	20001954 	.word	0x20001954

0800d7c8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800d7d0:	4b0c      	ldr	r3, [pc, #48]	; (800d804 <SUBGRF_SetRx+0x3c>)
 800d7d2:	2205      	movs	r2, #5
 800d7d4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	0c1b      	lsrs	r3, r3, #16
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	0a1b      	lsrs	r3, r3, #8
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800d7ec:	f107 030c 	add.w	r3, r7, #12
 800d7f0:	2203      	movs	r2, #3
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	2082      	movs	r0, #130	; 0x82
 800d7f6:	f000 fddb 	bl	800e3b0 <SUBGRF_WriteCommand>
}
 800d7fa:	bf00      	nop
 800d7fc:	3710      	adds	r7, #16
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	20001954 	.word	0x20001954

0800d808 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800d810:	4b0e      	ldr	r3, [pc, #56]	; (800d84c <SUBGRF_SetRxBoosted+0x44>)
 800d812:	2205      	movs	r2, #5
 800d814:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800d816:	2197      	movs	r1, #151	; 0x97
 800d818:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800d81c:	f000 fd18 	bl	800e250 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	0c1b      	lsrs	r3, r3, #16
 800d824:	b2db      	uxtb	r3, r3
 800d826:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	0a1b      	lsrs	r3, r3, #8
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	b2db      	uxtb	r3, r3
 800d834:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800d836:	f107 030c 	add.w	r3, r7, #12
 800d83a:	2203      	movs	r2, #3
 800d83c:	4619      	mov	r1, r3
 800d83e:	2082      	movs	r0, #130	; 0x82
 800d840:	f000 fdb6 	bl	800e3b0 <SUBGRF_WriteCommand>
}
 800d844:	bf00      	nop
 800d846:	3710      	adds	r7, #16
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	20001954 	.word	0x20001954

0800d850 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	0c1b      	lsrs	r3, r3, #16
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	0a1b      	lsrs	r3, r3, #8
 800d866:	b2db      	uxtb	r3, r3
 800d868:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	b2db      	uxtb	r3, r3
 800d86e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	0c1b      	lsrs	r3, r3, #16
 800d874:	b2db      	uxtb	r3, r3
 800d876:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	0a1b      	lsrs	r3, r3, #8
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	b2db      	uxtb	r3, r3
 800d884:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800d886:	f107 0308 	add.w	r3, r7, #8
 800d88a:	2206      	movs	r2, #6
 800d88c:	4619      	mov	r1, r3
 800d88e:	2094      	movs	r0, #148	; 0x94
 800d890:	f000 fd8e 	bl	800e3b0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800d894:	4b03      	ldr	r3, [pc, #12]	; (800d8a4 <SUBGRF_SetRxDutyCycle+0x54>)
 800d896:	2206      	movs	r2, #6
 800d898:	701a      	strb	r2, [r3, #0]
}
 800d89a:	bf00      	nop
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	20001954 	.word	0x20001954

0800d8a8 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	2100      	movs	r1, #0
 800d8b0:	20c5      	movs	r0, #197	; 0xc5
 800d8b2:	f000 fd7d 	bl	800e3b0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800d8b6:	4b02      	ldr	r3, [pc, #8]	; (800d8c0 <SUBGRF_SetCad+0x18>)
 800d8b8:	2207      	movs	r2, #7
 800d8ba:	701a      	strb	r2, [r3, #0]
}
 800d8bc:	bf00      	nop
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	20001954 	.word	0x20001954

0800d8c4 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	2100      	movs	r1, #0
 800d8cc:	20d1      	movs	r0, #209	; 0xd1
 800d8ce:	f000 fd6f 	bl	800e3b0 <SUBGRF_WriteCommand>
}
 800d8d2:	bf00      	nop
 800d8d4:	bd80      	pop	{r7, pc}

0800d8d6 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800d8d6:	b580      	push	{r7, lr}
 800d8d8:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800d8da:	2200      	movs	r2, #0
 800d8dc:	2100      	movs	r1, #0
 800d8de:	20d2      	movs	r0, #210	; 0xd2
 800d8e0:	f000 fd66 	bl	800e3b0 <SUBGRF_WriteCommand>
}
 800d8e4:	bf00      	nop
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800d8f2:	1dfb      	adds	r3, r7, #7
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	209f      	movs	r0, #159	; 0x9f
 800d8fa:	f000 fd59 	bl	800e3b0 <SUBGRF_WriteCommand>
}
 800d8fe:	bf00      	nop
 800d900:	3708      	adds	r7, #8
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}

0800d906 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800d906:	b580      	push	{r7, lr}
 800d908:	b084      	sub	sp, #16
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	4603      	mov	r3, r0
 800d90e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800d910:	1dfb      	adds	r3, r7, #7
 800d912:	2201      	movs	r2, #1
 800d914:	4619      	mov	r1, r3
 800d916:	20a0      	movs	r0, #160	; 0xa0
 800d918:	f000 fd4a 	bl	800e3b0 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800d91c:	79fb      	ldrb	r3, [r7, #7]
 800d91e:	2b3f      	cmp	r3, #63	; 0x3f
 800d920:	d91c      	bls.n	800d95c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800d922:	79fb      	ldrb	r3, [r7, #7]
 800d924:	085b      	lsrs	r3, r3, #1
 800d926:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800d928:	2300      	movs	r3, #0
 800d92a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800d92c:	2300      	movs	r3, #0
 800d92e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800d930:	e005      	b.n	800d93e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800d932:	7bfb      	ldrb	r3, [r7, #15]
 800d934:	089b      	lsrs	r3, r3, #2
 800d936:	73fb      	strb	r3, [r7, #15]
            exp++;
 800d938:	7bbb      	ldrb	r3, [r7, #14]
 800d93a:	3301      	adds	r3, #1
 800d93c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800d93e:	7bfb      	ldrb	r3, [r7, #15]
 800d940:	2b1f      	cmp	r3, #31
 800d942:	d8f6      	bhi.n	800d932 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800d944:	7bfb      	ldrb	r3, [r7, #15]
 800d946:	00db      	lsls	r3, r3, #3
 800d948:	b2da      	uxtb	r2, r3
 800d94a:	7bbb      	ldrb	r3, [r7, #14]
 800d94c:	4413      	add	r3, r2
 800d94e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800d950:	7b7b      	ldrb	r3, [r7, #13]
 800d952:	4619      	mov	r1, r3
 800d954:	f240 7006 	movw	r0, #1798	; 0x706
 800d958:	f000 fc7a 	bl	800e250 <SUBGRF_WriteRegister>
    }
}
 800d95c:	bf00      	nop
 800d95e:	3710      	adds	r7, #16
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800d96a:	f7f6 fd89 	bl	8004480 <RBI_IsDCDC>
 800d96e:	4603      	mov	r3, r0
 800d970:	2b01      	cmp	r3, #1
 800d972:	d102      	bne.n	800d97a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800d974:	2301      	movs	r3, #1
 800d976:	71fb      	strb	r3, [r7, #7]
 800d978:	e001      	b.n	800d97e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800d97a:	2300      	movs	r3, #0
 800d97c:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800d97e:	1dfb      	adds	r3, r7, #7
 800d980:	2201      	movs	r2, #1
 800d982:	4619      	mov	r1, r3
 800d984:	2096      	movs	r0, #150	; 0x96
 800d986:	f000 fd13 	bl	800e3b0 <SUBGRF_WriteCommand>
}
 800d98a:	bf00      	nop
 800d98c:	3708      	adds	r7, #8
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}

0800d992 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800d992:	b580      	push	{r7, lr}
 800d994:	b084      	sub	sp, #16
 800d996:	af00      	add	r7, sp, #0
 800d998:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800d99a:	793b      	ldrb	r3, [r7, #4]
 800d99c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	019b      	lsls	r3, r3, #6
 800d9a4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800d9a6:	793b      	ldrb	r3, [r7, #4]
 800d9a8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800d9b0:	b25b      	sxtb	r3, r3
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800d9b6:	793b      	ldrb	r3, [r7, #4]
 800d9b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800d9c0:	b25b      	sxtb	r3, r3
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800d9c6:	793b      	ldrb	r3, [r7, #4]
 800d9c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d9cc:	b2db      	uxtb	r3, r3
 800d9ce:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800d9d0:	b25b      	sxtb	r3, r3
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800d9d6:	793b      	ldrb	r3, [r7, #4]
 800d9d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800d9e0:	b25b      	sxtb	r3, r3
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800d9e6:	793b      	ldrb	r3, [r7, #4]
 800d9e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800d9f0:	b25b      	sxtb	r3, r3
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800d9f6:	793b      	ldrb	r3, [r7, #4]
 800d9f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800da00:	4313      	orrs	r3, r2
 800da02:	b25b      	sxtb	r3, r3
 800da04:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800da06:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800da08:	f107 030f 	add.w	r3, r7, #15
 800da0c:	2201      	movs	r2, #1
 800da0e:	4619      	mov	r1, r3
 800da10:	2089      	movs	r0, #137	; 0x89
 800da12:	f000 fccd 	bl	800e3b0 <SUBGRF_WriteCommand>
}
 800da16:	bf00      	nop
 800da18:	3710      	adds	r7, #16
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
	...

0800da20 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	4a1b      	ldr	r2, [pc, #108]	; (800da98 <SUBGRF_CalibrateImage+0x78>)
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d904      	bls.n	800da3a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800da30:	23e1      	movs	r3, #225	; 0xe1
 800da32:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800da34:	23e9      	movs	r3, #233	; 0xe9
 800da36:	737b      	strb	r3, [r7, #13]
 800da38:	e022      	b.n	800da80 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	4a17      	ldr	r2, [pc, #92]	; (800da9c <SUBGRF_CalibrateImage+0x7c>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d904      	bls.n	800da4c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800da42:	23d7      	movs	r3, #215	; 0xd7
 800da44:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800da46:	23db      	movs	r3, #219	; 0xdb
 800da48:	737b      	strb	r3, [r7, #13]
 800da4a:	e019      	b.n	800da80 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	4a14      	ldr	r2, [pc, #80]	; (800daa0 <SUBGRF_CalibrateImage+0x80>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d904      	bls.n	800da5e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800da54:	23c1      	movs	r3, #193	; 0xc1
 800da56:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800da58:	23c5      	movs	r3, #197	; 0xc5
 800da5a:	737b      	strb	r3, [r7, #13]
 800da5c:	e010      	b.n	800da80 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	4a10      	ldr	r2, [pc, #64]	; (800daa4 <SUBGRF_CalibrateImage+0x84>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d904      	bls.n	800da70 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800da66:	2375      	movs	r3, #117	; 0x75
 800da68:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800da6a:	2381      	movs	r3, #129	; 0x81
 800da6c:	737b      	strb	r3, [r7, #13]
 800da6e:	e007      	b.n	800da80 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	4a0d      	ldr	r2, [pc, #52]	; (800daa8 <SUBGRF_CalibrateImage+0x88>)
 800da74:	4293      	cmp	r3, r2
 800da76:	d903      	bls.n	800da80 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 800da78:	236b      	movs	r3, #107	; 0x6b
 800da7a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800da7c:	236f      	movs	r3, #111	; 0x6f
 800da7e:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800da80:	f107 030c 	add.w	r3, r7, #12
 800da84:	2202      	movs	r2, #2
 800da86:	4619      	mov	r1, r3
 800da88:	2098      	movs	r0, #152	; 0x98
 800da8a:	f000 fc91 	bl	800e3b0 <SUBGRF_WriteCommand>
}
 800da8e:	bf00      	nop
 800da90:	3710      	adds	r7, #16
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	35a4e900 	.word	0x35a4e900
 800da9c:	32a9f880 	.word	0x32a9f880
 800daa0:	2de54480 	.word	0x2de54480
 800daa4:	1b6b0b00 	.word	0x1b6b0b00
 800daa8:	1954fc40 	.word	0x1954fc40

0800daac <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800daac:	b590      	push	{r4, r7, lr}
 800daae:	b085      	sub	sp, #20
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	4604      	mov	r4, r0
 800dab4:	4608      	mov	r0, r1
 800dab6:	4611      	mov	r1, r2
 800dab8:	461a      	mov	r2, r3
 800daba:	4623      	mov	r3, r4
 800dabc:	71fb      	strb	r3, [r7, #7]
 800dabe:	4603      	mov	r3, r0
 800dac0:	71bb      	strb	r3, [r7, #6]
 800dac2:	460b      	mov	r3, r1
 800dac4:	717b      	strb	r3, [r7, #5]
 800dac6:	4613      	mov	r3, r2
 800dac8:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800daca:	79fb      	ldrb	r3, [r7, #7]
 800dacc:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800dace:	79bb      	ldrb	r3, [r7, #6]
 800dad0:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800dad2:	797b      	ldrb	r3, [r7, #5]
 800dad4:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800dad6:	793b      	ldrb	r3, [r7, #4]
 800dad8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800dada:	f107 030c 	add.w	r3, r7, #12
 800dade:	2204      	movs	r2, #4
 800dae0:	4619      	mov	r1, r3
 800dae2:	2095      	movs	r0, #149	; 0x95
 800dae4:	f000 fc64 	bl	800e3b0 <SUBGRF_WriteCommand>
}
 800dae8:	bf00      	nop
 800daea:	3714      	adds	r7, #20
 800daec:	46bd      	mov	sp, r7
 800daee:	bd90      	pop	{r4, r7, pc}

0800daf0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800daf0:	b590      	push	{r4, r7, lr}
 800daf2:	b085      	sub	sp, #20
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	4604      	mov	r4, r0
 800daf8:	4608      	mov	r0, r1
 800dafa:	4611      	mov	r1, r2
 800dafc:	461a      	mov	r2, r3
 800dafe:	4623      	mov	r3, r4
 800db00:	80fb      	strh	r3, [r7, #6]
 800db02:	4603      	mov	r3, r0
 800db04:	80bb      	strh	r3, [r7, #4]
 800db06:	460b      	mov	r3, r1
 800db08:	807b      	strh	r3, [r7, #2]
 800db0a:	4613      	mov	r3, r2
 800db0c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800db0e:	88fb      	ldrh	r3, [r7, #6]
 800db10:	0a1b      	lsrs	r3, r3, #8
 800db12:	b29b      	uxth	r3, r3
 800db14:	b2db      	uxtb	r3, r3
 800db16:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800db18:	88fb      	ldrh	r3, [r7, #6]
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800db1e:	88bb      	ldrh	r3, [r7, #4]
 800db20:	0a1b      	lsrs	r3, r3, #8
 800db22:	b29b      	uxth	r3, r3
 800db24:	b2db      	uxtb	r3, r3
 800db26:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800db28:	88bb      	ldrh	r3, [r7, #4]
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800db2e:	887b      	ldrh	r3, [r7, #2]
 800db30:	0a1b      	lsrs	r3, r3, #8
 800db32:	b29b      	uxth	r3, r3
 800db34:	b2db      	uxtb	r3, r3
 800db36:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800db38:	887b      	ldrh	r3, [r7, #2]
 800db3a:	b2db      	uxtb	r3, r3
 800db3c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800db3e:	883b      	ldrh	r3, [r7, #0]
 800db40:	0a1b      	lsrs	r3, r3, #8
 800db42:	b29b      	uxth	r3, r3
 800db44:	b2db      	uxtb	r3, r3
 800db46:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800db48:	883b      	ldrh	r3, [r7, #0]
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800db4e:	f107 0308 	add.w	r3, r7, #8
 800db52:	2208      	movs	r2, #8
 800db54:	4619      	mov	r1, r3
 800db56:	2008      	movs	r0, #8
 800db58:	f000 fc2a 	bl	800e3b0 <SUBGRF_WriteCommand>
}
 800db5c:	bf00      	nop
 800db5e:	3714      	adds	r7, #20
 800db60:	46bd      	mov	sp, r7
 800db62:	bd90      	pop	{r4, r7, pc}

0800db64 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	4603      	mov	r3, r0
 800db6c:	6039      	str	r1, [r7, #0]
 800db6e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800db70:	79fb      	ldrb	r3, [r7, #7]
 800db72:	f003 0307 	and.w	r3, r3, #7
 800db76:	b2db      	uxtb	r3, r3
 800db78:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	0c1b      	lsrs	r3, r3, #16
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	0a1b      	lsrs	r3, r3, #8
 800db86:	b2db      	uxtb	r3, r3
 800db88:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800db90:	f107 030c 	add.w	r3, r7, #12
 800db94:	2204      	movs	r2, #4
 800db96:	4619      	mov	r1, r3
 800db98:	2097      	movs	r0, #151	; 0x97
 800db9a:	f000 fc09 	bl	800e3b0 <SUBGRF_WriteCommand>
}
 800db9e:	bf00      	nop
 800dba0:	3710      	adds	r7, #16
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
	...

0800dba8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800dba8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800dbac:	b084      	sub	sp, #16
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800dbb6:	4b1d      	ldr	r3, [pc, #116]	; (800dc2c <SUBGRF_SetRfFrequency+0x84>)
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	f083 0301 	eor.w	r3, r3, #1
 800dbbe:	b2db      	uxtb	r3, r3
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d005      	beq.n	800dbd0 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f7ff ff2b 	bl	800da20 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800dbca:	4b18      	ldr	r3, [pc, #96]	; (800dc2c <SUBGRF_SetRfFrequency+0x84>)
 800dbcc:	2201      	movs	r2, #1
 800dbce:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	461c      	mov	r4, r3
 800dbd6:	4615      	mov	r5, r2
 800dbd8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800dbdc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800dbe0:	4a13      	ldr	r2, [pc, #76]	; (800dc30 <SUBGRF_SetRfFrequency+0x88>)
 800dbe2:	f04f 0300 	mov.w	r3, #0
 800dbe6:	4640      	mov	r0, r8
 800dbe8:	4649      	mov	r1, r9
 800dbea:	f7f2 fe3f 	bl	800086c <__aeabi_uldivmod>
 800dbee:	4602      	mov	r2, r0
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	4613      	mov	r3, r2
 800dbf4:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	0e1b      	lsrs	r3, r3, #24
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	0c1b      	lsrs	r3, r3, #16
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	0a1b      	lsrs	r3, r3, #8
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	b2db      	uxtb	r3, r3
 800dc12:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800dc14:	f107 0308 	add.w	r3, r7, #8
 800dc18:	2204      	movs	r2, #4
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	2086      	movs	r0, #134	; 0x86
 800dc1e:	f000 fbc7 	bl	800e3b0 <SUBGRF_WriteCommand>
}
 800dc22:	bf00      	nop
 800dc24:	3710      	adds	r7, #16
 800dc26:	46bd      	mov	sp, r7
 800dc28:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800dc2c:	2000195c 	.word	0x2000195c
 800dc30:	01e84800 	.word	0x01e84800

0800dc34 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800dc3e:	79fa      	ldrb	r2, [r7, #7]
 800dc40:	4b09      	ldr	r3, [pc, #36]	; (800dc68 <SUBGRF_SetPacketType+0x34>)
 800dc42:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800dc44:	79fb      	ldrb	r3, [r7, #7]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d104      	bne.n	800dc54 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800dc50:	f000 fafe 	bl	800e250 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800dc54:	1dfb      	adds	r3, r7, #7
 800dc56:	2201      	movs	r2, #1
 800dc58:	4619      	mov	r1, r3
 800dc5a:	208a      	movs	r0, #138	; 0x8a
 800dc5c:	f000 fba8 	bl	800e3b0 <SUBGRF_WriteCommand>
}
 800dc60:	bf00      	nop
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	20001955 	.word	0x20001955

0800dc6c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	af00      	add	r7, sp, #0
    return PacketType;
 800dc70:	4b02      	ldr	r3, [pc, #8]	; (800dc7c <SUBGRF_GetPacketType+0x10>)
 800dc72:	781b      	ldrb	r3, [r3, #0]
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bc80      	pop	{r7}
 800dc7a:	4770      	bx	lr
 800dc7c:	20001955 	.word	0x20001955

0800dc80 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	4603      	mov	r3, r0
 800dc88:	71fb      	strb	r3, [r7, #7]
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	71bb      	strb	r3, [r7, #6]
 800dc8e:	4613      	mov	r3, r2
 800dc90:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800dc92:	79fb      	ldrb	r3, [r7, #7]
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d149      	bne.n	800dd2c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800dc98:	2000      	movs	r0, #0
 800dc9a:	f7f6 fbfc 	bl	8004496 <RBI_GetRFOMaxPowerConfig>
 800dc9e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800dca0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800dca4:	68fa      	ldr	r2, [r7, #12]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	da01      	bge.n	800dcae <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2b0e      	cmp	r3, #14
 800dcb2:	d10e      	bne.n	800dcd2 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	2100      	movs	r1, #0
 800dcba:	2004      	movs	r0, #4
 800dcbc:	f7ff fef6 	bl	800daac <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800dcc0:	79ba      	ldrb	r2, [r7, #6]
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	330e      	adds	r3, #14
 800dccc:	b2db      	uxtb	r3, r3
 800dcce:	71bb      	strb	r3, [r7, #6]
 800dcd0:	e01f      	b.n	800dd12 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	2b0a      	cmp	r3, #10
 800dcd6:	d10e      	bne.n	800dcf6 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800dcd8:	2301      	movs	r3, #1
 800dcda:	2201      	movs	r2, #1
 800dcdc:	2100      	movs	r1, #0
 800dcde:	2001      	movs	r0, #1
 800dce0:	f7ff fee4 	bl	800daac <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800dce4:	79ba      	ldrb	r2, [r7, #6]
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	1ad3      	subs	r3, r2, r3
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	330d      	adds	r3, #13
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	71bb      	strb	r3, [r7, #6]
 800dcf4:	e00d      	b.n	800dd12 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	2006      	movs	r0, #6
 800dcfe:	f7ff fed5 	bl	800daac <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800dd02:	79ba      	ldrb	r2, [r7, #6]
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	1ad3      	subs	r3, r2, r3
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	330e      	adds	r3, #14
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800dd12:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800dd16:	f113 0f11 	cmn.w	r3, #17
 800dd1a:	da01      	bge.n	800dd20 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800dd1c:	23ef      	movs	r3, #239	; 0xef
 800dd1e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800dd20:	2118      	movs	r1, #24
 800dd22:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800dd26:	f000 fa93 	bl	800e250 <SUBGRF_WriteRegister>
 800dd2a:	e067      	b.n	800ddfc <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800dd2c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800dd30:	f000 faa2 	bl	800e278 <SUBGRF_ReadRegister>
 800dd34:	4603      	mov	r3, r0
 800dd36:	f043 031e 	orr.w	r3, r3, #30
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	4619      	mov	r1, r3
 800dd3e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800dd42:	f000 fa85 	bl	800e250 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800dd46:	2001      	movs	r0, #1
 800dd48:	f7f6 fba5 	bl	8004496 <RBI_GetRFOMaxPowerConfig>
 800dd4c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800dd4e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800dd52:	68fa      	ldr	r2, [r7, #12]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	da01      	bge.n	800dd5c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2b14      	cmp	r3, #20
 800dd60:	d10e      	bne.n	800dd80 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800dd62:	2301      	movs	r3, #1
 800dd64:	2200      	movs	r2, #0
 800dd66:	2105      	movs	r1, #5
 800dd68:	2003      	movs	r0, #3
 800dd6a:	f7ff fe9f 	bl	800daac <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800dd6e:	79ba      	ldrb	r2, [r7, #6]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	1ad3      	subs	r3, r2, r3
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	3316      	adds	r3, #22
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	71bb      	strb	r3, [r7, #6]
 800dd7e:	e031      	b.n	800dde4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2b11      	cmp	r3, #17
 800dd84:	d10e      	bne.n	800dda4 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800dd86:	2301      	movs	r3, #1
 800dd88:	2200      	movs	r2, #0
 800dd8a:	2103      	movs	r1, #3
 800dd8c:	2002      	movs	r0, #2
 800dd8e:	f7ff fe8d 	bl	800daac <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800dd92:	79ba      	ldrb	r2, [r7, #6]
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	1ad3      	subs	r3, r2, r3
 800dd9a:	b2db      	uxtb	r3, r3
 800dd9c:	3316      	adds	r3, #22
 800dd9e:	b2db      	uxtb	r3, r3
 800dda0:	71bb      	strb	r3, [r7, #6]
 800dda2:	e01f      	b.n	800dde4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2b0e      	cmp	r3, #14
 800dda8:	d10e      	bne.n	800ddc8 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800ddaa:	2301      	movs	r3, #1
 800ddac:	2200      	movs	r2, #0
 800ddae:	2102      	movs	r1, #2
 800ddb0:	2002      	movs	r0, #2
 800ddb2:	f7ff fe7b 	bl	800daac <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800ddb6:	79ba      	ldrb	r2, [r7, #6]
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	b2db      	uxtb	r3, r3
 800ddbc:	1ad3      	subs	r3, r2, r3
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	330e      	adds	r3, #14
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	71bb      	strb	r3, [r7, #6]
 800ddc6:	e00d      	b.n	800dde4 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800ddc8:	2301      	movs	r3, #1
 800ddca:	2200      	movs	r2, #0
 800ddcc:	2107      	movs	r1, #7
 800ddce:	2004      	movs	r0, #4
 800ddd0:	f7ff fe6c 	bl	800daac <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800ddd4:	79ba      	ldrb	r2, [r7, #6]
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	1ad3      	subs	r3, r2, r3
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	3316      	adds	r3, #22
 800dde0:	b2db      	uxtb	r3, r3
 800dde2:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800dde4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800dde8:	f113 0f09 	cmn.w	r3, #9
 800ddec:	da01      	bge.n	800ddf2 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800ddee:	23f7      	movs	r3, #247	; 0xf7
 800ddf0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800ddf2:	2138      	movs	r1, #56	; 0x38
 800ddf4:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800ddf8:	f000 fa2a 	bl	800e250 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800ddfc:	79bb      	ldrb	r3, [r7, #6]
 800ddfe:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800de00:	797b      	ldrb	r3, [r7, #5]
 800de02:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800de04:	f107 0308 	add.w	r3, r7, #8
 800de08:	2202      	movs	r2, #2
 800de0a:	4619      	mov	r1, r3
 800de0c:	208e      	movs	r0, #142	; 0x8e
 800de0e:	f000 facf 	bl	800e3b0 <SUBGRF_WriteCommand>
}
 800de12:	bf00      	nop
 800de14:	3710      	adds	r7, #16
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
	...

0800de1c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800de1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800de20:	b086      	sub	sp, #24
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800de26:	2300      	movs	r3, #0
 800de28:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800de2a:	4a61      	ldr	r2, [pc, #388]	; (800dfb0 <SUBGRF_SetModulationParams+0x194>)
 800de2c:	f107 0308 	add.w	r3, r7, #8
 800de30:	e892 0003 	ldmia.w	r2, {r0, r1}
 800de34:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	781a      	ldrb	r2, [r3, #0]
 800de3c:	4b5d      	ldr	r3, [pc, #372]	; (800dfb4 <SUBGRF_SetModulationParams+0x198>)
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	429a      	cmp	r2, r3
 800de42:	d004      	beq.n	800de4e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	4618      	mov	r0, r3
 800de4a:	f7ff fef3 	bl	800dc34 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	2b03      	cmp	r3, #3
 800de54:	f200 80a5 	bhi.w	800dfa2 <SUBGRF_SetModulationParams+0x186>
 800de58:	a201      	add	r2, pc, #4	; (adr r2, 800de60 <SUBGRF_SetModulationParams+0x44>)
 800de5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de5e:	bf00      	nop
 800de60:	0800de71 	.word	0x0800de71
 800de64:	0800df31 	.word	0x0800df31
 800de68:	0800def3 	.word	0x0800def3
 800de6c:	0800df5f 	.word	0x0800df5f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800de70:	2308      	movs	r3, #8
 800de72:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	4a4f      	ldr	r2, [pc, #316]	; (800dfb8 <SUBGRF_SetModulationParams+0x19c>)
 800de7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800de7e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	0c1b      	lsrs	r3, r3, #16
 800de84:	b2db      	uxtb	r3, r3
 800de86:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	0a1b      	lsrs	r3, r3, #8
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	b2db      	uxtb	r3, r3
 800de94:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	7b1b      	ldrb	r3, [r3, #12]
 800de9a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	7b5b      	ldrb	r3, [r3, #13]
 800dea0:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	689b      	ldr	r3, [r3, #8]
 800dea6:	2200      	movs	r2, #0
 800dea8:	461c      	mov	r4, r3
 800deaa:	4615      	mov	r5, r2
 800deac:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800deb0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800deb4:	4a41      	ldr	r2, [pc, #260]	; (800dfbc <SUBGRF_SetModulationParams+0x1a0>)
 800deb6:	f04f 0300 	mov.w	r3, #0
 800deba:	4640      	mov	r0, r8
 800debc:	4649      	mov	r1, r9
 800debe:	f7f2 fcd5 	bl	800086c <__aeabi_uldivmod>
 800dec2:	4602      	mov	r2, r0
 800dec4:	460b      	mov	r3, r1
 800dec6:	4613      	mov	r3, r2
 800dec8:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	0c1b      	lsrs	r3, r3, #16
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	0a1b      	lsrs	r3, r3, #8
 800ded6:	b2db      	uxtb	r3, r3
 800ded8:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800dee0:	7cfb      	ldrb	r3, [r7, #19]
 800dee2:	b29a      	uxth	r2, r3
 800dee4:	f107 0308 	add.w	r3, r7, #8
 800dee8:	4619      	mov	r1, r3
 800deea:	208b      	movs	r0, #139	; 0x8b
 800deec:	f000 fa60 	bl	800e3b0 <SUBGRF_WriteCommand>
        break;
 800def0:	e058      	b.n	800dfa4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800def2:	2304      	movs	r3, #4
 800def4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	691b      	ldr	r3, [r3, #16]
 800defa:	4a2f      	ldr	r2, [pc, #188]	; (800dfb8 <SUBGRF_SetModulationParams+0x19c>)
 800defc:	fbb2 f3f3 	udiv	r3, r2, r3
 800df00:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	0c1b      	lsrs	r3, r3, #16
 800df06:	b2db      	uxtb	r3, r3
 800df08:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	0a1b      	lsrs	r3, r3, #8
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	b2db      	uxtb	r3, r3
 800df16:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	7d1b      	ldrb	r3, [r3, #20]
 800df1c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800df1e:	7cfb      	ldrb	r3, [r7, #19]
 800df20:	b29a      	uxth	r2, r3
 800df22:	f107 0308 	add.w	r3, r7, #8
 800df26:	4619      	mov	r1, r3
 800df28:	208b      	movs	r0, #139	; 0x8b
 800df2a:	f000 fa41 	bl	800e3b0 <SUBGRF_WriteCommand>
        break;
 800df2e:	e039      	b.n	800dfa4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800df30:	2304      	movs	r3, #4
 800df32:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	7e1b      	ldrb	r3, [r3, #24]
 800df38:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	7e5b      	ldrb	r3, [r3, #25]
 800df3e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	7e9b      	ldrb	r3, [r3, #26]
 800df44:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	7edb      	ldrb	r3, [r3, #27]
 800df4a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800df4c:	7cfb      	ldrb	r3, [r7, #19]
 800df4e:	b29a      	uxth	r2, r3
 800df50:	f107 0308 	add.w	r3, r7, #8
 800df54:	4619      	mov	r1, r3
 800df56:	208b      	movs	r0, #139	; 0x8b
 800df58:	f000 fa2a 	bl	800e3b0 <SUBGRF_WriteCommand>

        break;
 800df5c:	e022      	b.n	800dfa4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800df5e:	2305      	movs	r3, #5
 800df60:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	4a14      	ldr	r2, [pc, #80]	; (800dfb8 <SUBGRF_SetModulationParams+0x19c>)
 800df68:	fbb2 f3f3 	udiv	r3, r2, r3
 800df6c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	0c1b      	lsrs	r3, r3, #16
 800df72:	b2db      	uxtb	r3, r3
 800df74:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	0a1b      	lsrs	r3, r3, #8
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	b2db      	uxtb	r3, r3
 800df82:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	7b1b      	ldrb	r3, [r3, #12]
 800df88:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	7b5b      	ldrb	r3, [r3, #13]
 800df8e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800df90:	7cfb      	ldrb	r3, [r7, #19]
 800df92:	b29a      	uxth	r2, r3
 800df94:	f107 0308 	add.w	r3, r7, #8
 800df98:	4619      	mov	r1, r3
 800df9a:	208b      	movs	r0, #139	; 0x8b
 800df9c:	f000 fa08 	bl	800e3b0 <SUBGRF_WriteCommand>
        break;
 800dfa0:	e000      	b.n	800dfa4 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800dfa2:	bf00      	nop
    }
}
 800dfa4:	bf00      	nop
 800dfa6:	3718      	adds	r7, #24
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800dfae:	bf00      	nop
 800dfb0:	0800ef8c 	.word	0x0800ef8c
 800dfb4:	20001955 	.word	0x20001955
 800dfb8:	3d090000 	.word	0x3d090000
 800dfbc:	01e84800 	.word	0x01e84800

0800dfc0 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b086      	sub	sp, #24
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800dfcc:	4a48      	ldr	r2, [pc, #288]	; (800e0f0 <SUBGRF_SetPacketParams+0x130>)
 800dfce:	f107 030c 	add.w	r3, r7, #12
 800dfd2:	ca07      	ldmia	r2, {r0, r1, r2}
 800dfd4:	c303      	stmia	r3!, {r0, r1}
 800dfd6:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	781a      	ldrb	r2, [r3, #0]
 800dfdc:	4b45      	ldr	r3, [pc, #276]	; (800e0f4 <SUBGRF_SetPacketParams+0x134>)
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d004      	beq.n	800dfee <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f7ff fe23 	bl	800dc34 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	2b03      	cmp	r3, #3
 800dff4:	d878      	bhi.n	800e0e8 <SUBGRF_SetPacketParams+0x128>
 800dff6:	a201      	add	r2, pc, #4	; (adr r2, 800dffc <SUBGRF_SetPacketParams+0x3c>)
 800dff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dffc:	0800e00d 	.word	0x0800e00d
 800e000:	0800e09d 	.word	0x0800e09d
 800e004:	0800e091 	.word	0x0800e091
 800e008:	0800e00d 	.word	0x0800e00d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	7a5b      	ldrb	r3, [r3, #9]
 800e010:	2bf1      	cmp	r3, #241	; 0xf1
 800e012:	d10a      	bne.n	800e02a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800e014:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e018:	f7ff faae 	bl	800d578 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800e01c:	f248 0005 	movw	r0, #32773	; 0x8005
 800e020:	f7ff faca 	bl	800d5b8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800e024:	2302      	movs	r3, #2
 800e026:	75bb      	strb	r3, [r7, #22]
 800e028:	e011      	b.n	800e04e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	7a5b      	ldrb	r3, [r3, #9]
 800e02e:	2bf2      	cmp	r3, #242	; 0xf2
 800e030:	d10a      	bne.n	800e048 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800e032:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800e036:	f7ff fa9f 	bl	800d578 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800e03a:	f241 0021 	movw	r0, #4129	; 0x1021
 800e03e:	f7ff fabb 	bl	800d5b8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800e042:	2306      	movs	r3, #6
 800e044:	75bb      	strb	r3, [r7, #22]
 800e046:	e002      	b.n	800e04e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	7a5b      	ldrb	r3, [r3, #9]
 800e04c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800e04e:	2309      	movs	r3, #9
 800e050:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	885b      	ldrh	r3, [r3, #2]
 800e056:	0a1b      	lsrs	r3, r3, #8
 800e058:	b29b      	uxth	r3, r3
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	885b      	ldrh	r3, [r3, #2]
 800e062:	b2db      	uxtb	r3, r3
 800e064:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	791b      	ldrb	r3, [r3, #4]
 800e06a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	795b      	ldrb	r3, [r3, #5]
 800e070:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	799b      	ldrb	r3, [r3, #6]
 800e076:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	79db      	ldrb	r3, [r3, #7]
 800e07c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	7a1b      	ldrb	r3, [r3, #8]
 800e082:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800e084:	7dbb      	ldrb	r3, [r7, #22]
 800e086:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	7a9b      	ldrb	r3, [r3, #10]
 800e08c:	753b      	strb	r3, [r7, #20]
        break;
 800e08e:	e022      	b.n	800e0d6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800e090:	2301      	movs	r3, #1
 800e092:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	7b1b      	ldrb	r3, [r3, #12]
 800e098:	733b      	strb	r3, [r7, #12]
        break;
 800e09a:	e01c      	b.n	800e0d6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800e09c:	2306      	movs	r3, #6
 800e09e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	89db      	ldrh	r3, [r3, #14]
 800e0a4:	0a1b      	lsrs	r3, r3, #8
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	b2db      	uxtb	r3, r3
 800e0aa:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	89db      	ldrh	r3, [r3, #14]
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	7c1a      	ldrb	r2, [r3, #16]
 800e0b8:	4b0f      	ldr	r3, [pc, #60]	; (800e0f8 <SUBGRF_SetPacketParams+0x138>)
 800e0ba:	4611      	mov	r1, r2
 800e0bc:	7019      	strb	r1, [r3, #0]
 800e0be:	4613      	mov	r3, r2
 800e0c0:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	7c5b      	ldrb	r3, [r3, #17]
 800e0c6:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	7c9b      	ldrb	r3, [r3, #18]
 800e0cc:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	7cdb      	ldrb	r3, [r3, #19]
 800e0d2:	747b      	strb	r3, [r7, #17]
        break;
 800e0d4:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800e0d6:	7dfb      	ldrb	r3, [r7, #23]
 800e0d8:	b29a      	uxth	r2, r3
 800e0da:	f107 030c 	add.w	r3, r7, #12
 800e0de:	4619      	mov	r1, r3
 800e0e0:	208c      	movs	r0, #140	; 0x8c
 800e0e2:	f000 f965 	bl	800e3b0 <SUBGRF_WriteCommand>
 800e0e6:	e000      	b.n	800e0ea <SUBGRF_SetPacketParams+0x12a>
        return;
 800e0e8:	bf00      	nop
}
 800e0ea:	3718      	adds	r7, #24
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	0800ef94 	.word	0x0800ef94
 800e0f4:	20001955 	.word	0x20001955
 800e0f8:	20001956 	.word	0x20001956

0800e0fc <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	4603      	mov	r3, r0
 800e104:	460a      	mov	r2, r1
 800e106:	71fb      	strb	r3, [r7, #7]
 800e108:	4613      	mov	r3, r2
 800e10a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800e10c:	79fb      	ldrb	r3, [r7, #7]
 800e10e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800e110:	79bb      	ldrb	r3, [r7, #6]
 800e112:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800e114:	f107 030c 	add.w	r3, r7, #12
 800e118:	2202      	movs	r2, #2
 800e11a:	4619      	mov	r1, r3
 800e11c:	208f      	movs	r0, #143	; 0x8f
 800e11e:	f000 f947 	bl	800e3b0 <SUBGRF_WriteCommand>
}
 800e122:	bf00      	nop
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}

0800e12a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800e12a:	b580      	push	{r7, lr}
 800e12c:	b082      	sub	sp, #8
 800e12e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800e130:	2300      	movs	r3, #0
 800e132:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800e134:	1d3b      	adds	r3, r7, #4
 800e136:	2201      	movs	r2, #1
 800e138:	4619      	mov	r1, r3
 800e13a:	2015      	movs	r0, #21
 800e13c:	f000 f95a 	bl	800e3f4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800e140:	793b      	ldrb	r3, [r7, #4]
 800e142:	425b      	negs	r3, r3
 800e144:	105b      	asrs	r3, r3, #1
 800e146:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800e148:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3708      	adds	r7, #8
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800e15e:	f107 030c 	add.w	r3, r7, #12
 800e162:	2202      	movs	r2, #2
 800e164:	4619      	mov	r1, r3
 800e166:	2013      	movs	r0, #19
 800e168:	f000 f944 	bl	800e3f4 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800e16c:	f7ff fd7e 	bl	800dc6c <SUBGRF_GetPacketType>
 800e170:	4603      	mov	r3, r0
 800e172:	2b01      	cmp	r3, #1
 800e174:	d10d      	bne.n	800e192 <SUBGRF_GetRxBufferStatus+0x3e>
 800e176:	4b0c      	ldr	r3, [pc, #48]	; (800e1a8 <SUBGRF_GetRxBufferStatus+0x54>)
 800e178:	781b      	ldrb	r3, [r3, #0]
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d108      	bne.n	800e192 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800e180:	f240 7002 	movw	r0, #1794	; 0x702
 800e184:	f000 f878 	bl	800e278 <SUBGRF_ReadRegister>
 800e188:	4603      	mov	r3, r0
 800e18a:	461a      	mov	r2, r3
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	701a      	strb	r2, [r3, #0]
 800e190:	e002      	b.n	800e198 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800e192:	7b3a      	ldrb	r2, [r7, #12]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800e198:	7b7a      	ldrb	r2, [r7, #13]
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	701a      	strb	r2, [r3, #0]
}
 800e19e:	bf00      	nop
 800e1a0:	3710      	adds	r7, #16
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	20001956 	.word	0x20001956

0800e1ac <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800e1b4:	f107 030c 	add.w	r3, r7, #12
 800e1b8:	2203      	movs	r2, #3
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	2014      	movs	r0, #20
 800e1be:	f000 f919 	bl	800e3f4 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800e1c2:	f7ff fd53 	bl	800dc6c <SUBGRF_GetPacketType>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d002      	beq.n	800e1dc <SUBGRF_GetPacketStatus+0x30>
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	d013      	beq.n	800e202 <SUBGRF_GetPacketStatus+0x56>
 800e1da:	e02a      	b.n	800e232 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800e1dc:	7b3a      	ldrb	r2, [r7, #12]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800e1e2:	7b7b      	ldrb	r3, [r7, #13]
 800e1e4:	425b      	negs	r3, r3
 800e1e6:	105b      	asrs	r3, r3, #1
 800e1e8:	b25a      	sxtb	r2, r3
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800e1ee:	7bbb      	ldrb	r3, [r7, #14]
 800e1f0:	425b      	negs	r3, r3
 800e1f2:	105b      	asrs	r3, r3, #1
 800e1f4:	b25a      	sxtb	r2, r3
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	609a      	str	r2, [r3, #8]
            break;
 800e200:	e020      	b.n	800e244 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800e202:	7b3b      	ldrb	r3, [r7, #12]
 800e204:	425b      	negs	r3, r3
 800e206:	105b      	asrs	r3, r3, #1
 800e208:	b25a      	sxtb	r2, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800e20e:	7b7b      	ldrb	r3, [r7, #13]
 800e210:	b25b      	sxtb	r3, r3
 800e212:	3302      	adds	r3, #2
 800e214:	109b      	asrs	r3, r3, #2
 800e216:	b25a      	sxtb	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800e21c:	7bbb      	ldrb	r3, [r7, #14]
 800e21e:	425b      	negs	r3, r3
 800e220:	105b      	asrs	r3, r3, #1
 800e222:	b25a      	sxtb	r2, r3
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800e228:	4b08      	ldr	r3, [pc, #32]	; (800e24c <SUBGRF_GetPacketStatus+0xa0>)
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	611a      	str	r2, [r3, #16]
            break;
 800e230:	e008      	b.n	800e244 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800e232:	2214      	movs	r2, #20
 800e234:	2100      	movs	r1, #0
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f000 faba 	bl	800e7b0 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	220f      	movs	r2, #15
 800e240:	701a      	strb	r2, [r3, #0]
            break;
 800e242:	bf00      	nop
    }
}
 800e244:	bf00      	nop
 800e246:	3710      	adds	r7, #16
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}
 800e24c:	20001958 	.word	0x20001958

0800e250 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	4603      	mov	r3, r0
 800e258:	460a      	mov	r2, r1
 800e25a:	80fb      	strh	r3, [r7, #6]
 800e25c:	4613      	mov	r3, r2
 800e25e:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800e260:	1d7a      	adds	r2, r7, #5
 800e262:	88f9      	ldrh	r1, [r7, #6]
 800e264:	2301      	movs	r3, #1
 800e266:	4803      	ldr	r0, [pc, #12]	; (800e274 <SUBGRF_WriteRegister+0x24>)
 800e268:	f7f4 ff92 	bl	8003190 <HAL_SUBGHZ_WriteRegisters>
}
 800e26c:	bf00      	nop
 800e26e:	3708      	adds	r7, #8
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}
 800e274:	20000118 	.word	0x20000118

0800e278 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	4603      	mov	r3, r0
 800e280:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800e282:	f107 020f 	add.w	r2, r7, #15
 800e286:	88f9      	ldrh	r1, [r7, #6]
 800e288:	2301      	movs	r3, #1
 800e28a:	4804      	ldr	r0, [pc, #16]	; (800e29c <SUBGRF_ReadRegister+0x24>)
 800e28c:	f7f4 ffdf 	bl	800324e <HAL_SUBGHZ_ReadRegisters>
    return data;
 800e290:	7bfb      	ldrb	r3, [r7, #15]
}
 800e292:	4618      	mov	r0, r3
 800e294:	3710      	adds	r7, #16
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	20000118 	.word	0x20000118

0800e2a0 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b086      	sub	sp, #24
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	6039      	str	r1, [r7, #0]
 800e2aa:	80fb      	strh	r3, [r7, #6]
 800e2ac:	4613      	mov	r3, r2
 800e2ae:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2b0:	f3ef 8310 	mrs	r3, PRIMASK
 800e2b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800e2b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e2ba:	b672      	cpsid	i
}
 800e2bc:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800e2be:	88bb      	ldrh	r3, [r7, #4]
 800e2c0:	88f9      	ldrh	r1, [r7, #6]
 800e2c2:	683a      	ldr	r2, [r7, #0]
 800e2c4:	4806      	ldr	r0, [pc, #24]	; (800e2e0 <SUBGRF_WriteRegisters+0x40>)
 800e2c6:	f7f4 ff63 	bl	8003190 <HAL_SUBGHZ_WriteRegisters>
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	f383 8810 	msr	PRIMASK, r3
}
 800e2d4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800e2d6:	bf00      	nop
 800e2d8:	3718      	adds	r7, #24
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}
 800e2de:	bf00      	nop
 800e2e0:	20000118 	.word	0x20000118

0800e2e4 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b086      	sub	sp, #24
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	6039      	str	r1, [r7, #0]
 800e2ee:	80fb      	strh	r3, [r7, #6]
 800e2f0:	4613      	mov	r3, r2
 800e2f2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2f4:	f3ef 8310 	mrs	r3, PRIMASK
 800e2f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800e2fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e2fe:	b672      	cpsid	i
}
 800e300:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800e302:	88bb      	ldrh	r3, [r7, #4]
 800e304:	88f9      	ldrh	r1, [r7, #6]
 800e306:	683a      	ldr	r2, [r7, #0]
 800e308:	4806      	ldr	r0, [pc, #24]	; (800e324 <SUBGRF_ReadRegisters+0x40>)
 800e30a:	f7f4 ffa0 	bl	800324e <HAL_SUBGHZ_ReadRegisters>
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	f383 8810 	msr	PRIMASK, r3
}
 800e318:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800e31a:	bf00      	nop
 800e31c:	3718      	adds	r7, #24
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
 800e322:	bf00      	nop
 800e324:	20000118 	.word	0x20000118

0800e328 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b086      	sub	sp, #24
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	4603      	mov	r3, r0
 800e330:	6039      	str	r1, [r7, #0]
 800e332:	71fb      	strb	r3, [r7, #7]
 800e334:	4613      	mov	r3, r2
 800e336:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e338:	f3ef 8310 	mrs	r3, PRIMASK
 800e33c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e33e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800e340:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e342:	b672      	cpsid	i
}
 800e344:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800e346:	79bb      	ldrb	r3, [r7, #6]
 800e348:	b29b      	uxth	r3, r3
 800e34a:	79f9      	ldrb	r1, [r7, #7]
 800e34c:	683a      	ldr	r2, [r7, #0]
 800e34e:	4806      	ldr	r0, [pc, #24]	; (800e368 <SUBGRF_WriteBuffer+0x40>)
 800e350:	f7f5 f891 	bl	8003476 <HAL_SUBGHZ_WriteBuffer>
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	f383 8810 	msr	PRIMASK, r3
}
 800e35e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800e360:	bf00      	nop
 800e362:	3718      	adds	r7, #24
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	20000118 	.word	0x20000118

0800e36c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b086      	sub	sp, #24
 800e370:	af00      	add	r7, sp, #0
 800e372:	4603      	mov	r3, r0
 800e374:	6039      	str	r1, [r7, #0]
 800e376:	71fb      	strb	r3, [r7, #7]
 800e378:	4613      	mov	r3, r2
 800e37a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e37c:	f3ef 8310 	mrs	r3, PRIMASK
 800e380:	60fb      	str	r3, [r7, #12]
  return(result);
 800e382:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800e384:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e386:	b672      	cpsid	i
}
 800e388:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800e38a:	79bb      	ldrb	r3, [r7, #6]
 800e38c:	b29b      	uxth	r3, r3
 800e38e:	79f9      	ldrb	r1, [r7, #7]
 800e390:	683a      	ldr	r2, [r7, #0]
 800e392:	4806      	ldr	r0, [pc, #24]	; (800e3ac <SUBGRF_ReadBuffer+0x40>)
 800e394:	f7f5 f8c2 	bl	800351c <HAL_SUBGHZ_ReadBuffer>
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	f383 8810 	msr	PRIMASK, r3
}
 800e3a2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800e3a4:	bf00      	nop
 800e3a6:	3718      	adds	r7, #24
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	20000118 	.word	0x20000118

0800e3b0 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b086      	sub	sp, #24
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	6039      	str	r1, [r7, #0]
 800e3ba:	71fb      	strb	r3, [r7, #7]
 800e3bc:	4613      	mov	r3, r2
 800e3be:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3c0:	f3ef 8310 	mrs	r3, PRIMASK
 800e3c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800e3c6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800e3c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e3ca:	b672      	cpsid	i
}
 800e3cc:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800e3ce:	88bb      	ldrh	r3, [r7, #4]
 800e3d0:	79f9      	ldrb	r1, [r7, #7]
 800e3d2:	683a      	ldr	r2, [r7, #0]
 800e3d4:	4806      	ldr	r0, [pc, #24]	; (800e3f0 <SUBGRF_WriteCommand+0x40>)
 800e3d6:	f7f4 ff9b 	bl	8003310 <HAL_SUBGHZ_ExecSetCmd>
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	f383 8810 	msr	PRIMASK, r3
}
 800e3e4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800e3e6:	bf00      	nop
 800e3e8:	3718      	adds	r7, #24
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	20000118 	.word	0x20000118

0800e3f4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b086      	sub	sp, #24
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	6039      	str	r1, [r7, #0]
 800e3fe:	71fb      	strb	r3, [r7, #7]
 800e400:	4613      	mov	r3, r2
 800e402:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e404:	f3ef 8310 	mrs	r3, PRIMASK
 800e408:	60fb      	str	r3, [r7, #12]
  return(result);
 800e40a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800e40c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e40e:	b672      	cpsid	i
}
 800e410:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800e412:	88bb      	ldrh	r3, [r7, #4]
 800e414:	79f9      	ldrb	r1, [r7, #7]
 800e416:	683a      	ldr	r2, [r7, #0]
 800e418:	4806      	ldr	r0, [pc, #24]	; (800e434 <SUBGRF_ReadCommand+0x40>)
 800e41a:	f7f4 ffd8 	bl	80033ce <HAL_SUBGHZ_ExecGetCmd>
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	f383 8810 	msr	PRIMASK, r3
}
 800e428:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800e42a:	bf00      	nop
 800e42c:	3718      	adds	r7, #24
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	20000118 	.word	0x20000118

0800e438 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	4603      	mov	r3, r0
 800e440:	460a      	mov	r2, r1
 800e442:	71fb      	strb	r3, [r7, #7]
 800e444:	4613      	mov	r3, r2
 800e446:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800e448:	2301      	movs	r3, #1
 800e44a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800e44c:	79bb      	ldrb	r3, [r7, #6]
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d10d      	bne.n	800e46e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800e452:	79fb      	ldrb	r3, [r7, #7]
 800e454:	2b01      	cmp	r3, #1
 800e456:	d104      	bne.n	800e462 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800e458:	2302      	movs	r3, #2
 800e45a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800e45c:	2004      	movs	r0, #4
 800e45e:	f000 f84e 	bl	800e4fe <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800e462:	79fb      	ldrb	r3, [r7, #7]
 800e464:	2b02      	cmp	r3, #2
 800e466:	d107      	bne.n	800e478 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800e468:	2303      	movs	r3, #3
 800e46a:	73fb      	strb	r3, [r7, #15]
 800e46c:	e004      	b.n	800e478 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800e46e:	79bb      	ldrb	r3, [r7, #6]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d101      	bne.n	800e478 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800e474:	2301      	movs	r3, #1
 800e476:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800e478:	7bfb      	ldrb	r3, [r7, #15]
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7f5 ffdd 	bl	800443a <RBI_ConfigRFSwitch>
}
 800e480:	bf00      	nop
 800e482:	3710      	adds	r7, #16
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}

0800e488 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b084      	sub	sp, #16
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	4603      	mov	r3, r0
 800e490:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800e492:	2301      	movs	r3, #1
 800e494:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800e496:	f7f5 ffdd 	bl	8004454 <RBI_GetTxConfig>
 800e49a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	2b02      	cmp	r3, #2
 800e4a0:	d016      	beq.n	800e4d0 <SUBGRF_SetRfTxPower+0x48>
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	2b02      	cmp	r3, #2
 800e4a6:	dc16      	bgt.n	800e4d6 <SUBGRF_SetRfTxPower+0x4e>
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d003      	beq.n	800e4b6 <SUBGRF_SetRfTxPower+0x2e>
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	2b01      	cmp	r3, #1
 800e4b2:	d00a      	beq.n	800e4ca <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800e4b4:	e00f      	b.n	800e4d6 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800e4b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e4ba:	2b0f      	cmp	r3, #15
 800e4bc:	dd02      	ble.n	800e4c4 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800e4be:	2302      	movs	r3, #2
 800e4c0:	73fb      	strb	r3, [r7, #15]
            break;
 800e4c2:	e009      	b.n	800e4d8 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	73fb      	strb	r3, [r7, #15]
            break;
 800e4c8:	e006      	b.n	800e4d8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	73fb      	strb	r3, [r7, #15]
            break;
 800e4ce:	e003      	b.n	800e4d8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800e4d0:	2302      	movs	r3, #2
 800e4d2:	73fb      	strb	r3, [r7, #15]
            break;
 800e4d4:	e000      	b.n	800e4d8 <SUBGRF_SetRfTxPower+0x50>
            break;
 800e4d6:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800e4d8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800e4dc:	7bfb      	ldrb	r3, [r7, #15]
 800e4de:	2202      	movs	r2, #2
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7ff fbcd 	bl	800dc80 <SUBGRF_SetTxParams>

    return paSelect;
 800e4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3710      	adds	r7, #16
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800e4f4:	2301      	movs	r3, #1
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bc80      	pop	{r7}
 800e4fc:	4770      	bx	lr

0800e4fe <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 800e4fe:	b580      	push	{r7, lr}
 800e500:	b084      	sub	sp, #16
 800e502:	af00      	add	r7, sp, #0
 800e504:	4603      	mov	r3, r0
 800e506:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800e508:	f7f5 ffba 	bl	8004480 <RBI_IsDCDC>
 800e50c:	4603      	mov	r3, r0
 800e50e:	2b01      	cmp	r3, #1
 800e510:	d112      	bne.n	800e538 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800e512:	f640 1023 	movw	r0, #2339	; 0x923
 800e516:	f7ff feaf 	bl	800e278 <SUBGRF_ReadRegister>
 800e51a:	4603      	mov	r3, r0
 800e51c:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800e51e:	7bfb      	ldrb	r3, [r7, #15]
 800e520:	f023 0306 	bic.w	r3, r3, #6
 800e524:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800e526:	7bfa      	ldrb	r2, [r7, #15]
 800e528:	79fb      	ldrb	r3, [r7, #7]
 800e52a:	4313      	orrs	r3, r2
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	4619      	mov	r1, r3
 800e530:	f640 1023 	movw	r0, #2339	; 0x923
 800e534:	f7ff fe8c 	bl	800e250 <SUBGRF_WriteRegister>
  }
}
 800e538:	bf00      	nop
 800e53a:	3710      	adds	r7, #16
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}

0800e540 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800e540:	b480      	push	{r7}
 800e542:	b085      	sub	sp, #20
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d101      	bne.n	800e552 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800e54e:	231f      	movs	r3, #31
 800e550:	e016      	b.n	800e580 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800e552:	2300      	movs	r3, #0
 800e554:	73fb      	strb	r3, [r7, #15]
 800e556:	e00f      	b.n	800e578 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800e558:	7bfb      	ldrb	r3, [r7, #15]
 800e55a:	4a0c      	ldr	r2, [pc, #48]	; (800e58c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800e55c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	429a      	cmp	r2, r3
 800e564:	d205      	bcs.n	800e572 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800e566:	7bfb      	ldrb	r3, [r7, #15]
 800e568:	4a08      	ldr	r2, [pc, #32]	; (800e58c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800e56a:	00db      	lsls	r3, r3, #3
 800e56c:	4413      	add	r3, r2
 800e56e:	791b      	ldrb	r3, [r3, #4]
 800e570:	e006      	b.n	800e580 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800e572:	7bfb      	ldrb	r3, [r7, #15]
 800e574:	3301      	adds	r3, #1
 800e576:	73fb      	strb	r3, [r7, #15]
 800e578:	7bfb      	ldrb	r3, [r7, #15]
 800e57a:	2b15      	cmp	r3, #21
 800e57c:	d9ec      	bls.n	800e558 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 800e57e:	e7fe      	b.n	800e57e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800e580:	4618      	mov	r0, r3
 800e582:	3714      	adds	r7, #20
 800e584:	46bd      	mov	sp, r7
 800e586:	bc80      	pop	{r7}
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop
 800e58c:	0800f478 	.word	0x0800f478

0800e590 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b08a      	sub	sp, #40	; 0x28
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800e59a:	4b35      	ldr	r3, [pc, #212]	; (800e670 <SUBGRF_GetCFO+0xe0>)
 800e59c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800e59e:	f640 0007 	movw	r0, #2055	; 0x807
 800e5a2:	f7ff fe69 	bl	800e278 <SUBGRF_ReadRegister>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800e5aa:	7ffb      	ldrb	r3, [r7, #31]
 800e5ac:	08db      	lsrs	r3, r3, #3
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	f003 0303 	and.w	r3, r3, #3
 800e5b4:	3328      	adds	r3, #40	; 0x28
 800e5b6:	443b      	add	r3, r7
 800e5b8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800e5bc:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800e5be:	7ffb      	ldrb	r3, [r7, #31]
 800e5c0:	f003 0307 	and.w	r3, r3, #7
 800e5c4:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 800e5c6:	7fba      	ldrb	r2, [r7, #30]
 800e5c8:	7f7b      	ldrb	r3, [r7, #29]
 800e5ca:	3b01      	subs	r3, #1
 800e5cc:	fa02 f303 	lsl.w	r3, r2, r3
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	4b28      	ldr	r3, [pc, #160]	; (800e674 <SUBGRF_GetCFO+0xe4>)
 800e5d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5d8:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800e5da:	69ba      	ldr	r2, [r7, #24]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5e2:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800e5ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5ee:	697a      	ldr	r2, [r7, #20]
 800e5f0:	fb02 f303 	mul.w	r3, r2, r3
 800e5f4:	2b07      	cmp	r3, #7
 800e5f6:	d802      	bhi.n	800e5fe <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800e5f8:	2302      	movs	r3, #2
 800e5fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800e5fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e602:	697a      	ldr	r2, [r7, #20]
 800e604:	fb02 f303 	mul.w	r3, r2, r3
 800e608:	2b03      	cmp	r3, #3
 800e60a:	d802      	bhi.n	800e612 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800e60c:	2304      	movs	r3, #4
 800e60e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800e612:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	fb02 f303 	mul.w	r3, r2, r3
 800e61c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800e61e:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800e622:	f7ff fe29 	bl	800e278 <SUBGRF_ReadRegister>
 800e626:	4603      	mov	r3, r0
 800e628:	021b      	lsls	r3, r3, #8
 800e62a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e62e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800e630:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800e634:	f7ff fe20 	bl	800e278 <SUBGRF_ReadRegister>
 800e638:	4603      	mov	r3, r0
 800e63a:	461a      	mov	r2, r3
 800e63c:	6a3b      	ldr	r3, [r7, #32]
 800e63e:	4313      	orrs	r3, r2
 800e640:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800e642:	6a3b      	ldr	r3, [r7, #32]
 800e644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d005      	beq.n	800e658 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800e64c:	6a3b      	ldr	r3, [r7, #32]
 800e64e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800e652:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800e656:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	095b      	lsrs	r3, r3, #5
 800e65c:	6a3a      	ldr	r2, [r7, #32]
 800e65e:	fb02 f303 	mul.w	r3, r2, r3
 800e662:	11da      	asrs	r2, r3, #7
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	601a      	str	r2, [r3, #0]
}
 800e668:	bf00      	nop
 800e66a:	3728      	adds	r7, #40	; 0x28
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	0c0a0804 	.word	0x0c0a0804
 800e674:	01e84800 	.word	0x01e84800

0800e678 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 800e678:	b480      	push	{r7}
 800e67a:	b087      	sub	sp, #28
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	4603      	mov	r3, r0
 800e680:	60b9      	str	r1, [r7, #8]
 800e682:	607a      	str	r2, [r7, #4]
 800e684:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 800e686:	2300      	movs	r3, #0
 800e688:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 800e68a:	f04f 33ff 	mov.w	r3, #4294967295
 800e68e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800e690:	697b      	ldr	r3, [r7, #20]
}
 800e692:	4618      	mov	r0, r3
 800e694:	371c      	adds	r7, #28
 800e696:	46bd      	mov	sp, r7
 800e698:	bc80      	pop	{r7}
 800e69a:	4770      	bx	lr

0800e69c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 800e69c:	b480      	push	{r7}
 800e69e:	b087      	sub	sp, #28
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	607a      	str	r2, [r7, #4]
 800e6a8:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 800e6ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e6b2:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800e6b4:	697b      	ldr	r3, [r7, #20]
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	371c      	adds	r7, #28
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bc80      	pop	{r7}
 800e6be:	4770      	bx	lr

0800e6c0 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b085      	sub	sp, #20
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	60b9      	str	r1, [r7, #8]
 800e6ca:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 800e6cc:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3714      	adds	r7, #20
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bc80      	pop	{r7}
 800e6d8:	4770      	bx	lr

0800e6da <RFW_DeInit>:

void RFW_DeInit( void)
{
 800e6da:	b480      	push	{r7}
 800e6dc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 800e6de:	bf00      	nop
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bc80      	pop	{r7}
 800e6e4:	4770      	bx	lr

0800e6e6 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 800e6e6:	b480      	push	{r7}
 800e6e8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 800e6ea:	2300      	movs	r3, #0
#endif
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bc80      	pop	{r7}
 800e6f2:	4770      	bx	lr

0800e6f4 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 800e6f8:	2300      	movs	r3, #0
#endif
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bc80      	pop	{r7}
 800e700:	4770      	bx	lr

0800e702 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 800e702:	b480      	push	{r7}
 800e704:	b083      	sub	sp, #12
 800e706:	af00      	add	r7, sp, #0
 800e708:	4603      	mov	r3, r0
 800e70a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 800e70c:	bf00      	nop
 800e70e:	370c      	adds	r7, #12
 800e710:	46bd      	mov	sp, r7
 800e712:	bc80      	pop	{r7}
 800e714:	4770      	bx	lr

0800e716 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 800e716:	b480      	push	{r7}
 800e718:	b087      	sub	sp, #28
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	60f8      	str	r0, [r7, #12]
 800e71e:	460b      	mov	r3, r1
 800e720:	607a      	str	r2, [r7, #4]
 800e722:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 800e724:	f04f 33ff 	mov.w	r3, #4294967295
 800e728:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 800e72a:	697b      	ldr	r3, [r7, #20]
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	371c      	adds	r7, #28
 800e730:	46bd      	mov	sp, r7
 800e732:	bc80      	pop	{r7}
 800e734:	4770      	bx	lr

0800e736 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800e736:	b480      	push	{r7}
 800e738:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 800e73a:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800e73e:	4618      	mov	r0, r3
 800e740:	46bd      	mov	sp, r7
 800e742:	bc80      	pop	{r7}
 800e744:	4770      	bx	lr

0800e746 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 800e746:	b480      	push	{r7}
 800e748:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800e74a:	bf00      	nop
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bc80      	pop	{r7}
 800e750:	4770      	bx	lr

0800e752 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800e752:	b480      	push	{r7}
 800e754:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 800e756:	bf00      	nop
 800e758:	46bd      	mov	sp, r7
 800e75a:	bc80      	pop	{r7}
 800e75c:	4770      	bx	lr

0800e75e <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 800e75e:	b480      	push	{r7}
 800e760:	b083      	sub	sp, #12
 800e762:	af00      	add	r7, sp, #0
 800e764:	4603      	mov	r3, r0
 800e766:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 800e768:	bf00      	nop
 800e76a:	370c      	adds	r7, #12
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bc80      	pop	{r7}
 800e770:	4770      	bx	lr

0800e772 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800e772:	b480      	push	{r7}
 800e774:	b087      	sub	sp, #28
 800e776:	af00      	add	r7, sp, #0
 800e778:	60f8      	str	r0, [r7, #12]
 800e77a:	60b9      	str	r1, [r7, #8]
 800e77c:	4613      	mov	r3, r2
 800e77e:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	613b      	str	r3, [r7, #16]

  while( size-- )
 800e788:	e007      	b.n	800e79a <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800e78a:	693a      	ldr	r2, [r7, #16]
 800e78c:	1c53      	adds	r3, r2, #1
 800e78e:	613b      	str	r3, [r7, #16]
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	1c59      	adds	r1, r3, #1
 800e794:	6179      	str	r1, [r7, #20]
 800e796:	7812      	ldrb	r2, [r2, #0]
 800e798:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800e79a:	88fb      	ldrh	r3, [r7, #6]
 800e79c:	1e5a      	subs	r2, r3, #1
 800e79e:	80fa      	strh	r2, [r7, #6]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d1f2      	bne.n	800e78a <UTIL_MEM_cpy_8+0x18>
    }
}
 800e7a4:	bf00      	nop
 800e7a6:	bf00      	nop
 800e7a8:	371c      	adds	r7, #28
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bc80      	pop	{r7}
 800e7ae:	4770      	bx	lr

0800e7b0 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b085      	sub	sp, #20
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	70fb      	strb	r3, [r7, #3]
 800e7bc:	4613      	mov	r3, r2
 800e7be:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800e7c4:	e004      	b.n	800e7d0 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	1c5a      	adds	r2, r3, #1
 800e7ca:	60fa      	str	r2, [r7, #12]
 800e7cc:	78fa      	ldrb	r2, [r7, #3]
 800e7ce:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800e7d0:	883b      	ldrh	r3, [r7, #0]
 800e7d2:	1e5a      	subs	r2, r3, #1
 800e7d4:	803a      	strh	r2, [r7, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d1f5      	bne.n	800e7c6 <UTIL_MEM_set_8+0x16>
  }
}
 800e7da:	bf00      	nop
 800e7dc:	bf00      	nop
 800e7de:	3714      	adds	r7, #20
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bc80      	pop	{r7}
 800e7e4:	4770      	bx	lr

0800e7e6 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	b480      	push	{r7}
 800e7ea:	b087      	sub	sp, #28
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	60f8      	str	r0, [r7, #12]
 800e7f0:	1d38      	adds	r0, r7, #4
 800e7f2:	e880 0006 	stmia.w	r0, {r1, r2}
 800e7f6:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	613b      	str	r3, [r7, #16]
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800e800:	687a      	ldr	r2, [r7, #4]
 800e802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e804:	4413      	add	r3, r2
 800e806:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800e808:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e80c:	b29a      	uxth	r2, r3
 800e80e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800e812:	b29b      	uxth	r3, r3
 800e814:	4413      	add	r3, r2
 800e816:	b29b      	uxth	r3, r3
 800e818:	b21b      	sxth	r3, r3
 800e81a:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800e81c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e824:	db0a      	blt.n	800e83c <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	3301      	adds	r3, #1
 800e82a:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800e82c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e830:	b29b      	uxth	r3, r3
 800e832:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800e836:	b29b      	uxth	r3, r3
 800e838:	b21b      	sxth	r3, r3
 800e83a:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	461a      	mov	r2, r3
 800e840:	f107 0310 	add.w	r3, r7, #16
 800e844:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e848:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800e84c:	68f8      	ldr	r0, [r7, #12]
 800e84e:	371c      	adds	r7, #28
 800e850:	46bd      	mov	sp, r7
 800e852:	bc80      	pop	{r7}
 800e854:	b002      	add	sp, #8
 800e856:	4770      	bx	lr

0800e858 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800e858:	b082      	sub	sp, #8
 800e85a:	b480      	push	{r7}
 800e85c:	b087      	sub	sp, #28
 800e85e:	af00      	add	r7, sp, #0
 800e860:	60f8      	str	r0, [r7, #12]
 800e862:	1d38      	adds	r0, r7, #4
 800e864:	e880 0006 	stmia.w	r0, {r1, r2}
 800e868:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 800e86a:	2300      	movs	r3, #0
 800e86c:	613b      	str	r3, [r7, #16]
 800e86e:	2300      	movs	r3, #0
 800e870:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 800e872:	687a      	ldr	r2, [r7, #4]
 800e874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e876:	1ad3      	subs	r3, r2, r3
 800e878:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800e87a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e87e:	b29a      	uxth	r2, r3
 800e880:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800e884:	b29b      	uxth	r3, r3
 800e886:	1ad3      	subs	r3, r2, r3
 800e888:	b29b      	uxth	r3, r3
 800e88a:	b21b      	sxth	r3, r3
 800e88c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 800e88e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e892:	2b00      	cmp	r3, #0
 800e894:	da0a      	bge.n	800e8ac <SysTimeSub+0x54>
  {
    c.Seconds--;
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	3b01      	subs	r3, #1
 800e89a:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 800e89c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e8a0:	b29b      	uxth	r3, r3
 800e8a2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e8a6:	b29b      	uxth	r3, r3
 800e8a8:	b21b      	sxth	r3, r3
 800e8aa:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	f107 0310 	add.w	r3, r7, #16
 800e8b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e8b8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800e8bc:	68f8      	ldr	r0, [r7, #12]
 800e8be:	371c      	adds	r7, #28
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bc80      	pop	{r7}
 800e8c4:	b002      	add	sp, #8
 800e8c6:	4770      	bx	lr

0800e8c8 <SysTimeGetMcuTime>:
  return sysTime;
}


SysTime_t SysTimeGetMcuTime( void )
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	60bb      	str	r3, [r7, #8]
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e8d8:	4b0a      	ldr	r3, [pc, #40]	; (800e904 <SysTimeGetMcuTime+0x3c>)
 800e8da:	691b      	ldr	r3, [r3, #16]
 800e8dc:	f107 0208 	add.w	r2, r7, #8
 800e8e0:	3204      	adds	r2, #4
 800e8e2:	4610      	mov	r0, r2
 800e8e4:	4798      	blx	r3
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	f107 0308 	add.w	r3, r7, #8
 800e8f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e8f6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	3710      	adds	r7, #16
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop
 800e904:	0800f06c 	.word	0x0800f06c

0800e908 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b088      	sub	sp, #32
 800e90c:	af02      	add	r7, sp, #8
 800e90e:	463b      	mov	r3, r7
 800e910:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e914:	4b0f      	ldr	r3, [pc, #60]	; (800e954 <SysTimeToMs+0x4c>)
 800e916:	68db      	ldr	r3, [r3, #12]
 800e918:	4798      	blx	r3
 800e91a:	4603      	mov	r3, r0
 800e91c:	b21b      	sxth	r3, r3
 800e91e:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800e920:	4b0c      	ldr	r3, [pc, #48]	; (800e954 <SysTimeToMs+0x4c>)
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	4798      	blx	r3
 800e926:	4603      	mov	r3, r0
 800e928:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 800e92a:	f107 0008 	add.w	r0, r7, #8
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	9300      	str	r3, [sp, #0]
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	463a      	mov	r2, r7
 800e936:	ca06      	ldmia	r2, {r1, r2}
 800e938:	f7ff ff8e 	bl	800e858 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e942:	fb02 f303 	mul.w	r3, r2, r3
 800e946:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e94a:	4413      	add	r3, r2
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3718      	adds	r7, #24
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}
 800e954:	0800f06c 	.word	0x0800f06c

0800e958 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b08a      	sub	sp, #40	; 0x28
 800e95c:	af02      	add	r7, sp, #8
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	4a19      	ldr	r2, [pc, #100]	; (800e9cc <SysTimeFromMs+0x74>)
 800e966:	fba2 2303 	umull	r2, r3, r2, r3
 800e96a:	099b      	lsrs	r3, r3, #6
 800e96c:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	617b      	str	r3, [r7, #20]
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	b29a      	uxth	r2, r3
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	b29b      	uxth	r3, r3
 800e97a:	4619      	mov	r1, r3
 800e97c:	0149      	lsls	r1, r1, #5
 800e97e:	1ac9      	subs	r1, r1, r3
 800e980:	0089      	lsls	r1, r1, #2
 800e982:	440b      	add	r3, r1
 800e984:	00db      	lsls	r3, r3, #3
 800e986:	b29b      	uxth	r3, r3
 800e988:	1ad3      	subs	r3, r2, r3
 800e98a:	b29b      	uxth	r3, r3
 800e98c:	b21b      	sxth	r3, r3
 800e98e:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 800e990:	f107 030c 	add.w	r3, r7, #12
 800e994:	2200      	movs	r2, #0
 800e996:	601a      	str	r2, [r3, #0]
 800e998:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e99a:	4b0d      	ldr	r3, [pc, #52]	; (800e9d0 <SysTimeFromMs+0x78>)
 800e99c:	68db      	ldr	r3, [r3, #12]
 800e99e:	4798      	blx	r3
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	b21b      	sxth	r3, r3
 800e9a4:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800e9a6:	4b0a      	ldr	r3, [pc, #40]	; (800e9d0 <SysTimeFromMs+0x78>)
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	4798      	blx	r3
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	9300      	str	r3, [sp, #0]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	f107 0214 	add.w	r2, r7, #20
 800e9bc:	ca06      	ldmia	r2, {r1, r2}
 800e9be:	f7ff ff12 	bl	800e7e6 <SysTimeAdd>
}
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	3720      	adds	r7, #32
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	10624dd3 	.word	0x10624dd3
 800e9d0:	0800f06c 	.word	0x0800f06c

0800e9d4 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	603b      	str	r3, [r7, #0]
 800e9e0:	4613      	mov	r3, r2
 800e9e2:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d023      	beq.n	800ea32 <UTIL_TIMER_Create+0x5e>
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d020      	beq.n	800ea32 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800e9f6:	4b11      	ldr	r3, [pc, #68]	; (800ea3c <UTIL_TIMER_Create+0x68>)
 800e9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9fa:	68b8      	ldr	r0, [r7, #8]
 800e9fc:	4798      	blx	r3
 800e9fe:	4602      	mov	r2, r0
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2200      	movs	r2, #0
 800ea08:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2200      	movs	r2, #0
 800ea14:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	683a      	ldr	r2, [r7, #0]
 800ea1a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	69ba      	ldr	r2, [r7, #24]
 800ea20:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	79fa      	ldrb	r2, [r7, #7]
 800ea26:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	e000      	b.n	800ea34 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800ea32:	2301      	movs	r3, #1
  }
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3710      	adds	r7, #16
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	0800f040 	.word	0x0800f040

0800ea40 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b08a      	sub	sp, #40	; 0x28
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d056      	beq.n	800eb02 <UTIL_TIMER_Start+0xc2>
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f000 f929 	bl	800ecac <TimerExists>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	f083 0301 	eor.w	r3, r3, #1
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d04d      	beq.n	800eb02 <UTIL_TIMER_Start+0xc2>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	7a5b      	ldrb	r3, [r3, #9]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d149      	bne.n	800eb02 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea6e:	f3ef 8310 	mrs	r3, PRIMASK
 800ea72:	613b      	str	r3, [r7, #16]
  return(result);
 800ea74:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800ea76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ea78:	b672      	cpsid	i
}
 800ea7a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800ea82:	4b24      	ldr	r3, [pc, #144]	; (800eb14 <UTIL_TIMER_Start+0xd4>)
 800ea84:	6a1b      	ldr	r3, [r3, #32]
 800ea86:	4798      	blx	r3
 800ea88:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800ea8a:	6a3a      	ldr	r2, [r7, #32]
 800ea8c:	69bb      	ldr	r3, [r7, #24]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d201      	bcs.n	800ea96 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6a3a      	ldr	r2, [r7, #32]
 800ea9a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2201      	movs	r2, #1
 800eaa6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800eaae:	4b1a      	ldr	r3, [pc, #104]	; (800eb18 <UTIL_TIMER_Start+0xd8>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d106      	bne.n	800eac4 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800eab6:	4b17      	ldr	r3, [pc, #92]	; (800eb14 <UTIL_TIMER_Start+0xd4>)
 800eab8:	691b      	ldr	r3, [r3, #16]
 800eaba:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f000 f96b 	bl	800ed98 <TimerInsertNewHeadTimer>
 800eac2:	e017      	b.n	800eaf4 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800eac4:	4b13      	ldr	r3, [pc, #76]	; (800eb14 <UTIL_TIMER_Start+0xd4>)
 800eac6:	699b      	ldr	r3, [r3, #24]
 800eac8:	4798      	blx	r3
 800eaca:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681a      	ldr	r2, [r3, #0]
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	441a      	add	r2, r3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	4b0e      	ldr	r3, [pc, #56]	; (800eb18 <UTIL_TIMER_Start+0xd8>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d203      	bcs.n	800eaee <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f000 f956 	bl	800ed98 <TimerInsertNewHeadTimer>
 800eaec:	e002      	b.n	800eaf4 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f000 f922 	bl	800ed38 <TimerInsertTimer>
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f383 8810 	msr	PRIMASK, r3
}
 800eafe:	bf00      	nop
  {
 800eb00:	e002      	b.n	800eb08 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800eb02:	2301      	movs	r3, #1
 800eb04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800eb08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	3728      	adds	r7, #40	; 0x28
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}
 800eb14:	0800f040 	.word	0x0800f040
 800eb18:	20001964 	.word	0x20001964

0800eb1c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b088      	sub	sp, #32
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800eb24:	2300      	movs	r3, #0
 800eb26:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d05b      	beq.n	800ebe6 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb2e:	f3ef 8310 	mrs	r3, PRIMASK
 800eb32:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb34:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800eb36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800eb38:	b672      	cpsid	i
}
 800eb3a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800eb3c:	4b2d      	ldr	r3, [pc, #180]	; (800ebf4 <UTIL_TIMER_Stop+0xd8>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800eb42:	4b2c      	ldr	r3, [pc, #176]	; (800ebf4 <UTIL_TIMER_Stop+0xd8>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800eb4e:	4b29      	ldr	r3, [pc, #164]	; (800ebf4 <UTIL_TIMER_Stop+0xd8>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d041      	beq.n	800ebda <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800eb5c:	4b25      	ldr	r3, [pc, #148]	; (800ebf4 <UTIL_TIMER_Stop+0xd8>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	687a      	ldr	r2, [r7, #4]
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d134      	bne.n	800ebd0 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800eb66:	4b23      	ldr	r3, [pc, #140]	; (800ebf4 <UTIL_TIMER_Stop+0xd8>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800eb6e:	4b21      	ldr	r3, [pc, #132]	; (800ebf4 <UTIL_TIMER_Stop+0xd8>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	695b      	ldr	r3, [r3, #20]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d00a      	beq.n	800eb8e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800eb78:	4b1e      	ldr	r3, [pc, #120]	; (800ebf4 <UTIL_TIMER_Stop+0xd8>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	695b      	ldr	r3, [r3, #20]
 800eb7e:	4a1d      	ldr	r2, [pc, #116]	; (800ebf4 <UTIL_TIMER_Stop+0xd8>)
 800eb80:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800eb82:	4b1c      	ldr	r3, [pc, #112]	; (800ebf4 <UTIL_TIMER_Stop+0xd8>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	4618      	mov	r0, r3
 800eb88:	f000 f8ac 	bl	800ece4 <TimerSetTimeout>
 800eb8c:	e023      	b.n	800ebd6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800eb8e:	4b1a      	ldr	r3, [pc, #104]	; (800ebf8 <UTIL_TIMER_Stop+0xdc>)
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	4798      	blx	r3
            TimerListHead = NULL;
 800eb94:	4b17      	ldr	r3, [pc, #92]	; (800ebf4 <UTIL_TIMER_Stop+0xd8>)
 800eb96:	2200      	movs	r2, #0
 800eb98:	601a      	str	r2, [r3, #0]
 800eb9a:	e01c      	b.n	800ebd6 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800eb9c:	697a      	ldr	r2, [r7, #20]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d110      	bne.n	800ebc6 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	695b      	ldr	r3, [r3, #20]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d006      	beq.n	800ebba <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	695b      	ldr	r3, [r3, #20]
 800ebb0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800ebb2:	69bb      	ldr	r3, [r7, #24]
 800ebb4:	697a      	ldr	r2, [r7, #20]
 800ebb6:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800ebb8:	e00d      	b.n	800ebd6 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	697a      	ldr	r2, [r7, #20]
 800ebc2:	615a      	str	r2, [r3, #20]
            break;
 800ebc4:	e007      	b.n	800ebd6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	695b      	ldr	r3, [r3, #20]
 800ebce:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d1e2      	bne.n	800eb9c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	77fb      	strb	r3, [r7, #31]
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	f383 8810 	msr	PRIMASK, r3
}
 800ebe4:	e001      	b.n	800ebea <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800ebea:	7ffb      	ldrb	r3, [r7, #31]
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3720      	adds	r7, #32
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}
 800ebf4:	20001964 	.word	0x20001964
 800ebf8:	0800f040 	.word	0x0800f040

0800ebfc <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800ec06:	2300      	movs	r3, #0
 800ec08:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d102      	bne.n	800ec16 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800ec10:	2301      	movs	r3, #1
 800ec12:	73fb      	strb	r3, [r7, #15]
 800ec14:	e014      	b.n	800ec40 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800ec16:	4b0d      	ldr	r3, [pc, #52]	; (800ec4c <UTIL_TIMER_SetPeriod+0x50>)
 800ec18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec1a:	6838      	ldr	r0, [r7, #0]
 800ec1c:	4798      	blx	r3
 800ec1e:	4602      	mov	r2, r0
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f000 f841 	bl	800ecac <TimerExists>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d007      	beq.n	800ec40 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f7ff ff73 	bl	800eb1c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f7ff ff02 	bl	800ea40 <UTIL_TIMER_Start>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800ec40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3710      	adds	r7, #16
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	0800f040 	.word	0x0800f040

0800ec50 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b082      	sub	sp, #8
 800ec54:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800ec56:	4b06      	ldr	r3, [pc, #24]	; (800ec70 <UTIL_TIMER_GetCurrentTime+0x20>)
 800ec58:	69db      	ldr	r3, [r3, #28]
 800ec5a:	4798      	blx	r3
 800ec5c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800ec5e:	4b04      	ldr	r3, [pc, #16]	; (800ec70 <UTIL_TIMER_GetCurrentTime+0x20>)
 800ec60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	4798      	blx	r3
 800ec66:	4603      	mov	r3, r0
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3708      	adds	r7, #8
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}
 800ec70:	0800f040 	.word	0x0800f040

0800ec74 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800ec7c:	4b0a      	ldr	r3, [pc, #40]	; (800eca8 <UTIL_TIMER_GetElapsedTime+0x34>)
 800ec7e:	69db      	ldr	r3, [r3, #28]
 800ec80:	4798      	blx	r3
 800ec82:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800ec84:	4b08      	ldr	r3, [pc, #32]	; (800eca8 <UTIL_TIMER_GetElapsedTime+0x34>)
 800ec86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	4798      	blx	r3
 800ec8c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800ec8e:	4b06      	ldr	r3, [pc, #24]	; (800eca8 <UTIL_TIMER_GetElapsedTime+0x34>)
 800ec90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec92:	68f9      	ldr	r1, [r7, #12]
 800ec94:	68ba      	ldr	r2, [r7, #8]
 800ec96:	1a8a      	subs	r2, r1, r2
 800ec98:	4610      	mov	r0, r2
 800ec9a:	4798      	blx	r3
 800ec9c:	4603      	mov	r3, r0
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3710      	adds	r7, #16
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	0800f040 	.word	0x0800f040

0800ecac <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800ecac:	b480      	push	{r7}
 800ecae:	b085      	sub	sp, #20
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ecb4:	4b0a      	ldr	r3, [pc, #40]	; (800ece0 <TimerExists+0x34>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800ecba:	e008      	b.n	800ecce <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800ecbc:	68fa      	ldr	r2, [r7, #12]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	d101      	bne.n	800ecc8 <TimerExists+0x1c>
    {
      return true;
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	e006      	b.n	800ecd6 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	695b      	ldr	r3, [r3, #20]
 800eccc:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d1f3      	bne.n	800ecbc <TimerExists+0x10>
  }
  return false;
 800ecd4:	2300      	movs	r3, #0
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3714      	adds	r7, #20
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bc80      	pop	{r7}
 800ecde:	4770      	bx	lr
 800ece0:	20001964 	.word	0x20001964

0800ece4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800ece4:	b590      	push	{r4, r7, lr}
 800ece6:	b085      	sub	sp, #20
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800ecec:	4b11      	ldr	r3, [pc, #68]	; (800ed34 <TimerSetTimeout+0x50>)
 800ecee:	6a1b      	ldr	r3, [r3, #32]
 800ecf0:	4798      	blx	r3
 800ecf2:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681c      	ldr	r4, [r3, #0]
 800ecfe:	4b0d      	ldr	r3, [pc, #52]	; (800ed34 <TimerSetTimeout+0x50>)
 800ed00:	699b      	ldr	r3, [r3, #24]
 800ed02:	4798      	blx	r3
 800ed04:	4602      	mov	r2, r0
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	4413      	add	r3, r2
 800ed0a:	429c      	cmp	r4, r3
 800ed0c:	d207      	bcs.n	800ed1e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800ed0e:	4b09      	ldr	r3, [pc, #36]	; (800ed34 <TimerSetTimeout+0x50>)
 800ed10:	699b      	ldr	r3, [r3, #24]
 800ed12:	4798      	blx	r3
 800ed14:	4602      	mov	r2, r0
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	441a      	add	r2, r3
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800ed1e:	4b05      	ldr	r3, [pc, #20]	; (800ed34 <TimerSetTimeout+0x50>)
 800ed20:	689b      	ldr	r3, [r3, #8]
 800ed22:	687a      	ldr	r2, [r7, #4]
 800ed24:	6812      	ldr	r2, [r2, #0]
 800ed26:	4610      	mov	r0, r2
 800ed28:	4798      	blx	r3
}
 800ed2a:	bf00      	nop
 800ed2c:	3714      	adds	r7, #20
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd90      	pop	{r4, r7, pc}
 800ed32:	bf00      	nop
 800ed34:	0800f040 	.word	0x0800f040

0800ed38 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800ed38:	b480      	push	{r7}
 800ed3a:	b085      	sub	sp, #20
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ed40:	4b14      	ldr	r3, [pc, #80]	; (800ed94 <TimerInsertTimer+0x5c>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800ed46:	4b13      	ldr	r3, [pc, #76]	; (800ed94 <TimerInsertTimer+0x5c>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	695b      	ldr	r3, [r3, #20]
 800ed4c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800ed4e:	e012      	b.n	800ed76 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681a      	ldr	r2, [r3, #0]
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d905      	bls.n	800ed68 <TimerInsertTimer+0x30>
    {
        cur = next;
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	695b      	ldr	r3, [r3, #20]
 800ed64:	60bb      	str	r3, [r7, #8]
 800ed66:	e006      	b.n	800ed76 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	68ba      	ldr	r2, [r7, #8]
 800ed72:	615a      	str	r2, [r3, #20]
        return;
 800ed74:	e009      	b.n	800ed8a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	695b      	ldr	r3, [r3, #20]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d1e8      	bne.n	800ed50 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2200      	movs	r2, #0
 800ed88:	615a      	str	r2, [r3, #20]
}
 800ed8a:	3714      	adds	r7, #20
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bc80      	pop	{r7}
 800ed90:	4770      	bx	lr
 800ed92:	bf00      	nop
 800ed94:	20001964 	.word	0x20001964

0800ed98 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800eda0:	4b0b      	ldr	r3, [pc, #44]	; (800edd0 <TimerInsertNewHeadTimer+0x38>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d002      	beq.n	800edb2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2200      	movs	r2, #0
 800edb0:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	68fa      	ldr	r2, [r7, #12]
 800edb6:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800edb8:	4a05      	ldr	r2, [pc, #20]	; (800edd0 <TimerInsertNewHeadTimer+0x38>)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800edbe:	4b04      	ldr	r3, [pc, #16]	; (800edd0 <TimerInsertNewHeadTimer+0x38>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7ff ff8e 	bl	800ece4 <TimerSetTimeout>
}
 800edc8:	bf00      	nop
 800edca:	3710      	adds	r7, #16
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	20001964 	.word	0x20001964

0800edd4 <__libc_init_array>:
 800edd4:	b570      	push	{r4, r5, r6, lr}
 800edd6:	4d0d      	ldr	r5, [pc, #52]	; (800ee0c <__libc_init_array+0x38>)
 800edd8:	4c0d      	ldr	r4, [pc, #52]	; (800ee10 <__libc_init_array+0x3c>)
 800edda:	1b64      	subs	r4, r4, r5
 800eddc:	10a4      	asrs	r4, r4, #2
 800edde:	2600      	movs	r6, #0
 800ede0:	42a6      	cmp	r6, r4
 800ede2:	d109      	bne.n	800edf8 <__libc_init_array+0x24>
 800ede4:	4d0b      	ldr	r5, [pc, #44]	; (800ee14 <__libc_init_array+0x40>)
 800ede6:	4c0c      	ldr	r4, [pc, #48]	; (800ee18 <__libc_init_array+0x44>)
 800ede8:	f000 f8a2 	bl	800ef30 <_init>
 800edec:	1b64      	subs	r4, r4, r5
 800edee:	10a4      	asrs	r4, r4, #2
 800edf0:	2600      	movs	r6, #0
 800edf2:	42a6      	cmp	r6, r4
 800edf4:	d105      	bne.n	800ee02 <__libc_init_array+0x2e>
 800edf6:	bd70      	pop	{r4, r5, r6, pc}
 800edf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800edfc:	4798      	blx	r3
 800edfe:	3601      	adds	r6, #1
 800ee00:	e7ee      	b.n	800ede0 <__libc_init_array+0xc>
 800ee02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee06:	4798      	blx	r3
 800ee08:	3601      	adds	r6, #1
 800ee0a:	e7f2      	b.n	800edf2 <__libc_init_array+0x1e>
 800ee0c:	0800f530 	.word	0x0800f530
 800ee10:	0800f530 	.word	0x0800f530
 800ee14:	0800f530 	.word	0x0800f530
 800ee18:	0800f534 	.word	0x0800f534

0800ee1c <memset>:
 800ee1c:	4402      	add	r2, r0
 800ee1e:	4603      	mov	r3, r0
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d100      	bne.n	800ee26 <memset+0xa>
 800ee24:	4770      	bx	lr
 800ee26:	f803 1b01 	strb.w	r1, [r3], #1
 800ee2a:	e7f9      	b.n	800ee20 <memset+0x4>
 800ee2c:	0000      	movs	r0, r0
	...

0800ee30 <floor>:
 800ee30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee34:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800ee38:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800ee3c:	2e13      	cmp	r6, #19
 800ee3e:	4602      	mov	r2, r0
 800ee40:	460b      	mov	r3, r1
 800ee42:	4607      	mov	r7, r0
 800ee44:	460c      	mov	r4, r1
 800ee46:	4605      	mov	r5, r0
 800ee48:	dc33      	bgt.n	800eeb2 <floor+0x82>
 800ee4a:	2e00      	cmp	r6, #0
 800ee4c:	da14      	bge.n	800ee78 <floor+0x48>
 800ee4e:	a334      	add	r3, pc, #208	; (adr r3, 800ef20 <floor+0xf0>)
 800ee50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee54:	f7f1 f996 	bl	8000184 <__adddf3>
 800ee58:	2200      	movs	r2, #0
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	f7f1 fbc6 	bl	80005ec <__aeabi_dcmpgt>
 800ee60:	b138      	cbz	r0, 800ee72 <floor+0x42>
 800ee62:	2c00      	cmp	r4, #0
 800ee64:	da58      	bge.n	800ef18 <floor+0xe8>
 800ee66:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ee6a:	431d      	orrs	r5, r3
 800ee6c:	d001      	beq.n	800ee72 <floor+0x42>
 800ee6e:	4c2e      	ldr	r4, [pc, #184]	; (800ef28 <floor+0xf8>)
 800ee70:	2500      	movs	r5, #0
 800ee72:	4623      	mov	r3, r4
 800ee74:	462f      	mov	r7, r5
 800ee76:	e025      	b.n	800eec4 <floor+0x94>
 800ee78:	4a2c      	ldr	r2, [pc, #176]	; (800ef2c <floor+0xfc>)
 800ee7a:	fa42 f806 	asr.w	r8, r2, r6
 800ee7e:	ea01 0208 	and.w	r2, r1, r8
 800ee82:	4302      	orrs	r2, r0
 800ee84:	d01e      	beq.n	800eec4 <floor+0x94>
 800ee86:	a326      	add	r3, pc, #152	; (adr r3, 800ef20 <floor+0xf0>)
 800ee88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8c:	f7f1 f97a 	bl	8000184 <__adddf3>
 800ee90:	2200      	movs	r2, #0
 800ee92:	2300      	movs	r3, #0
 800ee94:	f7f1 fbaa 	bl	80005ec <__aeabi_dcmpgt>
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	d0ea      	beq.n	800ee72 <floor+0x42>
 800ee9c:	2c00      	cmp	r4, #0
 800ee9e:	bfbe      	ittt	lt
 800eea0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800eea4:	fa43 f606 	asrlt.w	r6, r3, r6
 800eea8:	19a4      	addlt	r4, r4, r6
 800eeaa:	ea24 0408 	bic.w	r4, r4, r8
 800eeae:	2500      	movs	r5, #0
 800eeb0:	e7df      	b.n	800ee72 <floor+0x42>
 800eeb2:	2e33      	cmp	r6, #51	; 0x33
 800eeb4:	dd0a      	ble.n	800eecc <floor+0x9c>
 800eeb6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800eeba:	d103      	bne.n	800eec4 <floor+0x94>
 800eebc:	f7f1 f962 	bl	8000184 <__adddf3>
 800eec0:	4607      	mov	r7, r0
 800eec2:	460b      	mov	r3, r1
 800eec4:	4638      	mov	r0, r7
 800eec6:	4619      	mov	r1, r3
 800eec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eecc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800eed0:	f04f 32ff 	mov.w	r2, #4294967295
 800eed4:	fa22 f808 	lsr.w	r8, r2, r8
 800eed8:	ea18 0f00 	tst.w	r8, r0
 800eedc:	d0f2      	beq.n	800eec4 <floor+0x94>
 800eede:	a310      	add	r3, pc, #64	; (adr r3, 800ef20 <floor+0xf0>)
 800eee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee4:	f7f1 f94e 	bl	8000184 <__adddf3>
 800eee8:	2200      	movs	r2, #0
 800eeea:	2300      	movs	r3, #0
 800eeec:	f7f1 fb7e 	bl	80005ec <__aeabi_dcmpgt>
 800eef0:	2800      	cmp	r0, #0
 800eef2:	d0be      	beq.n	800ee72 <floor+0x42>
 800eef4:	2c00      	cmp	r4, #0
 800eef6:	da02      	bge.n	800eefe <floor+0xce>
 800eef8:	2e14      	cmp	r6, #20
 800eefa:	d103      	bne.n	800ef04 <floor+0xd4>
 800eefc:	3401      	adds	r4, #1
 800eefe:	ea25 0508 	bic.w	r5, r5, r8
 800ef02:	e7b6      	b.n	800ee72 <floor+0x42>
 800ef04:	2301      	movs	r3, #1
 800ef06:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ef0a:	fa03 f606 	lsl.w	r6, r3, r6
 800ef0e:	4435      	add	r5, r6
 800ef10:	42bd      	cmp	r5, r7
 800ef12:	bf38      	it	cc
 800ef14:	18e4      	addcc	r4, r4, r3
 800ef16:	e7f2      	b.n	800eefe <floor+0xce>
 800ef18:	2500      	movs	r5, #0
 800ef1a:	462c      	mov	r4, r5
 800ef1c:	e7a9      	b.n	800ee72 <floor+0x42>
 800ef1e:	bf00      	nop
 800ef20:	8800759c 	.word	0x8800759c
 800ef24:	7e37e43c 	.word	0x7e37e43c
 800ef28:	bff00000 	.word	0xbff00000
 800ef2c:	000fffff 	.word	0x000fffff

0800ef30 <_init>:
 800ef30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef32:	bf00      	nop
 800ef34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef36:	bc08      	pop	{r3}
 800ef38:	469e      	mov	lr, r3
 800ef3a:	4770      	bx	lr

0800ef3c <_fini>:
 800ef3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef3e:	bf00      	nop
 800ef40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef42:	bc08      	pop	{r3}
 800ef44:	469e      	mov	lr, r3
 800ef46:	4770      	bx	lr
