
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136b8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe0  080137f8  080137f8  000237f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080147d8  080147d8  0003e5c0  2**0
                  CONTENTS
  4 .ARM          00000008  080147d8  080147d8  000247d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080147e0  080147e0  0003e5c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080147e0  080147e0  000247e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080147e8  080147e8  000247e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000c0  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000180  20000000  080147f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000af8  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          00001638  20000180  20000180  00040180  2**2
                  ALLOC
 12 RAM1_region   00000000  200017b8  200017b8  0003e5c0  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5c0  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  200017b8  200017b8  00040180  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY
 16 .debug_info   0005766c  00000000  00000000  0003e5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000b8b9  00000000  00000000  00095c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00024e69  00000000  00000000  000a150f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002c70  00000000  00000000  000c6378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002e98  00000000  00000000  000c8fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002b29d  00000000  00000000  000cbe80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004abd8  00000000  00000000  000f711d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000df4b1  00000000  00000000  00141cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  002211a6  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000085a0  00000000  00000000  002211f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000180 	.word	0x20000180
 800015c:	00000000 	.word	0x00000000
 8000160:	080137e0 	.word	0x080137e0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000184 	.word	0x20000184
 800017c:	080137e0 	.word	0x080137e0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__gedf2>:
 80005a8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ac:	e006      	b.n	80005bc <__cmpdf2+0x4>
 80005ae:	bf00      	nop

080005b0 <__ledf2>:
 80005b0:	f04f 0c01 	mov.w	ip, #1
 80005b4:	e002      	b.n	80005bc <__cmpdf2+0x4>
 80005b6:	bf00      	nop

080005b8 <__cmpdf2>:
 80005b8:	f04f 0c01 	mov.w	ip, #1
 80005bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005cc:	bf18      	it	ne
 80005ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005d2:	d01b      	beq.n	800060c <__cmpdf2+0x54>
 80005d4:	b001      	add	sp, #4
 80005d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005da:	bf0c      	ite	eq
 80005dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005e0:	ea91 0f03 	teqne	r1, r3
 80005e4:	bf02      	ittt	eq
 80005e6:	ea90 0f02 	teqeq	r0, r2
 80005ea:	2000      	moveq	r0, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	f110 0f00 	cmn.w	r0, #0
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf58      	it	pl
 80005f8:	4299      	cmppl	r1, r3
 80005fa:	bf08      	it	eq
 80005fc:	4290      	cmpeq	r0, r2
 80005fe:	bf2c      	ite	cs
 8000600:	17d8      	asrcs	r0, r3, #31
 8000602:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000606:	f040 0001 	orr.w	r0, r0, #1
 800060a:	4770      	bx	lr
 800060c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	d102      	bne.n	800061c <__cmpdf2+0x64>
 8000616:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800061a:	d107      	bne.n	800062c <__cmpdf2+0x74>
 800061c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000624:	d1d6      	bne.n	80005d4 <__cmpdf2+0x1c>
 8000626:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800062a:	d0d3      	beq.n	80005d4 <__cmpdf2+0x1c>
 800062c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <__aeabi_cdrcmple>:
 8000634:	4684      	mov	ip, r0
 8000636:	4610      	mov	r0, r2
 8000638:	4662      	mov	r2, ip
 800063a:	468c      	mov	ip, r1
 800063c:	4619      	mov	r1, r3
 800063e:	4663      	mov	r3, ip
 8000640:	e000      	b.n	8000644 <__aeabi_cdcmpeq>
 8000642:	bf00      	nop

08000644 <__aeabi_cdcmpeq>:
 8000644:	b501      	push	{r0, lr}
 8000646:	f7ff ffb7 	bl	80005b8 <__cmpdf2>
 800064a:	2800      	cmp	r0, #0
 800064c:	bf48      	it	mi
 800064e:	f110 0f00 	cmnmi.w	r0, #0
 8000652:	bd01      	pop	{r0, pc}

08000654 <__aeabi_dcmpeq>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff fff4 	bl	8000644 <__aeabi_cdcmpeq>
 800065c:	bf0c      	ite	eq
 800065e:	2001      	moveq	r0, #1
 8000660:	2000      	movne	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_dcmplt>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffea 	bl	8000644 <__aeabi_cdcmpeq>
 8000670:	bf34      	ite	cc
 8000672:	2001      	movcc	r0, #1
 8000674:	2000      	movcs	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_dcmple>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffe0 	bl	8000644 <__aeabi_cdcmpeq>
 8000684:	bf94      	ite	ls
 8000686:	2001      	movls	r0, #1
 8000688:	2000      	movhi	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_dcmpge>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff ffce 	bl	8000634 <__aeabi_cdrcmple>
 8000698:	bf94      	ite	ls
 800069a:	2001      	movls	r0, #1
 800069c:	2000      	movhi	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_dcmpgt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffc4 	bl	8000634 <__aeabi_cdrcmple>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_d2iz>:
 80006b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80006c0:	d215      	bcs.n	80006ee <__aeabi_d2iz+0x36>
 80006c2:	d511      	bpl.n	80006e8 <__aeabi_d2iz+0x30>
 80006c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80006c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006cc:	d912      	bls.n	80006f4 <__aeabi_d2iz+0x3c>
 80006ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80006da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006de:	fa23 f002 	lsr.w	r0, r3, r2
 80006e2:	bf18      	it	ne
 80006e4:	4240      	negne	r0, r0
 80006e6:	4770      	bx	lr
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	4770      	bx	lr
 80006ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006f2:	d105      	bne.n	8000700 <__aeabi_d2iz+0x48>
 80006f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80006fe:	4770      	bx	lr
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <__aeabi_d2f>:
 8000708:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800070c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000710:	bf24      	itt	cs
 8000712:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000716:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800071a:	d90d      	bls.n	8000738 <__aeabi_d2f+0x30>
 800071c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000720:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000724:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000728:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800072c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000730:	bf08      	it	eq
 8000732:	f020 0001 	biceq.w	r0, r0, #1
 8000736:	4770      	bx	lr
 8000738:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800073c:	d121      	bne.n	8000782 <__aeabi_d2f+0x7a>
 800073e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000742:	bfbc      	itt	lt
 8000744:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000748:	4770      	bxlt	lr
 800074a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800074e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000752:	f1c2 0218 	rsb	r2, r2, #24
 8000756:	f1c2 0c20 	rsb	ip, r2, #32
 800075a:	fa10 f30c 	lsls.w	r3, r0, ip
 800075e:	fa20 f002 	lsr.w	r0, r0, r2
 8000762:	bf18      	it	ne
 8000764:	f040 0001 	orrne.w	r0, r0, #1
 8000768:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800076c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000770:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000774:	ea40 000c 	orr.w	r0, r0, ip
 8000778:	fa23 f302 	lsr.w	r3, r3, r2
 800077c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000780:	e7cc      	b.n	800071c <__aeabi_d2f+0x14>
 8000782:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000786:	d107      	bne.n	8000798 <__aeabi_d2f+0x90>
 8000788:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800078c:	bf1e      	ittt	ne
 800078e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000792:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000796:	4770      	bxne	lr
 8000798:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800079c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_frsub>:
 80007a8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007ac:	e002      	b.n	80007b4 <__addsf3>
 80007ae:	bf00      	nop

080007b0 <__aeabi_fsub>:
 80007b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007b4 <__addsf3>:
 80007b4:	0042      	lsls	r2, r0, #1
 80007b6:	bf1f      	itttt	ne
 80007b8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007bc:	ea92 0f03 	teqne	r2, r3
 80007c0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007c4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007c8:	d06a      	beq.n	80008a0 <__addsf3+0xec>
 80007ca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007ce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007d2:	bfc1      	itttt	gt
 80007d4:	18d2      	addgt	r2, r2, r3
 80007d6:	4041      	eorgt	r1, r0
 80007d8:	4048      	eorgt	r0, r1
 80007da:	4041      	eorgt	r1, r0
 80007dc:	bfb8      	it	lt
 80007de:	425b      	neglt	r3, r3
 80007e0:	2b19      	cmp	r3, #25
 80007e2:	bf88      	it	hi
 80007e4:	4770      	bxhi	lr
 80007e6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007ea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80007f2:	bf18      	it	ne
 80007f4:	4240      	negne	r0, r0
 80007f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007fa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80007fe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000802:	bf18      	it	ne
 8000804:	4249      	negne	r1, r1
 8000806:	ea92 0f03 	teq	r2, r3
 800080a:	d03f      	beq.n	800088c <__addsf3+0xd8>
 800080c:	f1a2 0201 	sub.w	r2, r2, #1
 8000810:	fa41 fc03 	asr.w	ip, r1, r3
 8000814:	eb10 000c 	adds.w	r0, r0, ip
 8000818:	f1c3 0320 	rsb	r3, r3, #32
 800081c:	fa01 f103 	lsl.w	r1, r1, r3
 8000820:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000824:	d502      	bpl.n	800082c <__addsf3+0x78>
 8000826:	4249      	negs	r1, r1
 8000828:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800082c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000830:	d313      	bcc.n	800085a <__addsf3+0xa6>
 8000832:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000836:	d306      	bcc.n	8000846 <__addsf3+0x92>
 8000838:	0840      	lsrs	r0, r0, #1
 800083a:	ea4f 0131 	mov.w	r1, r1, rrx
 800083e:	f102 0201 	add.w	r2, r2, #1
 8000842:	2afe      	cmp	r2, #254	; 0xfe
 8000844:	d251      	bcs.n	80008ea <__addsf3+0x136>
 8000846:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800084a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800084e:	bf08      	it	eq
 8000850:	f020 0001 	biceq.w	r0, r0, #1
 8000854:	ea40 0003 	orr.w	r0, r0, r3
 8000858:	4770      	bx	lr
 800085a:	0049      	lsls	r1, r1, #1
 800085c:	eb40 0000 	adc.w	r0, r0, r0
 8000860:	3a01      	subs	r2, #1
 8000862:	bf28      	it	cs
 8000864:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000868:	d2ed      	bcs.n	8000846 <__addsf3+0x92>
 800086a:	fab0 fc80 	clz	ip, r0
 800086e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000872:	ebb2 020c 	subs.w	r2, r2, ip
 8000876:	fa00 f00c 	lsl.w	r0, r0, ip
 800087a:	bfaa      	itet	ge
 800087c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000880:	4252      	neglt	r2, r2
 8000882:	4318      	orrge	r0, r3
 8000884:	bfbc      	itt	lt
 8000886:	40d0      	lsrlt	r0, r2
 8000888:	4318      	orrlt	r0, r3
 800088a:	4770      	bx	lr
 800088c:	f092 0f00 	teq	r2, #0
 8000890:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000894:	bf06      	itte	eq
 8000896:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800089a:	3201      	addeq	r2, #1
 800089c:	3b01      	subne	r3, #1
 800089e:	e7b5      	b.n	800080c <__addsf3+0x58>
 80008a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008a8:	bf18      	it	ne
 80008aa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008ae:	d021      	beq.n	80008f4 <__addsf3+0x140>
 80008b0:	ea92 0f03 	teq	r2, r3
 80008b4:	d004      	beq.n	80008c0 <__addsf3+0x10c>
 80008b6:	f092 0f00 	teq	r2, #0
 80008ba:	bf08      	it	eq
 80008bc:	4608      	moveq	r0, r1
 80008be:	4770      	bx	lr
 80008c0:	ea90 0f01 	teq	r0, r1
 80008c4:	bf1c      	itt	ne
 80008c6:	2000      	movne	r0, #0
 80008c8:	4770      	bxne	lr
 80008ca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008ce:	d104      	bne.n	80008da <__addsf3+0x126>
 80008d0:	0040      	lsls	r0, r0, #1
 80008d2:	bf28      	it	cs
 80008d4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008d8:	4770      	bx	lr
 80008da:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008de:	bf3c      	itt	cc
 80008e0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008e4:	4770      	bxcc	lr
 80008e6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008ea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80008ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f2:	4770      	bx	lr
 80008f4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008f8:	bf16      	itet	ne
 80008fa:	4608      	movne	r0, r1
 80008fc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000900:	4601      	movne	r1, r0
 8000902:	0242      	lsls	r2, r0, #9
 8000904:	bf06      	itte	eq
 8000906:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800090a:	ea90 0f01 	teqeq	r0, r1
 800090e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000912:	4770      	bx	lr

08000914 <__aeabi_ui2f>:
 8000914:	f04f 0300 	mov.w	r3, #0
 8000918:	e004      	b.n	8000924 <__aeabi_i2f+0x8>
 800091a:	bf00      	nop

0800091c <__aeabi_i2f>:
 800091c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000920:	bf48      	it	mi
 8000922:	4240      	negmi	r0, r0
 8000924:	ea5f 0c00 	movs.w	ip, r0
 8000928:	bf08      	it	eq
 800092a:	4770      	bxeq	lr
 800092c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000930:	4601      	mov	r1, r0
 8000932:	f04f 0000 	mov.w	r0, #0
 8000936:	e01c      	b.n	8000972 <__aeabi_l2f+0x2a>

08000938 <__aeabi_ul2f>:
 8000938:	ea50 0201 	orrs.w	r2, r0, r1
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f04f 0300 	mov.w	r3, #0
 8000944:	e00a      	b.n	800095c <__aeabi_l2f+0x14>
 8000946:	bf00      	nop

08000948 <__aeabi_l2f>:
 8000948:	ea50 0201 	orrs.w	r2, r0, r1
 800094c:	bf08      	it	eq
 800094e:	4770      	bxeq	lr
 8000950:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000954:	d502      	bpl.n	800095c <__aeabi_l2f+0x14>
 8000956:	4240      	negs	r0, r0
 8000958:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800095c:	ea5f 0c01 	movs.w	ip, r1
 8000960:	bf02      	ittt	eq
 8000962:	4684      	moveq	ip, r0
 8000964:	4601      	moveq	r1, r0
 8000966:	2000      	moveq	r0, #0
 8000968:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800096c:	bf08      	it	eq
 800096e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000972:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000976:	fabc f28c 	clz	r2, ip
 800097a:	3a08      	subs	r2, #8
 800097c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000980:	db10      	blt.n	80009a4 <__aeabi_l2f+0x5c>
 8000982:	fa01 fc02 	lsl.w	ip, r1, r2
 8000986:	4463      	add	r3, ip
 8000988:	fa00 fc02 	lsl.w	ip, r0, r2
 800098c:	f1c2 0220 	rsb	r2, r2, #32
 8000990:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000994:	fa20 f202 	lsr.w	r2, r0, r2
 8000998:	eb43 0002 	adc.w	r0, r3, r2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f102 0220 	add.w	r2, r2, #32
 80009a8:	fa01 fc02 	lsl.w	ip, r1, r2
 80009ac:	f1c2 0220 	rsb	r2, r2, #32
 80009b0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009b4:	fa21 f202 	lsr.w	r2, r1, r2
 80009b8:	eb43 0002 	adc.w	r0, r3, r2
 80009bc:	bf08      	it	eq
 80009be:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009c2:	4770      	bx	lr

080009c4 <__aeabi_fmul>:
 80009c4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009c8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009cc:	bf1e      	ittt	ne
 80009ce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009d2:	ea92 0f0c 	teqne	r2, ip
 80009d6:	ea93 0f0c 	teqne	r3, ip
 80009da:	d06f      	beq.n	8000abc <__aeabi_fmul+0xf8>
 80009dc:	441a      	add	r2, r3
 80009de:	ea80 0c01 	eor.w	ip, r0, r1
 80009e2:	0240      	lsls	r0, r0, #9
 80009e4:	bf18      	it	ne
 80009e6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009ea:	d01e      	beq.n	8000a2a <__aeabi_fmul+0x66>
 80009ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009f0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009f4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009f8:	fba0 3101 	umull	r3, r1, r0, r1
 80009fc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a00:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a04:	bf3e      	ittt	cc
 8000a06:	0049      	lslcc	r1, r1, #1
 8000a08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a0c:	005b      	lslcc	r3, r3, #1
 8000a0e:	ea40 0001 	orr.w	r0, r0, r1
 8000a12:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a16:	2afd      	cmp	r2, #253	; 0xfd
 8000a18:	d81d      	bhi.n	8000a56 <__aeabi_fmul+0x92>
 8000a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a22:	bf08      	it	eq
 8000a24:	f020 0001 	biceq.w	r0, r0, #1
 8000a28:	4770      	bx	lr
 8000a2a:	f090 0f00 	teq	r0, #0
 8000a2e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a32:	bf08      	it	eq
 8000a34:	0249      	lsleq	r1, r1, #9
 8000a36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a3e:	3a7f      	subs	r2, #127	; 0x7f
 8000a40:	bfc2      	ittt	gt
 8000a42:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a4a:	4770      	bxgt	lr
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	f04f 0300 	mov.w	r3, #0
 8000a54:	3a01      	subs	r2, #1
 8000a56:	dc5d      	bgt.n	8000b14 <__aeabi_fmul+0x150>
 8000a58:	f112 0f19 	cmn.w	r2, #25
 8000a5c:	bfdc      	itt	le
 8000a5e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a62:	4770      	bxle	lr
 8000a64:	f1c2 0200 	rsb	r2, r2, #0
 8000a68:	0041      	lsls	r1, r0, #1
 8000a6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000a6e:	f1c2 0220 	rsb	r2, r2, #32
 8000a72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a7a:	f140 0000 	adc.w	r0, r0, #0
 8000a7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a82:	bf08      	it	eq
 8000a84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a88:	4770      	bx	lr
 8000a8a:	f092 0f00 	teq	r2, #0
 8000a8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a92:	bf02      	ittt	eq
 8000a94:	0040      	lsleq	r0, r0, #1
 8000a96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a9a:	3a01      	subeq	r2, #1
 8000a9c:	d0f9      	beq.n	8000a92 <__aeabi_fmul+0xce>
 8000a9e:	ea40 000c 	orr.w	r0, r0, ip
 8000aa2:	f093 0f00 	teq	r3, #0
 8000aa6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aaa:	bf02      	ittt	eq
 8000aac:	0049      	lsleq	r1, r1, #1
 8000aae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ab2:	3b01      	subeq	r3, #1
 8000ab4:	d0f9      	beq.n	8000aaa <__aeabi_fmul+0xe6>
 8000ab6:	ea41 010c 	orr.w	r1, r1, ip
 8000aba:	e78f      	b.n	80009dc <__aeabi_fmul+0x18>
 8000abc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ac0:	ea92 0f0c 	teq	r2, ip
 8000ac4:	bf18      	it	ne
 8000ac6:	ea93 0f0c 	teqne	r3, ip
 8000aca:	d00a      	beq.n	8000ae2 <__aeabi_fmul+0x11e>
 8000acc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ad0:	bf18      	it	ne
 8000ad2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ad6:	d1d8      	bne.n	8000a8a <__aeabi_fmul+0xc6>
 8000ad8:	ea80 0001 	eor.w	r0, r0, r1
 8000adc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ae0:	4770      	bx	lr
 8000ae2:	f090 0f00 	teq	r0, #0
 8000ae6:	bf17      	itett	ne
 8000ae8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000aec:	4608      	moveq	r0, r1
 8000aee:	f091 0f00 	teqne	r1, #0
 8000af2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000af6:	d014      	beq.n	8000b22 <__aeabi_fmul+0x15e>
 8000af8:	ea92 0f0c 	teq	r2, ip
 8000afc:	d101      	bne.n	8000b02 <__aeabi_fmul+0x13e>
 8000afe:	0242      	lsls	r2, r0, #9
 8000b00:	d10f      	bne.n	8000b22 <__aeabi_fmul+0x15e>
 8000b02:	ea93 0f0c 	teq	r3, ip
 8000b06:	d103      	bne.n	8000b10 <__aeabi_fmul+0x14c>
 8000b08:	024b      	lsls	r3, r1, #9
 8000b0a:	bf18      	it	ne
 8000b0c:	4608      	movne	r0, r1
 8000b0e:	d108      	bne.n	8000b22 <__aeabi_fmul+0x15e>
 8000b10:	ea80 0001 	eor.w	r0, r0, r1
 8000b14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_fdiv>:
 8000b2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b34:	bf1e      	ittt	ne
 8000b36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b3a:	ea92 0f0c 	teqne	r2, ip
 8000b3e:	ea93 0f0c 	teqne	r3, ip
 8000b42:	d069      	beq.n	8000c18 <__aeabi_fdiv+0xec>
 8000b44:	eba2 0203 	sub.w	r2, r2, r3
 8000b48:	ea80 0c01 	eor.w	ip, r0, r1
 8000b4c:	0249      	lsls	r1, r1, #9
 8000b4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b52:	d037      	beq.n	8000bc4 <__aeabi_fdiv+0x98>
 8000b54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b64:	428b      	cmp	r3, r1
 8000b66:	bf38      	it	cc
 8000b68:	005b      	lslcc	r3, r3, #1
 8000b6a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b6e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b72:	428b      	cmp	r3, r1
 8000b74:	bf24      	itt	cs
 8000b76:	1a5b      	subcs	r3, r3, r1
 8000b78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b80:	bf24      	itt	cs
 8000b82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b8e:	bf24      	itt	cs
 8000b90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b9c:	bf24      	itt	cs
 8000b9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ba2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ba6:	011b      	lsls	r3, r3, #4
 8000ba8:	bf18      	it	ne
 8000baa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bae:	d1e0      	bne.n	8000b72 <__aeabi_fdiv+0x46>
 8000bb0:	2afd      	cmp	r2, #253	; 0xfd
 8000bb2:	f63f af50 	bhi.w	8000a56 <__aeabi_fmul+0x92>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbc:	bf08      	it	eq
 8000bbe:	f020 0001 	biceq.w	r0, r0, #1
 8000bc2:	4770      	bx	lr
 8000bc4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bc8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bcc:	327f      	adds	r2, #127	; 0x7f
 8000bce:	bfc2      	ittt	gt
 8000bd0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bd4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bd8:	4770      	bxgt	lr
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f04f 0300 	mov.w	r3, #0
 8000be2:	3a01      	subs	r2, #1
 8000be4:	e737      	b.n	8000a56 <__aeabi_fmul+0x92>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bee:	bf02      	ittt	eq
 8000bf0:	0040      	lsleq	r0, r0, #1
 8000bf2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bf6:	3a01      	subeq	r2, #1
 8000bf8:	d0f9      	beq.n	8000bee <__aeabi_fdiv+0xc2>
 8000bfa:	ea40 000c 	orr.w	r0, r0, ip
 8000bfe:	f093 0f00 	teq	r3, #0
 8000c02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c06:	bf02      	ittt	eq
 8000c08:	0049      	lsleq	r1, r1, #1
 8000c0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c0e:	3b01      	subeq	r3, #1
 8000c10:	d0f9      	beq.n	8000c06 <__aeabi_fdiv+0xda>
 8000c12:	ea41 010c 	orr.w	r1, r1, ip
 8000c16:	e795      	b.n	8000b44 <__aeabi_fdiv+0x18>
 8000c18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c1c:	ea92 0f0c 	teq	r2, ip
 8000c20:	d108      	bne.n	8000c34 <__aeabi_fdiv+0x108>
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	f47f af7d 	bne.w	8000b22 <__aeabi_fmul+0x15e>
 8000c28:	ea93 0f0c 	teq	r3, ip
 8000c2c:	f47f af70 	bne.w	8000b10 <__aeabi_fmul+0x14c>
 8000c30:	4608      	mov	r0, r1
 8000c32:	e776      	b.n	8000b22 <__aeabi_fmul+0x15e>
 8000c34:	ea93 0f0c 	teq	r3, ip
 8000c38:	d104      	bne.n	8000c44 <__aeabi_fdiv+0x118>
 8000c3a:	024b      	lsls	r3, r1, #9
 8000c3c:	f43f af4c 	beq.w	8000ad8 <__aeabi_fmul+0x114>
 8000c40:	4608      	mov	r0, r1
 8000c42:	e76e      	b.n	8000b22 <__aeabi_fmul+0x15e>
 8000c44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c48:	bf18      	it	ne
 8000c4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c4e:	d1ca      	bne.n	8000be6 <__aeabi_fdiv+0xba>
 8000c50:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c54:	f47f af5c 	bne.w	8000b10 <__aeabi_fmul+0x14c>
 8000c58:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c5c:	f47f af3c 	bne.w	8000ad8 <__aeabi_fmul+0x114>
 8000c60:	e75f      	b.n	8000b22 <__aeabi_fmul+0x15e>
 8000c62:	bf00      	nop

08000c64 <__gesf2>:
 8000c64:	f04f 3cff 	mov.w	ip, #4294967295
 8000c68:	e006      	b.n	8000c78 <__cmpsf2+0x4>
 8000c6a:	bf00      	nop

08000c6c <__lesf2>:
 8000c6c:	f04f 0c01 	mov.w	ip, #1
 8000c70:	e002      	b.n	8000c78 <__cmpsf2+0x4>
 8000c72:	bf00      	nop

08000c74 <__cmpsf2>:
 8000c74:	f04f 0c01 	mov.w	ip, #1
 8000c78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c88:	bf18      	it	ne
 8000c8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8e:	d011      	beq.n	8000cb4 <__cmpsf2+0x40>
 8000c90:	b001      	add	sp, #4
 8000c92:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c96:	bf18      	it	ne
 8000c98:	ea90 0f01 	teqne	r0, r1
 8000c9c:	bf58      	it	pl
 8000c9e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ca2:	bf88      	it	hi
 8000ca4:	17c8      	asrhi	r0, r1, #31
 8000ca6:	bf38      	it	cc
 8000ca8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cac:	bf18      	it	ne
 8000cae:	f040 0001 	orrne.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb8:	d102      	bne.n	8000cc0 <__cmpsf2+0x4c>
 8000cba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cbe:	d105      	bne.n	8000ccc <__cmpsf2+0x58>
 8000cc0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cc4:	d1e4      	bne.n	8000c90 <__cmpsf2+0x1c>
 8000cc6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cca:	d0e1      	beq.n	8000c90 <__cmpsf2+0x1c>
 8000ccc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_cfrcmple>:
 8000cd4:	4684      	mov	ip, r0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	4661      	mov	r1, ip
 8000cda:	e7ff      	b.n	8000cdc <__aeabi_cfcmpeq>

08000cdc <__aeabi_cfcmpeq>:
 8000cdc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cde:	f7ff ffc9 	bl	8000c74 <__cmpsf2>
 8000ce2:	2800      	cmp	r0, #0
 8000ce4:	bf48      	it	mi
 8000ce6:	f110 0f00 	cmnmi.w	r0, #0
 8000cea:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cec <__aeabi_fcmpeq>:
 8000cec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf0:	f7ff fff4 	bl	8000cdc <__aeabi_cfcmpeq>
 8000cf4:	bf0c      	ite	eq
 8000cf6:	2001      	moveq	r0, #1
 8000cf8:	2000      	movne	r0, #0
 8000cfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cfe:	bf00      	nop

08000d00 <__aeabi_fcmplt>:
 8000d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d04:	f7ff ffea 	bl	8000cdc <__aeabi_cfcmpeq>
 8000d08:	bf34      	ite	cc
 8000d0a:	2001      	movcc	r0, #1
 8000d0c:	2000      	movcs	r0, #0
 8000d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d12:	bf00      	nop

08000d14 <__aeabi_fcmple>:
 8000d14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d18:	f7ff ffe0 	bl	8000cdc <__aeabi_cfcmpeq>
 8000d1c:	bf94      	ite	ls
 8000d1e:	2001      	movls	r0, #1
 8000d20:	2000      	movhi	r0, #0
 8000d22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d26:	bf00      	nop

08000d28 <__aeabi_fcmpge>:
 8000d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d2c:	f7ff ffd2 	bl	8000cd4 <__aeabi_cfrcmple>
 8000d30:	bf94      	ite	ls
 8000d32:	2001      	movls	r0, #1
 8000d34:	2000      	movhi	r0, #0
 8000d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3a:	bf00      	nop

08000d3c <__aeabi_fcmpgt>:
 8000d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d40:	f7ff ffc8 	bl	8000cd4 <__aeabi_cfrcmple>
 8000d44:	bf34      	ite	cc
 8000d46:	2001      	movcc	r0, #1
 8000d48:	2000      	movcs	r0, #0
 8000d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4e:	bf00      	nop

08000d50 <__aeabi_f2iz>:
 8000d50:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d54:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d58:	d30f      	bcc.n	8000d7a <__aeabi_f2iz+0x2a>
 8000d5a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d5e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d62:	d90d      	bls.n	8000d80 <__aeabi_f2iz+0x30>
 8000d64:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d6c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d70:	fa23 f002 	lsr.w	r0, r3, r2
 8000d74:	bf18      	it	ne
 8000d76:	4240      	negne	r0, r0
 8000d78:	4770      	bx	lr
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	4770      	bx	lr
 8000d80:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d84:	d101      	bne.n	8000d8a <__aeabi_f2iz+0x3a>
 8000d86:	0242      	lsls	r2, r0, #9
 8000d88:	d105      	bne.n	8000d96 <__aeabi_f2iz+0x46>
 8000d8a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d8e:	bf08      	it	eq
 8000d90:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d94:	4770      	bx	lr
 8000d96:	f04f 0000 	mov.w	r0, #0
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_f2uiz>:
 8000d9c:	0042      	lsls	r2, r0, #1
 8000d9e:	d20e      	bcs.n	8000dbe <__aeabi_f2uiz+0x22>
 8000da0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000da4:	d30b      	bcc.n	8000dbe <__aeabi_f2uiz+0x22>
 8000da6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000daa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dae:	d409      	bmi.n	8000dc4 <__aeabi_f2uiz+0x28>
 8000db0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000db4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000db8:	fa23 f002 	lsr.w	r0, r3, r2
 8000dbc:	4770      	bx	lr
 8000dbe:	f04f 0000 	mov.w	r0, #0
 8000dc2:	4770      	bx	lr
 8000dc4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000dc8:	d101      	bne.n	8000dce <__aeabi_f2uiz+0x32>
 8000dca:	0242      	lsls	r2, r0, #9
 8000dcc:	d102      	bne.n	8000dd4 <__aeabi_f2uiz+0x38>
 8000dce:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd2:	4770      	bx	lr
 8000dd4:	f04f 0000 	mov.w	r0, #0
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <__aeabi_uldivmod>:
 8000ddc:	b953      	cbnz	r3, 8000df4 <__aeabi_uldivmod+0x18>
 8000dde:	b94a      	cbnz	r2, 8000df4 <__aeabi_uldivmod+0x18>
 8000de0:	2900      	cmp	r1, #0
 8000de2:	bf08      	it	eq
 8000de4:	2800      	cmpeq	r0, #0
 8000de6:	bf1c      	itt	ne
 8000de8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dec:	f04f 30ff 	movne.w	r0, #4294967295
 8000df0:	f000 b974 	b.w	80010dc <__aeabi_idiv0>
 8000df4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000df8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dfc:	f000 f806 	bl	8000e0c <__udivmoddi4>
 8000e00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e08:	b004      	add	sp, #16
 8000e0a:	4770      	bx	lr

08000e0c <__udivmoddi4>:
 8000e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e10:	9e08      	ldr	r6, [sp, #32]
 8000e12:	460d      	mov	r5, r1
 8000e14:	4604      	mov	r4, r0
 8000e16:	4688      	mov	r8, r1
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d14d      	bne.n	8000eb8 <__udivmoddi4+0xac>
 8000e1c:	428a      	cmp	r2, r1
 8000e1e:	4694      	mov	ip, r2
 8000e20:	d968      	bls.n	8000ef4 <__udivmoddi4+0xe8>
 8000e22:	fab2 f282 	clz	r2, r2
 8000e26:	b152      	cbz	r2, 8000e3e <__udivmoddi4+0x32>
 8000e28:	fa01 f302 	lsl.w	r3, r1, r2
 8000e2c:	f1c2 0120 	rsb	r1, r2, #32
 8000e30:	fa20 f101 	lsr.w	r1, r0, r1
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	ea41 0803 	orr.w	r8, r1, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000e42:	0c21      	lsrs	r1, r4, #16
 8000e44:	fbb8 fef5 	udiv	lr, r8, r5
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fb05 831e 	mls	r3, r5, lr, r8
 8000e50:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e54:	fb0e f107 	mul.w	r1, lr, r7
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	d90b      	bls.n	8000e74 <__udivmoddi4+0x68>
 8000e5c:	eb1c 0303 	adds.w	r3, ip, r3
 8000e60:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000e64:	f080 811e 	bcs.w	80010a4 <__udivmoddi4+0x298>
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	f240 811b 	bls.w	80010a4 <__udivmoddi4+0x298>
 8000e6e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f0f5 	udiv	r0, r3, r5
 8000e7c:	fb05 3310 	mls	r3, r5, r0, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb00 f707 	mul.w	r7, r0, r7
 8000e88:	42a7      	cmp	r7, r4
 8000e8a:	d90a      	bls.n	8000ea2 <__udivmoddi4+0x96>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e94:	f080 8108 	bcs.w	80010a8 <__udivmoddi4+0x29c>
 8000e98:	42a7      	cmp	r7, r4
 8000e9a:	f240 8105 	bls.w	80010a8 <__udivmoddi4+0x29c>
 8000e9e:	4464      	add	r4, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	1be4      	subs	r4, r4, r7
 8000ea4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	b11e      	cbz	r6, 8000eb4 <__udivmoddi4+0xa8>
 8000eac:	40d4      	lsrs	r4, r2
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e9c6 4300 	strd	r4, r3, [r6]
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0xc2>
 8000ebc:	2e00      	cmp	r6, #0
 8000ebe:	f000 80ee 	beq.w	800109e <__udivmoddi4+0x292>
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e9c6 0500 	strd	r0, r5, [r6]
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	fab3 f183 	clz	r1, r3
 8000ed2:	2900      	cmp	r1, #0
 8000ed4:	d14a      	bne.n	8000f6c <__udivmoddi4+0x160>
 8000ed6:	42ab      	cmp	r3, r5
 8000ed8:	d302      	bcc.n	8000ee0 <__udivmoddi4+0xd4>
 8000eda:	4282      	cmp	r2, r0
 8000edc:	f200 80f9 	bhi.w	80010d2 <__udivmoddi4+0x2c6>
 8000ee0:	1a84      	subs	r4, r0, r2
 8000ee2:	eb65 0303 	sbc.w	r3, r5, r3
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	4698      	mov	r8, r3
 8000eea:	2e00      	cmp	r6, #0
 8000eec:	d0e2      	beq.n	8000eb4 <__udivmoddi4+0xa8>
 8000eee:	e9c6 4800 	strd	r4, r8, [r6]
 8000ef2:	e7df      	b.n	8000eb4 <__udivmoddi4+0xa8>
 8000ef4:	b902      	cbnz	r2, 8000ef8 <__udivmoddi4+0xec>
 8000ef6:	deff      	udf	#255	; 0xff
 8000ef8:	fab2 f282 	clz	r2, r2
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	f040 8091 	bne.w	8001024 <__udivmoddi4+0x218>
 8000f02:	eba1 050c 	sub.w	r5, r1, ip
 8000f06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0a:	fa1f fe8c 	uxth.w	lr, ip
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fbb5 f3f7 	udiv	r3, r5, r7
 8000f14:	fb07 5013 	mls	r0, r7, r3, r5
 8000f18:	0c25      	lsrs	r5, r4, #16
 8000f1a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000f1e:	fb0e f003 	mul.w	r0, lr, r3
 8000f22:	42a8      	cmp	r0, r5
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x12c>
 8000f26:	eb1c 0505 	adds.w	r5, ip, r5
 8000f2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x12a>
 8000f30:	42a8      	cmp	r0, r5
 8000f32:	f200 80cb 	bhi.w	80010cc <__udivmoddi4+0x2c0>
 8000f36:	4643      	mov	r3, r8
 8000f38:	1a2d      	subs	r5, r5, r0
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb5 f0f7 	udiv	r0, r5, r7
 8000f40:	fb07 5510 	mls	r5, r7, r0, r5
 8000f44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f48:	fb0e fe00 	mul.w	lr, lr, r0
 8000f4c:	45a6      	cmp	lr, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x156>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f58:	d202      	bcs.n	8000f60 <__udivmoddi4+0x154>
 8000f5a:	45a6      	cmp	lr, r4
 8000f5c:	f200 80bb 	bhi.w	80010d6 <__udivmoddi4+0x2ca>
 8000f60:	4628      	mov	r0, r5
 8000f62:	eba4 040e 	sub.w	r4, r4, lr
 8000f66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f6a:	e79e      	b.n	8000eaa <__udivmoddi4+0x9e>
 8000f6c:	f1c1 0720 	rsb	r7, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f7e:	fa05 f301 	lsl.w	r3, r5, r1
 8000f82:	431c      	orrs	r4, r3
 8000f84:	40fd      	lsrs	r5, r7
 8000f86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f8a:	fa00 f301 	lsl.w	r3, r0, r1
 8000f8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f92:	0c20      	lsrs	r0, r4, #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fb09 5518 	mls	r5, r9, r8, r5
 8000f9c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000fa0:	fb08 f00e 	mul.w	r0, r8, lr
 8000fa4:	42a8      	cmp	r0, r5
 8000fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000faa:	d90b      	bls.n	8000fc4 <__udivmoddi4+0x1b8>
 8000fac:	eb1c 0505 	adds.w	r5, ip, r5
 8000fb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fb4:	f080 8088 	bcs.w	80010c8 <__udivmoddi4+0x2bc>
 8000fb8:	42a8      	cmp	r0, r5
 8000fba:	f240 8085 	bls.w	80010c8 <__udivmoddi4+0x2bc>
 8000fbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000fc2:	4465      	add	r5, ip
 8000fc4:	1a2d      	subs	r5, r5, r0
 8000fc6:	b2a4      	uxth	r4, r4
 8000fc8:	fbb5 f0f9 	udiv	r0, r5, r9
 8000fcc:	fb09 5510 	mls	r5, r9, r0, r5
 8000fd0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000fd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fd8:	45ae      	cmp	lr, r5
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x1e2>
 8000fdc:	eb1c 0505 	adds.w	r5, ip, r5
 8000fe0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fe4:	d26c      	bcs.n	80010c0 <__udivmoddi4+0x2b4>
 8000fe6:	45ae      	cmp	lr, r5
 8000fe8:	d96a      	bls.n	80010c0 <__udivmoddi4+0x2b4>
 8000fea:	3802      	subs	r0, #2
 8000fec:	4465      	add	r5, ip
 8000fee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ff2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ff6:	eba5 050e 	sub.w	r5, r5, lr
 8000ffa:	42a5      	cmp	r5, r4
 8000ffc:	46c8      	mov	r8, r9
 8000ffe:	46a6      	mov	lr, r4
 8001000:	d356      	bcc.n	80010b0 <__udivmoddi4+0x2a4>
 8001002:	d053      	beq.n	80010ac <__udivmoddi4+0x2a0>
 8001004:	b15e      	cbz	r6, 800101e <__udivmoddi4+0x212>
 8001006:	ebb3 0208 	subs.w	r2, r3, r8
 800100a:	eb65 050e 	sbc.w	r5, r5, lr
 800100e:	fa05 f707 	lsl.w	r7, r5, r7
 8001012:	fa22 f301 	lsr.w	r3, r2, r1
 8001016:	40cd      	lsrs	r5, r1
 8001018:	431f      	orrs	r7, r3
 800101a:	e9c6 7500 	strd	r7, r5, [r6]
 800101e:	2100      	movs	r1, #0
 8001020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001024:	f1c2 0320 	rsb	r3, r2, #32
 8001028:	fa20 f103 	lsr.w	r1, r0, r3
 800102c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001030:	fa25 f303 	lsr.w	r3, r5, r3
 8001034:	4095      	lsls	r5, r2
 8001036:	430d      	orrs	r5, r1
 8001038:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103c:	fa1f fe8c 	uxth.w	lr, ip
 8001040:	fbb3 f1f7 	udiv	r1, r3, r7
 8001044:	fb07 3011 	mls	r0, r7, r1, r3
 8001048:	0c2b      	lsrs	r3, r5, #16
 800104a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800104e:	fb01 f00e 	mul.w	r0, r1, lr
 8001052:	4298      	cmp	r0, r3
 8001054:	fa04 f402 	lsl.w	r4, r4, r2
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x260>
 800105a:	eb1c 0303 	adds.w	r3, ip, r3
 800105e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001062:	d22f      	bcs.n	80010c4 <__udivmoddi4+0x2b8>
 8001064:	4298      	cmp	r0, r3
 8001066:	d92d      	bls.n	80010c4 <__udivmoddi4+0x2b8>
 8001068:	3902      	subs	r1, #2
 800106a:	4463      	add	r3, ip
 800106c:	1a1b      	subs	r3, r3, r0
 800106e:	b2ad      	uxth	r5, r5
 8001070:	fbb3 f0f7 	udiv	r0, r3, r7
 8001074:	fb07 3310 	mls	r3, r7, r0, r3
 8001078:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800107c:	fb00 f30e 	mul.w	r3, r0, lr
 8001080:	42ab      	cmp	r3, r5
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x28a>
 8001084:	eb1c 0505 	adds.w	r5, ip, r5
 8001088:	f100 38ff 	add.w	r8, r0, #4294967295
 800108c:	d216      	bcs.n	80010bc <__udivmoddi4+0x2b0>
 800108e:	42ab      	cmp	r3, r5
 8001090:	d914      	bls.n	80010bc <__udivmoddi4+0x2b0>
 8001092:	3802      	subs	r0, #2
 8001094:	4465      	add	r5, ip
 8001096:	1aed      	subs	r5, r5, r3
 8001098:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800109c:	e738      	b.n	8000f10 <__udivmoddi4+0x104>
 800109e:	4631      	mov	r1, r6
 80010a0:	4630      	mov	r0, r6
 80010a2:	e707      	b.n	8000eb4 <__udivmoddi4+0xa8>
 80010a4:	4686      	mov	lr, r0
 80010a6:	e6e5      	b.n	8000e74 <__udivmoddi4+0x68>
 80010a8:	4618      	mov	r0, r3
 80010aa:	e6fa      	b.n	8000ea2 <__udivmoddi4+0x96>
 80010ac:	454b      	cmp	r3, r9
 80010ae:	d2a9      	bcs.n	8001004 <__udivmoddi4+0x1f8>
 80010b0:	ebb9 0802 	subs.w	r8, r9, r2
 80010b4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010b8:	3801      	subs	r0, #1
 80010ba:	e7a3      	b.n	8001004 <__udivmoddi4+0x1f8>
 80010bc:	4640      	mov	r0, r8
 80010be:	e7ea      	b.n	8001096 <__udivmoddi4+0x28a>
 80010c0:	4620      	mov	r0, r4
 80010c2:	e794      	b.n	8000fee <__udivmoddi4+0x1e2>
 80010c4:	4641      	mov	r1, r8
 80010c6:	e7d1      	b.n	800106c <__udivmoddi4+0x260>
 80010c8:	46d0      	mov	r8, sl
 80010ca:	e77b      	b.n	8000fc4 <__udivmoddi4+0x1b8>
 80010cc:	3b02      	subs	r3, #2
 80010ce:	4465      	add	r5, ip
 80010d0:	e732      	b.n	8000f38 <__udivmoddi4+0x12c>
 80010d2:	4608      	mov	r0, r1
 80010d4:	e709      	b.n	8000eea <__udivmoddi4+0xde>
 80010d6:	4464      	add	r4, ip
 80010d8:	3802      	subs	r0, #2
 80010da:	e742      	b.n	8000f62 <__udivmoddi4+0x156>

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80010e0:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80010e2:	4813      	ldr	r0, [pc, #76]	; (8001130 <MX_ADC_Init+0x50>)
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MX_ADC_Init+0x54>)
 80010e6:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80010ec:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010ee:	2300      	movs	r3, #0
 80010f0:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f2:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010f4:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f6:	2204      	movs	r2, #4
 80010f8:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80010fa:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80010fc:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80010fe:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8001100:	2201      	movs	r2, #1
 8001102:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001104:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001108:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110a:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800110c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001110:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001114:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001116:	2207      	movs	r2, #7
 8001118:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800111a:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800111c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001120:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001122:	f001 fda3 	bl	8002c6c <HAL_ADC_Init>
 8001126:	b900      	cbnz	r0, 800112a <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001128:	bd08      	pop	{r3, pc}
    Error_Handler();
 800112a:	f000 faa4 	bl	8001676 <Error_Handler>
}
 800112e:	e7fb      	b.n	8001128 <MX_ADC_Init+0x48>
 8001130:	2000019c 	.word	0x2000019c
 8001134:	40012400 	.word	0x40012400

08001138 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001138:	6802      	ldr	r2, [r0, #0]
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_ADC_MspInit+0x28>)
 800113c:	429a      	cmp	r2, r3
 800113e:	d000      	beq.n	8001142 <HAL_ADC_MspInit+0xa>
 8001140:	4770      	bx	lr
{
 8001142:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001148:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800114a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800114e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001156:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001158:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800115a:	b002      	add	sp, #8
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40012400 	.word	0x40012400

08001164 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001164:	6802      	ldr	r2, [r0, #0]
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_ADC_MspDeInit+0x18>)
 8001168:	429a      	cmp	r2, r3
 800116a:	d000      	beq.n	800116e <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800116c:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800116e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001172:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001178:	6613      	str	r3, [r2, #96]	; 0x60
 800117a:	e7f7      	b.n	800116c <HAL_ADC_MspDeInit+0x8>
 800117c:	40012400 	.word	0x40012400

08001180 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001180:	b530      	push	{r4, r5, lr}
 8001182:	b085      	sub	sp, #20
 8001184:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8001186:	2300      	movs	r3, #0
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 800118e:	f7ff ffa7 	bl	80010e0 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001192:	4816      	ldr	r0, [pc, #88]	; (80011ec <ADC_ReadChannels+0x6c>)
 8001194:	f002 f9ae 	bl	80034f4 <HAL_ADCEx_Calibration_Start>
 8001198:	b9f8      	cbnz	r0, 80011da <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 800119a:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800119c:	2300      	movs	r3, #0
 800119e:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80011a0:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011a2:	a901      	add	r1, sp, #4
 80011a4:	4811      	ldr	r0, [pc, #68]	; (80011ec <ADC_ReadChannels+0x6c>)
 80011a6:	f001 feef 	bl	8002f88 <HAL_ADC_ConfigChannel>
 80011aa:	b9c8      	cbnz	r0, 80011e0 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80011ac:	480f      	ldr	r0, [pc, #60]	; (80011ec <ADC_ReadChannels+0x6c>)
 80011ae:	f002 f8af 	bl	8003310 <HAL_ADC_Start>
 80011b2:	b9c0      	cbnz	r0, 80011e6 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80011b4:	4c0d      	ldr	r4, [pc, #52]	; (80011ec <ADC_ReadChannels+0x6c>)
 80011b6:	f04f 31ff 	mov.w	r1, #4294967295
 80011ba:	4620      	mov	r0, r4
 80011bc:	f001 fe82 	bl	8002ec4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80011c0:	4620      	mov	r0, r4
 80011c2:	f002 f977 	bl	80034b4 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80011c6:	4620      	mov	r0, r4
 80011c8:	f001 fedb 	bl	8002f82 <HAL_ADC_GetValue>
 80011cc:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 80011ce:	4620      	mov	r0, r4
 80011d0:	f002 f91a 	bl	8003408 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80011d4:	4628      	mov	r0, r5
 80011d6:	b005      	add	sp, #20
 80011d8:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80011da:	f000 fa4c 	bl	8001676 <Error_Handler>
 80011de:	e7dc      	b.n	800119a <ADC_ReadChannels+0x1a>
    Error_Handler();
 80011e0:	f000 fa49 	bl	8001676 <Error_Handler>
 80011e4:	e7e2      	b.n	80011ac <ADC_ReadChannels+0x2c>
    Error_Handler();
 80011e6:	f000 fa46 	bl	8001676 <Error_Handler>
 80011ea:	e7e3      	b.n	80011b4 <ADC_ReadChannels+0x34>
 80011ec:	2000019c 	.word	0x2000019c

080011f0 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 80011f0:	4b01      	ldr	r3, [pc, #4]	; (80011f8 <SYS_InitMeasurement+0x8>)
 80011f2:	4a02      	ldr	r2, [pc, #8]	; (80011fc <SYS_InitMeasurement+0xc>)
 80011f4:	601a      	str	r2, [r3, #0]
}
 80011f6:	4770      	bx	lr
 80011f8:	2000019c 	.word	0x2000019c
 80011fc:	40012400 	.word	0x40012400

08001200 <SYS_GetBatteryLevel>:
{
 8001200:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001202:	480d      	ldr	r0, [pc, #52]	; (8001238 <SYS_GetBatteryLevel+0x38>)
 8001204:	f7ff ffbc 	bl	8001180 <ADC_ReadChannels>
  if (measuredLevel == 0)
 8001208:	b1a0      	cbz	r0, 8001234 <SYS_GetBatteryLevel+0x34>
 800120a:	4602      	mov	r2, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <SYS_GetBatteryLevel+0x3c>)
 800120e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001212:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001216:	428b      	cmp	r3, r1
 8001218:	d007      	beq.n	800122a <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800121a:	f640 40e4 	movw	r0, #3300	; 0xce4
 800121e:	fb03 f000 	mul.w	r0, r3, r0
 8001222:	fbb0 f0f2 	udiv	r0, r0, r2
 8001226:	b280      	uxth	r0, r0
 8001228:	e005      	b.n	8001236 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <SYS_GetBatteryLevel+0x40>)
 800122c:	fbb0 f0f2 	udiv	r0, r0, r2
 8001230:	b280      	uxth	r0, r0
 8001232:	e000      	b.n	8001236 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001234:	2000      	movs	r0, #0
}
 8001236:	bd08      	pop	{r3, pc}
 8001238:	b4002000 	.word	0xb4002000
 800123c:	1fff7500 	.word	0x1fff7500
 8001240:	004c08d8 	.word	0x004c08d8

08001244 <SYS_GetTemperatureLevel>:
{
 8001244:	b510      	push	{r4, lr}
 8001246:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800124e:	f7ff ffd7 	bl	8001200 <SYS_GetBatteryLevel>
 8001252:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001254:	4821      	ldr	r0, [pc, #132]	; (80012dc <SYS_GetTemperatureLevel+0x98>)
 8001256:	f7ff ff93 	bl	8001180 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <SYS_GetTemperatureLevel+0x9c>)
 800125c:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 8001260:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8001264:	428a      	cmp	r2, r1
 8001266:	d01d      	beq.n	80012a4 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001268:	fb00 f304 	mul.w	r3, r0, r4
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	4c1d      	ldr	r4, [pc, #116]	; (80012e4 <SYS_GetTemperatureLevel+0xa0>)
 8001270:	fba4 0303 	umull	r0, r3, r4, r3
 8001274:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8001278:	2064      	movs	r0, #100	; 0x64
 800127a:	fb00 f303 	mul.w	r3, r0, r3
 800127e:	1a52      	subs	r2, r2, r1
 8001280:	fb93 f3f2 	sdiv	r3, r3, r2
 8001284:	331e      	adds	r3, #30
 8001286:	b21b      	sxth	r3, r3
 8001288:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 800128c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001290:	b21b      	sxth	r3, r3
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b21b      	sxth	r3, r3
 8001296:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 800129a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 800129e:	b200      	sxth	r0, r0
 80012a0:	b002      	add	sp, #8
 80012a2:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 80012a4:	fb00 f404 	mul.w	r4, r0, r4
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <SYS_GetTemperatureLevel+0xa4>)
 80012aa:	fba3 2304 	umull	r2, r3, r3, r4
 80012ae:	1ae4      	subs	r4, r4, r3
 80012b0:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 80012b4:	0ae4      	lsrs	r4, r4, #11
 80012b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ba:	fb03 f404 	mul.w	r4, r3, r4
 80012be:	f5a4 2439 	sub.w	r4, r4, #757760	; 0xb9000
 80012c2:	f5a4 640c 	sub.w	r4, r4, #2240	; 0x8c0
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <SYS_GetTemperatureLevel+0xa8>)
 80012c8:	fb83 2304 	smull	r2, r3, r3, r4
 80012cc:	17e4      	asrs	r4, r4, #31
 80012ce:	ebc4 24a3 	rsb	r4, r4, r3, asr #10
 80012d2:	341e      	adds	r4, #30
 80012d4:	b224      	sxth	r4, r4
 80012d6:	f8ad 4006 	strh.w	r4, [sp, #6]
 80012da:	e7d7      	b.n	800128c <SYS_GetTemperatureLevel+0x48>
 80012dc:	b0001000 	.word	0xb0001000
 80012e0:	1fff7500 	.word	0x1fff7500
 80012e4:	09ee009f 	.word	0x09ee009f
 80012e8:	00100101 	.word	0x00100101
 80012ec:	68db8bad 	.word	0x68db8bad

080012f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012f0:	b500      	push	{lr}
 80012f2:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012fa:	f042 0204 	orr.w	r2, r2, #4
 80012fe:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001300:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001302:	f002 0204 	and.w	r2, r2, #4
 8001306:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001308:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800130a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800130c:	f042 0201 	orr.w	r2, r2, #1
 8001310:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800131a:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 800131c:	2200      	movs	r2, #0
 800131e:	2102      	movs	r1, #2
 8001320:	200f      	movs	r0, #15
 8001322:	f002 f999 	bl	8003658 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001326:	200f      	movs	r0, #15
 8001328:	f002 f9ce 	bl	80036c8 <HAL_NVIC_EnableIRQ>

}
 800132c:	b003      	add	sp, #12
 800132e:	f85d fb04 	ldr.w	pc, [sp], #4

08001332 <FLASH_IF_IsEmpty>:
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001332:	e000      	b.n	8001336 <FLASH_IF_IsEmpty+0x4>
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 8001334:	3901      	subs	r1, #1
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001336:	f010 0307 	ands.w	r3, r0, #7
 800133a:	d012      	beq.n	8001362 <FLASH_IF_IsEmpty+0x30>
    if (*addr++ != UINT8_MAX)
 800133c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001340:	2bff      	cmp	r3, #255	; 0xff
 8001342:	d0f7      	beq.n	8001334 <FLASH_IF_IsEmpty+0x2>
      return FLASH_NOT_EMPTY;
 8001344:	2001      	movs	r0, #1
 8001346:	4770      	bx	lr
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 8001348:	3901      	subs	r1, #1
  while (size != 0)
 800134a:	b129      	cbz	r1, 8001358 <FLASH_IF_IsEmpty+0x26>
    if (*addr++ != UINT8_MAX)
 800134c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001350:	2bff      	cmp	r3, #255	; 0xff
 8001352:	d0f9      	beq.n	8001348 <FLASH_IF_IsEmpty+0x16>
      return FLASH_NOT_EMPTY;
 8001354:	2001      	movs	r0, #1
 8001356:	e002      	b.n	800135e <FLASH_IF_IsEmpty+0x2c>
  }
  return FLASH_EMPTY;
 8001358:	2000      	movs	r0, #0
 800135a:	e000      	b.n	800135e <FLASH_IF_IsEmpty+0x2c>
      return FLASH_NOT_EMPTY;
 800135c:	2001      	movs	r0, #1
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 800135e:	bc10      	pop	{r4}
 8001360:	4770      	bx	lr
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001362:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001366:	d212      	bcs.n	800138e <FLASH_IF_IsEmpty+0x5c>
{
 8001368:	b410      	push	{r4}
    if (*addr64++ != UINT64_MAX)
 800136a:	4602      	mov	r2, r0
 800136c:	f852 4b08 	ldr.w	r4, [r2], #8
 8001370:	6840      	ldr	r0, [r0, #4]
 8001372:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001376:	bf08      	it	eq
 8001378:	f1b4 3fff 	cmpeq.w	r4, #4294967295
 800137c:	d1ee      	bne.n	800135c <FLASH_IF_IsEmpty+0x2a>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800137e:	3301      	adds	r3, #1
    if (*addr64++ != UINT64_MAX)
 8001380:	4610      	mov	r0, r2
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001382:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001386:	d3f0      	bcc.n	800136a <FLASH_IF_IsEmpty+0x38>
  size -= sizeof(uint64_t) * i;
 8001388:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 800138c:	e7dd      	b.n	800134a <FLASH_IF_IsEmpty+0x18>
  size -= sizeof(uint64_t) * i;
 800138e:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 8001392:	b129      	cbz	r1, 80013a0 <FLASH_IF_IsEmpty+0x6e>
    if (*addr++ != UINT8_MAX)
 8001394:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001398:	2bff      	cmp	r3, #255	; 0xff
 800139a:	d103      	bne.n	80013a4 <FLASH_IF_IsEmpty+0x72>
    size--;
 800139c:	3901      	subs	r1, #1
 800139e:	e7f8      	b.n	8001392 <FLASH_IF_IsEmpty+0x60>
  return FLASH_EMPTY;
 80013a0:	2000      	movs	r0, #0
 80013a2:	4770      	bx	lr
      return FLASH_NOT_EMPTY;
 80013a4:	2001      	movs	r0, #1
}
 80013a6:	4770      	bx	lr

080013a8 <FLASH_IF_Write64>:
{
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	4604      	mov	r4, r0
 80013ac:	4616      	mov	r6, r2
 80013ae:	461d      	mov	r5, r3
  while (*(uint64_t *)address != data)
 80013b0:	e005      	b.n	80013be <FLASH_IF_Write64+0x16>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 80013b2:	4632      	mov	r2, r6
 80013b4:	462b      	mov	r3, r5
 80013b6:	4621      	mov	r1, r4
 80013b8:	2001      	movs	r0, #1
 80013ba:	f002 fcb1 	bl	8003d20 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 80013be:	6822      	ldr	r2, [r4, #0]
 80013c0:	6863      	ldr	r3, [r4, #4]
 80013c2:	42ab      	cmp	r3, r5
 80013c4:	bf08      	it	eq
 80013c6:	42b2      	cmpeq	r2, r6
 80013c8:	d005      	beq.n	80013d6 <FLASH_IF_Write64+0x2e>
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 80013ca:	4904      	ldr	r1, [pc, #16]	; (80013dc <FLASH_IF_Write64+0x34>)
 80013cc:	6909      	ldr	r1, [r1, #16]
 80013ce:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 80013d2:	d1fa      	bne.n	80013ca <FLASH_IF_Write64+0x22>
 80013d4:	e7ed      	b.n	80013b2 <FLASH_IF_Write64+0xa>
}
 80013d6:	2000      	movs	r0, #0
 80013d8:	bd70      	pop	{r4, r5, r6, pc}
 80013da:	bf00      	nop
 80013dc:	58004000 	.word	0x58004000

080013e0 <FLASH_IF_Write_Buffer>:
{
 80013e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	4606      	mov	r6, r0
 80013e8:	460c      	mov	r4, r1
 80013ea:	4690      	mov	r8, r2
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80013ec:	2500      	movs	r5, #0
  int32_t status = FLASH_OK;
 80013ee:	462f      	mov	r7, r5
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80013f0:	e003      	b.n	80013fa <FLASH_IF_Write_Buffer+0x1a>
    pDestination += sizeof(uint64_t);
 80013f2:	3608      	adds	r6, #8
    pSrc += sizeof(uint64_t);
 80013f4:	3408      	adds	r4, #8
    if (status != FLASH_OK)
 80013f6:	b9af      	cbnz	r7, 8001424 <FLASH_IF_Write_Buffer+0x44>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80013f8:	3501      	adds	r5, #1
 80013fa:	ebb5 0fd8 	cmp.w	r5, r8, lsr #3
 80013fe:	d211      	bcs.n	8001424 <FLASH_IF_Write_Buffer+0x44>
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 8001400:	2208      	movs	r2, #8
 8001402:	4621      	mov	r1, r4
 8001404:	4668      	mov	r0, sp
 8001406:	f010 fcf5 	bl	8011df4 <UTIL_MEM_cpy_8>
    if (src_value != UINT64_MAX)
 800140a:	9a00      	ldr	r2, [sp, #0]
 800140c:	9b01      	ldr	r3, [sp, #4]
 800140e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001412:	bf08      	it	eq
 8001414:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001418:	d0eb      	beq.n	80013f2 <FLASH_IF_Write_Buffer+0x12>
      status = FLASH_IF_Write64(pDestination, src_value);
 800141a:	4630      	mov	r0, r6
 800141c:	f7ff ffc4 	bl	80013a8 <FLASH_IF_Write64>
 8001420:	4607      	mov	r7, r0
 8001422:	e7e6      	b.n	80013f2 <FLASH_IF_Write_Buffer+0x12>
}
 8001424:	4638      	mov	r0, r7
 8001426:	b002      	add	sp, #8
 8001428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800142c <FLASH_IF_EraseByPages>:
{
 800142c:	b500      	push	{lr}
 800142e:	b085      	sub	sp, #20
  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001430:	2302      	movs	r3, #2
 8001432:	9301      	str	r3, [sp, #4]
  erase_str.Page = page;
 8001434:	9002      	str	r0, [sp, #8]
  erase_str.NbPages = n;
 8001436:	9103      	str	r1, [sp, #12]
  if (interrupt)
 8001438:	b13a      	cbz	r2, 800144a <FLASH_IF_EraseByPages+0x1e>
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 800143a:	a801      	add	r0, sp, #4
 800143c:	f002 fd38 	bl	8003eb0 <HAL_FLASHEx_Erase_IT>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001440:	b140      	cbz	r0, 8001454 <FLASH_IF_EraseByPages+0x28>
 8001442:	2802      	cmp	r0, #2
 8001444:	d10a      	bne.n	800145c <FLASH_IF_EraseByPages+0x30>
 8001446:	2001      	movs	r0, #1
 8001448:	e005      	b.n	8001456 <FLASH_IF_EraseByPages+0x2a>
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 800144a:	4669      	mov	r1, sp
 800144c:	a801      	add	r0, sp, #4
 800144e:	f002 fcef 	bl	8003e30 <HAL_FLASHEx_Erase>
 8001452:	e7f5      	b.n	8001440 <FLASH_IF_EraseByPages+0x14>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001454:	2000      	movs	r0, #0
}
 8001456:	b005      	add	sp, #20
 8001458:	f85d fb04 	ldr.w	pc, [sp], #4
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 800145c:	f06f 0001 	mvn.w	r0, #1
 8001460:	e7f9      	b.n	8001456 <FLASH_IF_EraseByPages+0x2a>
	...

08001464 <FLASH_IF_Write>:
{
 8001464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001468:	4693      	mov	fp, r2
 800146a:	4699      	mov	r9, r3
  uint32_t page_start_index = PAGE(address);
 800146c:	f100 4578 	add.w	r5, r0, #4160749568	; 0xf8000000
 8001470:	4b3e      	ldr	r3, [pc, #248]	; (800156c <FLASH_IF_Write+0x108>)
 8001472:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 8001476:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <FLASH_IF_Write+0x10c>)
 8001478:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 800147c:	fbb5 f2f3 	udiv	r2, r5, r3
 8001480:	fb03 5512 	mls	r5, r3, r2, r5
  uint32_t page_end_index = PAGE(address + size - 1);
 8001484:	eb00 0a0b 	add.w	sl, r0, fp
 8001488:	f10a 4a78 	add.w	sl, sl, #4160749568	; 0xf8000000
 800148c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8001490:	fbba f2f3 	udiv	r2, sl, r3
 8001494:	fb03 aa12 	mls	sl, r3, r2, sl
  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001498:	2900      	cmp	r1, #0
 800149a:	d052      	beq.n	8001542 <FLASH_IF_Write+0xde>
 800149c:	4606      	mov	r6, r0
 800149e:	0aed      	lsrs	r5, r5, #11
 80014a0:	ea4f 2ada 	mov.w	sl, sl, lsr #11
 80014a4:	4688      	mov	r8, r1
 80014a6:	f01b 0f07 	tst.w	fp, #7
 80014aa:	d14d      	bne.n	8001548 <FLASH_IF_Write+0xe4>
 80014ac:	f010 0f07 	tst.w	r0, #7
 80014b0:	d14d      	bne.n	800154e <FLASH_IF_Write+0xea>
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80014b2:	4b30      	ldr	r3, [pc, #192]	; (8001574 <FLASH_IF_Write+0x110>)
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	db4c      	blt.n	8001554 <FLASH_IF_Write+0xf0>
  if (page_start_index != page_end_index)
 80014ba:	4555      	cmp	r5, sl
 80014bc:	d004      	beq.n	80014c8 <FLASH_IF_Write+0x64>
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 80014be:	f3c0 040a 	ubfx	r4, r0, #0, #11
 80014c2:	f5c4 6400 	rsb	r4, r4, #2048	; 0x800
 80014c6:	e00d      	b.n	80014e4 <FLASH_IF_Write+0x80>
  uint32_t curr_size = size;
 80014c8:	465c      	mov	r4, fp
 80014ca:	e00b      	b.n	80014e4 <FLASH_IF_Write+0x80>
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80014cc:	4622      	mov	r2, r4
 80014ce:	4641      	mov	r1, r8
 80014d0:	4630      	mov	r0, r6
 80014d2:	f7ff ff85 	bl	80013e0 <FLASH_IF_Write_Buffer>
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d145      	bne.n	8001566 <FLASH_IF_Write+0x102>
    curr_dest_addr += curr_size;
 80014da:	4426      	add	r6, r4
    curr_src_addr += curr_size;
 80014dc:	44a0      	add	r8, r4
    curr_size = size - curr_size;
 80014de:	ebab 0404 	sub.w	r4, fp, r4
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80014e2:	3501      	adds	r5, #1
 80014e4:	4555      	cmp	r5, sl
 80014e6:	d829      	bhi.n	800153c <FLASH_IF_Write+0xd8>
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 80014e8:	4621      	mov	r1, r4
 80014ea:	4630      	mov	r0, r6
 80014ec:	f7ff ff21 	bl	8001332 <FLASH_IF_IsEmpty>
 80014f0:	2800      	cmp	r0, #0
 80014f2:	d0eb      	beq.n	80014cc <FLASH_IF_Write+0x68>
      if (dataTempPage == NULL)
 80014f4:	f1b9 0f00 	cmp.w	r9, #0
 80014f8:	d02f      	beq.n	800155a <FLASH_IF_Write+0xf6>
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 80014fa:	f505 3780 	add.w	r7, r5, #65536	; 0x10000
 80014fe:	02ff      	lsls	r7, r7, #11
 8001500:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001504:	4639      	mov	r1, r7
 8001506:	4648      	mov	r0, r9
 8001508:	f010 fc74 	bl	8011df4 <UTIL_MEM_cpy_8>
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 800150c:	f3c6 000a 	ubfx	r0, r6, #0, #11
 8001510:	b2a2      	uxth	r2, r4
 8001512:	4641      	mov	r1, r8
 8001514:	4448      	add	r0, r9
 8001516:	f010 fc6d 	bl	8011df4 <UTIL_MEM_cpy_8>
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 800151a:	2200      	movs	r2, #0
 800151c:	2101      	movs	r1, #1
 800151e:	4628      	mov	r0, r5
 8001520:	f7ff ff84 	bl	800142c <FLASH_IF_EraseByPages>
 8001524:	b9e0      	cbnz	r0, 8001560 <FLASH_IF_Write+0xfc>
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 8001526:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800152a:	4649      	mov	r1, r9
 800152c:	4638      	mov	r0, r7
 800152e:	f7ff ff57 	bl	80013e0 <FLASH_IF_Write_Buffer>
 8001532:	2800      	cmp	r0, #0
 8001534:	d0d1      	beq.n	80014da <FLASH_IF_Write+0x76>
          status = FLASH_WRITE_ERROR;
 8001536:	f06f 0002 	mvn.w	r0, #2
 800153a:	e000      	b.n	800153e <FLASH_IF_Write+0xda>
  int32_t status = FLASH_OK;
 800153c:	2000      	movs	r0, #0
}
 800153e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FLASH_PARAM_ERROR;
 8001542:	f06f 0004 	mvn.w	r0, #4
 8001546:	e7fa      	b.n	800153e <FLASH_IF_Write+0xda>
 8001548:	f06f 0004 	mvn.w	r0, #4
 800154c:	e7f7      	b.n	800153e <FLASH_IF_Write+0xda>
 800154e:	f06f 0004 	mvn.w	r0, #4
 8001552:	e7f4      	b.n	800153e <FLASH_IF_Write+0xda>
    return FLASH_LOCK_ERROR;
 8001554:	f06f 0003 	mvn.w	r0, #3
 8001558:	e7f1      	b.n	800153e <FLASH_IF_Write+0xda>
        return FLASH_PARAM_ERROR;
 800155a:	f06f 0004 	mvn.w	r0, #4
 800155e:	e7ee      	b.n	800153e <FLASH_IF_Write+0xda>
        status = FLASH_ERASE_ERROR;
 8001560:	f06f 0001 	mvn.w	r0, #1
 8001564:	e7eb      	b.n	800153e <FLASH_IF_Write+0xda>
        status = FLASH_WRITE_ERROR;
 8001566:	f06f 0002 	mvn.w	r0, #2
 800156a:	e7e8      	b.n	800153e <FLASH_IF_Write+0xda>
 800156c:	1fff7000 	.word	0x1fff7000
 8001570:	03fffc00 	.word	0x03fffc00
 8001574:	58004000 	.word	0x58004000

08001578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	2400      	movs	r4, #0
 800157e:	9403      	str	r4, [sp, #12]
 8001580:	9404      	str	r4, [sp, #16]
 8001582:	9405      	str	r4, [sp, #20]
 8001584:	9406      	str	r4, [sp, #24]
 8001586:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800158e:	f042 0202 	orr.w	r2, r2, #2
 8001592:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001594:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001596:	f002 0202 	and.w	r2, r2, #2
 800159a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800159c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800159e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015a0:	f042 0204 	orr.w	r2, r2, #4
 80015a4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015a8:	f002 0204 	and.w	r2, r2, #4
 80015ac:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80015ae:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015b2:	f042 0201 	orr.w	r2, r2, #1
 80015b6:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80015c0:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 80015c2:	4e25      	ldr	r6, [pc, #148]	; (8001658 <MX_GPIO_Init+0xe0>)
 80015c4:	4622      	mov	r2, r4
 80015c6:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 80015ca:	4630      	mov	r0, r6
 80015cc:	f002 fdf4 	bl	80041b8 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80015d0:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80015d4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2501      	movs	r5, #1
 80015d8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015dc:	2702      	movs	r7, #2
 80015de:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	a903      	add	r1, sp, #12
 80015e2:	4630      	mov	r0, r6
 80015e4:	f002 fc98 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT2_Pin;//BUT1_Pin|
 80015e8:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015ea:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80015ee:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	a903      	add	r1, sp, #12
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f8:	f002 fc8e 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80015fc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001600:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001606:	2303      	movs	r3, #3
 8001608:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160a:	a903      	add	r1, sp, #12
 800160c:	4630      	mov	r0, r6
 800160e:	f002 fc83 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 8001612:	2340      	movs	r3, #64	; 0x40
 8001614:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001616:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001618:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 800161a:	a903      	add	r1, sp, #12
 800161c:	480f      	ldr	r0, [pc, #60]	; (800165c <MX_GPIO_Init+0xe4>)
 800161e:	f002 fc7b 	bl	8003f18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001622:	4622      	mov	r2, r4
 8001624:	4621      	mov	r1, r4
 8001626:	2006      	movs	r0, #6
 8001628:	f002 f816 	bl	8003658 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800162c:	2006      	movs	r0, #6
 800162e:	f002 f84b 	bl	80036c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001632:	4622      	mov	r2, r4
 8001634:	4621      	mov	r1, r4
 8001636:	2007      	movs	r0, #7
 8001638:	f002 f80e 	bl	8003658 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800163c:	2007      	movs	r0, #7
 800163e:	f002 f843 	bl	80036c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001642:	4622      	mov	r2, r4
 8001644:	4621      	mov	r1, r4
 8001646:	2016      	movs	r0, #22
 8001648:	f002 f806 	bl	8003658 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800164c:	2016      	movs	r0, #22
 800164e:	f002 f83b 	bl	80036c8 <HAL_NVIC_EnableIRQ>

}
 8001652:	b009      	add	sp, #36	; 0x24
 8001654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001656:	bf00      	nop
 8001658:	48000400 	.word	0x48000400
 800165c:	48000800 	.word	0x48000800

08001660 <delay_ms>:
  }
  /* USER CODE END 3 */
}

void delay_ms(int a)
{
 8001660:	b538      	push	{r3, r4, r5, lr}
 8001662:	4605      	mov	r5, r0
	clock_t start = clock();
 8001664:	f011 f864 	bl	8012730 <clock>
 8001668:	4604      	mov	r4, r0
	while(clock() < start + a);
 800166a:	f011 f861 	bl	8012730 <clock>
 800166e:	192b      	adds	r3, r5, r4
 8001670:	4298      	cmp	r0, r3
 8001672:	d3fa      	bcc.n	800166a <delay_ms+0xa>
}
 8001674:	bd38      	pop	{r3, r4, r5, pc}

08001676 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001676:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001678:	e7fe      	b.n	8001678 <Error_Handler+0x2>

0800167a <SystemClock_Config>:
{
 800167a:	b510      	push	{r4, lr}
 800167c:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167e:	2248      	movs	r2, #72	; 0x48
 8001680:	2100      	movs	r1, #0
 8001682:	a808      	add	r0, sp, #32
 8001684:	f011 f89a 	bl	80127bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001688:	2400      	movs	r4, #0
 800168a:	9401      	str	r4, [sp, #4]
 800168c:	9402      	str	r4, [sp, #8]
 800168e:	9403      	str	r4, [sp, #12]
 8001690:	9404      	str	r4, [sp, #16]
 8001692:	9405      	str	r4, [sp, #20]
 8001694:	9406      	str	r4, [sp, #24]
 8001696:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001698:	f002 fdaa 	bl	80041f0 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800169c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016a0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80016a4:	f023 0318 	bic.w	r3, r3, #24
 80016a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016b0:	6813      	ldr	r3, [r2, #0]
 80016b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	6813      	ldr	r3, [r2, #0]
 80016be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80016c6:	2324      	movs	r3, #36	; 0x24
 80016c8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016ca:	2381      	movs	r3, #129	; 0x81
 80016cc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016ce:	2301      	movs	r3, #1
 80016d0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80016d2:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80016d4:	23b0      	movs	r3, #176	; 0xb0
 80016d6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016d8:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016da:	a808      	add	r0, sp, #32
 80016dc:	f002 ff22 	bl	8004524 <HAL_RCC_OscConfig>
 80016e0:	b970      	cbnz	r0, 8001700 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80016e2:	234f      	movs	r3, #79	; 0x4f
 80016e4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80016e6:	2300      	movs	r3, #0
 80016e8:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ea:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ec:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ee:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80016f0:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016f2:	2102      	movs	r1, #2
 80016f4:	a801      	add	r0, sp, #4
 80016f6:	f003 fa51 	bl	8004b9c <HAL_RCC_ClockConfig>
 80016fa:	b918      	cbnz	r0, 8001704 <SystemClock_Config+0x8a>
}
 80016fc:	b01a      	add	sp, #104	; 0x68
 80016fe:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001700:	f7ff ffb9 	bl	8001676 <Error_Handler>
    Error_Handler();
 8001704:	f7ff ffb7 	bl	8001676 <Error_Handler>

08001708 <main>:
{
 8001708:	b508      	push	{r3, lr}
  HAL_Init();
 800170a:	f001 fa61 	bl	8002bd0 <HAL_Init>
  SystemClock_Config();
 800170e:	f7ff ffb4 	bl	800167a <SystemClock_Config>
  MX_GPIO_Init();
 8001712:	f7ff ff31 	bl	8001578 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001716:	f000 fd4d 	bl	80021b4 <MX_LoRaWAN_Init>
	  MX_LoRaWAN_Process();
 800171a:	f000 fd51 	bl	80021c0 <MX_LoRaWAN_Process>
	  delay_ms(1000);
 800171e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001722:	f7ff ff9d 	bl	8001660 <delay_ms>
  while (1)
 8001726:	e7f8      	b.n	800171a <main+0x12>

08001728 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001728:	b500      	push	{lr}
 800172a:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800172c:	222c      	movs	r2, #44	; 0x2c
 800172e:	2100      	movs	r1, #0
 8001730:	a801      	add	r0, sp, #4
 8001732:	f011 f843 	bl	80127bc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001736:	4819      	ldr	r0, [pc, #100]	; (800179c <MX_RTC_Init+0x74>)
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <MX_RTC_Init+0x78>)
 800173a:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800173c:	231f      	movs	r3, #31
 800173e:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001744:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001746:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001748:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800174c:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800174e:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001754:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001756:	f003 fd87 	bl	8005268 <HAL_RTC_Init>
 800175a:	b9a8      	cbnz	r0, 8001788 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800175c:	480f      	ldr	r0, [pc, #60]	; (800179c <MX_RTC_Init+0x74>)
 800175e:	f003 febd 	bl	80054dc <HAL_RTCEx_SetSSRU_IT>
 8001762:	b9a0      	cbnz	r0, 800178e <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001764:	2200      	movs	r2, #0
 8001766:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001768:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800176a:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800176c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001770:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001776:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001778:	a901      	add	r1, sp, #4
 800177a:	4808      	ldr	r0, [pc, #32]	; (800179c <MX_RTC_Init+0x74>)
 800177c:	f003 fdd2 	bl	8005324 <HAL_RTC_SetAlarm_IT>
 8001780:	b940      	cbnz	r0, 8001794 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001782:	b00d      	add	sp, #52	; 0x34
 8001784:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001788:	f7ff ff75 	bl	8001676 <Error_Handler>
 800178c:	e7e6      	b.n	800175c <MX_RTC_Init+0x34>
    Error_Handler();
 800178e:	f7ff ff72 	bl	8001676 <Error_Handler>
 8001792:	e7e7      	b.n	8001764 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001794:	f7ff ff6f 	bl	8001676 <Error_Handler>
}
 8001798:	e7f3      	b.n	8001782 <MX_RTC_Init+0x5a>
 800179a:	bf00      	nop
 800179c:	20000200 	.word	0x20000200
 80017a0:	40002800 	.word	0x40002800

080017a4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80017a4:	b510      	push	{r4, lr}
 80017a6:	b090      	sub	sp, #64	; 0x40
 80017a8:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017aa:	2238      	movs	r2, #56	; 0x38
 80017ac:	2100      	movs	r1, #0
 80017ae:	a802      	add	r0, sp, #8
 80017b0:	f011 f804 	bl	80127bc <memset>
  if(rtcHandle->Instance==RTC)
 80017b4:	6822      	ldr	r2, [r4, #0]
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <HAL_RTC_MspInit+0x7c>)
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80017bc:	b010      	add	sp, #64	; 0x40
 80017be:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c4:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80017c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ca:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017cc:	a802      	add	r0, sp, #8
 80017ce:	f003 fb39 	bl	8004e44 <HAL_RCCEx_PeriphCLKConfig>
 80017d2:	bb08      	cbnz	r0, 8001818 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80017d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80017dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017ea:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80017f4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	4611      	mov	r1, r2
 80017fa:	2002      	movs	r0, #2
 80017fc:	f001 ff2c 	bl	8003658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001800:	2002      	movs	r0, #2
 8001802:	f001 ff61 	bl	80036c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	4611      	mov	r1, r2
 800180a:	202a      	movs	r0, #42	; 0x2a
 800180c:	f001 ff24 	bl	8003658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001810:	202a      	movs	r0, #42	; 0x2a
 8001812:	f001 ff59 	bl	80036c8 <HAL_NVIC_EnableIRQ>
}
 8001816:	e7d1      	b.n	80017bc <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001818:	f7ff ff2d 	bl	8001676 <Error_Handler>
 800181c:	e7da      	b.n	80017d4 <HAL_RTC_MspInit+0x30>
 800181e:	bf00      	nop
 8001820:	40002800 	.word	0x40002800

08001824 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001824:	4770      	bx	lr

08001826 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001826:	4770      	bx	lr

08001828 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001828:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 800182a:	f001 f9e7 	bl	8002bfc <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800182e:	2001      	movs	r0, #1
 8001830:	4b02      	ldr	r3, [pc, #8]	; (800183c <PWR_EnterStopMode+0x14>)
 8001832:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001836:	f002 fd3f 	bl	80042b8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800183a:	bd08      	pop	{r3, pc}
 800183c:	58000400 	.word	0x58000400

08001840 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001840:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001842:	f001 f9e2 	bl	8002c0a <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001846:	bd08      	pop	{r3, pc}

08001848 <PWR_ExitStopMode>:
{
 8001848:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 800184a:	f001 f9de 	bl	8002c0a <HAL_ResumeTick>
  vcom_Resume();
 800184e:	f000 fc71 	bl	8002134 <vcom_Resume>
}
 8001852:	bd08      	pop	{r3, pc}

08001854 <PWR_EnterSleepMode>:
{
 8001854:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8001856:	f001 f9d1 	bl	8002bfc <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800185a:	2101      	movs	r1, #1
 800185c:	2000      	movs	r0, #0
 800185e:	f002 fccf 	bl	8004200 <HAL_PWR_EnterSLEEPMode>
}
 8001862:	bd08      	pop	{r3, pc}

08001864 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001864:	4770      	bx	lr

08001866 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001866:	e7fe      	b.n	8001866 <NMI_Handler>

08001868 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <HardFault_Handler>

0800186a <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <MemManage_Handler>

0800186c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186c:	e7fe      	b.n	800186c <BusFault_Handler>

0800186e <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <UsageFault_Handler>

08001870 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001870:	4770      	bx	lr

08001872 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001872:	4770      	bx	lr

08001874 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001874:	4770      	bx	lr

08001876 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001876:	4770      	bx	lr

08001878 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001878:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800187a:	4802      	ldr	r0, [pc, #8]	; (8001884 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 800187c:	f003 fe5a 	bl	8005534 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001880:	bd08      	pop	{r3, pc}
 8001882:	bf00      	nop
 8001884:	20000200 	.word	0x20000200

08001888 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001888:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 800188a:	2001      	movs	r0, #1
 800188c:	f002 fca2 	bl	80041d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001890:	bd08      	pop	{r3, pc}

08001892 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001892:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001894:	2002      	movs	r0, #2
 8001896:	f002 fc9d 	bl	80041d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800189a:	bd08      	pop	{r3, pc}

0800189c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800189c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800189e:	4802      	ldr	r0, [pc, #8]	; (80018a8 <DMA1_Channel5_IRQHandler+0xc>)
 80018a0:	f002 f930 	bl	8003b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80018a4:	bd08      	pop	{r3, pc}
 80018a6:	bf00      	nop
 80018a8:	20000254 	.word	0x20000254

080018ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 80018ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 80018ae:	2040      	movs	r0, #64	; 0x40
 80018b0:	f002 fc90 	bl	80041d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018b4:	bd08      	pop	{r3, pc}
	...

080018b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80018b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018ba:	4802      	ldr	r0, [pc, #8]	; (80018c4 <USART2_IRQHandler+0xc>)
 80018bc:	f004 faf6 	bl	8005eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018c0:	bd08      	pop	{r3, pc}
 80018c2:	bf00      	nop
 80018c4:	200002b4 	.word	0x200002b4

080018c8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80018c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80018ca:	4802      	ldr	r0, [pc, #8]	; (80018d4 <RTC_Alarm_IRQHandler+0xc>)
 80018cc:	f003 fc44 	bl	8005158 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80018d0:	bd08      	pop	{r3, pc}
 80018d2:	bf00      	nop
 80018d4:	20000200 	.word	0x20000200

080018d8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80018d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80018da:	4802      	ldr	r0, [pc, #8]	; (80018e4 <SUBGHZ_Radio_IRQHandler+0xc>)
 80018dc:	f004 f8d4 	bl	8005a88 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80018e0:	bd08      	pop	{r3, pc}
 80018e2:	bf00      	nop
 80018e4:	20000238 	.word	0x20000238

080018e8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80018e8:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <MX_SUBGHZ_Init+0x18>)
 80018ec:	2308      	movs	r3, #8
 80018ee:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80018f0:	f003 fe56 	bl	80055a0 <HAL_SUBGHZ_Init>
 80018f4:	b900      	cbnz	r0, 80018f8 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80018f6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80018f8:	f7ff febd 	bl	8001676 <Error_Handler>
}
 80018fc:	e7fb      	b.n	80018f6 <MX_SUBGHZ_Init+0xe>
 80018fe:	bf00      	nop
 8001900:	20000238 	.word	0x20000238

08001904 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001904:	b500      	push	{lr}
 8001906:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800190e:	f042 0201 	orr.w	r2, r2, #1
 8001912:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800191c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	4611      	mov	r1, r2
 8001922:	2032      	movs	r0, #50	; 0x32
 8001924:	f001 fe98 	bl	8003658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001928:	2032      	movs	r0, #50	; 0x32
 800192a:	f001 fecd 	bl	80036c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800192e:	b003      	add	sp, #12
 8001930:	f85d fb04 	ldr.w	pc, [sp], #4

08001934 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001934:	b40c      	push	{r2, r3}
 8001936:	b500      	push	{lr}
 8001938:	b083      	sub	sp, #12
 800193a:	ab04      	add	r3, sp, #16
 800193c:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001940:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001942:	f010 fe31 	bl	80125a8 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001946:	b003      	add	sp, #12
 8001948:	f85d eb04 	ldr.w	lr, [sp], #4
 800194c:	b002      	add	sp, #8
 800194e:	4770      	bx	lr

08001950 <TimestampNow>:
{
 8001950:	b530      	push	{r4, r5, lr}
 8001952:	b085      	sub	sp, #20
 8001954:	4604      	mov	r4, r0
 8001956:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001958:	a802      	add	r0, sp, #8
 800195a:	f010 fb9b 	bl	8012094 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800195e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	9b02      	ldr	r3, [sp, #8]
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <TimestampNow+0x2c>)
 8001968:	2110      	movs	r1, #16
 800196a:	4620      	mov	r0, r4
 800196c:	f7ff ffe2 	bl	8001934 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001970:	4620      	mov	r0, r4
 8001972:	f7fe fc05 	bl	8000180 <strlen>
 8001976:	8028      	strh	r0, [r5, #0]
}
 8001978:	b005      	add	sp, #20
 800197a:	bd30      	pop	{r4, r5, pc}
 800197c:	0801388c 	.word	0x0801388c

08001980 <SystemApp_Init>:
{
 8001980:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001982:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001986:	6893      	ldr	r3, [r2, #8]
 8001988:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800198c:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 800198e:	f010 fc05 	bl	801219c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001992:	2401      	movs	r4, #1
 8001994:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <SystemApp_Init+0x4c>)
 8001996:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001998:	f000 f8b8 	bl	8001b0c <DBG_Init>
  UTIL_ADV_TRACE_Init();
 800199c:	f010 f8a0 	bl	8011ae0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80019a0:	480b      	ldr	r0, [pc, #44]	; (80019d0 <SystemApp_Init+0x50>)
 80019a2:	f010 f8b7 	bl	8011b14 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <SystemApp_Init+0x54>)
 80019a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019ac:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80019ae:	2002      	movs	r0, #2
 80019b0:	f010 f8b6 	bl	8011b20 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 80019b4:	f7ff fc1c 	bl	80011f0 <SYS_InitMeasurement>
  EnvSensors_Init();
 80019b8:	f000 f908 	bl	8001bcc <EnvSensors_Init>
  UTIL_LPM_Init();
 80019bc:	f010 f9c0 	bl	8011d40 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80019c0:	4621      	mov	r1, r4
 80019c2:	4620      	mov	r0, r4
 80019c4:	f010 f9dc 	bl	8011d80 <UTIL_LPM_SetOffMode>
}
 80019c8:	bd10      	pop	{r4, pc}
 80019ca:	bf00      	nop
 80019cc:	20000244 	.word	0x20000244
 80019d0:	08001951 	.word	0x08001951
 80019d4:	58004000 	.word	0x58004000

080019d8 <UTIL_SEQ_Idle>:
{
 80019d8:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 80019da:	f010 f9e7 	bl	8011dac <UTIL_LPM_EnterLowPower>
}
 80019de:	bd08      	pop	{r3, pc}

080019e0 <GetBatteryLevel>:
{
 80019e0:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80019e2:	f7ff fc0d 	bl	8001200 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80019e6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80019ea:	4298      	cmp	r0, r3
 80019ec:	d80d      	bhi.n	8001a0a <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 80019ee:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 80019f2:	d30c      	bcc.n	8001a0e <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80019f4:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 80019f8:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 80019fc:	0040      	lsls	r0, r0, #1
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <GetBatteryLevel+0x34>)
 8001a00:	fba3 3000 	umull	r3, r0, r3, r0
 8001a04:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001a08:	e000      	b.n	8001a0c <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 8001a0a:	20fe      	movs	r0, #254	; 0xfe
}
 8001a0c:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 8001a0e:	2000      	movs	r0, #0
 8001a10:	e7fc      	b.n	8001a0c <GetBatteryLevel+0x2c>
 8001a12:	bf00      	nop
 8001a14:	1b4e81b5 	.word	0x1b4e81b5

08001a18 <GetTemperatureLevel>:
{
 8001a18:	b500      	push	{lr}
 8001a1a:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 8001a1c:	4668      	mov	r0, sp
 8001a1e:	f000 f8b9 	bl	8001b94 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001a22:	9801      	ldr	r0, [sp, #4]
 8001a24:	f7ff f994 	bl	8000d50 <__aeabi_f2iz>
}
 8001a28:	b200      	sxth	r0, r0
 8001a2a:	b007      	add	sp, #28
 8001a2c:	f85d fb04 	ldr.w	pc, [sp], #4

08001a30 <GetUniqueId>:
{
 8001a30:	b538      	push	{r3, r4, r5, lr}
 8001a32:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001a34:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <GetUniqueId+0x68>)
 8001a36:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3e:	d013      	beq.n	8001a68 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001a40:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001a42:	0a1a      	lsrs	r2, r3, #8
 8001a44:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001a46:	0c1a      	lsrs	r2, r3, #16
 8001a48:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001a4a:	0e1b      	lsrs	r3, r3, #24
 8001a4c:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <GetUniqueId+0x68>)
 8001a50:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001a54:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001a56:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001a5a:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001a5c:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001a5e:	0c1a      	lsrs	r2, r3, #16
 8001a60:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001a62:	0e1b      	lsrs	r3, r3, #24
 8001a64:	7003      	strb	r3, [r0, #0]
}
 8001a66:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001a68:	f001 f8d6 	bl	8002c18 <HAL_GetUIDw0>
 8001a6c:	4605      	mov	r5, r0
 8001a6e:	f001 f8df 	bl	8002c30 <HAL_GetUIDw2>
 8001a72:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001a74:	f001 f8d6 	bl	8002c24 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001a78:	0e2b      	lsrs	r3, r5, #24
 8001a7a:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001a7c:	0c2b      	lsrs	r3, r5, #16
 8001a7e:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001a80:	0a2b      	lsrs	r3, r5, #8
 8001a82:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001a84:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001a86:	0e03      	lsrs	r3, r0, #24
 8001a88:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001a8a:	0c03      	lsrs	r3, r0, #16
 8001a8c:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001a8e:	0a03      	lsrs	r3, r0, #8
 8001a90:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001a92:	7020      	strb	r0, [r4, #0]
 8001a94:	e7e7      	b.n	8001a66 <GetUniqueId+0x36>
 8001a96:	bf00      	nop
 8001a98:	1fff7000 	.word	0x1fff7000

08001a9c <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <GetDevAddr+0x24>)
 8001a9e:	f8d3 0580 	ldr.w	r0, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)
 8001aa2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001aa6:	d000      	beq.n	8001aaa <GetDevAddr+0xe>
}
 8001aa8:	4770      	bx	lr
{
 8001aaa:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001aac:	f001 f8b4 	bl	8002c18 <HAL_GetUIDw0>
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	f001 f8b7 	bl	8002c24 <HAL_GetUIDw1>
 8001ab6:	4044      	eors	r4, r0
 8001ab8:	f001 f8ba 	bl	8002c30 <HAL_GetUIDw2>
 8001abc:	4060      	eors	r0, r4
}
 8001abe:	bd10      	pop	{r4, pc}
 8001ac0:	1fff7000 	.word	0x1fff7000

08001ac4 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001ac4:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	2002      	movs	r0, #2
 8001aca:	f010 f943 	bl	8011d54 <UTIL_LPM_SetStopMode>
}
 8001ace:	bd08      	pop	{r3, pc}

08001ad0 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001ad0:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	2002      	movs	r0, #2
 8001ad6:	f010 f93d 	bl	8011d54 <UTIL_LPM_SetStopMode>
}
 8001ada:	bd08      	pop	{r3, pc}

08001adc <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001adc:	2000      	movs	r0, #0
 8001ade:	4770      	bx	lr

08001ae0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001ae0:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001ae2:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <HAL_GetTick+0x14>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	b90b      	cbnz	r3, 8001aec <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001ae8:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8001aea:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001aec:	f000 f8ec 	bl	8001cc8 <TIMER_IF_GetTimerValue>
 8001af0:	e7fb      	b.n	8001aea <HAL_GetTick+0xa>
 8001af2:	bf00      	nop
 8001af4:	20000244 	.word	0x20000244

08001af8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001af8:	b500      	push	{lr}
 8001afa:	b083      	sub	sp, #12
 8001afc:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001afe:	9801      	ldr	r0, [sp, #4]
 8001b00:	f000 f9c8 	bl	8001e94 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001b04:	b003      	add	sp, #12
 8001b06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001b0c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0e:	b089      	sub	sp, #36	; 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001b10:	f001 f894 	bl	8002c3c <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001b14:	f001 f89a 	bl	8002c4c <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001b18:	f001 f8a0 	bl	8002c5c <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	9403      	str	r4, [sp, #12]
 8001b20:	9404      	str	r4, [sp, #16]
 8001b22:	9405      	str	r4, [sp, #20]
 8001b24:	9406      	str	r4, [sp, #24]
 8001b26:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b36:	f042 0202 	orr.w	r2, r2, #2
 8001b3a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b3e:	f002 0202 	and.w	r2, r2, #2
 8001b42:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001b44:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b48:	f042 0202 	orr.w	r2, r2, #2
 8001b4c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001b56:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001b58:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001b5c:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001b5e:	4d0c      	ldr	r5, [pc, #48]	; (8001b90 <DBG_Init+0x84>)
 8001b60:	a903      	add	r1, sp, #12
 8001b62:	4628      	mov	r0, r5
 8001b64:	f002 f9d8 	bl	8003f18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001b68:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001b6c:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001b6e:	a903      	add	r1, sp, #12
 8001b70:	4628      	mov	r0, r5
 8001b72:	f002 f9d1 	bl	8003f18 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001b76:	4622      	mov	r2, r4
 8001b78:	4639      	mov	r1, r7
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	f002 fb1c 	bl	80041b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001b80:	4622      	mov	r2, r4
 8001b82:	4631      	mov	r1, r6
 8001b84:	4628      	mov	r0, r5
 8001b86:	f002 fb17 	bl	80041b8 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001b8a:	b009      	add	sp, #36	; 0x24
 8001b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	48000400 	.word	0x48000400

08001b94 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001b94:	b510      	push	{r4, lr}
 8001b96:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001b98:	f7ff fb54 	bl	8001244 <SYS_GetTemperatureLevel>
 8001b9c:	f340 200f 	sbfx	r0, r0, #8, #16
 8001ba0:	f7fe febc 	bl	800091c <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <EnvSensors_Read+0x28>)
 8001ba6:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001ba8:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <EnvSensors_Read+0x2c>)
 8001bac:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <EnvSensors_Read+0x30>)
 8001bb0:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <EnvSensors_Read+0x34>)
 8001bb4:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	bd10      	pop	{r4, pc}
 8001bba:	bf00      	nop
 8001bbc:	42480000 	.word	0x42480000
 8001bc0:	447a0000 	.word	0x447a0000
 8001bc4:	003e090d 	.word	0x003e090d
 8001bc8:	000503ab 	.word	0x000503ab

08001bcc <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001bcc:	2000      	movs	r0, #0
 8001bce:	4770      	bx	lr

08001bd0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd0:	b570      	push	{r4, r5, r6, lr}
 8001bd2:	460c      	mov	r4, r1
 8001bd4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd6:	2500      	movs	r5, #0
 8001bd8:	e006      	b.n	8001be8 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8001bda:	f3af 8000 	nop.w
 8001bde:	4621      	mov	r1, r4
 8001be0:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be4:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001be6:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be8:	42b5      	cmp	r5, r6
 8001bea:	dbf6      	blt.n	8001bda <_read+0xa>
	}

return len;
}
 8001bec:	4630      	mov	r0, r6
 8001bee:	bd70      	pop	{r4, r5, r6, pc}

08001bf0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bf0:	b570      	push	{r4, r5, r6, lr}
 8001bf2:	460c      	mov	r4, r1
 8001bf4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	2500      	movs	r5, #0
 8001bf8:	e004      	b.n	8001c04 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8001bfa:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001bfe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	3501      	adds	r5, #1
 8001c04:	42b5      	cmp	r5, r6
 8001c06:	dbf8      	blt.n	8001bfa <_write+0xa>
	}
	return len;
}
 8001c08:	4630      	mov	r0, r6
 8001c0a:	bd70      	pop	{r4, r5, r6, pc}

08001c0c <_close>:

int _close(int file)
{
	return -1;
}
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	4770      	bx	lr

08001c12 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001c12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c16:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001c18:	2000      	movs	r0, #0
 8001c1a:	4770      	bx	lr

08001c1c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	4770      	bx	lr

08001c20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001c20:	2000      	movs	r0, #0
 8001c22:	4770      	bx	lr

08001c24 <_times>:
}

int _times(struct tms *buf)
{
	return -1;
}
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	4770      	bx	lr
	...

08001c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c2c:	b510      	push	{r4, lr}
 8001c2e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c30:	4a0c      	ldr	r2, [pc, #48]	; (8001c64 <_sbrk+0x38>)
 8001c32:	490d      	ldr	r1, [pc, #52]	; (8001c68 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c34:	480d      	ldr	r0, [pc, #52]	; (8001c6c <_sbrk+0x40>)
 8001c36:	6800      	ldr	r0, [r0, #0]
 8001c38:	b140      	cbz	r0, 8001c4c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3a:	480c      	ldr	r0, [pc, #48]	; (8001c6c <_sbrk+0x40>)
 8001c3c:	6800      	ldr	r0, [r0, #0]
 8001c3e:	4403      	add	r3, r0
 8001c40:	1a52      	subs	r2, r2, r1
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d806      	bhi.n	8001c54 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001c46:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <_sbrk+0x40>)
 8001c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001c4a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001c4c:	4807      	ldr	r0, [pc, #28]	; (8001c6c <_sbrk+0x40>)
 8001c4e:	4c08      	ldr	r4, [pc, #32]	; (8001c70 <_sbrk+0x44>)
 8001c50:	6004      	str	r4, [r0, #0]
 8001c52:	e7f2      	b.n	8001c3a <_sbrk+0xe>
    errno = ENOMEM;
 8001c54:	f010 fd80 	bl	8012758 <__errno>
 8001c58:	230c      	movs	r3, #12
 8001c5a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	e7f3      	b.n	8001c4a <_sbrk+0x1e>
 8001c62:	bf00      	nop
 8001c64:	20008000 	.word	0x20008000
 8001c68:	00000800 	.word	0x00000800
 8001c6c:	20000248 	.word	0x20000248
 8001c70:	200017b8 	.word	0x200017b8

08001c74 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <TIMER_IF_SetTimerContext+0x1c>)
 8001c76:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001c78:	e001      	b.n	8001c7e <TIMER_IF_SetTimerContext+0xa>
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <TIMER_IF_SetTimerContext+0x1c>)
 8001c7c:	6898      	ldr	r0, [r3, #8]
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <TIMER_IF_SetTimerContext+0x1c>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	4283      	cmp	r3, r0
 8001c84:	d1f9      	bne.n	8001c7a <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001c86:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001c88:	4b02      	ldr	r3, [pc, #8]	; (8001c94 <TIMER_IF_SetTimerContext+0x20>)
 8001c8a:	6018      	str	r0, [r3, #0]
}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40002800 	.word	0x40002800
 8001c94:	20000250 	.word	0x20000250

08001c98 <TIMER_IF_GetTimerContext>:
}
 8001c98:	4b01      	ldr	r3, [pc, #4]	; (8001ca0 <TIMER_IF_GetTimerContext+0x8>)
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000250 	.word	0x20000250

08001ca4 <TIMER_IF_GetTimerElapsedTime>:
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001ca6:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001ca8:	e001      	b.n	8001cae <TIMER_IF_GetTimerElapsedTime+0xa>
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001cac:	6898      	ldr	r0, [r3, #8]
 8001cae:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	4283      	cmp	r3, r0
 8001cb4:	d1f9      	bne.n	8001caa <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001cb6:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001cb8:	4b02      	ldr	r3, [pc, #8]	; (8001cc4 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	1ac0      	subs	r0, r0, r3
 8001cbe:	4770      	bx	lr
 8001cc0:	40002800 	.word	0x40002800
 8001cc4:	20000250 	.word	0x20000250

08001cc8 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001cc8:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <TIMER_IF_GetTimerValue+0x20>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b153      	cbz	r3, 8001ce4 <TIMER_IF_GetTimerValue+0x1c>
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <TIMER_IF_GetTimerValue+0x24>)
 8001cd0:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001cd2:	e001      	b.n	8001cd8 <TIMER_IF_GetTimerValue+0x10>
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <TIMER_IF_GetTimerValue+0x24>)
 8001cd6:	6898      	ldr	r0, [r3, #8]
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <TIMER_IF_GetTimerValue+0x24>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	4283      	cmp	r3, r0
 8001cde:	d1f9      	bne.n	8001cd4 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001ce0:	43c0      	mvns	r0, r0
 8001ce2:	4770      	bx	lr
  uint32_t ret = 0;
 8001ce4:	2000      	movs	r0, #0
}
 8001ce6:	4770      	bx	lr
 8001ce8:	2000024c 	.word	0x2000024c
 8001cec:	40002800 	.word	0x40002800

08001cf0 <TIMER_IF_GetMinimumTimeout>:
}
 8001cf0:	2003      	movs	r0, #3
 8001cf2:	4770      	bx	lr

08001cf4 <TIMER_IF_Convert_ms2Tick>:
{
 8001cf4:	b508      	push	{r3, lr}
 8001cf6:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001cf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	0280      	lsls	r0, r0, #10
 8001d00:	0d89      	lsrs	r1, r1, #22
 8001d02:	f7ff f86b 	bl	8000ddc <__aeabi_uldivmod>
}
 8001d06:	bd08      	pop	{r3, pc}

08001d08 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001d08:	0ec2      	lsrs	r2, r0, #27
 8001d0a:	0143      	lsls	r3, r0, #5
 8001d0c:	1a1b      	subs	r3, r3, r0
 8001d0e:	f162 0200 	sbc.w	r2, r2, #0
 8001d12:	0092      	lsls	r2, r2, #2
 8001d14:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	181b      	adds	r3, r3, r0
 8001d1c:	f142 0000 	adc.w	r0, r2, #0
 8001d20:	00c0      	lsls	r0, r0, #3
 8001d22:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001d26:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001d2a:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001d2e:	4770      	bx	lr

08001d30 <TIMER_IF_StopTimer>:
{
 8001d30:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <TIMER_IF_StopTimer+0x20>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001d38:	4c06      	ldr	r4, [pc, #24]	; (8001d54 <TIMER_IF_StopTimer+0x24>)
 8001d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d3e:	4620      	mov	r0, r4
 8001d40:	f003 f9ca 	bl	80050d8 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295
 8001d48:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	bd10      	pop	{r4, pc}
 8001d4e:	bf00      	nop
 8001d50:	40002800 	.word	0x40002800
 8001d54:	20000200 	.word	0x20000200

08001d58 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001d58:	b508      	push	{r3, lr}
 8001d5a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	4802      	ldr	r0, [pc, #8]	; (8001d68 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001d60:	f003 fbfd 	bl	800555e <HAL_RTCEx_BKUPWrite>
}
 8001d64:	bd08      	pop	{r3, pc}
 8001d66:	bf00      	nop
 8001d68:	20000200 	.word	0x20000200

08001d6c <TIMER_IF_Init>:
{
 8001d6c:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <TIMER_IF_Init+0x40>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b10b      	cbz	r3, 8001d78 <TIMER_IF_Init+0xc>
}
 8001d74:	2000      	movs	r0, #0
 8001d76:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d78:	4c0d      	ldr	r4, [pc, #52]	; (8001db0 <TIMER_IF_Init+0x44>)
 8001d7a:	f04f 35ff 	mov.w	r5, #4294967295
 8001d7e:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001d80:	f7ff fcd2 	bl	8001728 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001d84:	f7ff ffd4 	bl	8001d30 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	f003 f9a3 	bl	80050d8 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d92:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001d94:	4620      	mov	r0, r4
 8001d96:	f003 fb81 	bl	800549c <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f7ff ffdc 	bl	8001d58 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001da0:	f7ff ff68 	bl	8001c74 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001da4:	4b01      	ldr	r3, [pc, #4]	; (8001dac <TIMER_IF_Init+0x40>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	e7e3      	b.n	8001d74 <TIMER_IF_Init+0x8>
 8001dac:	2000024c 	.word	0x2000024c
 8001db0:	20000200 	.word	0x20000200

08001db4 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001db4:	b508      	push	{r3, lr}
 8001db6:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001db8:	2100      	movs	r1, #0
 8001dba:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001dbc:	f003 fbcf 	bl	800555e <HAL_RTCEx_BKUPWrite>
}
 8001dc0:	bd08      	pop	{r3, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000200 	.word	0x20000200

08001dc8 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001dc8:	b508      	push	{r3, lr}
 8001dca:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001dcc:	2101      	movs	r1, #1
 8001dce:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001dd0:	f003 fbc5 	bl	800555e <HAL_RTCEx_BKUPWrite>
}
 8001dd4:	bd08      	pop	{r3, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000200 	.word	0x20000200

08001ddc <TIMER_IF_StartTimer>:
{
 8001ddc:	b510      	push	{r4, lr}
 8001dde:	b08c      	sub	sp, #48	; 0x30
 8001de0:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001de2:	222c      	movs	r2, #44	; 0x2c
 8001de4:	2100      	movs	r1, #0
 8001de6:	a801      	add	r0, sp, #4
 8001de8:	f010 fce8 	bl	80127bc <memset>
  TIMER_IF_StopTimer();
 8001dec:	f7ff ffa0 	bl	8001d30 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <TIMER_IF_StartTimer+0x48>)
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001df6:	2300      	movs	r3, #0
 8001df8:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001dfa:	43e4      	mvns	r4, r4
 8001dfc:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001dfe:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001e00:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001e04:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e0a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	a901      	add	r1, sp, #4
 8001e10:	4805      	ldr	r0, [pc, #20]	; (8001e28 <TIMER_IF_StartTimer+0x4c>)
 8001e12:	f003 fa87 	bl	8005324 <HAL_RTC_SetAlarm_IT>
 8001e16:	b910      	cbnz	r0, 8001e1e <TIMER_IF_StartTimer+0x42>
}
 8001e18:	2000      	movs	r0, #0
 8001e1a:	b00c      	add	sp, #48	; 0x30
 8001e1c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001e1e:	f7ff fc2a 	bl	8001676 <Error_Handler>
 8001e22:	e7f9      	b.n	8001e18 <TIMER_IF_StartTimer+0x3c>
 8001e24:	20000250 	.word	0x20000250
 8001e28:	20000200 	.word	0x20000200

08001e2c <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001e2c:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001e2e:	2102      	movs	r1, #2
 8001e30:	4801      	ldr	r0, [pc, #4]	; (8001e38 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001e32:	f003 fb9b 	bl	800556c <HAL_RTCEx_BKUPRead>
}
 8001e36:	bd08      	pop	{r3, pc}
 8001e38:	20000200 	.word	0x20000200

08001e3c <TIMER_IF_GetTime>:
{
 8001e3c:	b538      	push	{r3, r4, r5, lr}
 8001e3e:	4605      	mov	r5, r0
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <TIMER_IF_GetTime+0x34>)
 8001e42:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001e44:	e001      	b.n	8001e4a <TIMER_IF_GetTime+0xe>
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <TIMER_IF_GetTime+0x34>)
 8001e48:	689c      	ldr	r4, [r3, #8]
 8001e4a:	4a09      	ldr	r2, [pc, #36]	; (8001e70 <TIMER_IF_GetTime+0x34>)
 8001e4c:	6892      	ldr	r2, [r2, #8]
 8001e4e:	42a2      	cmp	r2, r4
 8001e50:	d1f9      	bne.n	8001e46 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8001e52:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001e54:	f7ff ffea 	bl	8001e2c <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001e58:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001e5a:	0aa4      	lsrs	r4, r4, #10
 8001e5c:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001e60:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001e64:	f7ff ff50 	bl	8001d08 <TIMER_IF_Convert_Tick2ms>
 8001e68:	8028      	strh	r0, [r5, #0]
}
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	bd38      	pop	{r3, r4, r5, pc}
 8001e6e:	bf00      	nop
 8001e70:	40002800 	.word	0x40002800

08001e74 <TIMER_IF_BkUp_Read_Seconds>:
{
 8001e74:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001e76:	2100      	movs	r1, #0
 8001e78:	4801      	ldr	r0, [pc, #4]	; (8001e80 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001e7a:	f003 fb77 	bl	800556c <HAL_RTCEx_BKUPRead>
}
 8001e7e:	bd08      	pop	{r3, pc}
 8001e80:	20000200 	.word	0x20000200

08001e84 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001e84:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001e86:	2101      	movs	r1, #1
 8001e88:	4801      	ldr	r0, [pc, #4]	; (8001e90 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001e8a:	f003 fb6f 	bl	800556c <HAL_RTCEx_BKUPRead>
}
 8001e8e:	bd08      	pop	{r3, pc}
 8001e90:	20000200 	.word	0x20000200

08001e94 <TIMER_IF_DelayMs>:
{
 8001e94:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001e96:	f7ff ff2d 	bl	8001cf4 <TIMER_IF_Convert_ms2Tick>
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <TIMER_IF_DelayMs+0x3c>)
 8001e9c:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001e9e:	e001      	b.n	8001ea4 <TIMER_IF_DelayMs+0x10>
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <TIMER_IF_DelayMs+0x3c>)
 8001ea2:	6899      	ldr	r1, [r3, #8]
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <TIMER_IF_DelayMs+0x3c>)
 8001ea6:	6892      	ldr	r2, [r2, #8]
 8001ea8:	428a      	cmp	r2, r1
 8001eaa:	d1f9      	bne.n	8001ea0 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8001eac:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001eae:	e00a      	b.n	8001ec6 <TIMER_IF_DelayMs+0x32>
 8001eb0:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <TIMER_IF_DelayMs+0x3c>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	4a06      	ldr	r2, [pc, #24]	; (8001ed0 <TIMER_IF_DelayMs+0x3c>)
 8001eb6:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d1f9      	bne.n	8001eb0 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8001ebc:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001ebe:	1a5b      	subs	r3, r3, r1
 8001ec0:	4283      	cmp	r3, r0
 8001ec2:	d203      	bcs.n	8001ecc <TIMER_IF_DelayMs+0x38>
    __NOP();
 8001ec4:	bf00      	nop
 8001ec6:	4b02      	ldr	r3, [pc, #8]	; (8001ed0 <TIMER_IF_DelayMs+0x3c>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001eca:	e7f3      	b.n	8001eb4 <TIMER_IF_DelayMs+0x20>
}
 8001ecc:	bd08      	pop	{r3, pc}
 8001ece:	bf00      	nop
 8001ed0:	40002800 	.word	0x40002800

08001ed4 <HAL_RTC_AlarmAEventCallback>:
{
 8001ed4:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001ed6:	f010 fa85 	bl	80123e4 <UTIL_TIMER_IRQ_Handler>
}
 8001eda:	bd08      	pop	{r3, pc}

08001edc <HAL_RTCEx_SSRUEventCallback>:
{
 8001edc:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001ede:	f7ff ffa5 	bl	8001e2c <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001ee2:	3001      	adds	r0, #1
 8001ee4:	f7ff ff38 	bl	8001d58 <TIMER_IF_BkUp_Write_MSBticks>
}
 8001ee8:	bd08      	pop	{r3, pc}
	...

08001eec <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001eec:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001eee:	4817      	ldr	r0, [pc, #92]	; (8001f4c <MX_USART2_UART_Init+0x60>)
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <MX_USART2_UART_Init+0x64>)
 8001ef2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001ef4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ef8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001efa:	2300      	movs	r3, #0
 8001efc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001efe:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f00:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f02:	220c      	movs	r2, #12
 8001f04:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f06:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f08:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f0a:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f0c:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f0e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f10:	f004 fe2b 	bl	8006b6a <HAL_UART_Init>
 8001f14:	b970      	cbnz	r0, 8001f34 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f16:	2100      	movs	r1, #0
 8001f18:	480c      	ldr	r0, [pc, #48]	; (8001f4c <MX_USART2_UART_Init+0x60>)
 8001f1a:	f004 ffe8 	bl	8006eee <HAL_UARTEx_SetTxFifoThreshold>
 8001f1e:	b960      	cbnz	r0, 8001f3a <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f20:	2100      	movs	r1, #0
 8001f22:	480a      	ldr	r0, [pc, #40]	; (8001f4c <MX_USART2_UART_Init+0x60>)
 8001f24:	f005 f808 	bl	8006f38 <HAL_UARTEx_SetRxFifoThreshold>
 8001f28:	b950      	cbnz	r0, 8001f40 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001f2a:	4808      	ldr	r0, [pc, #32]	; (8001f4c <MX_USART2_UART_Init+0x60>)
 8001f2c:	f004 ffbb 	bl	8006ea6 <HAL_UARTEx_EnableFifoMode>
 8001f30:	b948      	cbnz	r0, 8001f46 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f32:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001f34:	f7ff fb9f 	bl	8001676 <Error_Handler>
 8001f38:	e7ed      	b.n	8001f16 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8001f3a:	f7ff fb9c 	bl	8001676 <Error_Handler>
 8001f3e:	e7ef      	b.n	8001f20 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001f40:	f7ff fb99 	bl	8001676 <Error_Handler>
 8001f44:	e7f1      	b.n	8001f2a <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001f46:	f7ff fb96 	bl	8001676 <Error_Handler>
}
 8001f4a:	e7f2      	b.n	8001f32 <MX_USART2_UART_Init+0x46>
 8001f4c:	200002b4 	.word	0x200002b4
 8001f50:	40004400 	.word	0x40004400

08001f54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f54:	b530      	push	{r4, r5, lr}
 8001f56:	b097      	sub	sp, #92	; 0x5c
 8001f58:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	9111      	str	r1, [sp, #68]	; 0x44
 8001f5e:	9112      	str	r1, [sp, #72]	; 0x48
 8001f60:	9113      	str	r1, [sp, #76]	; 0x4c
 8001f62:	9114      	str	r1, [sp, #80]	; 0x50
 8001f64:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f66:	2238      	movs	r2, #56	; 0x38
 8001f68:	a803      	add	r0, sp, #12
 8001f6a:	f010 fc27 	bl	80127bc <memset>
  if(uartHandle->Instance==USART2)
 8001f6e:	6822      	ldr	r2, [r4, #0]
 8001f70:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <HAL_UART_MspInit+0xd4>)
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d001      	beq.n	8001f7a <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f76:	b017      	add	sp, #92	; 0x5c
 8001f78:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001f7e:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_UART_MspInit+0xd8>)
 8001f80:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f82:	a803      	add	r0, sp, #12
 8001f84:	f002 ff5e 	bl	8004e44 <HAL_RCCEx_PeriphCLKConfig>
 8001f88:	2800      	cmp	r0, #0
 8001f8a:	d144      	bne.n	8002016 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f92:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f96:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f9a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001f9e:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001fa0:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fa4:	f042 0201 	orr.w	r2, r2, #1
 8001fa8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001fb2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001fb4:	230c      	movs	r3, #12
 8001fb6:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2500      	movs	r5, #0
 8001fbe:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fc4:	2307      	movs	r3, #7
 8001fc6:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc8:	a911      	add	r1, sp, #68	; 0x44
 8001fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fce:	f001 ffa3 	bl	8003f18 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001fd2:	4817      	ldr	r0, [pc, #92]	; (8002030 <HAL_UART_MspInit+0xdc>)
 8001fd4:	4b17      	ldr	r3, [pc, #92]	; (8002034 <HAL_UART_MspInit+0xe0>)
 8001fd6:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001fd8:	2314      	movs	r3, #20
 8001fda:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fdc:	2310      	movs	r3, #16
 8001fde:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe0:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fe6:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fe8:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001fea:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fec:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001fee:	f001 fbfb 	bl	80037e8 <HAL_DMA_Init>
 8001ff2:	b998      	cbnz	r0, 800201c <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001ff4:	2110      	movs	r1, #16
 8001ff6:	480e      	ldr	r0, [pc, #56]	; (8002030 <HAL_UART_MspInit+0xdc>)
 8001ff8:	f001 fdf8 	bl	8003bec <HAL_DMA_ConfigChannelAttributes>
 8001ffc:	b988      	cbnz	r0, 8002022 <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_UART_MspInit+0xdc>)
 8002000:	67a3      	str	r3, [r4, #120]	; 0x78
 8002002:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002004:	2200      	movs	r2, #0
 8002006:	2102      	movs	r1, #2
 8002008:	2025      	movs	r0, #37	; 0x25
 800200a:	f001 fb25 	bl	8003658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800200e:	2025      	movs	r0, #37	; 0x25
 8002010:	f001 fb5a 	bl	80036c8 <HAL_NVIC_EnableIRQ>
}
 8002014:	e7af      	b.n	8001f76 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8002016:	f7ff fb2e 	bl	8001676 <Error_Handler>
 800201a:	e7b7      	b.n	8001f8c <HAL_UART_MspInit+0x38>
      Error_Handler();
 800201c:	f7ff fb2b 	bl	8001676 <Error_Handler>
 8002020:	e7e8      	b.n	8001ff4 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8002022:	f7ff fb28 	bl	8001676 <Error_Handler>
 8002026:	e7ea      	b.n	8001ffe <HAL_UART_MspInit+0xaa>
 8002028:	40004400 	.word	0x40004400
 800202c:	000c0004 	.word	0x000c0004
 8002030:	20000254 	.word	0x20000254
 8002034:	40020058 	.word	0x40020058

08002038 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8002038:	6802      	ldr	r2, [r0, #0]
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_UART_MspDeInit+0x34>)
 800203c:	429a      	cmp	r2, r3
 800203e:	d000      	beq.n	8002042 <HAL_UART_MspDeInit+0xa>
 8002040:	4770      	bx	lr
{
 8002042:	b510      	push	{r4, lr}
 8002044:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800204a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800204c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002050:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8002052:	210c      	movs	r1, #12
 8002054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002058:	f002 f830 	bl	80040bc <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800205c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800205e:	f001 fc35 	bl	80038cc <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002062:	2025      	movs	r0, #37	; 0x25
 8002064:	f001 fb3e 	bl	80036e4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002068:	bd10      	pop	{r4, pc}
 800206a:	bf00      	nop
 800206c:	40004400 	.word	0x40004400

08002070 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002070:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <vcom_Init+0x20>)
 8002074:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8002076:	f7ff f93b 	bl	80012f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800207a:	f7ff ff37 	bl	8001eec <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <vcom_Init+0x24>)
 8002080:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002084:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002088:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800208c:	2000      	movs	r0, #0
 800208e:	bd08      	pop	{r3, pc}
 8002090:	20000348 	.word	0x20000348
 8002094:	58000800 	.word	0x58000800

08002098 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002098:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800209a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020a0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020a4:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80020a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020a8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80020ac:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80020ae:	4804      	ldr	r0, [pc, #16]	; (80020c0 <vcom_DeInit+0x28>)
 80020b0:	f7ff ffc2 	bl	8002038 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80020b4:	200f      	movs	r0, #15
 80020b6:	f001 fb15 	bl	80036e4 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80020ba:	2000      	movs	r0, #0
 80020bc:	bd08      	pop	{r3, pc}
 80020be:	bf00      	nop
 80020c0:	200002b4 	.word	0x200002b4

080020c4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80020c4:	b508      	push	{r3, lr}
 80020c6:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80020c8:	4601      	mov	r1, r0
 80020ca:	4802      	ldr	r0, [pc, #8]	; (80020d4 <vcom_Trace_DMA+0x10>)
 80020cc:	f003 fe1a 	bl	8005d04 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80020d0:	2000      	movs	r0, #0
 80020d2:	bd08      	pop	{r3, pc}
 80020d4:	200002b4 	.word	0x200002b4

080020d8 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80020d8:	b510      	push	{r4, lr}
 80020da:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <vcom_ReceiveInit+0x50>)
 80020de:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80020e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020e4:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80020e6:	ab02      	add	r3, sp, #8
 80020e8:	e913 0006 	ldmdb	r3, {r1, r2}
 80020ec:	480f      	ldr	r0, [pc, #60]	; (800212c <vcom_ReceiveInit+0x54>)
 80020ee:	f004 fe82 	bl	8006df6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <vcom_ReceiveInit+0x54>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	69da      	ldr	r2, [r3, #28]
 80020f8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80020fc:	d1f9      	bne.n	80020f2 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8002104:	d0fb      	beq.n	80020fe <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800210c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 800210e:	4c07      	ldr	r4, [pc, #28]	; (800212c <vcom_ReceiveInit+0x54>)
 8002110:	4620      	mov	r0, r4
 8002112:	f004 feb1 	bl	8006e78 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002116:	2201      	movs	r2, #1
 8002118:	4905      	ldr	r1, [pc, #20]	; (8002130 <vcom_ReceiveInit+0x58>)
 800211a:	4620      	mov	r0, r4
 800211c:	f004 fdfc 	bl	8006d18 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002120:	2000      	movs	r0, #0
 8002122:	b002      	add	sp, #8
 8002124:	bd10      	pop	{r4, pc}
 8002126:	bf00      	nop
 8002128:	20000344 	.word	0x20000344
 800212c:	200002b4 	.word	0x200002b4
 8002130:	2000034c 	.word	0x2000034c

08002134 <vcom_Resume>:

void vcom_Resume(void)
{
 8002134:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002136:	4807      	ldr	r0, [pc, #28]	; (8002154 <vcom_Resume+0x20>)
 8002138:	f004 fd17 	bl	8006b6a <HAL_UART_Init>
 800213c:	b920      	cbnz	r0, 8002148 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800213e:	4806      	ldr	r0, [pc, #24]	; (8002158 <vcom_Resume+0x24>)
 8002140:	f001 fb52 	bl	80037e8 <HAL_DMA_Init>
 8002144:	b918      	cbnz	r0, 800214e <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002146:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002148:	f7ff fa95 	bl	8001676 <Error_Handler>
 800214c:	e7f7      	b.n	800213e <vcom_Resume+0xa>
    Error_Handler();
 800214e:	f7ff fa92 	bl	8001676 <Error_Handler>
}
 8002152:	e7f8      	b.n	8002146 <vcom_Resume+0x12>
 8002154:	200002b4 	.word	0x200002b4
 8002158:	20000254 	.word	0x20000254

0800215c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800215c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 800215e:	6802      	ldr	r2, [r0, #0]
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <HAL_UART_TxCpltCallback+0x18>)
 8002162:	429a      	cmp	r2, r3
 8002164:	d000      	beq.n	8002168 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002166:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_UART_TxCpltCallback+0x1c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2000      	movs	r0, #0
 800216e:	4798      	blx	r3
}
 8002170:	e7f9      	b.n	8002166 <HAL_UART_TxCpltCallback+0xa>
 8002172:	bf00      	nop
 8002174:	40004400 	.word	0x40004400
 8002178:	20000348 	.word	0x20000348

0800217c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 800217c:	6802      	ldr	r2, [r0, #0]
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <HAL_UART_RxCpltCallback+0x2c>)
 8002180:	429a      	cmp	r2, r3
 8002182:	d000      	beq.n	8002186 <HAL_UART_RxCpltCallback+0xa>
 8002184:	4770      	bx	lr
{
 8002186:	b510      	push	{r4, lr}
 8002188:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <HAL_UART_RxCpltCallback+0x30>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	b12b      	cbz	r3, 800219c <HAL_UART_RxCpltCallback+0x20>
 8002190:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8002194:	b912      	cbnz	r2, 800219c <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002196:	2101      	movs	r1, #1
 8002198:	4805      	ldr	r0, [pc, #20]	; (80021b0 <HAL_UART_RxCpltCallback+0x34>)
 800219a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 800219c:	2201      	movs	r2, #1
 800219e:	4904      	ldr	r1, [pc, #16]	; (80021b0 <HAL_UART_RxCpltCallback+0x34>)
 80021a0:	4620      	mov	r0, r4
 80021a2:	f004 fdb9 	bl	8006d18 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80021a6:	bd10      	pop	{r4, pc}
 80021a8:	40004400 	.word	0x40004400
 80021ac:	20000344 	.word	0x20000344
 80021b0:	2000034c 	.word	0x2000034c

080021b4 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 80021b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80021b6:	f7ff fbe3 	bl	8001980 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 80021ba:	f000 fa97 	bl	80026ec <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80021be:	bd08      	pop	{r3, pc}

080021c0 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 80021c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80021c2:	f04f 30ff 	mov.w	r0, #4294967295
 80021c6:	f00f fe5d 	bl	8011e84 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 80021ca:	bd08      	pop	{r3, pc}

080021cc <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80021cc:	4b01      	ldr	r3, [pc, #4]	; (80021d4 <OnTxFrameCtrlChanged+0x8>)
 80021ce:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000058 	.word	0x20000058

080021d8 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 80021d8:	4b01      	ldr	r3, [pc, #4]	; (80021e0 <OnPingSlotPeriodicityChanged+0x8>)
 80021da:	7318      	strb	r0, [r3, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000058 	.word	0x20000058

080021e4 <OnBeaconStatusChange>:
  if (params != NULL)
 80021e4:	2800      	cmp	r0, #0
 80021e6:	d03f      	beq.n	8002268 <OnBeaconStatusChange+0x84>
{
 80021e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021ec:	b08c      	sub	sp, #48	; 0x30
 80021ee:	4603      	mov	r3, r0
    switch (params->State)
 80021f0:	7842      	ldrb	r2, [r0, #1]
 80021f2:	2a02      	cmp	r2, #2
 80021f4:	d00a      	beq.n	800220c <OnBeaconStatusChange+0x28>
 80021f6:	2a03      	cmp	r2, #3
 80021f8:	d02f      	beq.n	800225a <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 80021fa:	4b1c      	ldr	r3, [pc, #112]	; (800226c <OnBeaconStatusChange+0x88>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	4611      	mov	r1, r2
 8002200:	2002      	movs	r0, #2
 8002202:	f00f fce1 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
}
 8002206:	b00c      	add	sp, #48	; 0x30
 8002208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 800220c:	7c02      	ldrb	r2, [r0, #16]
 800220e:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8002212:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8002216:	7d9c      	ldrb	r4, [r3, #22]
 8002218:	7ddd      	ldrb	r5, [r3, #23]
 800221a:	7e1e      	ldrb	r6, [r3, #24]
 800221c:	7e5f      	ldrb	r7, [r3, #25]
 800221e:	f893 c01a 	ldrb.w	ip, [r3, #26]
 8002222:	f893 e01b 	ldrb.w	lr, [r3, #27]
 8002226:	f893 801c 	ldrb.w	r8, [r3, #28]
 800222a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800222e:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8002232:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8002236:	9708      	str	r7, [sp, #32]
 8002238:	9607      	str	r6, [sp, #28]
 800223a:	9506      	str	r5, [sp, #24]
 800223c:	9405      	str	r4, [sp, #20]
 800223e:	685c      	ldr	r4, [r3, #4]
 8002240:	9404      	str	r4, [sp, #16]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	9303      	str	r3, [sp, #12]
 8002246:	9002      	str	r0, [sp, #8]
 8002248:	9101      	str	r1, [sp, #4]
 800224a:	9200      	str	r2, [sp, #0]
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <OnBeaconStatusChange+0x8c>)
 800224e:	2200      	movs	r2, #0
 8002250:	4611      	mov	r1, r2
 8002252:	2002      	movs	r0, #2
 8002254:	f00f fcb8 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8002258:	e7d5      	b.n	8002206 <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <OnBeaconStatusChange+0x90>)
 800225c:	2200      	movs	r2, #0
 800225e:	4611      	mov	r1, r2
 8002260:	2002      	movs	r0, #2
 8002262:	f00f fcb1 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
}
 8002266:	e7ce      	b.n	8002206 <OnBeaconStatusChange+0x22>
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	080138e8 	.word	0x080138e8
 8002270:	08013900 	.word	0x08013900
 8002274:	08013974 	.word	0x08013974

08002278 <OnClassChange>:
{
 8002278:	b500      	push	{lr}
 800227a:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <OnClassChange+0x1c>)
 800227e:	5c1b      	ldrb	r3, [r3, r0]
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	4b05      	ldr	r3, [pc, #20]	; (8002298 <OnClassChange+0x20>)
 8002284:	2200      	movs	r2, #0
 8002286:	4611      	mov	r1, r2
 8002288:	2002      	movs	r0, #2
 800228a:	f00f fc9d 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
}
 800228e:	b003      	add	sp, #12
 8002290:	f85d fb04 	ldr.w	pc, [sp], #4
 8002294:	080139b0 	.word	0x080139b0
 8002298:	08013994 	.word	0x08013994

0800229c <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800229c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800229e:	2801      	cmp	r0, #1
 80022a0:	d006      	beq.n	80022b0 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <OnNvmDataChange+0x24>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	4611      	mov	r1, r2
 80022a8:	2002      	movs	r0, #2
 80022aa:	f00f fc8d 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 80022ae:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <OnNvmDataChange+0x28>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	4611      	mov	r1, r2
 80022b6:	2002      	movs	r0, #2
 80022b8:	f00f fc86 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
 80022bc:	e7f7      	b.n	80022ae <OnNvmDataChange+0x12>
 80022be:	bf00      	nop
 80022c0:	080139c8 	.word	0x080139c8
 80022c4:	080139b4 	.word	0x080139b4

080022c8 <OnTxTimerEvent>:
{
 80022c8:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80022ca:	2100      	movs	r1, #0
 80022cc:	2002      	movs	r0, #2
 80022ce:	f00f fda5 	bl	8011e1c <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 80022d2:	4802      	ldr	r0, [pc, #8]	; (80022dc <OnTxTimerEvent+0x14>)
 80022d4:	f010 f826 	bl	8012324 <UTIL_TIMER_Start>
}
 80022d8:	bd08      	pop	{r3, pc}
 80022da:	bf00      	nop
 80022dc:	200004a4 	.word	0x200004a4

080022e0 <OnMacProcessNotify>:
{
 80022e0:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 80022e2:	2100      	movs	r1, #0
 80022e4:	2001      	movs	r0, #1
 80022e6:	f00f fd99 	bl	8011e1c <UTIL_SEQ_SetTask>
}
 80022ea:	bd08      	pop	{r3, pc}

080022ec <OnSystemReset>:
{
 80022ec:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80022ee:	f005 fbdf 	bl	8007ab0 <LmHandlerHalt>
 80022f2:	b100      	cbz	r0, 80022f6 <OnSystemReset+0xa>
}
 80022f4:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80022f6:	f004 fff9 	bl	80072ec <LmHandlerJoinStatus>
 80022fa:	2801      	cmp	r0, #1
 80022fc:	d1fa      	bne.n	80022f4 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022fe:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002302:	4905      	ldr	r1, [pc, #20]	; (8002318 <OnSystemReset+0x2c>)
 8002304:	68ca      	ldr	r2, [r1, #12]
 8002306:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <OnSystemReset+0x30>)
 800230c:	4313      	orrs	r3, r2
 800230e:	60cb      	str	r3, [r1, #12]
 8002310:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002314:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002316:	e7fd      	b.n	8002314 <OnSystemReset+0x28>
 8002318:	e000ed00 	.word	0xe000ed00
 800231c:	05fa0004 	.word	0x05fa0004

08002320 <OnTxPeriodicityChanged>:
{
 8002320:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <OnTxPeriodicityChanged+0x28>)
 8002324:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 8002326:	b910      	cbnz	r0, 800232e <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8002328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800232c:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 800232e:	4c07      	ldr	r4, [pc, #28]	; (800234c <OnTxPeriodicityChanged+0x2c>)
 8002330:	4620      	mov	r0, r4
 8002332:	f00f ff9d 	bl	8012270 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <OnTxPeriodicityChanged+0x28>)
 8002338:	6819      	ldr	r1, [r3, #0]
 800233a:	4620      	mov	r0, r4
 800233c:	f010 f838 	bl	80123b0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002340:	4620      	mov	r0, r4
 8002342:	f00f ffef 	bl	8012324 <UTIL_TIMER_Start>
}
 8002346:	bd10      	pop	{r4, pc}
 8002348:	2000006c 	.word	0x2000006c
 800234c:	200004a4 	.word	0x200004a4

08002350 <OnTxData>:
  if ((params != NULL))
 8002350:	2800      	cmp	r0, #0
 8002352:	d042      	beq.n	80023da <OnTxData+0x8a>
{
 8002354:	b510      	push	{r4, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 800235a:	7803      	ldrb	r3, [r0, #0]
 800235c:	b90b      	cbnz	r3, 8002362 <OnTxData+0x12>
}
 800235e:	b004      	add	sp, #16
 8002360:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002362:	2201      	movs	r2, #1
 8002364:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002368:	481c      	ldr	r0, [pc, #112]	; (80023dc <OnTxData+0x8c>)
 800236a:	f001 ff25 	bl	80041b8 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 800236e:	481c      	ldr	r0, [pc, #112]	; (80023e0 <OnTxData+0x90>)
 8002370:	f00f ffd8 	bl	8012324 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <OnTxData+0x94>)
 8002376:	2200      	movs	r2, #0
 8002378:	4611      	mov	r1, r2
 800237a:	2002      	movs	r0, #2
 800237c:	f00f fc24 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8002380:	7c23      	ldrb	r3, [r4, #16]
 8002382:	f994 200a 	ldrsb.w	r2, [r4, #10]
 8002386:	f994 1018 	ldrsb.w	r1, [r4, #24]
 800238a:	9103      	str	r1, [sp, #12]
 800238c:	9202      	str	r2, [sp, #8]
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	68e3      	ldr	r3, [r4, #12]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <OnTxData+0x98>)
 8002396:	2200      	movs	r2, #0
 8002398:	4611      	mov	r1, r2
 800239a:	2003      	movs	r0, #3
 800239c:	f00f fc14 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80023a0:	4b12      	ldr	r3, [pc, #72]	; (80023ec <OnTxData+0x9c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	4611      	mov	r1, r2
 80023a6:	2003      	movs	r0, #3
 80023a8:	f00f fc0e 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80023ac:	7a23      	ldrb	r3, [r4, #8]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d10c      	bne.n	80023cc <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80023b2:	7a63      	ldrb	r3, [r4, #9]
 80023b4:	b143      	cbz	r3, 80023c8 <OnTxData+0x78>
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <OnTxData+0xa0>)
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <OnTxData+0xa4>)
 80023bc:	2200      	movs	r2, #0
 80023be:	4611      	mov	r1, r2
 80023c0:	2003      	movs	r0, #3
 80023c2:	f00f fc01 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
 80023c6:	e7ca      	b.n	800235e <OnTxData+0xe>
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <OnTxData+0xa8>)
 80023ca:	e7f5      	b.n	80023b8 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <OnTxData+0xac>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	4611      	mov	r1, r2
 80023d2:	2003      	movs	r0, #3
 80023d4:	f00f fbf8 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
}
 80023d8:	e7c1      	b.n	800235e <OnTxData+0xe>
 80023da:	4770      	bx	lr
 80023dc:	48000400 	.word	0x48000400
 80023e0:	2000048c 	.word	0x2000048c
 80023e4:	080139e8 	.word	0x080139e8
 80023e8:	08013a1c 	.word	0x08013a1c
 80023ec:	08013a50 	.word	0x08013a50
 80023f0:	080139e4 	.word	0x080139e4
 80023f4:	08013a60 	.word	0x08013a60
 80023f8:	080139dc 	.word	0x080139dc
 80023fc:	08013a74 	.word	0x08013a74

08002400 <OnJoinRequest>:
  if (joinParams != NULL)
 8002400:	b358      	cbz	r0, 800245a <OnJoinRequest+0x5a>
{
 8002402:	b510      	push	{r4, lr}
 8002404:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8002406:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800240a:	b9fb      	cbnz	r3, 800244c <OnJoinRequest+0x4c>
      UTIL_TIMER_Stop(&JoinLedTimer);
 800240c:	4813      	ldr	r0, [pc, #76]	; (800245c <OnJoinRequest+0x5c>)
 800240e:	f00f ff2f 	bl	8012270 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002412:	2200      	movs	r2, #0
 8002414:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002418:	4811      	ldr	r0, [pc, #68]	; (8002460 <OnJoinRequest+0x60>)
 800241a:	f001 fecd 	bl	80041b8 <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <OnJoinRequest+0x64>)
 8002420:	2200      	movs	r2, #0
 8002422:	4611      	mov	r1, r2
 8002424:	2002      	movs	r0, #2
 8002426:	f00f fbcf 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800242a:	79a3      	ldrb	r3, [r4, #6]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d006      	beq.n	800243e <OnJoinRequest+0x3e>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002430:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <OnJoinRequest+0x68>)
 8002432:	2200      	movs	r2, #0
 8002434:	4611      	mov	r1, r2
 8002436:	2002      	movs	r0, #2
 8002438:	f00f fbc6 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
 800243c:	e00c      	b.n	8002458 <OnJoinRequest+0x58>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <OnJoinRequest+0x6c>)
 8002440:	2200      	movs	r2, #0
 8002442:	4611      	mov	r1, r2
 8002444:	2002      	movs	r0, #2
 8002446:	f00f fbbf 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
 800244a:	e005      	b.n	8002458 <OnJoinRequest+0x58>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <OnJoinRequest+0x70>)
 800244e:	2200      	movs	r2, #0
 8002450:	4611      	mov	r1, r2
 8002452:	2002      	movs	r0, #2
 8002454:	f00f fbb8 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
}
 8002458:	bd10      	pop	{r4, pc}
 800245a:	4770      	bx	lr
 800245c:	20000444 	.word	0x20000444
 8002460:	48000400 	.word	0x48000400
 8002464:	08013a84 	.word	0x08013a84
 8002468:	08013abc 	.word	0x08013abc
 800246c:	08013a9c 	.word	0x08013a9c
 8002470:	08013adc 	.word	0x08013adc

08002474 <OnStopJoinTimerEvent>:
{
 8002474:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <OnStopJoinTimerEvent+0x3c>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d013      	beq.n	80024a6 <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 800247e:	4c0d      	ldr	r4, [pc, #52]	; (80024b4 <OnStopJoinTimerEvent+0x40>)
 8002480:	2200      	movs	r2, #0
 8002482:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002486:	4620      	mov	r0, r4
 8002488:	f001 fe96 	bl	80041b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800248c:	2200      	movs	r2, #0
 800248e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002492:	4620      	mov	r0, r4
 8002494:	f001 fe90 	bl	80041b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002498:	2200      	movs	r2, #0
 800249a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800249e:	4620      	mov	r0, r4
 80024a0:	f001 fe8a 	bl	80041b8 <HAL_GPIO_WritePin>
}
 80024a4:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80024a6:	2100      	movs	r1, #0
 80024a8:	2008      	movs	r0, #8
 80024aa:	f00f fcb7 	bl	8011e1c <UTIL_SEQ_SetTask>
 80024ae:	e7e6      	b.n	800247e <OnStopJoinTimerEvent+0xa>
 80024b0:	20000000 	.word	0x20000000
 80024b4:	48000400 	.word	0x48000400

080024b8 <OnRxTimerLedEvent>:
{
 80024b8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80024ba:	2200      	movs	r2, #0
 80024bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024c0:	4801      	ldr	r0, [pc, #4]	; (80024c8 <OnRxTimerLedEvent+0x10>)
 80024c2:	f001 fe79 	bl	80041b8 <HAL_GPIO_WritePin>
}
 80024c6:	bd08      	pop	{r3, pc}
 80024c8:	48000400 	.word	0x48000400

080024cc <OnTxTimerLedEvent>:
{
 80024cc:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80024ce:	2200      	movs	r2, #0
 80024d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024d4:	4801      	ldr	r0, [pc, #4]	; (80024dc <OnTxTimerLedEvent+0x10>)
 80024d6:	f001 fe6f 	bl	80041b8 <HAL_GPIO_WritePin>
}
 80024da:	bd08      	pop	{r3, pc}
 80024dc:	48000400 	.word	0x48000400

080024e0 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 80024e0:	b538      	push	{r3, r4, r5, lr}
 80024e2:	4605      	mov	r5, r0
 80024e4:	460c      	mov	r4, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80024e6:	f001 fbbf 	bl	8003c68 <HAL_FLASH_Unlock>
 80024ea:	b100      	cbz	r0, 80024ee <OnStoreContextRequest+0xe>
    HAL_FLASH_Lock();
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 80024ec:	bd38      	pop	{r3, r4, r5, pc}
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <OnStoreContextRequest+0x4c>)
 80024f0:	f8d3 05e0 	ldr.w	r0, [r3, #1504]	; 0x5e0
 80024f4:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <OnStoreContextRequest+0x50>)
 80024f6:	ea03 2080 	and.w	r0, r3, r0, lsl #10
 80024fa:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 80024fe:	fbb3 f3f0 	udiv	r3, r3, r0
 8002502:	fb00 f303 	mul.w	r3, r0, r3
 8002506:	f5c3 337c 	rsb	r3, r3, #258048	; 0x3f000
 800250a:	2200      	movs	r2, #0
 800250c:	2101      	movs	r1, #1
 800250e:	0ad8      	lsrs	r0, r3, #11
 8002510:	f7fe ff8c 	bl	800142c <FLASH_IF_EraseByPages>
 8002514:	b110      	cbz	r0, 800251c <OnStoreContextRequest+0x3c>
    HAL_FLASH_Lock();
 8002516:	f001 fbbf 	bl	8003c98 <HAL_FLASH_Lock>
}
 800251a:	e7e7      	b.n	80024ec <OnStoreContextRequest+0xc>
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800251c:	2300      	movs	r3, #0
 800251e:	4622      	mov	r2, r4
 8002520:	4629      	mov	r1, r5
 8002522:	4804      	ldr	r0, [pc, #16]	; (8002534 <OnStoreContextRequest+0x54>)
 8002524:	f7fe ff9e 	bl	8001464 <FLASH_IF_Write>
 8002528:	e7f5      	b.n	8002516 <OnStoreContextRequest+0x36>
 800252a:	bf00      	nop
 800252c:	1fff7000 	.word	0x1fff7000
 8002530:	03fffc00 	.word	0x03fffc00
 8002534:	0803f000 	.word	0x0803f000

08002538 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002538:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800253a:	b28a      	uxth	r2, r1
 800253c:	4901      	ldr	r1, [pc, #4]	; (8002544 <OnRestoreContextRequest+0xc>)
 800253e:	f00f fc59 	bl	8011df4 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8002542:	bd08      	pop	{r3, pc}
 8002544:	0803f000 	.word	0x0803f000

08002548 <StopJoin>:
{
 8002548:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800254a:	4c1e      	ldr	r4, [pc, #120]	; (80025c4 <StopJoin+0x7c>)
 800254c:	2201      	movs	r2, #1
 800254e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002552:	4620      	mov	r0, r4
 8002554:	f001 fe30 	bl	80041b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002558:	2201      	movs	r2, #1
 800255a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800255e:	4620      	mov	r0, r4
 8002560:	f001 fe2a 	bl	80041b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002564:	2201      	movs	r2, #1
 8002566:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800256a:	4620      	mov	r0, r4
 800256c:	f001 fe24 	bl	80041b8 <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 8002570:	4815      	ldr	r0, [pc, #84]	; (80025c8 <StopJoin+0x80>)
 8002572:	f00f fe7d 	bl	8012270 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8002576:	f005 fa93 	bl	8007aa0 <LmHandlerStop>
 800257a:	b148      	cbz	r0, 8002590 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800257c:	4b13      	ldr	r3, [pc, #76]	; (80025cc <StopJoin+0x84>)
 800257e:	2200      	movs	r2, #0
 8002580:	4611      	mov	r1, r2
 8002582:	2002      	movs	r0, #2
 8002584:	f00f fb20 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 8002588:	4811      	ldr	r0, [pc, #68]	; (80025d0 <StopJoin+0x88>)
 800258a:	f00f fecb 	bl	8012324 <UTIL_TIMER_Start>
}
 800258e:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 8002590:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <StopJoin+0x8c>)
 8002592:	2200      	movs	r2, #0
 8002594:	4611      	mov	r1, r2
 8002596:	2002      	movs	r0, #2
 8002598:	f00f fb16 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 800259c:	4c0e      	ldr	r4, [pc, #56]	; (80025d8 <StopJoin+0x90>)
 800259e:	2501      	movs	r5, #1
 80025a0:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <StopJoin+0x94>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	4611      	mov	r1, r2
 80025a8:	2002      	movs	r0, #2
 80025aa:	f00f fb0d 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 80025ae:	480c      	ldr	r0, [pc, #48]	; (80025e0 <StopJoin+0x98>)
 80025b0:	f005 f8ee 	bl	8007790 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 80025b4:	4629      	mov	r1, r5
 80025b6:	7820      	ldrb	r0, [r4, #0]
 80025b8:	f004 fe34 	bl	8007224 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 80025bc:	4802      	ldr	r0, [pc, #8]	; (80025c8 <StopJoin+0x80>)
 80025be:	f00f feb1 	bl	8012324 <UTIL_TIMER_Start>
 80025c2:	e7e1      	b.n	8002588 <StopJoin+0x40>
 80025c4:	48000400 	.word	0x48000400
 80025c8:	200004a4 	.word	0x200004a4
 80025cc:	08013af8 	.word	0x08013af8
 80025d0:	20000474 	.word	0x20000474
 80025d4:	08013b18 	.word	0x08013b18
 80025d8:	20000000 	.word	0x20000000
 80025dc:	08013b2c 	.word	0x08013b2c
 80025e0:	20000058 	.word	0x20000058

080025e4 <StoreContext>:
{
 80025e4:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 80025e6:	f005 fa6b 	bl	8007ac0 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 80025ea:	f110 0f08 	cmn.w	r0, #8
 80025ee:	d003      	beq.n	80025f8 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 80025f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80025f4:	d007      	beq.n	8002606 <StoreContext+0x22>
}
 80025f6:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <StoreContext+0x30>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	4611      	mov	r1, r2
 80025fe:	2002      	movs	r0, #2
 8002600:	f00f fae2 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
 8002604:	e7f7      	b.n	80025f6 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8002606:	4b04      	ldr	r3, [pc, #16]	; (8002618 <StoreContext+0x34>)
 8002608:	2200      	movs	r2, #0
 800260a:	4611      	mov	r1, r2
 800260c:	2002      	movs	r0, #2
 800260e:	f00f fadb 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
}
 8002612:	e7f0      	b.n	80025f6 <StoreContext+0x12>
 8002614:	08013b4c 	.word	0x08013b4c
 8002618:	08013b64 	.word	0x08013b64

0800261c <OnJoinTimerLedEvent>:
{
 800261c:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 800261e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002622:	4802      	ldr	r0, [pc, #8]	; (800262c <OnJoinTimerLedEvent+0x10>)
 8002624:	f001 fdcd 	bl	80041c2 <HAL_GPIO_TogglePin>
}
 8002628:	bd08      	pop	{r3, pc}
 800262a:	bf00      	nop
 800262c:	48000400 	.word	0x48000400

08002630 <SendTxData>:
{
 8002630:	b530      	push	{r4, r5, lr}
 8002632:	b083      	sub	sp, #12
	AppData.Port = LORAWAN_USER_APP_PORT;
 8002634:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <SendTxData+0x98>)
 8002636:	2202      	movs	r2, #2
 8002638:	701a      	strb	r2, [r3, #0]
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800263a:	4b24      	ldr	r3, [pc, #144]	; (80026cc <SendTxData+0x9c>)
 800263c:	7a5b      	ldrb	r3, [r3, #9]
 800263e:	b9db      	cbnz	r3, 8002678 <SendTxData+0x48>
  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8002640:	2200      	movs	r2, #0
 8002642:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <SendTxData+0xa0>)
 8002644:	78d9      	ldrb	r1, [r3, #3]
 8002646:	4820      	ldr	r0, [pc, #128]	; (80026c8 <SendTxData+0x98>)
 8002648:	f004 fe62 	bl	8007310 <LmHandlerSend>
  if (LORAMAC_HANDLER_SUCCESS == status)
 800264c:	b310      	cbz	r0, 8002694 <SendTxData+0x64>
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800264e:	f110 0f06 	cmn.w	r0, #6
 8002652:	d027      	beq.n	80026a4 <SendTxData+0x74>
	UTIL_TIMER_Time_t nextTxIn = 0;
 8002654:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 8002656:	4c1f      	ldr	r4, [pc, #124]	; (80026d4 <SendTxData+0xa4>)
 8002658:	4620      	mov	r0, r4
 800265a:	f00f fe09 	bl	8012270 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800265e:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <SendTxData+0xa8>)
 8002660:	6819      	ldr	r1, [r3, #0]
 8002662:	42a9      	cmp	r1, r5
 8002664:	bf38      	it	cc
 8002666:	4629      	movcc	r1, r5
 8002668:	4620      	mov	r0, r4
 800266a:	f00f fea1 	bl	80123b0 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800266e:	4620      	mov	r0, r4
 8002670:	f00f fe58 	bl	8012324 <UTIL_TIMER_Start>
}
 8002674:	b003      	add	sp, #12
 8002676:	bd30      	pop	{r4, r5, pc}
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002678:	f004 fe38 	bl	80072ec <LmHandlerJoinStatus>
 800267c:	2801      	cmp	r0, #1
 800267e:	d1df      	bne.n	8002640 <SendTxData+0x10>
    UTIL_TIMER_Stop(&JoinLedTimer);
 8002680:	4812      	ldr	r0, [pc, #72]	; (80026cc <SendTxData+0x9c>)
 8002682:	f00f fdf5 	bl	8012270 <UTIL_TIMER_Stop>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002686:	2200      	movs	r2, #0
 8002688:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800268c:	4813      	ldr	r0, [pc, #76]	; (80026dc <SendTxData+0xac>)
 800268e:	f001 fd93 	bl	80041b8 <HAL_GPIO_WritePin>
 8002692:	e7d5      	b.n	8002640 <SendTxData+0x10>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <SendTxData+0xb0>)
 8002696:	2201      	movs	r2, #1
 8002698:	2100      	movs	r1, #0
 800269a:	4610      	mov	r0, r2
 800269c:	f00f fa94 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
	UTIL_TIMER_Time_t nextTxIn = 0;
 80026a0:	2500      	movs	r5, #0
 80026a2:	e7d8      	b.n	8002656 <SendTxData+0x26>
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 80026a4:	f004 fe1c 	bl	80072e0 <LmHandlerGetDutyCycleWaitTime>
    if (nextTxIn > 0)
 80026a8:	4605      	mov	r5, r0
 80026aa:	2800      	cmp	r0, #0
 80026ac:	d0d3      	beq.n	8002656 <SendTxData+0x26>
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 80026ae:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <SendTxData+0xb4>)
 80026b0:	fba3 2300 	umull	r2, r3, r3, r0
 80026b4:	099b      	lsrs	r3, r3, #6
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <SendTxData+0xb8>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	2100      	movs	r1, #0
 80026be:	4610      	mov	r0, r2
 80026c0:	f00f fa82 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
 80026c4:	e7c7      	b.n	8002656 <SendTxData+0x26>
 80026c6:	bf00      	nop
 80026c8:	20000004 	.word	0x20000004
 80026cc:	20000444 	.word	0x20000444
 80026d0:	20000058 	.word	0x20000058
 80026d4:	200004a4 	.word	0x200004a4
 80026d8:	2000006c 	.word	0x2000006c
 80026dc:	48000400 	.word	0x48000400
 80026e0:	08013b7c 	.word	0x08013b7c
 80026e4:	10624dd3 	.word	0x10624dd3
 80026e8:	08013b8c 	.word	0x08013b8c

080026ec <LoRaWAN_Init>:
{
 80026ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026f0:	b086      	sub	sp, #24
  uint32_t feature_version = 0UL;
 80026f2:	2400      	movs	r4, #0
 80026f4:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 80026f6:	9402      	str	r4, [sp, #8]
 80026f8:	2502      	movs	r5, #2
 80026fa:	9501      	str	r5, [sp, #4]
 80026fc:	2601      	movs	r6, #1
 80026fe:	9600      	str	r6, [sp, #0]
 8002700:	4b4b      	ldr	r3, [pc, #300]	; (8002830 <LoRaWAN_Init+0x144>)
 8002702:	4622      	mov	r2, r4
 8002704:	4621      	mov	r1, r4
 8002706:	4628      	mov	r0, r5
 8002708:	f00f fa5e 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800270c:	9402      	str	r4, [sp, #8]
 800270e:	2704      	movs	r7, #4
 8002710:	9701      	str	r7, [sp, #4]
 8002712:	9500      	str	r5, [sp, #0]
 8002714:	4b47      	ldr	r3, [pc, #284]	; (8002834 <LoRaWAN_Init+0x148>)
 8002716:	4622      	mov	r2, r4
 8002718:	4621      	mov	r1, r4
 800271a:	4628      	mov	r0, r5
 800271c:	f00f fa54 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002720:	9402      	str	r4, [sp, #8]
 8002722:	9501      	str	r5, [sp, #4]
 8002724:	9600      	str	r6, [sp, #0]
 8002726:	4b44      	ldr	r3, [pc, #272]	; (8002838 <LoRaWAN_Init+0x14c>)
 8002728:	4622      	mov	r2, r4
 800272a:	4621      	mov	r1, r4
 800272c:	4628      	mov	r0, r5
 800272e:	f00f fa4b 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002732:	a905      	add	r1, sp, #20
 8002734:	4620      	mov	r0, r4
 8002736:	f005 f99d 	bl	8007a74 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800273a:	9b05      	ldr	r3, [sp, #20]
 800273c:	0e1a      	lsrs	r2, r3, #24
 800273e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002742:	9102      	str	r1, [sp, #8]
 8002744:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	9200      	str	r2, [sp, #0]
 800274c:	4b3b      	ldr	r3, [pc, #236]	; (800283c <LoRaWAN_Init+0x150>)
 800274e:	4622      	mov	r2, r4
 8002750:	4621      	mov	r1, r4
 8002752:	4628      	mov	r0, r5
 8002754:	f00f fa38 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8002758:	a905      	add	r1, sp, #20
 800275a:	4630      	mov	r0, r6
 800275c:	f005 f98a 	bl	8007a74 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002760:	9b05      	ldr	r3, [sp, #20]
 8002762:	0e1a      	lsrs	r2, r3, #24
 8002764:	b2d9      	uxtb	r1, r3
 8002766:	9103      	str	r1, [sp, #12]
 8002768:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800276c:	9102      	str	r1, [sp, #8]
 800276e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	9200      	str	r2, [sp, #0]
 8002776:	4b32      	ldr	r3, [pc, #200]	; (8002840 <LoRaWAN_Init+0x154>)
 8002778:	4622      	mov	r2, r4
 800277a:	4621      	mov	r1, r4
 800277c:	4628      	mov	r0, r5
 800277e:	f00f fa23 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002782:	9400      	str	r4, [sp, #0]
 8002784:	4b2f      	ldr	r3, [pc, #188]	; (8002844 <LoRaWAN_Init+0x158>)
 8002786:	4622      	mov	r2, r4
 8002788:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800278c:	482e      	ldr	r0, [pc, #184]	; (8002848 <LoRaWAN_Init+0x15c>)
 800278e:	f00f fd11 	bl	80121b4 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002792:	9400      	str	r4, [sp, #0]
 8002794:	4b2d      	ldr	r3, [pc, #180]	; (800284c <LoRaWAN_Init+0x160>)
 8002796:	4622      	mov	r2, r4
 8002798:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800279c:	482c      	ldr	r0, [pc, #176]	; (8002850 <LoRaWAN_Init+0x164>)
 800279e:	f00f fd09 	bl	80121b4 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 80027a2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8002854 <LoRaWAN_Init+0x168>
 80027a6:	9400      	str	r4, [sp, #0]
 80027a8:	4b2b      	ldr	r3, [pc, #172]	; (8002858 <LoRaWAN_Init+0x16c>)
 80027aa:	4632      	mov	r2, r6
 80027ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80027b0:	4640      	mov	r0, r8
 80027b2:	f00f fcff 	bl	80121b4 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 80027b6:	9400      	str	r4, [sp, #0]
 80027b8:	4b28      	ldr	r3, [pc, #160]	; (800285c <LoRaWAN_Init+0x170>)
 80027ba:	4622      	mov	r2, r4
 80027bc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80027c0:	4827      	ldr	r0, [pc, #156]	; (8002860 <LoRaWAN_Init+0x174>)
 80027c2:	f00f fcf7 	bl	80121b4 <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 80027c6:	4a27      	ldr	r2, [pc, #156]	; (8002864 <LoRaWAN_Init+0x178>)
 80027c8:	4621      	mov	r1, r4
 80027ca:	4630      	mov	r0, r6
 80027cc:	f00f fbf2 	bl	8011fb4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 80027d0:	4a25      	ldr	r2, [pc, #148]	; (8002868 <LoRaWAN_Init+0x17c>)
 80027d2:	4621      	mov	r1, r4
 80027d4:	4628      	mov	r0, r5
 80027d6:	f00f fbed 	bl	8011fb4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 80027da:	4a24      	ldr	r2, [pc, #144]	; (800286c <LoRaWAN_Init+0x180>)
 80027dc:	4621      	mov	r1, r4
 80027de:	4638      	mov	r0, r7
 80027e0:	f00f fbe8 	bl	8011fb4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 80027e4:	4a22      	ldr	r2, [pc, #136]	; (8002870 <LoRaWAN_Init+0x184>)
 80027e6:	4621      	mov	r1, r4
 80027e8:	2008      	movs	r0, #8
 80027ea:	f00f fbe3 	bl	8011fb4 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 80027ee:	f000 f8ff 	bl	80029f0 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 80027f2:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 80027f6:	481f      	ldr	r0, [pc, #124]	; (8002874 <LoRaWAN_Init+0x188>)
 80027f8:	f005 f902 	bl	8007a00 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 80027fc:	481e      	ldr	r0, [pc, #120]	; (8002878 <LoRaWAN_Init+0x18c>)
 80027fe:	f004 ffc7 	bl	8007790 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002802:	4640      	mov	r0, r8
 8002804:	f00f fd8e 	bl	8012324 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8002808:	4621      	mov	r1, r4
 800280a:	4b1c      	ldr	r3, [pc, #112]	; (800287c <LoRaWAN_Init+0x190>)
 800280c:	7818      	ldrb	r0, [r3, #0]
 800280e:	f004 fd09 	bl	8007224 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002812:	4d1b      	ldr	r5, [pc, #108]	; (8002880 <LoRaWAN_Init+0x194>)
 8002814:	9400      	str	r4, [sp, #0]
 8002816:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <LoRaWAN_Init+0x198>)
 8002818:	4622      	mov	r2, r4
 800281a:	491b      	ldr	r1, [pc, #108]	; (8002888 <LoRaWAN_Init+0x19c>)
 800281c:	6809      	ldr	r1, [r1, #0]
 800281e:	4628      	mov	r0, r5
 8002820:	f00f fcc8 	bl	80121b4 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8002824:	4628      	mov	r0, r5
 8002826:	f00f fd7d 	bl	8012324 <UTIL_TIMER_Start>
}
 800282a:	b006      	add	sp, #24
 800282c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002830:	08013bac 	.word	0x08013bac
 8002834:	08013bd0 	.word	0x08013bd0
 8002838:	08013bf4 	.word	0x08013bf4
 800283c:	08013c18 	.word	0x08013c18
 8002840:	08013c3c 	.word	0x08013c3c
 8002844:	080024cd 	.word	0x080024cd
 8002848:	2000048c 	.word	0x2000048c
 800284c:	080024b9 	.word	0x080024b9
 8002850:	2000045c 	.word	0x2000045c
 8002854:	20000444 	.word	0x20000444
 8002858:	0800261d 	.word	0x0800261d
 800285c:	08002475 	.word	0x08002475
 8002860:	20000474 	.word	0x20000474
 8002864:	0800740d 	.word	0x0800740d
 8002868:	08002631 	.word	0x08002631
 800286c:	080025e5 	.word	0x080025e5
 8002870:	08002549 	.word	0x08002549
 8002874:	2000000c 	.word	0x2000000c
 8002878:	20000058 	.word	0x20000058
 800287c:	20000000 	.word	0x20000000
 8002880:	200004a4 	.word	0x200004a4
 8002884:	080022c9 	.word	0x080022c9
 8002888:	2000006c 	.word	0x2000006c

0800288c <HAL_GPIO_EXTI_Callback>:
{
 800288c:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 800288e:	2802      	cmp	r0, #2
 8002890:	d002      	beq.n	8002898 <HAL_GPIO_EXTI_Callback+0xc>
 8002892:	2840      	cmp	r0, #64	; 0x40
 8002894:	d005      	beq.n	80028a2 <HAL_GPIO_EXTI_Callback+0x16>
}
 8002896:	bd08      	pop	{r3, pc}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8002898:	2100      	movs	r1, #0
 800289a:	2008      	movs	r0, #8
 800289c:	f00f fabe 	bl	8011e1c <UTIL_SEQ_SetTask>
      break;
 80028a0:	e7f9      	b.n	8002896 <HAL_GPIO_EXTI_Callback+0xa>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 80028a2:	2100      	movs	r1, #0
 80028a4:	2004      	movs	r0, #4
 80028a6:	f00f fab9 	bl	8011e1c <UTIL_SEQ_SetTask>
}
 80028aa:	e7f4      	b.n	8002896 <HAL_GPIO_EXTI_Callback+0xa>

080028ac <Uint2String>:
{
 80028ac:	b510      	push	{r4, lr}
 80028ae:	4604      	mov	r4, r0
	char* buffer = (char*) malloc(sizeof(char) * appData->BufferSize + 1);
 80028b0:	7840      	ldrb	r0, [r0, #1]
 80028b2:	3001      	adds	r0, #1
 80028b4:	f00f ff7a 	bl	80127ac <malloc>
	for(i=0; i< appData->BufferSize;i++){
 80028b8:	2300      	movs	r3, #0
 80028ba:	e003      	b.n	80028c4 <Uint2String+0x18>
		buffer[i] = (char)appData->Buffer[i];
 80028bc:	6862      	ldr	r2, [r4, #4]
 80028be:	5cd2      	ldrb	r2, [r2, r3]
 80028c0:	54c2      	strb	r2, [r0, r3]
	for(i=0; i< appData->BufferSize;i++){
 80028c2:	3301      	adds	r3, #1
 80028c4:	7862      	ldrb	r2, [r4, #1]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	dcf8      	bgt.n	80028bc <Uint2String+0x10>
	buffer[i] = '\0';
 80028ca:	2200      	movs	r2, #0
 80028cc:	54c2      	strb	r2, [r0, r3]
}
 80028ce:	bd10      	pop	{r4, pc}

080028d0 <OnRxData>:
{
 80028d0:	b570      	push	{r4, r5, r6, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	4605      	mov	r5, r0
 80028d6:	460c      	mov	r4, r1
  APP_LOG(TS_ON, VLEVEL_L, "Received: %s \r\n",Uint2String(appData));
 80028d8:	f7ff ffe8 	bl	80028ac <Uint2String>
 80028dc:	9000      	str	r0, [sp, #0]
 80028de:	4b3b      	ldr	r3, [pc, #236]	; (80029cc <OnRxData+0xfc>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	2100      	movs	r1, #0
 80028e4:	4610      	mov	r0, r2
 80028e6:	f00f f96f 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
  printf("data received: %s \r\n",appData->Buffer);
 80028ea:	6869      	ldr	r1, [r5, #4]
 80028ec:	4838      	ldr	r0, [pc, #224]	; (80029d0 <OnRxData+0x100>)
 80028ee:	f010 f84b 	bl	8012988 <iprintf>
   if (params != NULL)
 80028f2:	2c00      	cmp	r4, #0
 80028f4:	d051      	beq.n	800299a <OnRxData+0xca>
     HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 80028f6:	2201      	movs	r2, #1
 80028f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028fc:	4835      	ldr	r0, [pc, #212]	; (80029d4 <OnRxData+0x104>)
 80028fe:	f001 fc5b 	bl	80041b8 <HAL_GPIO_WritePin>
     UTIL_TIMER_Start(&RxLedTimer);
 8002902:	4835      	ldr	r0, [pc, #212]	; (80029d8 <OnRxData+0x108>)
 8002904:	f00f fd0e 	bl	8012324 <UTIL_TIMER_Start>
     if (params->IsMcpsIndication)
 8002908:	7826      	ldrb	r6, [r4, #0]
 800290a:	2e00      	cmp	r6, #0
 800290c:	d042      	beq.n	8002994 <OnRxData+0xc4>
       if (appData != NULL)
 800290e:	2d00      	cmp	r5, #0
 8002910:	d03f      	beq.n	8002992 <OnRxData+0xc2>
         RxPort = appData->Port;
 8002912:	782e      	ldrb	r6, [r5, #0]
         if (appData->Buffer != NULL)
 8002914:	686b      	ldr	r3, [r5, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d03c      	beq.n	8002994 <OnRxData+0xc4>
           switch (appData->Port)
 800291a:	2e02      	cmp	r6, #2
 800291c:	d016      	beq.n	800294c <OnRxData+0x7c>
 800291e:	2e03      	cmp	r6, #3
 8002920:	d138      	bne.n	8002994 <OnRxData+0xc4>
               if (appData->BufferSize == 1)
 8002922:	786a      	ldrb	r2, [r5, #1]
 8002924:	2a01      	cmp	r2, #1
 8002926:	d135      	bne.n	8002994 <OnRxData+0xc4>
                 switch (appData->Buffer[0])
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d006      	beq.n	800293c <OnRxData+0x6c>
 800292e:	2b02      	cmp	r3, #2
 8002930:	d008      	beq.n	8002944 <OnRxData+0x74>
 8002932:	bb7b      	cbnz	r3, 8002994 <OnRxData+0xc4>
                     LmHandlerRequestClass(CLASS_A);
 8002934:	2000      	movs	r0, #0
 8002936:	f004 fdbb 	bl	80074b0 <LmHandlerRequestClass>
                     break;
 800293a:	e02b      	b.n	8002994 <OnRxData+0xc4>
                     LmHandlerRequestClass(CLASS_B);
 800293c:	2001      	movs	r0, #1
 800293e:	f004 fdb7 	bl	80074b0 <LmHandlerRequestClass>
                     break;
 8002942:	e027      	b.n	8002994 <OnRxData+0xc4>
                     LmHandlerRequestClass(CLASS_C);
 8002944:	2002      	movs	r0, #2
 8002946:	f004 fdb3 	bl	80074b0 <LmHandlerRequestClass>
                     break;
 800294a:	e023      	b.n	8002994 <OnRxData+0xc4>
               if (appData->BufferSize == 1)
 800294c:	786a      	ldrb	r2, [r5, #1]
 800294e:	2a01      	cmp	r2, #1
 8002950:	d120      	bne.n	8002994 <OnRxData+0xc4>
                 AppLedStateOn = appData->Buffer[0] & 0x01;
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	4a20      	ldr	r2, [pc, #128]	; (80029dc <OnRxData+0x10c>)
 800295a:	7013      	strb	r3, [r2, #0]
                 if (AppLedStateOn == RESET)
 800295c:	b963      	cbnz	r3, 8002978 <OnRxData+0xa8>
                   APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <OnRxData+0x110>)
 8002960:	2200      	movs	r2, #0
 8002962:	4611      	mov	r1, r2
 8002964:	2003      	movs	r0, #3
 8002966:	f00f f92f 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
                   HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 800296a:	2200      	movs	r2, #0
 800296c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002970:	4818      	ldr	r0, [pc, #96]	; (80029d4 <OnRxData+0x104>)
 8002972:	f001 fc21 	bl	80041b8 <HAL_GPIO_WritePin>
 8002976:	e00d      	b.n	8002994 <OnRxData+0xc4>
                   APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8002978:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <OnRxData+0x114>)
 800297a:	2200      	movs	r2, #0
 800297c:	4611      	mov	r1, r2
 800297e:	2003      	movs	r0, #3
 8002980:	f00f f922 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
                   HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002984:	2201      	movs	r2, #1
 8002986:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800298a:	4812      	ldr	r0, [pc, #72]	; (80029d4 <OnRxData+0x104>)
 800298c:	f001 fc14 	bl	80041b8 <HAL_GPIO_WritePin>
 8002990:	e000      	b.n	8002994 <OnRxData+0xc4>
  uint8_t RxPort = 0;
 8002992:	2600      	movs	r6, #0
     if (params->RxSlot < RX_SLOT_NONE)
 8002994:	7c23      	ldrb	r3, [r4, #16]
 8002996:	2b05      	cmp	r3, #5
 8002998:	d901      	bls.n	800299e <OnRxData+0xce>
}
 800299a:	b006      	add	sp, #24
 800299c:	bd70      	pop	{r4, r5, r6, pc}
       APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800299e:	f994 2008 	ldrsb.w	r2, [r4, #8]
 80029a2:	f994 1009 	ldrsb.w	r1, [r4, #9]
 80029a6:	f994 000a 	ldrsb.w	r0, [r4, #10]
 80029aa:	9005      	str	r0, [sp, #20]
 80029ac:	9104      	str	r1, [sp, #16]
 80029ae:	490e      	ldr	r1, [pc, #56]	; (80029e8 <OnRxData+0x118>)
 80029b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80029b4:	9303      	str	r3, [sp, #12]
 80029b6:	9202      	str	r2, [sp, #8]
 80029b8:	9601      	str	r6, [sp, #4]
 80029ba:	68e3      	ldr	r3, [r4, #12]
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <OnRxData+0x11c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	4611      	mov	r1, r2
 80029c4:	2003      	movs	r0, #3
 80029c6:	f00f f8ff 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
}
 80029ca:	e7e6      	b.n	800299a <OnRxData+0xca>
 80029cc:	08013c60 	.word	0x08013c60
 80029d0:	08013c70 	.word	0x08013c70
 80029d4:	48000400 	.word	0x48000400
 80029d8:	2000045c 	.word	0x2000045c
 80029dc:	20000442 	.word	0x20000442
 80029e0:	08013c88 	.word	0x08013c88
 80029e4:	08013c94 	.word	0x08013c94
 80029e8:	08013d08 	.word	0x08013d08
 80029ec:	08013ca0 	.word	0x08013ca0

080029f0 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <LoraInfo_Init+0x18>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 80029f6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 80029f8:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 80029fa:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN LoraInfo_Init_1 */

  /* USER CODE END LoraInfo_Init_1 */

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
 80029fc:	2201      	movs	r2, #1
 80029fe:	605a      	str	r2, [r3, #4]
    }
    while (1) {} /* At least one region shall be defined */
  }

#if ( LORAMAC_CLASSB_ENABLED == 1 )
  loraInfo.ClassB = 1;
 8002a00:	609a      	str	r2, [r3, #8]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8002a02:	2203      	movs	r2, #3
 8002a04:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002a06:	4770      	bx	lr
 8002a08:	200004bc 	.word	0x200004bc

08002a0c <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8002a0c:	4800      	ldr	r0, [pc, #0]	; (8002a10 <LoraInfo_GetPtr+0x4>)
 8002a0e:	4770      	bx	lr
 8002a10:	200004bc 	.word	0x200004bc

08002a14 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002a14:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8002a16:	f000 f83f 	bl	8002a98 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002a1a:	bd08      	pop	{r3, pc}

08002a1c <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002a1c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8002a1e:	f000 f87d 	bl	8002b1c <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002a22:	bd08      	pop	{r3, pc}

08002a24 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002a24:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8002a26:	f000 f8c7 	bl	8002bb8 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002a2a:	bd08      	pop	{r3, pc}

08002a2c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002a2c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8002a2e:	f000 f8c5 	bl	8002bbc <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002a32:	bd08      	pop	{r3, pc}

08002a34 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002a34:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8002a36:	f000 f8c3 	bl	8002bc0 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002a3a:	bd08      	pop	{r3, pc}

08002a3c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002a3c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8002a3e:	f000 f8c1 	bl	8002bc4 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002a42:	bd08      	pop	{r3, pc}

08002a44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a44:	480d      	ldr	r0, [pc, #52]	; (8002a7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a48:	f000 f8c1 	bl	8002bce <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a4c:	480c      	ldr	r0, [pc, #48]	; (8002a80 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a4e:	490d      	ldr	r1, [pc, #52]	; (8002a84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a50:	4a0d      	ldr	r2, [pc, #52]	; (8002a88 <LoopForever+0xe>)
  movs r3, #0
 8002a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a54:	e002      	b.n	8002a5c <LoopCopyDataInit>

08002a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a5a:	3304      	adds	r3, #4

08002a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a60:	d3f9      	bcc.n	8002a56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a62:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a64:	4c0a      	ldr	r4, [pc, #40]	; (8002a90 <LoopForever+0x16>)
  movs r3, #0
 8002a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a68:	e001      	b.n	8002a6e <LoopFillZerobss>

08002a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a6c:	3204      	adds	r2, #4

08002a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a70:	d3fb      	bcc.n	8002a6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a72:	f00f fe77 	bl	8012764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a76:	f7fe fe47 	bl	8001708 <main>

08002a7a <LoopForever>:

LoopForever:
    b LoopForever
 8002a7a:	e7fe      	b.n	8002a7a <LoopForever>
  ldr   r0, =_estack
 8002a7c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a84:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8002a88:	080147f0 	.word	0x080147f0
  ldr r2, =_sbss
 8002a8c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8002a90:	200017b8 	.word	0x200017b8

08002a94 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a94:	e7fe      	b.n	8002a94 <ADC_IRQHandler>
	...

08002a98 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a9c:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002a9e:	2400      	movs	r4, #0
 8002aa0:	9401      	str	r4, [sp, #4]
 8002aa2:	9402      	str	r4, [sp, #8]
 8002aa4:	9403      	str	r4, [sp, #12]
 8002aa6:	9404      	str	r4, [sp, #16]
 8002aa8:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ab0:	f042 0204 	orr.w	r2, r2, #4
 8002ab4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002abe:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002ac0:	2710      	movs	r7, #16
 8002ac2:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002acc:	4d12      	ldr	r5, [pc, #72]	; (8002b18 <BSP_RADIO_Init+0x80>)
 8002ace:	a901      	add	r1, sp, #4
 8002ad0:	4628      	mov	r0, r5
 8002ad2:	f001 fa21 	bl	8003f18 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002ad6:	f04f 0820 	mov.w	r8, #32
 8002ada:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002ade:	a901      	add	r1, sp, #4
 8002ae0:	4628      	mov	r0, r5
 8002ae2:	f001 fa19 	bl	8003f18 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8002ae6:	2608      	movs	r6, #8
 8002ae8:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8002aea:	a901      	add	r1, sp, #4
 8002aec:	4628      	mov	r0, r5
 8002aee:	f001 fa13 	bl	8003f18 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002af2:	4622      	mov	r2, r4
 8002af4:	4641      	mov	r1, r8
 8002af6:	4628      	mov	r0, r5
 8002af8:	f001 fb5e 	bl	80041b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002afc:	4622      	mov	r2, r4
 8002afe:	4639      	mov	r1, r7
 8002b00:	4628      	mov	r0, r5
 8002b02:	f001 fb59 	bl	80041b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002b06:	4622      	mov	r2, r4
 8002b08:	4631      	mov	r1, r6
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	f001 fb54 	bl	80041b8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002b10:	4620      	mov	r0, r4
 8002b12:	b006      	add	sp, #24
 8002b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b18:	48000800 	.word	0x48000800

08002b1c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002b1c:	b510      	push	{r4, lr}
  switch (Config)
 8002b1e:	2803      	cmp	r0, #3
 8002b20:	d813      	bhi.n	8002b4a <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002b22:	e8df f000 	tbb	[pc, r0]
 8002b26:	1402      	.short	0x1402
 8002b28:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8002b2a:	4c22      	ldr	r4, [pc, #136]	; (8002bb4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2108      	movs	r1, #8
 8002b30:	4620      	mov	r0, r4
 8002b32:	f001 fb41 	bl	80041b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2110      	movs	r1, #16
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f001 fb3c 	bl	80041b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002b40:	2200      	movs	r2, #0
 8002b42:	2120      	movs	r1, #32
 8002b44:	4620      	mov	r0, r4
 8002b46:	f001 fb37 	bl	80041b8 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002b4e:	4c19      	ldr	r4, [pc, #100]	; (8002bb4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	2108      	movs	r1, #8
 8002b54:	4620      	mov	r0, r4
 8002b56:	f001 fb2f 	bl	80041b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	2110      	movs	r1, #16
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f001 fb2a 	bl	80041b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002b64:	2200      	movs	r2, #0
 8002b66:	2120      	movs	r1, #32
 8002b68:	4620      	mov	r0, r4
 8002b6a:	f001 fb25 	bl	80041b8 <HAL_GPIO_WritePin>
      break;
 8002b6e:	e7ec      	b.n	8002b4a <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002b70:	4c10      	ldr	r4, [pc, #64]	; (8002bb4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	2108      	movs	r1, #8
 8002b76:	4620      	mov	r0, r4
 8002b78:	f001 fb1e 	bl	80041b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	2110      	movs	r1, #16
 8002b80:	4620      	mov	r0, r4
 8002b82:	f001 fb19 	bl	80041b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002b86:	2201      	movs	r2, #1
 8002b88:	2120      	movs	r1, #32
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f001 fb14 	bl	80041b8 <HAL_GPIO_WritePin>
      break;
 8002b90:	e7db      	b.n	8002b4a <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002b92:	4c08      	ldr	r4, [pc, #32]	; (8002bb4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	2108      	movs	r1, #8
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f001 fb0d 	bl	80041b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2110      	movs	r1, #16
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f001 fb08 	bl	80041b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002ba8:	2201      	movs	r2, #1
 8002baa:	2120      	movs	r1, #32
 8002bac:	4620      	mov	r0, r4
 8002bae:	f001 fb03 	bl	80041b8 <HAL_GPIO_WritePin>
      break;
 8002bb2:	e7ca      	b.n	8002b4a <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002bb4:	48000800 	.word	0x48000800

08002bb8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8002bb8:	2000      	movs	r0, #0
 8002bba:	4770      	bx	lr

08002bbc <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	4770      	bx	lr

08002bc0 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	4770      	bx	lr

08002bc4 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002bc4:	b908      	cbnz	r0, 8002bca <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002bc6:	200f      	movs	r0, #15
 8002bc8:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002bca:	2016      	movs	r0, #22
  }

  return ret;
}
 8002bcc:	4770      	bx	lr

08002bce <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002bce:	4770      	bx	lr

08002bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd0:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd2:	2003      	movs	r0, #3
 8002bd4:	f000 fd2e 	bl	8003634 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002bd8:	f001 fc94 	bl	8004504 <HAL_RCC_GetHCLKFreq>
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_Init+0x28>)
 8002bde:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002be0:	200f      	movs	r0, #15
 8002be2:	f7fe ff7b 	bl	8001adc <HAL_InitTick>
 8002be6:	b110      	cbz	r0, 8002bee <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002be8:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002bea:	4620      	mov	r0, r4
 8002bec:	bd10      	pop	{r4, pc}
 8002bee:	4604      	mov	r4, r0
    HAL_MspInit();
 8002bf0:	f7fe fe38 	bl	8001864 <HAL_MspInit>
 8002bf4:	e7f9      	b.n	8002bea <HAL_Init+0x1a>
 8002bf6:	bf00      	nop
 8002bf8:	20000070 	.word	0x20000070

08002bfc <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002bfc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002c00:	6913      	ldr	r3, [r2, #16]
 8002c02:	f023 0302 	bic.w	r3, r3, #2
 8002c06:	6113      	str	r3, [r2, #16]
}
 8002c08:	4770      	bx	lr

08002c0a <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002c0a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002c0e:	6913      	ldr	r3, [r2, #16]
 8002c10:	f043 0302 	orr.w	r3, r3, #2
 8002c14:	6113      	str	r3, [r2, #16]
}
 8002c16:	4770      	bx	lr

08002c18 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8002c18:	4b01      	ldr	r3, [pc, #4]	; (8002c20 <HAL_GetUIDw0+0x8>)
 8002c1a:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8002c1e:	4770      	bx	lr
 8002c20:	1fff7000 	.word	0x1fff7000

08002c24 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8002c24:	4b01      	ldr	r3, [pc, #4]	; (8002c2c <HAL_GetUIDw1+0x8>)
 8002c26:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8002c2a:	4770      	bx	lr
 8002c2c:	1fff7000 	.word	0x1fff7000

08002c30 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8002c30:	4b01      	ldr	r3, [pc, #4]	; (8002c38 <HAL_GetUIDw2+0x8>)
 8002c32:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8002c36:	4770      	bx	lr
 8002c38:	1fff7000 	.word	0x1fff7000

08002c3c <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002c3c:	4a02      	ldr	r2, [pc, #8]	; (8002c48 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8002c3e:	6853      	ldr	r3, [r2, #4]
 8002c40:	f023 0301 	bic.w	r3, r3, #1
 8002c44:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8002c46:	4770      	bx	lr
 8002c48:	e0042000 	.word	0xe0042000

08002c4c <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002c4c:	4a02      	ldr	r2, [pc, #8]	; (8002c58 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8002c4e:	6853      	ldr	r3, [r2, #4]
 8002c50:	f023 0302 	bic.w	r3, r3, #2
 8002c54:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8002c56:	4770      	bx	lr
 8002c58:	e0042000 	.word	0xe0042000

08002c5c <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002c5c:	4a02      	ldr	r2, [pc, #8]	; (8002c68 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8002c5e:	6853      	ldr	r3, [r2, #4]
 8002c60:	f023 0304 	bic.w	r3, r3, #4
 8002c64:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8002c66:	4770      	bx	lr
 8002c68:	e0042000 	.word	0xe0042000

08002c6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c74:	2800      	cmp	r0, #0
 8002c76:	f000 811b 	beq.w	8002eb0 <HAL_ADC_Init+0x244>
 8002c7a:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c7c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002c7e:	b1bb      	cbz	r3, 8002cb0 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c80:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c82:	6893      	ldr	r3, [r2, #8]
 8002c84:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002c88:	d11f      	bne.n	8002cca <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8002c8a:	6893      	ldr	r3, [r2, #8]
 8002c8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c90:	f023 0317 	bic.w	r3, r3, #23
 8002c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c98:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c9a:	4b86      	ldr	r3, [pc, #536]	; (8002eb4 <HAL_ADC_Init+0x248>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	099b      	lsrs	r3, r3, #6
 8002ca0:	4a85      	ldr	r2, [pc, #532]	; (8002eb8 <HAL_ADC_Init+0x24c>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	3301      	adds	r3, #1
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002cae:	e009      	b.n	8002cc4 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8002cb0:	f7fe fa42 	bl	8001138 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002cb8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8002cbc:	e7e0      	b.n	8002c80 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8002cbe:	9b01      	ldr	r3, [sp, #4]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002cc4:	9b01      	ldr	r3, [sp, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f9      	bne.n	8002cbe <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cca:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ccc:	6893      	ldr	r3, [r2, #8]
 8002cce:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002cd2:	f040 809c 	bne.w	8002e0e <HAL_ADC_Init+0x1a2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002cd8:	f043 0310 	orr.w	r3, r3, #16
 8002cdc:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cde:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ce6:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ce8:	6893      	ldr	r3, [r2, #8]
 8002cea:	f013 0304 	ands.w	r3, r3, #4
 8002cee:	d000      	beq.n	8002cf2 <HAL_ADC_Init+0x86>
 8002cf0:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cf2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002cf4:	f011 0f10 	tst.w	r1, #16
 8002cf8:	f040 80d3 	bne.w	8002ea2 <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f040 80d0 	bne.w	8002ea2 <HAL_ADC_Init+0x236>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d02:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002d04:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8002d08:	f041 0102 	orr.w	r1, r1, #2
 8002d0c:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d0e:	6891      	ldr	r1, [r2, #8]
 8002d10:	f011 0f01 	tst.w	r1, #1
 8002d14:	d151      	bne.n	8002dba <HAL_ADC_Init+0x14e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002d16:	68a1      	ldr	r1, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002d18:	7e25      	ldrb	r5, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002d1a:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002d1e:	7e65      	ldrb	r5, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002d20:	ea41 31c5 	orr.w	r1, r1, r5, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002d24:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002d26:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002d2a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002d2c:	b10d      	cbz	r5, 8002d32 <HAL_ADC_Init+0xc6>
 8002d2e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002d32:	4329      	orrs	r1, r5
                   hadc->Init.DataAlign                                           |
 8002d34:	68e5      	ldr	r5, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002d36:	4329      	orrs	r1, r5
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d38:	6925      	ldr	r5, [r4, #16]
 8002d3a:	2d00      	cmp	r5, #0
 8002d3c:	db69      	blt.n	8002e12 <HAL_ADC_Init+0x1a6>
 8002d3e:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002d42:	4329      	orrs	r1, r5
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d44:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d48:	ea41 0145 	orr.w	r1, r1, r5, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d4c:	f894 5020 	ldrb.w	r5, [r4, #32]
 8002d50:	2d01      	cmp	r5, #1
 8002d52:	d061      	beq.n	8002e18 <HAL_ADC_Init+0x1ac>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d54:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002d56:	b125      	cbz	r5, 8002d62 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002d58:	f405 75e0 	and.w	r5, r5, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002d5c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002d5e:	4335      	orrs	r5, r6
 8002d60:	4329      	orrs	r1, r5
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002d62:	68d5      	ldr	r5, [r2, #12]
 8002d64:	f425 3cfe 	bic.w	ip, r5, #130048	; 0x1fc00
 8002d68:	f42c 7cff 	bic.w	ip, ip, #510	; 0x1fe
 8002d6c:	ea4c 0101 	orr.w	r1, ip, r1
 8002d70:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d72:	6862      	ldr	r2, [r4, #4]
 8002d74:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002d78:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d7a:	ea42 0501 	orr.w	r5, r2, r1
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d7e:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8002d82:	2901      	cmp	r1, #1
 8002d84:	d055      	beq.n	8002e32 <HAL_ADC_Init+0x1c6>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002d86:	6822      	ldr	r2, [r4, #0]
 8002d88:	6916      	ldr	r6, [r2, #16]
 8002d8a:	494c      	ldr	r1, [pc, #304]	; (8002ebc <HAL_ADC_Init+0x250>)
 8002d8c:	4031      	ands	r1, r6
 8002d8e:	4329      	orrs	r1, r5
 8002d90:	6111      	str	r1, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002d92:	6862      	ldr	r2, [r4, #4]
 8002d94:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8002d98:	d00f      	beq.n	8002dba <HAL_ADC_Init+0x14e>
 8002d9a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002d9e:	d00c      	beq.n	8002dba <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002da0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002da4:	d009      	beq.n	8002dba <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002da6:	4d46      	ldr	r5, [pc, #280]	; (8002ec0 <HAL_ADC_Init+0x254>)
 8002da8:	f8d5 1708 	ldr.w	r1, [r5, #1800]	; 0x708
 8002dac:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 8002db0:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8002db4:	430a      	orrs	r2, r1
 8002db6:	f8c5 2708 	str.w	r2, [r5, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002dba:	6825      	ldr	r5, [r4, #0]
 8002dbc:	6b62      	ldr	r2, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8002dbe:	6969      	ldr	r1, [r5, #20]
 8002dc0:	f021 0107 	bic.w	r1, r1, #7
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	616a      	str	r2, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002dc8:	6821      	ldr	r1, [r4, #0]
 8002dca:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002dcc:	694a      	ldr	r2, [r1, #20]
 8002dce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002dd2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8002dd6:	614a      	str	r2, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002dd8:	6922      	ldr	r2, [r4, #16]
 8002dda:	2a00      	cmp	r2, #0
 8002ddc:	d133      	bne.n	8002e46 <HAL_ADC_Init+0x1da>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002dde:	6822      	ldr	r2, [r4, #0]
 8002de0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002de2:	f063 030f 	orn	r3, r3, #15
 8002de6:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002de8:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8002df0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d04c      	beq.n	8002e90 <HAL_ADC_Init+0x224>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002df6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002df8:	f023 0312 	bic.w	r3, r3, #18
 8002dfc:	f043 0310 	orr.w	r3, r3, #16
 8002e00:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e02:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	e04e      	b.n	8002eac <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e0e:	2000      	movs	r0, #0
 8002e10:	e76a      	b.n	8002ce8 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e12:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8002e16:	e794      	b.n	8002d42 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e18:	b916      	cbnz	r6, 8002e20 <HAL_ADC_Init+0x1b4>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002e1a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002e1e:	e799      	b.n	8002d54 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e20:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8002e22:	f045 0520 	orr.w	r5, r5, #32
 8002e26:	65a5      	str	r5, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e28:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8002e2a:	f045 0501 	orr.w	r5, r5, #1
 8002e2e:	65e5      	str	r5, [r4, #92]	; 0x5c
 8002e30:	e790      	b.n	8002d54 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8002e32:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002e34:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 8002e36:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002e38:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 8002e3a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002e3c:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002e3e:	432a      	orrs	r2, r5
 8002e40:	f042 0501 	orr.w	r5, r2, #1
 8002e44:	e79f      	b.n	8002d86 <HAL_ADC_Init+0x11a>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e46:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002e4a:	d1cd      	bne.n	8002de8 <HAL_ADC_Init+0x17c>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002e4c:	2b07      	cmp	r3, #7
 8002e4e:	d808      	bhi.n	8002e62 <HAL_ADC_Init+0x1f6>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002e50:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002e52:	0099      	lsls	r1, r3, #2
 8002e54:	40ca      	lsrs	r2, r1
 8002e56:	f002 020f 	and.w	r2, r2, #15
 8002e5a:	2a0f      	cmp	r2, #15
 8002e5c:	d001      	beq.n	8002e62 <HAL_ADC_Init+0x1f6>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002e5e:	3301      	adds	r3, #1
 8002e60:	e7f4      	b.n	8002e4c <HAL_ADC_Init+0x1e0>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d00e      	beq.n	8002e84 <HAL_ADC_Init+0x218>
        MODIFY_REG(hadc->Instance->CHSELR,
 8002e66:	6821      	ldr	r1, [r4, #0]
 8002e68:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002e6a:	69e3      	ldr	r3, [r4, #28]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	f003 031c 	and.w	r3, r3, #28
 8002e74:	f06f 020f 	mvn.w	r2, #15
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	628b      	str	r3, [r1, #40]	; 0x28
 8002e82:	e7b1      	b.n	8002de8 <HAL_ADC_Init+0x17c>
        SET_BIT(hadc->Instance->CHSELR,
 8002e84:	6822      	ldr	r2, [r4, #0]
 8002e86:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002e88:	f063 030f 	orn	r3, r3, #15
 8002e8c:	6293      	str	r3, [r2, #40]	; 0x28
 8002e8e:	e7ab      	b.n	8002de8 <HAL_ADC_Init+0x17c>
      ADC_CLEAR_ERRORCODE(hadc);
 8002e90:	2300      	movs	r3, #0
 8002e92:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002e94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e96:	f023 0303 	bic.w	r3, r3, #3
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002ea0:	e004      	b.n	8002eac <HAL_ADC_Init+0x240>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ea4:	f043 0310 	orr.w	r3, r3, #16
 8002ea8:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002eaa:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8002eac:	b002      	add	sp, #8
 8002eae:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	e7fb      	b.n	8002eac <HAL_ADC_Init+0x240>
 8002eb4:	20000070 	.word	0x20000070
 8002eb8:	053e2d63 	.word	0x053e2d63
 8002ebc:	1ffffc02 	.word	0x1ffffc02
 8002ec0:	40012000 	.word	0x40012000

08002ec4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002eca:	6946      	ldr	r6, [r0, #20]
 8002ecc:	2e08      	cmp	r6, #8
 8002ece:	d005      	beq.n	8002edc <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002ed0:	6803      	ldr	r3, [r0, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f013 0f01 	tst.w	r3, #1
 8002ed8:	d11e      	bne.n	8002f18 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002eda:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002edc:	f7fe fe00 	bl	8001ae0 <HAL_GetTick>
 8002ee0:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	4232      	tst	r2, r6
 8002ee8:	d11c      	bne.n	8002f24 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002eea:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002eee:	d0f8      	beq.n	8002ee2 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002ef0:	f7fe fdf6 	bl	8001ae0 <HAL_GetTick>
 8002ef4:	1bc3      	subs	r3, r0, r7
 8002ef6:	42ab      	cmp	r3, r5
 8002ef8:	d801      	bhi.n	8002efe <HAL_ADC_PollForConversion+0x3a>
 8002efa:	2d00      	cmp	r5, #0
 8002efc:	d1f1      	bne.n	8002ee2 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4233      	tst	r3, r6
 8002f04:	d1ed      	bne.n	8002ee2 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f08:	f043 0304 	orr.w	r3, r3, #4
 8002f0c:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8002f14:	2003      	movs	r0, #3
 8002f16:	e028      	b.n	8002f6a <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f18:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002f1a:	f043 0320 	orr.w	r3, r3, #32
 8002f1e:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8002f20:	2001      	movs	r0, #1
 8002f22:	e022      	b.n	8002f6a <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f24:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2a:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002f32:	d115      	bne.n	8002f60 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002f34:	7ea2      	ldrb	r2, [r4, #26]
 8002f36:	b99a      	cbnz	r2, 8002f60 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	f012 0f08 	tst.w	r2, #8
 8002f3e:	d00f      	beq.n	8002f60 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	f012 0f04 	tst.w	r2, #4
 8002f46:	d111      	bne.n	8002f6c <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	f022 020c 	bic.w	r2, r2, #12
 8002f4e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002f50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f56:	f023 0301 	bic.w	r3, r3, #1
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002f60:	7e20      	ldrb	r0, [r4, #24]
 8002f62:	b960      	cbnz	r0, 8002f7e <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	220c      	movs	r2, #12
 8002f68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f6e:	f043 0320 	orr.w	r3, r3, #32
 8002f72:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f74:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002f7c:	e7f0      	b.n	8002f60 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8002f7e:	2000      	movs	r0, #0
 8002f80:	e7f3      	b.n	8002f6a <HAL_ADC_PollForConversion+0xa6>

08002f82 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002f82:	6803      	ldr	r3, [r0, #0]
 8002f84:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8002f86:	4770      	bx	lr

08002f88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002f88:	b470      	push	{r4, r5, r6}
 8002f8a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f90:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002f92:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8002f96:	2a01      	cmp	r2, #1
 8002f98:	f000 8105 	beq.w	80031a6 <HAL_ADC_ConfigChannel+0x21e>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fa4:	6802      	ldr	r2, [r0, #0]
 8002fa6:	6890      	ldr	r0, [r2, #8]
 8002fa8:	f010 0f04 	tst.w	r0, #4
 8002fac:	d00a      	beq.n	8002fc4 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fb0:	f042 0220 	orr.w	r2, r2, #32
 8002fb4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002fb6:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8002fbe:	b003      	add	sp, #12
 8002fc0:	bc70      	pop	{r4, r5, r6}
 8002fc2:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8002fc4:	6848      	ldr	r0, [r1, #4]
 8002fc6:	2802      	cmp	r0, #2
 8002fc8:	f000 809e 	beq.w	8003108 <HAL_ADC_ConfigChannel+0x180>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002fcc:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002fd0:	d029      	beq.n	8003026 <HAL_ADC_ConfigChannel+0x9e>
 8002fd2:	4d76      	ldr	r5, [pc, #472]	; (80031ac <HAL_ADC_ConfigChannel+0x224>)
 8002fd4:	42ac      	cmp	r4, r5
 8002fd6:	d026      	beq.n	8003026 <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002fd8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8002fda:	f000 001f 	and.w	r0, r0, #31
 8002fde:	250f      	movs	r5, #15
 8002fe0:	4085      	lsls	r5, r0
 8002fe2:	ea24 0505 	bic.w	r5, r4, r5
 8002fe6:	680c      	ldr	r4, [r1, #0]
 8002fe8:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8002fec:	2e00      	cmp	r6, #0
 8002fee:	d133      	bne.n	8003058 <HAL_ADC_ConfigChannel+0xd0>
 8002ff0:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8002ff4:	fa04 f000 	lsl.w	r0, r4, r0
 8002ff8:	4328      	orrs	r0, r5
 8002ffa:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002ffc:	684c      	ldr	r4, [r1, #4]
 8002ffe:	08a0      	lsrs	r0, r4, #2
 8003000:	3001      	adds	r0, #1
 8003002:	69dd      	ldr	r5, [r3, #28]
 8003004:	42a8      	cmp	r0, r5
 8003006:	d814      	bhi.n	8003032 <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003008:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 800300a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800300c:	f004 041f 	and.w	r4, r4, #31
 8003010:	260f      	movs	r6, #15
 8003012:	40a6      	lsls	r6, r4
 8003014:	ea20 0006 	bic.w	r0, r0, r6
 8003018:	f3c5 6583 	ubfx	r5, r5, #26, #4
 800301c:	fa05 f404 	lsl.w	r4, r5, r4
 8003020:	4304      	orrs	r4, r0
 8003022:	6294      	str	r4, [r2, #40]	; 0x28
}
 8003024:	e005      	b.n	8003032 <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003026:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003028:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800302a:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800302e:	4320      	orrs	r0, r4
 8003030:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003032:	681c      	ldr	r4, [r3, #0]
 8003034:	680d      	ldr	r5, [r1, #0]
 8003036:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8003038:	6960      	ldr	r0, [r4, #20]
 800303a:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 800303e:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8003042:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8003046:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800304a:	4302      	orrs	r2, r0
 800304c:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800304e:	680a      	ldr	r2, [r1, #0]
 8003050:	2a00      	cmp	r2, #0
 8003052:	db09      	blt.n	8003068 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003054:	2000      	movs	r0, #0
 8003056:	e7af      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800305c:	b114      	cbz	r4, 8003064 <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800305e:	fab4 f484 	clz	r4, r4
 8003062:	e7c7      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8003064:	2420      	movs	r4, #32
 8003066:	e7c5      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003068:	4951      	ldr	r1, [pc, #324]	; (80031b0 <HAL_ADC_ConfigChannel+0x228>)
 800306a:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 800306e:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003072:	4c50      	ldr	r4, [pc, #320]	; (80031b4 <HAL_ADC_ConfigChannel+0x22c>)
 8003074:	42a2      	cmp	r2, r4
 8003076:	d007      	beq.n	8003088 <HAL_ADC_ConfigChannel+0x100>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003078:	4c4f      	ldr	r4, [pc, #316]	; (80031b8 <HAL_ADC_ConfigChannel+0x230>)
 800307a:	42a2      	cmp	r2, r4
 800307c:	d026      	beq.n	80030cc <HAL_ADC_ConfigChannel+0x144>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800307e:	4c4f      	ldr	r4, [pc, #316]	; (80031bc <HAL_ADC_ConfigChannel+0x234>)
 8003080:	42a2      	cmp	r2, r4
 8003082:	d032      	beq.n	80030ea <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003084:	2000      	movs	r0, #0
 8003086:	e797      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003088:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800308c:	d1f4      	bne.n	8003078 <HAL_ADC_ConfigChannel+0xf0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800308e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003092:	4847      	ldr	r0, [pc, #284]	; (80031b0 <HAL_ADC_ConfigChannel+0x228>)
 8003094:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003098:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800309c:	4311      	orrs	r1, r2
 800309e:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030a2:	4a47      	ldr	r2, [pc, #284]	; (80031c0 <HAL_ADC_ConfigChannel+0x238>)
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	0992      	lsrs	r2, r2, #6
 80030a8:	4946      	ldr	r1, [pc, #280]	; (80031c4 <HAL_ADC_ConfigChannel+0x23c>)
 80030aa:	fba1 1202 	umull	r1, r2, r1, r2
 80030ae:	0992      	lsrs	r2, r2, #6
 80030b0:	3201      	adds	r2, #1
 80030b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80030b6:	0092      	lsls	r2, r2, #2
 80030b8:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80030ba:	e002      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x13a>
            wait_loop_index--;
 80030bc:	9a01      	ldr	r2, [sp, #4]
 80030be:	3a01      	subs	r2, #1
 80030c0:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80030c2:	9a01      	ldr	r2, [sp, #4]
 80030c4:	2a00      	cmp	r2, #0
 80030c6:	d1f9      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030c8:	2000      	movs	r0, #0
 80030ca:	e775      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030cc:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80030d0:	d1d5      	bne.n	800307e <HAL_ADC_ConfigChannel+0xf6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030d2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80030d6:	4836      	ldr	r0, [pc, #216]	; (80031b0 <HAL_ADC_ConfigChannel+0x228>)
 80030d8:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80030dc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80030e0:	4311      	orrs	r1, r2
 80030e2:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e6:	2000      	movs	r0, #0
}
 80030e8:	e766      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80030ea:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80030ee:	d158      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x21a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030f0:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030f4:	482e      	ldr	r0, [pc, #184]	; (80031b0 <HAL_ADC_ConfigChannel+0x228>)
 80030f6:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80030fa:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80030fe:	430a      	orrs	r2, r1
 8003100:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003104:	2000      	movs	r0, #0
}
 8003106:	e757      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003108:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800310c:	d002      	beq.n	8003114 <HAL_ADC_ConfigChannel+0x18c>
 800310e:	4827      	ldr	r0, [pc, #156]	; (80031ac <HAL_ADC_ConfigChannel+0x224>)
 8003110:	4284      	cmp	r4, r0
 8003112:	d106      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003114:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003116:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003118:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800311c:	ea20 0004 	bic.w	r0, r0, r4
 8003120:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003122:	680a      	ldr	r2, [r1, #0]
 8003124:	2a00      	cmp	r2, #0
 8003126:	db01      	blt.n	800312c <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003128:	2000      	movs	r0, #0
 800312a:	e745      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800312c:	4920      	ldr	r1, [pc, #128]	; (80031b0 <HAL_ADC_ConfigChannel+0x228>)
 800312e:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003132:	4820      	ldr	r0, [pc, #128]	; (80031b4 <HAL_ADC_ConfigChannel+0x22c>)
 8003134:	4282      	cmp	r2, r0
 8003136:	d007      	beq.n	8003148 <HAL_ADC_ConfigChannel+0x1c0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003138:	481f      	ldr	r0, [pc, #124]	; (80031b8 <HAL_ADC_ConfigChannel+0x230>)
 800313a:	4282      	cmp	r2, r0
 800313c:	d013      	beq.n	8003166 <HAL_ADC_ConfigChannel+0x1de>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800313e:	481f      	ldr	r0, [pc, #124]	; (80031bc <HAL_ADC_ConfigChannel+0x234>)
 8003140:	4282      	cmp	r2, r0
 8003142:	d01f      	beq.n	8003184 <HAL_ADC_ConfigChannel+0x1fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003144:	2000      	movs	r0, #0
 8003146:	e737      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003148:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800314c:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8003150:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8003154:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003158:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800315c:	4311      	orrs	r1, r2
 800315e:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003162:	2000      	movs	r0, #0
}
 8003164:	e728      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003166:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800316a:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 800316e:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 8003172:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003176:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800317a:	430a      	orrs	r2, r1
 800317c:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003180:	2000      	movs	r0, #0
}
 8003182:	e719      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003184:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003188:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 800318c:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8003190:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003194:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003198:	430a      	orrs	r2, r1
 800319a:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800319e:	2000      	movs	r0, #0
}
 80031a0:	e70a      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x30>
 80031a2:	2000      	movs	r0, #0
 80031a4:	e708      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 80031a6:	2002      	movs	r0, #2
 80031a8:	e709      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x36>
 80031aa:	bf00      	nop
 80031ac:	80000004 	.word	0x80000004
 80031b0:	40012000 	.word	0x40012000
 80031b4:	b0001000 	.word	0xb0001000
 80031b8:	b8004000 	.word	0xb8004000
 80031bc:	b4002000 	.word	0xb4002000
 80031c0:	20000070 	.word	0x20000070
 80031c4:	053e2d63 	.word	0x053e2d63

080031c8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80031c8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80031ca:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	f012 0f04 	tst.w	r2, #4
 80031d2:	d02a      	beq.n	800322a <ADC_ConversionStop+0x62>
 80031d4:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	f012 0f02 	tst.w	r2, #2
 80031dc:	d107      	bne.n	80031ee <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031e4:	f022 0217 	bic.w	r2, r2, #23
 80031e8:	f042 0210 	orr.w	r2, r2, #16
 80031ec:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031ee:	f7fe fc77 	bl	8001ae0 <HAL_GetTick>
 80031f2:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80031f4:	6823      	ldr	r3, [r4, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f013 0f04 	tst.w	r3, #4
 80031fc:	d013      	beq.n	8003226 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80031fe:	f7fe fc6f 	bl	8001ae0 <HAL_GetTick>
 8003202:	1b43      	subs	r3, r0, r5
 8003204:	2b02      	cmp	r3, #2
 8003206:	d9f5      	bls.n	80031f4 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f013 0f04 	tst.w	r3, #4
 8003210:	d0f0      	beq.n	80031f4 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003212:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003214:	f043 0310 	orr.w	r3, r3, #16
 8003218:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8003222:	2001      	movs	r0, #1
 8003224:	e002      	b.n	800322c <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003226:	2000      	movs	r0, #0
 8003228:	e000      	b.n	800322c <ADC_ConversionStop+0x64>
 800322a:	2000      	movs	r0, #0
}
 800322c:	bd38      	pop	{r3, r4, r5, pc}
	...

08003230 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003230:	b530      	push	{r4, r5, lr}
 8003232:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003234:	2300      	movs	r3, #0
 8003236:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003238:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	f012 0f01 	tst.w	r2, #1
 8003240:	d15b      	bne.n	80032fa <ADC_Enable+0xca>
 8003242:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003244:	6899      	ldr	r1, [r3, #8]
 8003246:	4a2e      	ldr	r2, [pc, #184]	; (8003300 <ADC_Enable+0xd0>)
 8003248:	4211      	tst	r1, r2
 800324a:	d117      	bne.n	800327c <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003252:	f022 0217 	bic.w	r2, r2, #23
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800325c:	4b29      	ldr	r3, [pc, #164]	; (8003304 <ADC_Enable+0xd4>)
 800325e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003262:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003266:	d019      	beq.n	800329c <ADC_Enable+0x6c>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003268:	4b27      	ldr	r3, [pc, #156]	; (8003308 <ADC_Enable+0xd8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	099b      	lsrs	r3, r3, #6
 800326e:	4a27      	ldr	r2, [pc, #156]	; (800330c <ADC_Enable+0xdc>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	099b      	lsrs	r3, r3, #6
 8003276:	3301      	adds	r3, #1
 8003278:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800327a:	e00c      	b.n	8003296 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800327c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800327e:	f043 0310 	orr.w	r3, r3, #16
 8003282:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003284:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 800328c:	2001      	movs	r0, #1
 800328e:	e035      	b.n	80032fc <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8003290:	9b01      	ldr	r3, [sp, #4]
 8003292:	3b01      	subs	r3, #1
 8003294:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003296:	9b01      	ldr	r3, [sp, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f9      	bne.n	8003290 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800329c:	7e63      	ldrb	r3, [r4, #25]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032a2:	2000      	movs	r0, #0
 80032a4:	e02a      	b.n	80032fc <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 80032a6:	f7fe fc1b 	bl	8001ae0 <HAL_GetTick>
 80032aa:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	f012 0f01 	tst.w	r2, #1
 80032b4:	d11f      	bne.n	80032f6 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	f012 0f01 	tst.w	r2, #1
 80032bc:	d107      	bne.n	80032ce <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032c4:	f022 0217 	bic.w	r2, r2, #23
 80032c8:	f042 0201 	orr.w	r2, r2, #1
 80032cc:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032ce:	f7fe fc07 	bl	8001ae0 <HAL_GetTick>
 80032d2:	1b40      	subs	r0, r0, r5
 80032d4:	2802      	cmp	r0, #2
 80032d6:	d9e9      	bls.n	80032ac <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f013 0f01 	tst.w	r3, #1
 80032e0:	d1e4      	bne.n	80032ac <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032e4:	f043 0310 	orr.w	r3, r3, #16
 80032e8:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80032f2:	2001      	movs	r0, #1
 80032f4:	e002      	b.n	80032fc <ADC_Enable+0xcc>
  return HAL_OK;
 80032f6:	2000      	movs	r0, #0
 80032f8:	e000      	b.n	80032fc <ADC_Enable+0xcc>
 80032fa:	2000      	movs	r0, #0
}
 80032fc:	b003      	add	sp, #12
 80032fe:	bd30      	pop	{r4, r5, pc}
 8003300:	80000017 	.word	0x80000017
 8003304:	40012000 	.word	0x40012000
 8003308:	20000070 	.word	0x20000070
 800330c:	053e2d63 	.word	0x053e2d63

08003310 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003310:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f013 0f04 	tst.w	r3, #4
 8003318:	d128      	bne.n	800336c <HAL_ADC_Start+0x5c>
{
 800331a:	b510      	push	{r4, lr}
 800331c:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800331e:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003322:	2b01      	cmp	r3, #1
 8003324:	d024      	beq.n	8003370 <HAL_ADC_Start+0x60>
 8003326:	2301      	movs	r3, #1
 8003328:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 800332c:	f7ff ff80 	bl	8003230 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003330:	b9c0      	cbnz	r0, 8003364 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8003332:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003334:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003338:	f023 0301 	bic.w	r3, r3, #1
 800333c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003340:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8003342:	2300      	movs	r3, #0
 8003344:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003346:	6822      	ldr	r2, [r4, #0]
 8003348:	211c      	movs	r1, #28
 800334a:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 800334c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003350:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003352:	6893      	ldr	r3, [r2, #8]
 8003354:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003358:	f023 0317 	bic.w	r3, r3, #23
 800335c:	f043 0304 	orr.w	r3, r3, #4
 8003360:	6093      	str	r3, [r2, #8]
}
 8003362:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8003364:	2300      	movs	r3, #0
 8003366:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800336a:	e7fa      	b.n	8003362 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 800336c:	2002      	movs	r0, #2
}
 800336e:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8003370:	2002      	movs	r0, #2
 8003372:	e7f6      	b.n	8003362 <HAL_ADC_Start+0x52>

08003374 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003374:	b538      	push	{r3, r4, r5, lr}
 8003376:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003378:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800337a:	6893      	ldr	r3, [r2, #8]
 800337c:	f013 0302 	ands.w	r3, r3, #2
 8003380:	d000      	beq.n	8003384 <ADC_Disable+0x10>
 8003382:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003384:	6891      	ldr	r1, [r2, #8]
 8003386:	f011 0f01 	tst.w	r1, #1
 800338a:	d039      	beq.n	8003400 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 800338c:	2b00      	cmp	r3, #0
 800338e:	d139      	bne.n	8003404 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003390:	6893      	ldr	r3, [r2, #8]
 8003392:	f003 0305 	and.w	r3, r3, #5
 8003396:	2b01      	cmp	r3, #1
 8003398:	d009      	beq.n	80033ae <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800339c:	f043 0310 	orr.w	r3, r3, #16
 80033a0:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 80033aa:	2001      	movs	r0, #1
 80033ac:	e029      	b.n	8003402 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 80033ae:	6893      	ldr	r3, [r2, #8]
 80033b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033b4:	f023 0317 	bic.w	r3, r3, #23
 80033b8:	f043 0302 	orr.w	r3, r3, #2
 80033bc:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80033be:	6823      	ldr	r3, [r4, #0]
 80033c0:	2203      	movs	r2, #3
 80033c2:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033c4:	f7fe fb8c 	bl	8001ae0 <HAL_GetTick>
 80033c8:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f013 0f01 	tst.w	r3, #1
 80033d2:	d013      	beq.n	80033fc <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033d4:	f7fe fb84 	bl	8001ae0 <HAL_GetTick>
 80033d8:	1b40      	subs	r0, r0, r5
 80033da:	2802      	cmp	r0, #2
 80033dc:	d9f5      	bls.n	80033ca <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f013 0f01 	tst.w	r3, #1
 80033e6:	d0f0      	beq.n	80033ca <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033ea:	f043 0310 	orr.w	r3, r3, #16
 80033ee:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80033f8:	2001      	movs	r0, #1
 80033fa:	e002      	b.n	8003402 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033fc:	2000      	movs	r0, #0
 80033fe:	e000      	b.n	8003402 <ADC_Disable+0x8e>
 8003400:	2000      	movs	r0, #0
}
 8003402:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003404:	2000      	movs	r0, #0
 8003406:	e7fc      	b.n	8003402 <ADC_Disable+0x8e>

08003408 <HAL_ADC_DeInit>:
{
 8003408:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 800340a:	2800      	cmp	r0, #0
 800340c:	d04c      	beq.n	80034a8 <HAL_ADC_DeInit+0xa0>
 800340e:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003410:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003412:	f043 0302 	orr.w	r3, r3, #2
 8003416:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003418:	f7ff fed6 	bl	80031c8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800341c:	4606      	mov	r6, r0
 800341e:	2800      	cmp	r0, #0
 8003420:	d033      	beq.n	800348a <HAL_ADC_DeInit+0x82>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003422:	6822      	ldr	r2, [r4, #0]
 8003424:	6853      	ldr	r3, [r2, #4]
 8003426:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 800342a:	f023 0303 	bic.w	r3, r3, #3
 800342e:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	f240 329f 	movw	r2, #927	; 0x39f
 8003436:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003438:	6822      	ldr	r2, [r4, #0]
 800343a:	68d1      	ldr	r1, [r2, #12]
 800343c:	4b1b      	ldr	r3, [pc, #108]	; (80034ac <HAL_ADC_DeInit+0xa4>)
 800343e:	400b      	ands	r3, r1
 8003440:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003442:	6822      	ldr	r2, [r4, #0]
 8003444:	6913      	ldr	r3, [r2, #16]
 8003446:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800344a:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800344c:	6822      	ldr	r2, [r4, #0]
 800344e:	6953      	ldr	r3, [r2, #20]
 8003450:	f023 0307 	bic.w	r3, r3, #7
 8003454:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003456:	6822      	ldr	r2, [r4, #0]
 8003458:	6a13      	ldr	r3, [r2, #32]
 800345a:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800345e:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003460:	6823      	ldr	r3, [r4, #0]
 8003462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003464:	2500      	movs	r5, #0
 8003466:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003468:	4a11      	ldr	r2, [pc, #68]	; (80034b0 <HAL_ADC_DeInit+0xa8>)
 800346a:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 800346e:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003472:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 8003476:	4620      	mov	r0, r4
 8003478:	f7fd fe74 	bl	8001164 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800347c:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 800347e:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8003480:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8003482:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8003486:	4630      	mov	r0, r6
 8003488:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800348a:	4620      	mov	r0, r4
 800348c:	f7ff ff72 	bl	8003374 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003490:	4606      	mov	r6, r0
 8003492:	b908      	cbnz	r0, 8003498 <HAL_ADC_DeInit+0x90>
      hadc->State = HAL_ADC_STATE_READY;
 8003494:	2301      	movs	r3, #1
 8003496:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003498:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800349a:	6893      	ldr	r3, [r2, #8]
 800349c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80034a0:	f023 0317 	bic.w	r3, r3, #23
 80034a4:	6093      	str	r3, [r2, #8]
}
 80034a6:	e7bc      	b.n	8003422 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 80034a8:	2601      	movs	r6, #1
 80034aa:	e7ec      	b.n	8003486 <HAL_ADC_DeInit+0x7e>
 80034ac:	833e0200 	.word	0x833e0200
 80034b0:	40012000 	.word	0x40012000

080034b4 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80034b4:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d019      	beq.n	80034f0 <HAL_ADC_Stop+0x3c>
{
 80034bc:	b510      	push	{r4, lr}
 80034be:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80034c0:	2301      	movs	r3, #1
 80034c2:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 80034c6:	f7ff fe7f 	bl	80031c8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80034ca:	b118      	cbz	r0, 80034d4 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80034cc:	2300      	movs	r3, #0
 80034ce:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 80034d2:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80034d4:	4620      	mov	r0, r4
 80034d6:	f7ff ff4d 	bl	8003374 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80034da:	2800      	cmp	r0, #0
 80034dc:	d1f6      	bne.n	80034cc <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80034de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80034ee:	e7ed      	b.n	80034cc <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80034f0:	2002      	movs	r0, #2
}
 80034f2:	4770      	bx	lr

080034f4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80034fc:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003500:	2b01      	cmp	r3, #1
 8003502:	f000 8094 	beq.w	800362e <HAL_ADCEx_Calibration_Start+0x13a>
 8003506:	4604      	mov	r4, r0
 8003508:	2301      	movs	r3, #1
 800350a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800350e:	f7ff ff31 	bl	8003374 <ADC_Disable>
 8003512:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003514:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	f012 0201 	ands.w	r2, r2, #1
 800351c:	d009      	beq.n	8003532 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800351e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003520:	f043 0310 	orr.w	r3, r3, #16
 8003524:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003526:	2300      	movs	r3, #0
 8003528:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 800352c:	4628      	mov	r0, r5
 800352e:	b003      	add	sp, #12
 8003530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8003532:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003534:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8003538:	f041 0102 	orr.w	r1, r1, #2
 800353c:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800353e:	68de      	ldr	r6, [r3, #12]
 8003540:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 8003544:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 8003548:	0436      	lsls	r6, r6, #16
 800354a:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800354c:	68d9      	ldr	r1, [r3, #12]
 800354e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8003552:	f021 0103 	bic.w	r1, r1, #3
 8003556:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8003558:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800355a:	e005      	b.n	8003568 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800355c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003564:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003566:	3201      	adds	r2, #1
 8003568:	2a07      	cmp	r2, #7
 800356a:	d81e      	bhi.n	80035aa <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 800356c:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800356e:	688b      	ldr	r3, [r1, #8]
 8003570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003574:	f023 0317 	bic.w	r3, r3, #23
 8003578:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800357c:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800357e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003580:	6899      	ldr	r1, [r3, #8]
 8003582:	2900      	cmp	r1, #0
 8003584:	daea      	bge.n	800355c <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 8003586:	9b01      	ldr	r3, [sp, #4]
 8003588:	3301      	adds	r3, #1
 800358a:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800358c:	9b01      	ldr	r3, [sp, #4]
 800358e:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003592:	d3f4      	bcc.n	800357e <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8003594:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003596:	f023 0312 	bic.w	r3, r3, #18
 800359a:	f043 0310 	orr.w	r3, r3, #16
 800359e:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 80035a0:	2300      	movs	r3, #0
 80035a2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 80035a6:	2501      	movs	r5, #1
 80035a8:	e7c0      	b.n	800352c <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 80035aa:	fbb0 f2f2 	udiv	r2, r0, r2
    LL_ADC_Enable(hadc->Instance);
 80035ae:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80035b0:	688b      	ldr	r3, [r1, #8]
 80035b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035b6:	f023 0317 	bic.w	r3, r3, #23
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80035c0:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 80035c2:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 80035c6:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 80035ca:	4302      	orrs	r2, r0
 80035cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 80035d0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80035d2:	6893      	ldr	r3, [r2, #8]
 80035d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035d8:	f023 0317 	bic.w	r3, r3, #23
 80035dc:	f043 0302 	orr.w	r3, r3, #2
 80035e0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80035e2:	f7fe fa7d 	bl	8001ae0 <HAL_GetTick>
 80035e6:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80035e8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	f012 0f01 	tst.w	r2, #1
 80035f0:	d109      	bne.n	8003606 <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	4316      	orrs	r6, r2
 80035f6:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80035f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035fa:	f023 0303 	bic.w	r3, r3, #3
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	65a3      	str	r3, [r4, #88]	; 0x58
 8003604:	e78f      	b.n	8003526 <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003606:	f7fe fa6b 	bl	8001ae0 <HAL_GetTick>
 800360a:	1bc3      	subs	r3, r0, r7
 800360c:	2b02      	cmp	r3, #2
 800360e:	d9eb      	bls.n	80035e8 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f013 0f01 	tst.w	r3, #1
 8003618:	d0e6      	beq.n	80035e8 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800361a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800361c:	f043 0310 	orr.w	r3, r3, #16
 8003620:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003622:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 800362a:	2501      	movs	r5, #1
 800362c:	e77e      	b.n	800352c <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 800362e:	2502      	movs	r5, #2
 8003630:	e77c      	b.n	800352c <HAL_ADCEx_Calibration_Start+0x38>
	...

08003634 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003634:	4a07      	ldr	r2, [pc, #28]	; (8003654 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003636:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003638:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800363c:	041b      	lsls	r3, r3, #16
 800363e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003640:	0200      	lsls	r0, r0, #8
 8003642:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003646:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800364c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003650:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003652:	4770      	bx	lr
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003658:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800365a:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <HAL_NVIC_SetPriority+0x68>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003662:	f1c3 0c07 	rsb	ip, r3, #7
 8003666:	f1bc 0f04 	cmp.w	ip, #4
 800366a:	bf28      	it	cs
 800366c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003670:	f103 0e04 	add.w	lr, r3, #4
 8003674:	f1be 0f06 	cmp.w	lr, #6
 8003678:	d918      	bls.n	80036ac <HAL_NVIC_SetPriority+0x54>
 800367a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800367c:	f04f 3eff 	mov.w	lr, #4294967295
 8003680:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003684:	ea21 010c 	bic.w	r1, r1, ip
 8003688:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800368a:	fa0e f303 	lsl.w	r3, lr, r3
 800368e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003692:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003694:	2800      	cmp	r0, #0
 8003696:	db0b      	blt.n	80036b0 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003698:	0109      	lsls	r1, r1, #4
 800369a:	b2c9      	uxtb	r1, r1
 800369c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80036a0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80036a4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80036a8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ac:	2300      	movs	r3, #0
 80036ae:	e7e5      	b.n	800367c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b0:	f000 000f 	and.w	r0, r0, #15
 80036b4:	0109      	lsls	r1, r1, #4
 80036b6:	b2c9      	uxtb	r1, r1
 80036b8:	4b02      	ldr	r3, [pc, #8]	; (80036c4 <HAL_NVIC_SetPriority+0x6c>)
 80036ba:	5419      	strb	r1, [r3, r0]
 80036bc:	e7f4      	b.n	80036a8 <HAL_NVIC_SetPriority+0x50>
 80036be:	bf00      	nop
 80036c0:	e000ed00 	.word	0xe000ed00
 80036c4:	e000ed14 	.word	0xe000ed14

080036c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80036c8:	2800      	cmp	r0, #0
 80036ca:	db07      	blt.n	80036dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036cc:	f000 021f 	and.w	r2, r0, #31
 80036d0:	0940      	lsrs	r0, r0, #5
 80036d2:	2301      	movs	r3, #1
 80036d4:	4093      	lsls	r3, r2
 80036d6:	4a02      	ldr	r2, [pc, #8]	; (80036e0 <HAL_NVIC_EnableIRQ+0x18>)
 80036d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	e000e100 	.word	0xe000e100

080036e4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80036e4:	2800      	cmp	r0, #0
 80036e6:	db0c      	blt.n	8003702 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036e8:	f000 021f 	and.w	r2, r0, #31
 80036ec:	0940      	lsrs	r0, r0, #5
 80036ee:	2301      	movs	r3, #1
 80036f0:	4093      	lsls	r3, r2
 80036f2:	3020      	adds	r0, #32
 80036f4:	4a03      	ldr	r2, [pc, #12]	; (8003704 <HAL_NVIC_DisableIRQ+0x20>)
 80036f6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80036fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80036fe:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003702:	4770      	bx	lr
 8003704:	e000e100 	.word	0xe000e100

08003708 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003708:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800370a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800370c:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8003710:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003714:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003716:	b124      	cbz	r4, 8003722 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003718:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800371a:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 800371e:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003722:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003724:	f004 0c1c 	and.w	ip, r4, #28
 8003728:	2401      	movs	r4, #1
 800372a:	fa04 f40c 	lsl.w	r4, r4, ip
 800372e:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8003732:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003736:	6804      	ldr	r4, [r0, #0]
 8003738:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800373a:	6883      	ldr	r3, [r0, #8]
 800373c:	2b10      	cmp	r3, #16
 800373e:	d005      	beq.n	800374c <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003740:	6803      	ldr	r3, [r0, #0]
 8003742:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003744:	6803      	ldr	r3, [r0, #0]
 8003746:	60da      	str	r2, [r3, #12]
  }
}
 8003748:	bc10      	pop	{r4}
 800374a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800374c:	6803      	ldr	r3, [r0, #0]
 800374e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003750:	6803      	ldr	r3, [r0, #0]
 8003752:	60d9      	str	r1, [r3, #12]
 8003754:	e7f8      	b.n	8003748 <DMA_SetConfig+0x40>
	...

08003758 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003758:	6803      	ldr	r3, [r0, #0]
 800375a:	4a14      	ldr	r2, [pc, #80]	; (80037ac <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d816      	bhi.n	800378e <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003760:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003762:	f022 0203 	bic.w	r2, r2, #3
 8003766:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800376a:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 800376e:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003770:	b2db      	uxtb	r3, r3
 8003772:	3b08      	subs	r3, #8
 8003774:	4a0e      	ldr	r2, [pc, #56]	; (80037b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800377c:	4a0d      	ldr	r2, [pc, #52]	; (80037b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 800377e:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003780:	f003 031f 	and.w	r3, r3, #31
 8003784:	2201      	movs	r2, #1
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	6503      	str	r3, [r0, #80]	; 0x50
}
 800378c:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800378e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003790:	f022 0103 	bic.w	r1, r2, #3
 8003794:	4a08      	ldr	r2, [pc, #32]	; (80037b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8003796:	440a      	add	r2, r1
 8003798:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800379a:	b2db      	uxtb	r3, r3
 800379c:	3b08      	subs	r3, #8
 800379e:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80037a0:	fba2 2303 	umull	r2, r3, r2, r3
 80037a4:	091b      	lsrs	r3, r3, #4
 80037a6:	3307      	adds	r3, #7
 80037a8:	e7e8      	b.n	800377c <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 80037aa:	bf00      	nop
 80037ac:	40020407 	.word	0x40020407
 80037b0:	cccccccd 	.word	0xcccccccd
 80037b4:	40020880 	.word	0x40020880
 80037b8:	4002081c 	.word	0x4002081c

080037bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80037bc:	6843      	ldr	r3, [r0, #4]
 80037be:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037c2:	4a07      	ldr	r2, [pc, #28]	; (80037e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80037c4:	441a      	add	r2, r3
 80037c6:	0092      	lsls	r2, r2, #2
 80037c8:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037ca:	4a06      	ldr	r2, [pc, #24]	; (80037e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 80037cc:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80037ce:	3b01      	subs	r3, #1
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	2201      	movs	r2, #1
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	1000823f 	.word	0x1000823f
 80037e4:	40020940 	.word	0x40020940

080037e8 <HAL_DMA_Init>:
  if (hdma == NULL)
 80037e8:	2800      	cmp	r0, #0
 80037ea:	d060      	beq.n	80038ae <HAL_DMA_Init+0xc6>
{
 80037ec:	b510      	push	{r4, lr}
 80037ee:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037f0:	6802      	ldr	r2, [r0, #0]
 80037f2:	4b30      	ldr	r3, [pc, #192]	; (80038b4 <HAL_DMA_Init+0xcc>)
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d842      	bhi.n	800387e <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037f8:	4b2f      	ldr	r3, [pc, #188]	; (80038b8 <HAL_DMA_Init+0xd0>)
 80037fa:	4413      	add	r3, r2
 80037fc:	492f      	ldr	r1, [pc, #188]	; (80038bc <HAL_DMA_Init+0xd4>)
 80037fe:	fba1 1303 	umull	r1, r3, r1, r3
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003808:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <HAL_DMA_Init+0xd8>)
 800380a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800380c:	2302      	movs	r3, #2
 800380e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003812:	6813      	ldr	r3, [r2, #0]
 8003814:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381c:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800381e:	6821      	ldr	r1, [r4, #0]
 8003820:	680a      	ldr	r2, [r1, #0]
 8003822:	68a3      	ldr	r3, [r4, #8]
 8003824:	68e0      	ldr	r0, [r4, #12]
 8003826:	4303      	orrs	r3, r0
 8003828:	6920      	ldr	r0, [r4, #16]
 800382a:	4303      	orrs	r3, r0
 800382c:	6960      	ldr	r0, [r4, #20]
 800382e:	4303      	orrs	r3, r0
 8003830:	69a0      	ldr	r0, [r4, #24]
 8003832:	4303      	orrs	r3, r0
 8003834:	69e0      	ldr	r0, [r4, #28]
 8003836:	4303      	orrs	r3, r0
 8003838:	6a20      	ldr	r0, [r4, #32]
 800383a:	4303      	orrs	r3, r0
 800383c:	4313      	orrs	r3, r2
 800383e:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003840:	4620      	mov	r0, r4
 8003842:	f7ff ff89 	bl	8003758 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003846:	68a3      	ldr	r3, [r4, #8]
 8003848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800384c:	d022      	beq.n	8003894 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800384e:	6863      	ldr	r3, [r4, #4]
 8003850:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003856:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003858:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800385a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800385c:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800385e:	6863      	ldr	r3, [r4, #4]
 8003860:	3b01      	subs	r3, #1
 8003862:	2b03      	cmp	r3, #3
 8003864:	d919      	bls.n	800389a <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800386a:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800386c:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800386e:	2000      	movs	r0, #0
 8003870:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003872:	2301      	movs	r3, #1
 8003874:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003878:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800387c:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800387e:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <HAL_DMA_Init+0xdc>)
 8003880:	4413      	add	r3, r2
 8003882:	490e      	ldr	r1, [pc, #56]	; (80038bc <HAL_DMA_Init+0xd4>)
 8003884:	fba1 1303 	umull	r1, r3, r1, r3
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800388e:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <HAL_DMA_Init+0xe0>)
 8003890:	6403      	str	r3, [r0, #64]	; 0x40
 8003892:	e7bb      	b.n	800380c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003894:	2300      	movs	r3, #0
 8003896:	6063      	str	r3, [r4, #4]
 8003898:	e7d9      	b.n	800384e <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800389a:	4620      	mov	r0, r4
 800389c:	f7ff ff8e 	bl	80037bc <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80038a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038a8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80038aa:	605a      	str	r2, [r3, #4]
 80038ac:	e7df      	b.n	800386e <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 80038ae:	2001      	movs	r0, #1
}
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40020407 	.word	0x40020407
 80038b8:	bffdfff8 	.word	0xbffdfff8
 80038bc:	cccccccd 	.word	0xcccccccd
 80038c0:	40020000 	.word	0x40020000
 80038c4:	bffdfbf8 	.word	0xbffdfbf8
 80038c8:	40020400 	.word	0x40020400

080038cc <HAL_DMA_DeInit>:
  if (NULL == hdma)
 80038cc:	2800      	cmp	r0, #0
 80038ce:	d04b      	beq.n	8003968 <HAL_DMA_DeInit+0x9c>
{
 80038d0:	b538      	push	{r3, r4, r5, lr}
 80038d2:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 80038d4:	6802      	ldr	r2, [r0, #0]
 80038d6:	6813      	ldr	r3, [r2, #0]
 80038d8:	f023 0301 	bic.w	r3, r3, #1
 80038dc:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038de:	6802      	ldr	r2, [r0, #0]
 80038e0:	4b22      	ldr	r3, [pc, #136]	; (800396c <HAL_DMA_DeInit+0xa0>)
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d82c      	bhi.n	8003940 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038e6:	4b22      	ldr	r3, [pc, #136]	; (8003970 <HAL_DMA_DeInit+0xa4>)
 80038e8:	4413      	add	r3, r2
 80038ea:	4922      	ldr	r1, [pc, #136]	; (8003974 <HAL_DMA_DeInit+0xa8>)
 80038ec:	fba1 1303 	umull	r1, r3, r1, r3
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80038f6:	4b20      	ldr	r3, [pc, #128]	; (8003978 <HAL_DMA_DeInit+0xac>)
 80038f8:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 80038fa:	2500      	movs	r5, #0
 80038fc:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003900:	f003 021c 	and.w	r2, r3, #28
 8003904:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003906:	2301      	movs	r3, #1
 8003908:	4093      	lsls	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800390c:	4620      	mov	r0, r4
 800390e:	f7ff ff23 	bl	8003758 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8003912:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003914:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003916:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003918:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800391a:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800391c:	6863      	ldr	r3, [r4, #4]
 800391e:	3b01      	subs	r3, #1
 8003920:	2b03      	cmp	r3, #3
 8003922:	d918      	bls.n	8003956 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8003924:	2000      	movs	r0, #0
 8003926:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003928:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800392a:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 800392c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800392e:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003930:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003932:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003934:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8003936:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800393a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800393e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003940:	4b0e      	ldr	r3, [pc, #56]	; (800397c <HAL_DMA_DeInit+0xb0>)
 8003942:	4413      	add	r3, r2
 8003944:	490b      	ldr	r1, [pc, #44]	; (8003974 <HAL_DMA_DeInit+0xa8>)
 8003946:	fba1 1303 	umull	r1, r3, r1, r3
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_DMA_DeInit+0xb4>)
 8003952:	6403      	str	r3, [r0, #64]	; 0x40
 8003954:	e7d1      	b.n	80038fa <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003956:	4620      	mov	r0, r4
 8003958:	f7ff ff30 	bl	80037bc <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800395c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800395e:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003960:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003962:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	e7dd      	b.n	8003924 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8003968:	2001      	movs	r0, #1
}
 800396a:	4770      	bx	lr
 800396c:	40020407 	.word	0x40020407
 8003970:	bffdfff8 	.word	0xbffdfff8
 8003974:	cccccccd 	.word	0xcccccccd
 8003978:	40020000 	.word	0x40020000
 800397c:	bffdfbf8 	.word	0xbffdfbf8
 8003980:	40020400 	.word	0x40020400

08003984 <HAL_DMA_Start_IT>:
{
 8003984:	b538      	push	{r3, r4, r5, lr}
 8003986:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003988:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 800398c:	2801      	cmp	r0, #1
 800398e:	d043      	beq.n	8003a18 <HAL_DMA_Start_IT+0x94>
 8003990:	2001      	movs	r0, #1
 8003992:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8003996:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800399a:	b2c0      	uxtb	r0, r0
 800399c:	2801      	cmp	r0, #1
 800399e:	d006      	beq.n	80039ae <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80039a4:	2300      	movs	r3, #0
 80039a6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 80039aa:	2001      	movs	r0, #1
}
 80039ac:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80039ae:	2002      	movs	r0, #2
 80039b0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039b4:	2000      	movs	r0, #0
 80039b6:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80039b8:	6825      	ldr	r5, [r4, #0]
 80039ba:	6828      	ldr	r0, [r5, #0]
 80039bc:	f020 0001 	bic.w	r0, r0, #1
 80039c0:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039c2:	4620      	mov	r0, r4
 80039c4:	f7ff fea0 	bl	8003708 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80039c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039ca:	b1d3      	cbz	r3, 8003a02 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039cc:	6822      	ldr	r2, [r4, #0]
 80039ce:	6813      	ldr	r3, [r2, #0]
 80039d0:	f043 030e 	orr.w	r3, r3, #14
 80039d4:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80039d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80039de:	d003      	beq.n	80039e8 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039e6:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80039e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80039ea:	b11b      	cbz	r3, 80039f4 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80039f4:	6822      	ldr	r2, [r4, #0]
 80039f6:	6813      	ldr	r3, [r2, #0]
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039fe:	2000      	movs	r0, #0
 8003a00:	e7d4      	b.n	80039ac <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a02:	6822      	ldr	r2, [r4, #0]
 8003a04:	6813      	ldr	r3, [r2, #0]
 8003a06:	f023 0304 	bic.w	r3, r3, #4
 8003a0a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a0c:	6822      	ldr	r2, [r4, #0]
 8003a0e:	6813      	ldr	r3, [r2, #0]
 8003a10:	f043 030a 	orr.w	r3, r3, #10
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e7de      	b.n	80039d6 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8003a18:	2002      	movs	r0, #2
 8003a1a:	e7c7      	b.n	80039ac <HAL_DMA_Start_IT+0x28>

08003a1c <HAL_DMA_Abort>:
  if (NULL == hdma)
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d034      	beq.n	8003a8c <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a22:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	2a02      	cmp	r2, #2
 8003a2a:	d006      	beq.n	8003a3a <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003a30:	2200      	movs	r2, #0
 8003a32:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8003a36:	2001      	movs	r0, #1
 8003a38:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a3a:	6801      	ldr	r1, [r0, #0]
 8003a3c:	680a      	ldr	r2, [r1, #0]
 8003a3e:	f022 020e 	bic.w	r2, r2, #14
 8003a42:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a44:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003a46:	680a      	ldr	r2, [r1, #0]
 8003a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a4c:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003a4e:	6801      	ldr	r1, [r0, #0]
 8003a50:	680a      	ldr	r2, [r1, #0]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003a5a:	f002 011c 	and.w	r1, r2, #28
 8003a5e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003a60:	2201      	movs	r2, #1
 8003a62:	408a      	lsls	r2, r1
 8003a64:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a68:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003a6a:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003a6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a6e:	b132      	cbz	r2, 8003a7e <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a70:	6811      	ldr	r1, [r2, #0]
 8003a72:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003a76:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a7a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003a7c:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003a84:	2000      	movs	r0, #0
 8003a86:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8003a8a:	4770      	bx	lr
    return HAL_ERROR;
 8003a8c:	2001      	movs	r0, #1
}
 8003a8e:	4770      	bx	lr

08003a90 <HAL_DMA_Abort_IT>:
{
 8003a90:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a92:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d003      	beq.n	8003aa4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003aa0:	2001      	movs	r0, #1
}
 8003aa2:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aa4:	6802      	ldr	r2, [r0, #0]
 8003aa6:	6813      	ldr	r3, [r2, #0]
 8003aa8:	f023 030e 	bic.w	r3, r3, #14
 8003aac:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003aae:	6802      	ldr	r2, [r0, #0]
 8003ab0:	6813      	ldr	r3, [r2, #0]
 8003ab2:	f023 0301 	bic.w	r3, r3, #1
 8003ab6:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ab8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003aba:	6813      	ldr	r3, [r2, #0]
 8003abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ac0:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ac2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003ac4:	f003 021c 	and.w	r2, r3, #28
 8003ac8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003aca:	2301      	movs	r3, #1
 8003acc:	4093      	lsls	r3, r2
 8003ace:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ad0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003ad2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003ad4:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003ad6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003ad8:	b133      	cbz	r3, 8003ae8 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ae0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ae2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003ae4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003ae6:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003aee:	2300      	movs	r3, #0
 8003af0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8003af4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003af6:	b113      	cbz	r3, 8003afe <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8003af8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003afa:	2000      	movs	r0, #0
 8003afc:	e7d1      	b.n	8003aa2 <HAL_DMA_Abort_IT+0x12>
 8003afe:	2000      	movs	r0, #0
 8003b00:	e7cf      	b.n	8003aa2 <HAL_DMA_Abort_IT+0x12>
	...

08003b04 <HAL_DMA_IRQHandler>:
{
 8003b04:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003b08:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003b0a:	6804      	ldr	r4, [r0, #0]
 8003b0c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b0e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003b10:	f003 031c 	and.w	r3, r3, #28
 8003b14:	2204      	movs	r2, #4
 8003b16:	409a      	lsls	r2, r3
 8003b18:	420a      	tst	r2, r1
 8003b1a:	d015      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x44>
 8003b1c:	f015 0f04 	tst.w	r5, #4
 8003b20:	d012      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	f013 0f20 	tst.w	r3, #32
 8003b28:	d103      	bne.n	8003b32 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	f023 0304 	bic.w	r3, r3, #4
 8003b30:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b32:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003b34:	f003 021c 	and.w	r2, r3, #28
 8003b38:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003b3a:	2304      	movs	r3, #4
 8003b3c:	4093      	lsls	r3, r2
 8003b3e:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003b40:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003b42:	b103      	cbz	r3, 8003b46 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003b44:	4798      	blx	r3
}
 8003b46:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003b48:	2202      	movs	r2, #2
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	420a      	tst	r2, r1
 8003b4e:	d028      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x9e>
 8003b50:	f015 0f02 	tst.w	r5, #2
 8003b54:	d025      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	f013 0f20 	tst.w	r3, #32
 8003b5c:	d106      	bne.n	8003b6c <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	f023 030a 	bic.w	r3, r3, #10
 8003b64:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003b6c:	6802      	ldr	r2, [r0, #0]
 8003b6e:	4b1c      	ldr	r3, [pc, #112]	; (8003be0 <HAL_DMA_IRQHandler+0xdc>)
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d90e      	bls.n	8003b92 <HAL_DMA_IRQHandler+0x8e>
 8003b74:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003b76:	f003 021c 	and.w	r2, r3, #28
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	4093      	lsls	r3, r2
 8003b7e:	4a19      	ldr	r2, [pc, #100]	; (8003be4 <HAL_DMA_IRQHandler+0xe0>)
 8003b80:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003b82:	2300      	movs	r3, #0
 8003b84:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8003b88:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0db      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8003b8e:	4798      	blx	r3
 8003b90:	e7d9      	b.n	8003b46 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003b92:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003b94:	f003 021c 	and.w	r2, r3, #28
 8003b98:	2302      	movs	r3, #2
 8003b9a:	4093      	lsls	r3, r2
 8003b9c:	4a12      	ldr	r2, [pc, #72]	; (8003be8 <HAL_DMA_IRQHandler+0xe4>)
 8003b9e:	6053      	str	r3, [r2, #4]
 8003ba0:	e7ef      	b.n	8003b82 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003ba2:	2208      	movs	r2, #8
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	420b      	tst	r3, r1
 8003baa:	d0cc      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x42>
 8003bac:	f015 0f08 	tst.w	r5, #8
 8003bb0:	d0c9      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	f023 030e 	bic.w	r3, r3, #14
 8003bb8:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003bbc:	f003 031c 	and.w	r3, r3, #28
 8003bc0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bca:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003bcc:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003bd6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0b4      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003bdc:	4798      	blx	r3
  return;
 8003bde:	e7b2      	b.n	8003b46 <HAL_DMA_IRQHandler+0x42>
 8003be0:	40020080 	.word	0x40020080
 8003be4:	40020400 	.word	0x40020400
 8003be8:	40020000 	.word	0x40020000

08003bec <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8003bec:	b178      	cbz	r0, 8003c0e <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8003bee:	6803      	ldr	r3, [r0, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003bf2:	f011 0f10 	tst.w	r1, #16
 8003bf6:	d004      	beq.n	8003c02 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003bf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003bfc:	d004      	beq.n	8003c08 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003bfe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003c02:	601a      	str	r2, [r3, #0]
  return status;
 8003c04:	2000      	movs	r0, #0
 8003c06:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003c08:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003c0c:	e7f9      	b.n	8003c02 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8003c0e:	2001      	movs	r0, #1
}
 8003c10:	4770      	bx	lr
	...

08003c14 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003c14:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003c16:	4c05      	ldr	r4, [pc, #20]	; (8003c2c <FLASH_Program_DoubleWord+0x18>)
 8003c18:	6961      	ldr	r1, [r4, #20]
 8003c1a:	f041 0101 	orr.w	r1, r1, #1
 8003c1e:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003c20:	6002      	str	r2, [r0, #0]
 8003c22:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003c26:	6043      	str	r3, [r0, #4]
}
 8003c28:	bc10      	pop	{r4}
 8003c2a:	4770      	bx	lr
 8003c2c:	58004000 	.word	0x58004000

08003c30 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003c30:	4a0c      	ldr	r2, [pc, #48]	; (8003c64 <FLASH_Program_Fast+0x34>)
 8003c32:	6953      	ldr	r3, [r2, #20]
 8003c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c38:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c3a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003c3e:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003c40:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003c42:	f851 2b04 	ldr.w	r2, [r1], #4
 8003c46:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8003c4a:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8003c4c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8003c50:	d1f7      	bne.n	8003c42 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8003c52:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <FLASH_Program_Fast+0x34>)
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003c5a:	d1fa      	bne.n	8003c52 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5c:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	58004000 	.word	0x58004000

08003c68 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <HAL_FLASH_Unlock+0x28>)
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	db01      	blt.n	8003c74 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8003c70:	2000      	movs	r0, #0
 8003c72:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <HAL_FLASH_Unlock+0x28>)
 8003c76:	4a07      	ldr	r2, [pc, #28]	; (8003c94 <HAL_FLASH_Unlock+0x2c>)
 8003c78:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003c7a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003c7e:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	db01      	blt.n	8003c8a <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8003c86:	2000      	movs	r0, #0
 8003c88:	4770      	bx	lr
      status = HAL_ERROR;
 8003c8a:	2001      	movs	r0, #1
}
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	58004000 	.word	0x58004000
 8003c94:	45670123 	.word	0x45670123

08003c98 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_FLASH_Lock+0x18>)
 8003c9a:	695a      	ldr	r2, [r3, #20]
 8003c9c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ca0:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	db01      	blt.n	8003cac <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8003ca8:	2001      	movs	r0, #1
}
 8003caa:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8003cac:	2000      	movs	r0, #0
 8003cae:	4770      	bx	lr
 8003cb0:	58004000 	.word	0x58004000

08003cb4 <FLASH_WaitForLastOperation>:
{
 8003cb4:	b538      	push	{r3, r4, r5, lr}
 8003cb6:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003cb8:	f7fd ff12 	bl	8001ae0 <HAL_GetTick>
 8003cbc:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003cbe:	4b16      	ldr	r3, [pc, #88]	; (8003d18 <FLASH_WaitForLastOperation+0x64>)
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003cc6:	d006      	beq.n	8003cd6 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003cc8:	f7fd ff0a 	bl	8001ae0 <HAL_GetTick>
 8003ccc:	1b00      	subs	r0, r0, r4
 8003cce:	42a8      	cmp	r0, r5
 8003cd0:	d3f5      	bcc.n	8003cbe <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8003cd2:	2003      	movs	r0, #3
}
 8003cd4:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8003cd6:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <FLASH_WaitForLastOperation+0x64>)
 8003cd8:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8003cda:	f013 0f01 	tst.w	r3, #1
 8003cde:	d002      	beq.n	8003ce6 <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003ce0:	4a0d      	ldr	r2, [pc, #52]	; (8003d18 <FLASH_WaitForLastOperation+0x64>)
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8003ce6:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8003cea:	4013      	ands	r3, r2
 8003cec:	d001      	beq.n	8003cf2 <FLASH_WaitForLastOperation+0x3e>
 8003cee:	4a0a      	ldr	r2, [pc, #40]	; (8003d18 <FLASH_WaitForLastOperation+0x64>)
 8003cf0:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8003cf2:	b95b      	cbnz	r3, 8003d0c <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003cf4:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <FLASH_WaitForLastOperation+0x64>)
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003cfc:	d00a      	beq.n	8003d14 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003cfe:	f7fd feef 	bl	8001ae0 <HAL_GetTick>
 8003d02:	1b00      	subs	r0, r0, r4
 8003d04:	42a8      	cmp	r0, r5
 8003d06:	d3f5      	bcc.n	8003cf4 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8003d08:	2003      	movs	r0, #3
 8003d0a:	e7e3      	b.n	8003cd4 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8003d0c:	4a03      	ldr	r2, [pc, #12]	; (8003d1c <FLASH_WaitForLastOperation+0x68>)
 8003d0e:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8003d10:	2001      	movs	r0, #1
 8003d12:	e7df      	b.n	8003cd4 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8003d14:	2000      	movs	r0, #0
 8003d16:	e7dd      	b.n	8003cd4 <FLASH_WaitForLastOperation+0x20>
 8003d18:	58004000 	.word	0x58004000
 8003d1c:	200004cc 	.word	0x200004cc

08003d20 <HAL_FLASH_Program>:
{
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8003d24:	4b15      	ldr	r3, [pc, #84]	; (8003d7c <HAL_FLASH_Program+0x5c>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d025      	beq.n	8003d78 <HAL_FLASH_Program+0x58>
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	460d      	mov	r5, r1
 8003d30:	4616      	mov	r6, r2
 8003d32:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <HAL_FLASH_Program+0x5c>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d38:	2200      	movs	r2, #0
 8003d3a:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d40:	f7ff ffb8 	bl	8003cb4 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003d44:	b970      	cbnz	r0, 8003d64 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003d46:	2c01      	cmp	r4, #1
 8003d48:	d010      	beq.n	8003d6c <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003d4a:	4631      	mov	r1, r6
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	f7ff ff6f 	bl	8003c30 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d56:	f7ff ffad 	bl	8003cb4 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8003d5a:	4a09      	ldr	r2, [pc, #36]	; (8003d80 <HAL_FLASH_Program+0x60>)
 8003d5c:	6953      	ldr	r3, [r2, #20]
 8003d5e:	ea23 0404 	bic.w	r4, r3, r4
 8003d62:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_FLASH_Program+0x5c>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	701a      	strb	r2, [r3, #0]
}
 8003d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8003d6c:	4632      	mov	r2, r6
 8003d6e:	463b      	mov	r3, r7
 8003d70:	4628      	mov	r0, r5
 8003d72:	f7ff ff4f 	bl	8003c14 <FLASH_Program_DoubleWord>
 8003d76:	e7ec      	b.n	8003d52 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8003d78:	2002      	movs	r0, #2
 8003d7a:	e7f6      	b.n	8003d6a <HAL_FLASH_Program+0x4a>
 8003d7c:	200004cc 	.word	0x200004cc
 8003d80:	58004000 	.word	0x58004000

08003d84 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8003d84:	4a03      	ldr	r2, [pc, #12]	; (8003d94 <FLASH_MassErase+0x10>)
 8003d86:	6953      	ldr	r3, [r2, #20]
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8c:	f043 0304 	orr.w	r3, r3, #4
 8003d90:	6153      	str	r3, [r2, #20]
#endif
}
 8003d92:	4770      	bx	lr
 8003d94:	58004000 	.word	0x58004000

08003d98 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8003d98:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <FLASH_FlushCaches+0x64>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d006      	beq.n	8003db2 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8003da4:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <FLASH_FlushCaches+0x64>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d012      	beq.n	8003dd6 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8003db0:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003db2:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <FLASH_FlushCaches+0x64>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003dba:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dca:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	e7e6      	b.n	8003da4 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <FLASH_FlushCaches+0x64>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dde:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dee:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003df6:	601a      	str	r2, [r3, #0]
}
 8003df8:	e7da      	b.n	8003db0 <FLASH_FlushCaches+0x18>
 8003dfa:	bf00      	nop
 8003dfc:	58004000 	.word	0x58004000

08003e00 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003e00:	4a03      	ldr	r2, [pc, #12]	; (8003e10 <FLASH_AcknowledgePageErase+0x10>)
 8003e02:	6953      	ldr	r3, [r2, #20]
 8003e04:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8003e08:	f023 0302 	bic.w	r3, r3, #2
 8003e0c:	6153      	str	r3, [r2, #20]
#endif
}
 8003e0e:	4770      	bx	lr
 8003e10:	58004000 	.word	0x58004000

08003e14 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003e14:	4a05      	ldr	r2, [pc, #20]	; (8003e2c <FLASH_PageErase+0x18>)
 8003e16:	6953      	ldr	r3, [r2, #20]
 8003e18:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8003e1c:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8003e20:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003e24:	f040 0002 	orr.w	r0, r0, #2
 8003e28:	6150      	str	r0, [r2, #20]
}
 8003e2a:	4770      	bx	lr
 8003e2c:	58004000 	.word	0x58004000

08003e30 <HAL_FLASHEx_Erase>:
{
 8003e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8003e32:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <HAL_FLASHEx_Erase+0x7c>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d035      	beq.n	8003ea6 <HAL_FLASHEx_Erase+0x76>
 8003e3a:	4605      	mov	r5, r0
 8003e3c:	460f      	mov	r7, r1
 8003e3e:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <HAL_FLASHEx_Erase+0x7c>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e44:	2200      	movs	r2, #0
 8003e46:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003e48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e4c:	f7ff ff32 	bl	8003cb4 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003e50:	4606      	mov	r6, r0
 8003e52:	bb18      	cbnz	r0, 8003e9c <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003e54:	682b      	ldr	r3, [r5, #0]
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d013      	beq.n	8003e82 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8003e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5e:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003e60:	686c      	ldr	r4, [r5, #4]
 8003e62:	686b      	ldr	r3, [r5, #4]
 8003e64:	68aa      	ldr	r2, [r5, #8]
 8003e66:	4413      	add	r3, r2
 8003e68:	42a3      	cmp	r3, r4
 8003e6a:	d913      	bls.n	8003e94 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f7ff ffd1 	bl	8003e14 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003e72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e76:	f7ff ff1d 	bl	8003cb4 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8003e7a:	4606      	mov	r6, r0
 8003e7c:	b948      	cbnz	r0, 8003e92 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003e7e:	3401      	adds	r4, #1
 8003e80:	e7ef      	b.n	8003e62 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8003e82:	f7ff ff7f 	bl	8003d84 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003e86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e8a:	f7ff ff13 	bl	8003cb4 <FLASH_WaitForLastOperation>
 8003e8e:	4606      	mov	r6, r0
 8003e90:	e002      	b.n	8003e98 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8003e92:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8003e94:	f7ff ffb4 	bl	8003e00 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8003e98:	f7ff ff7e 	bl	8003d98 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8003e9c:	4b03      	ldr	r3, [pc, #12]	; (8003eac <HAL_FLASHEx_Erase+0x7c>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	701a      	strb	r2, [r3, #0]
}
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8003ea6:	2602      	movs	r6, #2
 8003ea8:	e7fb      	b.n	8003ea2 <HAL_FLASHEx_Erase+0x72>
 8003eaa:	bf00      	nop
 8003eac:	200004cc 	.word	0x200004cc

08003eb0 <HAL_FLASHEx_Erase_IT>:
{
 8003eb0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 8003eb2:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <HAL_FLASHEx_Erase_IT+0x60>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d028      	beq.n	8003f0c <HAL_FLASHEx_Erase_IT+0x5c>
 8003eba:	4604      	mov	r4, r0
 8003ebc:	4b14      	ldr	r3, [pc, #80]	; (8003f10 <HAL_FLASHEx_Erase_IT+0x60>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	605a      	str	r2, [r3, #4]
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8003ec6:	6802      	ldr	r2, [r0, #0]
 8003ec8:	609a      	str	r2, [r3, #8]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003eca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ece:	f7ff fef1 	bl	8003cb4 <FLASH_WaitForLastOperation>
  if (status != HAL_OK)
 8003ed2:	4605      	mov	r5, r0
 8003ed4:	b120      	cbz	r0, 8003ee0 <HAL_FLASHEx_Erase_IT+0x30>
    __HAL_UNLOCK(&pFlash);
 8003ed6:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <HAL_FLASHEx_Erase_IT+0x60>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	701a      	strb	r2, [r3, #0]
}
 8003edc:	4628      	mov	r0, r5
 8003ede:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8003ee0:	4a0c      	ldr	r2, [pc, #48]	; (8003f14 <HAL_FLASHEx_Erase_IT+0x64>)
 8003ee2:	6953      	ldr	r3, [r2, #20]
 8003ee4:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8003ee8:	6153      	str	r3, [r2, #20]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d007      	beq.n	8003f00 <HAL_FLASHEx_Erase_IT+0x50>
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8003ef0:	68a2      	ldr	r2, [r4, #8]
 8003ef2:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <HAL_FLASHEx_Erase_IT+0x60>)
 8003ef4:	615a      	str	r2, [r3, #20]
      pFlash.Page = pEraseInit->Page;
 8003ef6:	6860      	ldr	r0, [r4, #4]
 8003ef8:	6118      	str	r0, [r3, #16]
      FLASH_PageErase(pEraseInit->Page);
 8003efa:	f7ff ff8b 	bl	8003e14 <FLASH_PageErase>
 8003efe:	e7ed      	b.n	8003edc <HAL_FLASHEx_Erase_IT+0x2c>
      pFlash.Page = 0;
 8003f00:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <HAL_FLASHEx_Erase_IT+0x60>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	611a      	str	r2, [r3, #16]
      FLASH_MassErase();
 8003f06:	f7ff ff3d 	bl	8003d84 <FLASH_MassErase>
 8003f0a:	e7e7      	b.n	8003edc <HAL_FLASHEx_Erase_IT+0x2c>
  __HAL_LOCK(&pFlash);
 8003f0c:	2502      	movs	r5, #2
 8003f0e:	e7e5      	b.n	8003edc <HAL_FLASHEx_Erase_IT+0x2c>
 8003f10:	200004cc 	.word	0x200004cc
 8003f14:	58004000 	.word	0x58004000

08003f18 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f18:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8003f1a:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f1c:	e069      	b.n	8003ff2 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f1e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f20:	005e      	lsls	r6, r3, #1
 8003f22:	2403      	movs	r4, #3
 8003f24:	40b4      	lsls	r4, r6
 8003f26:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f2a:	68cc      	ldr	r4, [r1, #12]
 8003f2c:	40b4      	lsls	r4, r6
 8003f2e:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003f30:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f32:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f34:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f38:	684c      	ldr	r4, [r1, #4]
 8003f3a:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003f3e:	409c      	lsls	r4, r3
 8003f40:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8003f44:	6044      	str	r4, [r0, #4]
 8003f46:	e065      	b.n	8004014 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f48:	08dd      	lsrs	r5, r3, #3
 8003f4a:	3508      	adds	r5, #8
 8003f4c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f50:	f003 0407 	and.w	r4, r3, #7
 8003f54:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003f58:	240f      	movs	r4, #15
 8003f5a:	fa04 f40c 	lsl.w	r4, r4, ip
 8003f5e:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f62:	690c      	ldr	r4, [r1, #16]
 8003f64:	fa04 f40c 	lsl.w	r4, r4, ip
 8003f68:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003f6c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003f70:	e067      	b.n	8004042 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f72:	2402      	movs	r4, #2
 8003f74:	e000      	b.n	8003f78 <HAL_GPIO_Init+0x60>
 8003f76:	2400      	movs	r4, #0
 8003f78:	fa04 f40e 	lsl.w	r4, r4, lr
 8003f7c:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f7e:	f10c 0c02 	add.w	ip, ip, #2
 8003f82:	4d4b      	ldr	r5, [pc, #300]	; (80040b0 <HAL_GPIO_Init+0x198>)
 8003f84:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f88:	4c4a      	ldr	r4, [pc, #296]	; (80040b4 <HAL_GPIO_Init+0x19c>)
 8003f8a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003f8c:	43d4      	mvns	r4, r2
 8003f8e:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f92:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003f96:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8003f9a:	d001      	beq.n	8003fa0 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8003f9c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003fa0:	4d44      	ldr	r5, [pc, #272]	; (80040b4 <HAL_GPIO_Init+0x19c>)
 8003fa2:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8003fa4:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003fa6:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003faa:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003fae:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 8003fb2:	d001      	beq.n	8003fb8 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8003fb4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003fb8:	4d3e      	ldr	r5, [pc, #248]	; (80040b4 <HAL_GPIO_Init+0x19c>)
 8003fba:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003fbc:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003fc0:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fc4:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003fc8:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8003fcc:	d001      	beq.n	8003fd2 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8003fce:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003fd2:	4d38      	ldr	r5, [pc, #224]	; (80040b4 <HAL_GPIO_Init+0x19c>)
 8003fd4:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003fd8:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003fdc:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fde:	684e      	ldr	r6, [r1, #4]
 8003fe0:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8003fe4:	d001      	beq.n	8003fea <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8003fe6:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003fea:	4a32      	ldr	r2, [pc, #200]	; (80040b4 <HAL_GPIO_Init+0x19c>)
 8003fec:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003ff0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ff2:	680a      	ldr	r2, [r1, #0]
 8003ff4:	fa32 f403 	lsrs.w	r4, r2, r3
 8003ff8:	d058      	beq.n	80040ac <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ffa:	f04f 0c01 	mov.w	ip, #1
 8003ffe:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8004002:	ea1c 0202 	ands.w	r2, ip, r2
 8004006:	d0f3      	beq.n	8003ff0 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004008:	684c      	ldr	r4, [r1, #4]
 800400a:	f004 0403 	and.w	r4, r4, #3
 800400e:	3c01      	subs	r4, #1
 8004010:	2c01      	cmp	r4, #1
 8004012:	d984      	bls.n	8003f1e <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004014:	684c      	ldr	r4, [r1, #4]
 8004016:	f004 0403 	and.w	r4, r4, #3
 800401a:	2c03      	cmp	r4, #3
 800401c:	d00c      	beq.n	8004038 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 800401e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004020:	005d      	lsls	r5, r3, #1
 8004022:	f04f 0c03 	mov.w	ip, #3
 8004026:	fa0c fc05 	lsl.w	ip, ip, r5
 800402a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800402e:	688c      	ldr	r4, [r1, #8]
 8004030:	40ac      	lsls	r4, r5
 8004032:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8004036:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004038:	684c      	ldr	r4, [r1, #4]
 800403a:	f004 0403 	and.w	r4, r4, #3
 800403e:	2c02      	cmp	r4, #2
 8004040:	d082      	beq.n	8003f48 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8004042:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004044:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004048:	f04f 0c03 	mov.w	ip, #3
 800404c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004050:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004054:	684c      	ldr	r4, [r1, #4]
 8004056:	f004 0403 	and.w	r4, r4, #3
 800405a:	fa04 f40e 	lsl.w	r4, r4, lr
 800405e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8004062:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004064:	684c      	ldr	r4, [r1, #4]
 8004066:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800406a:	d0c1      	beq.n	8003ff0 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 800406c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004070:	f10c 0502 	add.w	r5, ip, #2
 8004074:	4c0e      	ldr	r4, [pc, #56]	; (80040b0 <HAL_GPIO_Init+0x198>)
 8004076:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800407a:	f003 0403 	and.w	r4, r3, #3
 800407e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004082:	2407      	movs	r4, #7
 8004084:	fa04 f40e 	lsl.w	r4, r4, lr
 8004088:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800408c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004090:	f43f af71 	beq.w	8003f76 <HAL_GPIO_Init+0x5e>
 8004094:	4c08      	ldr	r4, [pc, #32]	; (80040b8 <HAL_GPIO_Init+0x1a0>)
 8004096:	42a0      	cmp	r0, r4
 8004098:	d006      	beq.n	80040a8 <HAL_GPIO_Init+0x190>
 800409a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800409e:	42a0      	cmp	r0, r4
 80040a0:	f43f af67 	beq.w	8003f72 <HAL_GPIO_Init+0x5a>
 80040a4:	2407      	movs	r4, #7
 80040a6:	e767      	b.n	8003f78 <HAL_GPIO_Init+0x60>
 80040a8:	2401      	movs	r4, #1
 80040aa:	e765      	b.n	8003f78 <HAL_GPIO_Init+0x60>
  }
}
 80040ac:	bd70      	pop	{r4, r5, r6, pc}
 80040ae:	bf00      	nop
 80040b0:	40010000 	.word	0x40010000
 80040b4:	58000800 	.word	0x58000800
 80040b8:	48000400 	.word	0x48000400

080040bc <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80040bc:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80040be:	fa31 f203 	lsrs.w	r2, r1, r3
 80040c2:	d071      	beq.n	80041a8 <HAL_GPIO_DeInit+0xec>
{
 80040c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c6:	e02e      	b.n	8004126 <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80040c8:	2502      	movs	r5, #2
 80040ca:	e000      	b.n	80040ce <HAL_GPIO_DeInit+0x12>
 80040cc:	2500      	movs	r5, #0
 80040ce:	fa05 fc0c 	lsl.w	ip, r5, ip
 80040d2:	45a4      	cmp	ip, r4
 80040d4:	d049      	beq.n	800416a <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80040d6:	6804      	ldr	r4, [r0, #0]
 80040d8:	005d      	lsls	r5, r3, #1
 80040da:	f04f 0c03 	mov.w	ip, #3
 80040de:	fa0c fc05 	lsl.w	ip, ip, r5
 80040e2:	ea44 040c 	orr.w	r4, r4, ip
 80040e6:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80040e8:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80040ec:	f10e 0e08 	add.w	lr, lr, #8
 80040f0:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80040f4:	f003 0507 	and.w	r5, r3, #7
 80040f8:	00ae      	lsls	r6, r5, #2
 80040fa:	250f      	movs	r5, #15
 80040fc:	40b5      	lsls	r5, r6
 80040fe:	ea24 0405 	bic.w	r4, r4, r5
 8004102:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004106:	6884      	ldr	r4, [r0, #8]
 8004108:	ea24 040c 	bic.w	r4, r4, ip
 800410c:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800410e:	6844      	ldr	r4, [r0, #4]
 8004110:	ea24 0202 	bic.w	r2, r4, r2
 8004114:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004116:	68c2      	ldr	r2, [r0, #12]
 8004118:	ea22 020c 	bic.w	r2, r2, ip
 800411c:	60c2      	str	r2, [r0, #12]
    }

    position++;
 800411e:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8004120:	fa31 f203 	lsrs.w	r2, r1, r3
 8004124:	d03f      	beq.n	80041a6 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004126:	2201      	movs	r2, #1
 8004128:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800412a:	ea12 0701 	ands.w	r7, r2, r1
 800412e:	d0f6      	beq.n	800411e <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004130:	089e      	lsrs	r6, r3, #2
 8004132:	1cb5      	adds	r5, r6, #2
 8004134:	4c1d      	ldr	r4, [pc, #116]	; (80041ac <HAL_GPIO_DeInit+0xf0>)
 8004136:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800413a:	f003 0c03 	and.w	ip, r3, #3
 800413e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004142:	f04f 0e07 	mov.w	lr, #7
 8004146:	fa0e fe0c 	lsl.w	lr, lr, ip
 800414a:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800414e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004152:	d0bb      	beq.n	80040cc <HAL_GPIO_DeInit+0x10>
 8004154:	4d16      	ldr	r5, [pc, #88]	; (80041b0 <HAL_GPIO_DeInit+0xf4>)
 8004156:	42a8      	cmp	r0, r5
 8004158:	d005      	beq.n	8004166 <HAL_GPIO_DeInit+0xaa>
 800415a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800415e:	42a8      	cmp	r0, r5
 8004160:	d0b2      	beq.n	80040c8 <HAL_GPIO_DeInit+0xc>
 8004162:	2507      	movs	r5, #7
 8004164:	e7b3      	b.n	80040ce <HAL_GPIO_DeInit+0x12>
 8004166:	2501      	movs	r5, #1
 8004168:	e7b1      	b.n	80040ce <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 800416a:	4c12      	ldr	r4, [pc, #72]	; (80041b4 <HAL_GPIO_DeInit+0xf8>)
 800416c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8004170:	ea25 0507 	bic.w	r5, r5, r7
 8004174:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004178:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800417c:	ea25 0507 	bic.w	r5, r5, r7
 8004180:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8004184:	6825      	ldr	r5, [r4, #0]
 8004186:	ea25 0507 	bic.w	r5, r5, r7
 800418a:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800418c:	6865      	ldr	r5, [r4, #4]
 800418e:	ea25 0707 	bic.w	r7, r5, r7
 8004192:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004194:	4d05      	ldr	r5, [pc, #20]	; (80041ac <HAL_GPIO_DeInit+0xf0>)
 8004196:	3602      	adds	r6, #2
 8004198:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 800419c:	ea24 040e 	bic.w	r4, r4, lr
 80041a0:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 80041a4:	e797      	b.n	80040d6 <HAL_GPIO_DeInit+0x1a>
  }
}
 80041a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40010000 	.word	0x40010000
 80041b0:	48000400 	.word	0x48000400
 80041b4:	58000800 	.word	0x58000800

080041b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041b8:	b10a      	cbz	r2, 80041be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041ba:	6181      	str	r1, [r0, #24]
 80041bc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041be:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80041c0:	4770      	bx	lr

080041c2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041c2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041c4:	ea01 0203 	and.w	r2, r1, r3
 80041c8:	ea21 0103 	bic.w	r1, r1, r3
 80041cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80041d0:	6181      	str	r1, [r0, #24]
}
 80041d2:	4770      	bx	lr

080041d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041d4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041d6:	4b05      	ldr	r3, [pc, #20]	; (80041ec <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	4203      	tst	r3, r0
 80041dc:	d100      	bne.n	80041e0 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80041de:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041e0:	4b02      	ldr	r3, [pc, #8]	; (80041ec <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80041e2:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041e4:	f7fe fb52 	bl	800288c <HAL_GPIO_EXTI_Callback>
}
 80041e8:	e7f9      	b.n	80041de <HAL_GPIO_EXTI_IRQHandler+0xa>
 80041ea:	bf00      	nop
 80041ec:	58000800 	.word	0x58000800

080041f0 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041f0:	4a02      	ldr	r2, [pc, #8]	; (80041fc <HAL_PWR_EnableBkUpAccess+0xc>)
 80041f2:	6813      	ldr	r3, [r2, #0]
 80041f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f8:	6013      	str	r3, [r2, #0]
}
 80041fa:	4770      	bx	lr
 80041fc:	58000400 	.word	0x58000400

08004200 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004200:	b510      	push	{r4, lr}
 8004202:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004204:	b9a0      	cbnz	r0, 8004230 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004206:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <HAL_PWR_EnterSLEEPMode+0x44>)
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800420e:	d10a      	bne.n	8004226 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004210:	4a0d      	ldr	r2, [pc, #52]	; (8004248 <HAL_PWR_EnterSLEEPMode+0x48>)
 8004212:	6913      	ldr	r3, [r2, #16]
 8004214:	f023 0304 	bic.w	r3, r3, #4
 8004218:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800421a:	2c01      	cmp	r4, #1
 800421c:	d010      	beq.n	8004240 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800421e:	bf40      	sev
    __WFE();
 8004220:	bf20      	wfe
    __WFE();
 8004222:	bf20      	wfe
  }
}
 8004224:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004226:	f000 f821 	bl	800426c <HAL_PWREx_DisableLowPowerRunMode>
 800422a:	2800      	cmp	r0, #0
 800422c:	d0f0      	beq.n	8004210 <HAL_PWR_EnterSLEEPMode+0x10>
 800422e:	e7f9      	b.n	8004224 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004230:	4b04      	ldr	r3, [pc, #16]	; (8004244 <HAL_PWR_EnterSLEEPMode+0x44>)
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004238:	d1ea      	bne.n	8004210 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 800423a:	f000 f80f 	bl	800425c <HAL_PWREx_EnableLowPowerRunMode>
 800423e:	e7e7      	b.n	8004210 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8004240:	bf30      	wfi
 8004242:	e7ef      	b.n	8004224 <HAL_PWR_EnterSLEEPMode+0x24>
 8004244:	58000400 	.word	0x58000400
 8004248:	e000ed00 	.word	0xe000ed00

0800424c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 800424c:	4b02      	ldr	r3, [pc, #8]	; (8004258 <HAL_PWREx_GetVoltageRange+0xc>)
 800424e:	6818      	ldr	r0, [r3, #0]
}
 8004250:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	58000400 	.word	0x58000400

0800425c <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800425c:	4a02      	ldr	r2, [pc, #8]	; (8004268 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800425e:	6813      	ldr	r3, [r2, #0]
 8004260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004264:	6013      	str	r3, [r2, #0]
}
 8004266:	4770      	bx	lr
 8004268:	58000400 	.word	0x58000400

0800426c <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800426c:	4a0f      	ldr	r2, [pc, #60]	; (80042ac <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800426e:	6813      	ldr	r3, [r2, #0]
 8004270:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004274:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004276:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2232      	movs	r2, #50	; 0x32
 800427c:	fb02 f303 	mul.w	r3, r2, r3
 8004280:	4a0c      	ldr	r2, [pc, #48]	; (80042b4 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8004282:	fba2 2303 	umull	r2, r3, r2, r3
 8004286:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004288:	e000      	b.n	800428c <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 800428a:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800428c:	4a07      	ldr	r2, [pc, #28]	; (80042ac <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800428e:	6952      	ldr	r2, [r2, #20]
 8004290:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004294:	d001      	beq.n	800429a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f7      	bne.n	800428a <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800429a:	4b04      	ldr	r3, [pc, #16]	; (80042ac <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f413 7f00 	tst.w	r3, #512	; 0x200
 80042a2:	d101      	bne.n	80042a8 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80042a4:	2000      	movs	r0, #0
 80042a6:	4770      	bx	lr
    return HAL_TIMEOUT;
 80042a8:	2003      	movs	r0, #3
}
 80042aa:	4770      	bx	lr
 80042ac:	58000400 	.word	0x58000400
 80042b0:	20000070 	.word	0x20000070
 80042b4:	431bde83 	.word	0x431bde83

080042b8 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80042b8:	4a0c      	ldr	r2, [pc, #48]	; (80042ec <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80042ba:	6813      	ldr	r3, [r2, #0]
 80042bc:	f023 0307 	bic.w	r3, r3, #7
 80042c0:	f043 0302 	orr.w	r3, r3, #2
 80042c4:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80042c6:	4a0a      	ldr	r2, [pc, #40]	; (80042f0 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80042c8:	6913      	ldr	r3, [r2, #16]
 80042ca:	f043 0304 	orr.w	r3, r3, #4
 80042ce:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80042d0:	2801      	cmp	r0, #1
 80042d2:	d008      	beq.n	80042e6 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80042d4:	bf40      	sev
    __WFE();
 80042d6:	bf20      	wfe
    __WFE();
 80042d8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80042da:	4a05      	ldr	r2, [pc, #20]	; (80042f0 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80042dc:	6913      	ldr	r3, [r2, #16]
 80042de:	f023 0304 	bic.w	r3, r3, #4
 80042e2:	6113      	str	r3, [r2, #16]
}
 80042e4:	4770      	bx	lr
    __WFI();
 80042e6:	bf30      	wfi
 80042e8:	e7f7      	b.n	80042da <HAL_PWREx_EnterSTOP2Mode+0x22>
 80042ea:	bf00      	nop
 80042ec:	58000400 	.word	0x58000400
 80042f0:	e000ed00 	.word	0xe000ed00

080042f4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80042f4:	b530      	push	{r4, r5, lr}
 80042f6:	b089      	sub	sp, #36	; 0x24
 80042f8:	4604      	mov	r4, r0
 80042fa:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80042fc:	4b2a      	ldr	r3, [pc, #168]	; (80043a8 <RCC_SetFlashLatency+0xb4>)
 80042fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004302:	9006      	str	r0, [sp, #24]
 8004304:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004308:	f103 0208 	add.w	r2, r3, #8
 800430c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004310:	9004      	str	r0, [sp, #16]
 8004312:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004316:	ad01      	add	r5, sp, #4
 8004318:	3310      	adds	r3, #16
 800431a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800431e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004322:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8004326:	d007      	beq.n	8004338 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004328:	2300      	movs	r3, #0
 800432a:	e014      	b.n	8004356 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 800432c:	aa08      	add	r2, sp, #32
 800432e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004332:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8004336:	e01e      	b.n	8004376 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004338:	2300      	movs	r3, #0
 800433a:	2b02      	cmp	r3, #2
 800433c:	d808      	bhi.n	8004350 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800433e:	aa08      	add	r2, sp, #32
 8004340:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004344:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8004348:	42a2      	cmp	r2, r4
 800434a:	d2ef      	bcs.n	800432c <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800434c:	3301      	adds	r3, #1
 800434e:	e7f4      	b.n	800433a <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004350:	2500      	movs	r5, #0
 8004352:	e010      	b.n	8004376 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004354:	3301      	adds	r3, #1
 8004356:	2b02      	cmp	r3, #2
 8004358:	d80c      	bhi.n	8004374 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800435a:	aa08      	add	r2, sp, #32
 800435c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004360:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8004364:	42a2      	cmp	r2, r4
 8004366:	d3f5      	bcc.n	8004354 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004368:	aa08      	add	r2, sp, #32
 800436a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800436e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8004372:	e000      	b.n	8004376 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004374:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004376:	4a0d      	ldr	r2, [pc, #52]	; (80043ac <RCC_SetFlashLatency+0xb8>)
 8004378:	6813      	ldr	r3, [r2, #0]
 800437a:	f023 0307 	bic.w	r3, r3, #7
 800437e:	432b      	orrs	r3, r5
 8004380:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004382:	f7fd fbad 	bl	8001ae0 <HAL_GetTick>
 8004386:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004388:	4b08      	ldr	r3, [pc, #32]	; (80043ac <RCC_SetFlashLatency+0xb8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	42ab      	cmp	r3, r5
 8004392:	d006      	beq.n	80043a2 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004394:	f7fd fba4 	bl	8001ae0 <HAL_GetTick>
 8004398:	1b00      	subs	r0, r0, r4
 800439a:	2802      	cmp	r0, #2
 800439c:	d9f4      	bls.n	8004388 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 800439e:	2003      	movs	r0, #3
 80043a0:	e000      	b.n	80043a4 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 80043a2:	2000      	movs	r0, #0
}
 80043a4:	b009      	add	sp, #36	; 0x24
 80043a6:	bd30      	pop	{r4, r5, pc}
 80043a8:	080137f8 	.word	0x080137f8
 80043ac:	58004000 	.word	0x58004000

080043b0 <RCC_SetFlashLatencyFromMSIRange>:
{
 80043b0:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80043b2:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80043b8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80043bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	4a08      	ldr	r2, [pc, #32]	; (80043ec <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80043ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80043ce:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80043d2:	f7ff ff3b 	bl	800424c <HAL_PWREx_GetVoltageRange>
 80043d6:	4601      	mov	r1, r0
 80043d8:	4805      	ldr	r0, [pc, #20]	; (80043f0 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80043da:	fba0 3004 	umull	r3, r0, r0, r4
 80043de:	0c80      	lsrs	r0, r0, #18
 80043e0:	f7ff ff88 	bl	80042f4 <RCC_SetFlashLatency>
}
 80043e4:	bd10      	pop	{r4, pc}
 80043e6:	bf00      	nop
 80043e8:	08013d80 	.word	0x08013d80
 80043ec:	08013d20 	.word	0x08013d20
 80043f0:	431bde83 	.word	0x431bde83

080043f4 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80043f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f8:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004400:	f011 010c 	ands.w	r1, r1, #12
 8004404:	d00a      	beq.n	800441c <HAL_RCC_GetSysClockFreq+0x28>
 8004406:	290c      	cmp	r1, #12
 8004408:	d006      	beq.n	8004418 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800440a:	2904      	cmp	r1, #4
 800440c:	d047      	beq.n	800449e <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800440e:	2908      	cmp	r1, #8
 8004410:	d03b      	beq.n	800448a <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8004412:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8004414:	4610      	mov	r0, r2
 8004416:	e026      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004418:	2b01      	cmp	r3, #1
 800441a:	d1f6      	bne.n	800440a <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800441c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f013 0308 	ands.w	r3, r3, #8
 8004426:	d00d      	beq.n	8004444 <HAL_RCC_GetSysClockFreq+0x50>
 8004428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f013 0308 	ands.w	r3, r3, #8
 8004432:	d124      	bne.n	800447e <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004434:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004438:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800443c:	4a2e      	ldr	r2, [pc, #184]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800443e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004442:	e00e      	b.n	8004462 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004444:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	f012 0f08 	tst.w	r2, #8
 800444e:	d112      	bne.n	8004476 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004458:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800445c:	4a26      	ldr	r2, [pc, #152]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800445e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004462:	b1d1      	cbz	r1, 800449a <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8004464:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004470:	2b0c      	cmp	r3, #12
 8004472:	d01a      	beq.n	80044aa <HAL_RCC_GetSysClockFreq+0xb6>
}
 8004474:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004476:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	e7ee      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x68>
 800447e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004482:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004484:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004488:	e7d8      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800448a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8004494:	d106      	bne.n	80044a4 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8004496:	4819      	ldr	r0, [pc, #100]	; (80044fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004498:	e7e5      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 800449a:	4610      	mov	r0, r2
 800449c:	e7e3      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800449e:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 80044a0:	4817      	ldr	r0, [pc, #92]	; (8004500 <HAL_RCC_GetSysClockFreq+0x10c>)
 80044a2:	e7e0      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80044a4:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 80044a6:	4816      	ldr	r0, [pc, #88]	; (8004500 <HAL_RCC_GetSysClockFreq+0x10c>)
 80044a8:	e7dd      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80044aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d009      	beq.n	80044cc <HAL_RCC_GetSysClockFreq+0xd8>
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d108      	bne.n	80044ce <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80044bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80044c6:	d115      	bne.n	80044f4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80044c8:	4a0c      	ldr	r2, [pc, #48]	; (80044fc <HAL_RCC_GetSysClockFreq+0x108>)
 80044ca:	e000      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80044cc:	4a0c      	ldr	r2, [pc, #48]	; (8004500 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80044ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d2:	68d8      	ldr	r0, [r3, #12]
 80044d4:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80044d8:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80044dc:	68d8      	ldr	r0, [r3, #12]
 80044de:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80044e2:	3001      	adds	r0, #1
 80044e4:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80044e8:	68d8      	ldr	r0, [r3, #12]
 80044ea:	0f40      	lsrs	r0, r0, #29
 80044ec:	3001      	adds	r0, #1
 80044ee:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80044f2:	e7bf      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80044f4:	4a02      	ldr	r2, [pc, #8]	; (8004500 <HAL_RCC_GetSysClockFreq+0x10c>)
 80044f6:	e7ea      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0xda>
 80044f8:	08013d80 	.word	0x08013d80
 80044fc:	01e84800 	.word	0x01e84800
 8004500:	00f42400 	.word	0x00f42400

08004504 <HAL_RCC_GetHCLKFreq>:
{
 8004504:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004506:	f7ff ff75 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800450a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004514:	4a02      	ldr	r2, [pc, #8]	; (8004520 <HAL_RCC_GetHCLKFreq+0x1c>)
 8004516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800451a:	fbb0 f0f3 	udiv	r0, r0, r3
 800451e:	bd08      	pop	{r3, pc}
 8004520:	08013d20 	.word	0x08013d20

08004524 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004524:	2800      	cmp	r0, #0
 8004526:	f000 8319 	beq.w	8004b5c <HAL_RCC_OscConfig+0x638>
{
 800452a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452c:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800452e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004532:	689d      	ldr	r5, [r3, #8]
 8004534:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004538:	68de      	ldr	r6, [r3, #12]
 800453a:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800453e:	6803      	ldr	r3, [r0, #0]
 8004540:	f013 0f20 	tst.w	r3, #32
 8004544:	f000 808f 	beq.w	8004666 <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004548:	b1ed      	cbz	r5, 8004586 <HAL_RCC_OscConfig+0x62>
 800454a:	2d0c      	cmp	r5, #12
 800454c:	d019      	beq.n	8004582 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800454e:	6a23      	ldr	r3, [r4, #32]
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 80bc 	beq.w	80046ce <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800455a:	6813      	ldr	r3, [r2, #0]
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004562:	f7fd fabd 	bl	8001ae0 <HAL_GetTick>
 8004566:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f013 0f02 	tst.w	r3, #2
 8004572:	d165      	bne.n	8004640 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004574:	f7fd fab4 	bl	8001ae0 <HAL_GetTick>
 8004578:	1bc0      	subs	r0, r0, r7
 800457a:	2802      	cmp	r0, #2
 800457c:	d9f4      	bls.n	8004568 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 800457e:	2003      	movs	r0, #3
 8004580:	e2f9      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004582:	2e01      	cmp	r6, #1
 8004584:	d1e3      	bne.n	800454e <HAL_RCC_OscConfig+0x2a>
 8004586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f013 0f02 	tst.w	r3, #2
 8004590:	d003      	beq.n	800459a <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004592:	6a23      	ldr	r3, [r4, #32]
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 82e3 	beq.w	8004b60 <HAL_RCC_OscConfig+0x63c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800459a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800459c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f013 0f08 	tst.w	r3, #8
 80045a6:	d029      	beq.n	80045fc <HAL_RCC_OscConfig+0xd8>
 80045a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045b2:	4298      	cmp	r0, r3
 80045b4:	d92a      	bls.n	800460c <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045b6:	f7ff fefb 	bl	80043b0 <RCC_SetFlashLatencyFromMSIRange>
 80045ba:	2800      	cmp	r0, #0
 80045bc:	f040 82d2 	bne.w	8004b64 <HAL_RCC_OscConfig+0x640>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	f042 0208 	orr.w	r2, r2, #8
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80045d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80045d4:	430a      	orrs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80045e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80045e4:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80045e6:	f7ff ff8d 	bl	8004504 <HAL_RCC_GetHCLKFreq>
 80045ea:	4bb0      	ldr	r3, [pc, #704]	; (80048ac <HAL_RCC_OscConfig+0x388>)
 80045ec:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80045ee:	4bb0      	ldr	r3, [pc, #704]	; (80048b0 <HAL_RCC_OscConfig+0x38c>)
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	f7fd fa73 	bl	8001adc <HAL_InitTick>
        if (status != HAL_OK)
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d035      	beq.n	8004666 <HAL_RCC_OscConfig+0x142>
 80045fa:	e2bc      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800460a:	e7d2      	b.n	80045b2 <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800460c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	f042 0208 	orr.w	r2, r2, #8
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800461e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004620:	430a      	orrs	r2, r1
 8004622:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004624:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800462c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004630:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004632:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004634:	f7ff febc 	bl	80043b0 <RCC_SetFlashLatencyFromMSIRange>
 8004638:	2800      	cmp	r0, #0
 800463a:	d0d4      	beq.n	80045e6 <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 800463c:	2001      	movs	r0, #1
 800463e:	e29a      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	f042 0208 	orr.w	r2, r2, #8
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004652:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004654:	430a      	orrs	r2, r1
 8004656:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004658:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004660:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004664:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	f013 0f01 	tst.w	r3, #1
 800466c:	d051      	beq.n	8004712 <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800466e:	2d08      	cmp	r5, #8
 8004670:	d045      	beq.n	80046fe <HAL_RCC_OscConfig+0x1da>
 8004672:	2d0c      	cmp	r5, #12
 8004674:	d041      	beq.n	80046fa <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800467a:	6813      	ldr	r3, [r2, #0]
 800467c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004680:	68a1      	ldr	r1, [r4, #8]
 8004682:	430b      	orrs	r3, r1
 8004684:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004686:	6863      	ldr	r3, [r4, #4]
 8004688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468c:	d063      	beq.n	8004756 <HAL_RCC_OscConfig+0x232>
 800468e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004692:	d065      	beq.n	8004760 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800469e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80046a6:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046a8:	6863      	ldr	r3, [r4, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d063      	beq.n	8004776 <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 80046ae:	f7fd fa17 	bl	8001ae0 <HAL_GetTick>
 80046b2:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80046b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80046be:	d128      	bne.n	8004712 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c0:	f7fd fa0e 	bl	8001ae0 <HAL_GetTick>
 80046c4:	1bc0      	subs	r0, r0, r7
 80046c6:	2864      	cmp	r0, #100	; 0x64
 80046c8:	d9f4      	bls.n	80046b4 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 80046ca:	2003      	movs	r0, #3
 80046cc:	e253      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80046ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046d2:	6813      	ldr	r3, [r2, #0]
 80046d4:	f023 0301 	bic.w	r3, r3, #1
 80046d8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80046da:	f7fd fa01 	bl	8001ae0 <HAL_GetTick>
 80046de:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80046e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f013 0f02 	tst.w	r3, #2
 80046ea:	d0bc      	beq.n	8004666 <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046ec:	f7fd f9f8 	bl	8001ae0 <HAL_GetTick>
 80046f0:	1bc0      	subs	r0, r0, r7
 80046f2:	2802      	cmp	r0, #2
 80046f4:	d9f4      	bls.n	80046e0 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 80046f6:	2003      	movs	r0, #3
 80046f8:	e23d      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046fa:	2e03      	cmp	r6, #3
 80046fc:	d1bb      	bne.n	8004676 <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80046fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004708:	d003      	beq.n	8004712 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800470a:	6863      	ldr	r3, [r4, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 822b 	beq.w	8004b68 <HAL_RCC_OscConfig+0x644>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	f013 0f02 	tst.w	r3, #2
 8004718:	d052      	beq.n	80047c0 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800471a:	2d04      	cmp	r5, #4
 800471c:	d03d      	beq.n	800479a <HAL_RCC_OscConfig+0x276>
 800471e:	2d0c      	cmp	r5, #12
 8004720:	d039      	beq.n	8004796 <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004722:	6923      	ldr	r3, [r4, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8091 	beq.w	800484c <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800472a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800472e:	6813      	ldr	r3, [r2, #0]
 8004730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004734:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004736:	f7fd f9d3 	bl	8001ae0 <HAL_GetTick>
 800473a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800473c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004746:	d177      	bne.n	8004838 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004748:	f7fd f9ca 	bl	8001ae0 <HAL_GetTick>
 800474c:	1b80      	subs	r0, r0, r6
 800474e:	2802      	cmp	r0, #2
 8004750:	d9f4      	bls.n	800473c <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8004752:	2003      	movs	r0, #3
 8004754:	e20f      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004756:	6813      	ldr	r3, [r2, #0]
 8004758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800475c:	6013      	str	r3, [r2, #0]
}
 800475e:	e7a3      	b.n	80046a8 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800476a:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004772:	601a      	str	r2, [r3, #0]
}
 8004774:	e798      	b.n	80046a8 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 8004776:	f7fd f9b3 	bl	8001ae0 <HAL_GetTick>
 800477a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800477c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004786:	d0c4      	beq.n	8004712 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004788:	f7fd f9aa 	bl	8001ae0 <HAL_GetTick>
 800478c:	1bc0      	subs	r0, r0, r7
 800478e:	2864      	cmp	r0, #100	; 0x64
 8004790:	d9f4      	bls.n	800477c <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8004792:	2003      	movs	r0, #3
 8004794:	e1ef      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004796:	2e02      	cmp	r6, #2
 8004798:	d1c3      	bne.n	8004722 <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800479a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80047a4:	d003      	beq.n	80047ae <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047a6:	6923      	ldr	r3, [r4, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 81df 	beq.w	8004b6c <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ae:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80047b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047b4:	6853      	ldr	r3, [r2, #4]
 80047b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80047ba:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80047be:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	f013 0f08 	tst.w	r3, #8
 80047c6:	f000 808e 	beq.w	80048e6 <HAL_RCC_OscConfig+0x3c2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047ca:	69a3      	ldr	r3, [r4, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d071      	beq.n	80048b4 <HAL_RCC_OscConfig+0x390>
      uint32_t csr_temp = RCC->CSR;
 80047d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80047d8:	69e1      	ldr	r1, [r4, #28]
 80047da:	f003 0210 	and.w	r2, r3, #16
 80047de:	4291      	cmp	r1, r2
 80047e0:	d011      	beq.n	8004806 <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80047e2:	f003 0203 	and.w	r2, r3, #3
 80047e6:	2a02      	cmp	r2, #2
 80047e8:	f000 81c2 	beq.w	8004b70 <HAL_RCC_OscConfig+0x64c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80047ec:	f013 0f01 	tst.w	r3, #1
 80047f0:	d142      	bne.n	8004878 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80047f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047f6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80047fa:	f023 0310 	bic.w	r3, r3, #16
 80047fe:	69e1      	ldr	r1, [r4, #28]
 8004800:	430b      	orrs	r3, r1
 8004802:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004806:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800480a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004816:	f7fd f963 	bl	8001ae0 <HAL_GetTick>
 800481a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800481c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004824:	f013 0f02 	tst.w	r3, #2
 8004828:	d15d      	bne.n	80048e6 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800482a:	f7fd f959 	bl	8001ae0 <HAL_GetTick>
 800482e:	1b80      	subs	r0, r0, r6
 8004830:	2811      	cmp	r0, #17
 8004832:	d9f3      	bls.n	800481c <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8004834:	2003      	movs	r0, #3
 8004836:	e19e      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004838:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800483a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800483e:	6853      	ldr	r3, [r2, #4]
 8004840:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004844:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004848:	6053      	str	r3, [r2, #4]
}
 800484a:	e7b9      	b.n	80047c0 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800484c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004850:	6813      	ldr	r3, [r2, #0]
 8004852:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004856:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004858:	f7fd f942 	bl	8001ae0 <HAL_GetTick>
 800485c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800485e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004868:	d0aa      	beq.n	80047c0 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800486a:	f7fd f939 	bl	8001ae0 <HAL_GetTick>
 800486e:	1b80      	subs	r0, r0, r6
 8004870:	2802      	cmp	r0, #2
 8004872:	d9f4      	bls.n	800485e <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8004874:	2003      	movs	r0, #3
 8004876:	e17e      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004878:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800487c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8004888:	f7fd f92a 	bl	8001ae0 <HAL_GetTick>
 800488c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800488e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004896:	f013 0f02 	tst.w	r3, #2
 800489a:	d0aa      	beq.n	80047f2 <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800489c:	f7fd f920 	bl	8001ae0 <HAL_GetTick>
 80048a0:	1b80      	subs	r0, r0, r6
 80048a2:	2811      	cmp	r0, #17
 80048a4:	d9f3      	bls.n	800488e <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 80048a6:	2003      	movs	r0, #3
 80048a8:	e165      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
 80048aa:	bf00      	nop
 80048ac:	20000070 	.word	0x20000070
 80048b0:	20000074 	.word	0x20000074
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80048b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048b8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80048bc:	f023 0301 	bic.w	r3, r3, #1
 80048c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80048c4:	f7fd f90c 	bl	8001ae0 <HAL_GetTick>
 80048c8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80048ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d2:	f013 0f02 	tst.w	r3, #2
 80048d6:	d006      	beq.n	80048e6 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d8:	f7fd f902 	bl	8001ae0 <HAL_GetTick>
 80048dc:	1b80      	subs	r0, r0, r6
 80048de:	2811      	cmp	r0, #17
 80048e0:	d9f3      	bls.n	80048ca <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 80048e2:	2003      	movs	r0, #3
 80048e4:	e147      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	f013 0f04 	tst.w	r3, #4
 80048ec:	f000 80b1 	beq.w	8004a52 <HAL_RCC_OscConfig+0x52e>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80048f0:	4ba8      	ldr	r3, [pc, #672]	; (8004b94 <HAL_RCC_OscConfig+0x670>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80048f8:	d110      	bne.n	800491c <HAL_RCC_OscConfig+0x3f8>
      HAL_PWR_EnableBkUpAccess();
 80048fa:	f7ff fc79 	bl	80041f0 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80048fe:	f7fd f8ef 	bl	8001ae0 <HAL_GetTick>
 8004902:	4606      	mov	r6, r0
 8004904:	4ba3      	ldr	r3, [pc, #652]	; (8004b94 <HAL_RCC_OscConfig+0x670>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f413 7f80 	tst.w	r3, #256	; 0x100
 800490c:	d106      	bne.n	800491c <HAL_RCC_OscConfig+0x3f8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800490e:	f7fd f8e7 	bl	8001ae0 <HAL_GetTick>
 8004912:	1b80      	subs	r0, r0, r6
 8004914:	2802      	cmp	r0, #2
 8004916:	d9f5      	bls.n	8004904 <HAL_RCC_OscConfig+0x3e0>
          return HAL_TIMEOUT;
 8004918:	2003      	movs	r0, #3
 800491a:	e12c      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800491c:	68e3      	ldr	r3, [r4, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d061      	beq.n	80049e6 <HAL_RCC_OscConfig+0x4c2>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004922:	2b85      	cmp	r3, #133	; 0x85
 8004924:	d001      	beq.n	800492a <HAL_RCC_OscConfig+0x406>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004926:	2b05      	cmp	r3, #5
 8004928:	d107      	bne.n	800493a <HAL_RCC_OscConfig+0x416>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800492a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800492e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004932:	f043 0304 	orr.w	r3, r3, #4
 8004936:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800493a:	f7fd f8d1 	bl	8001ae0 <HAL_GetTick>
 800493e:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004944:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004958:	f013 0f02 	tst.w	r3, #2
 800495c:	d108      	bne.n	8004970 <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495e:	f7fd f8bf 	bl	8001ae0 <HAL_GetTick>
 8004962:	1b80      	subs	r0, r0, r6
 8004964:	f241 3388 	movw	r3, #5000	; 0x1388
 8004968:	4298      	cmp	r0, r3
 800496a:	d9f1      	bls.n	8004950 <HAL_RCC_OscConfig+0x42c>
          return HAL_TIMEOUT;
 800496c:	2003      	movs	r0, #3
 800496e:	e102      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004970:	68e3      	ldr	r3, [r4, #12]
 8004972:	2b81      	cmp	r3, #129	; 0x81
 8004974:	d001      	beq.n	800497a <HAL_RCC_OscConfig+0x456>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004976:	2b85      	cmp	r3, #133	; 0x85
 8004978:	d11a      	bne.n	80049b0 <HAL_RCC_OscConfig+0x48c>
        tickstart = HAL_GetTick();
 800497a:	f7fd f8b1 	bl	8001ae0 <HAL_GetTick>
 800497e:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004980:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004984:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004998:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800499c:	d159      	bne.n	8004a52 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800499e:	f7fd f89f 	bl	8001ae0 <HAL_GetTick>
 80049a2:	1b80      	subs	r0, r0, r6
 80049a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80049a8:	4298      	cmp	r0, r3
 80049aa:	d9f1      	bls.n	8004990 <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 80049ac:	2003      	movs	r0, #3
 80049ae:	e0e2      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
        tickstart = HAL_GetTick();
 80049b0:	f7fd f896 	bl	8001ae0 <HAL_GetTick>
 80049b4:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80049b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80049be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ce:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80049d2:	d03e      	beq.n	8004a52 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d4:	f7fd f884 	bl	8001ae0 <HAL_GetTick>
 80049d8:	1b80      	subs	r0, r0, r6
 80049da:	f241 3388 	movw	r3, #5000	; 0x1388
 80049de:	4298      	cmp	r0, r3
 80049e0:	d9f1      	bls.n	80049c6 <HAL_RCC_OscConfig+0x4a2>
            return HAL_TIMEOUT;
 80049e2:	2003      	movs	r0, #3
 80049e4:	e0c7      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 80049e6:	f7fd f87b 	bl	8001ae0 <HAL_GetTick>
 80049ea:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80049ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049f0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80049f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a04:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004a08:	d008      	beq.n	8004a1c <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0a:	f7fd f869 	bl	8001ae0 <HAL_GetTick>
 8004a0e:	1b80      	subs	r0, r0, r6
 8004a10:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a14:	4298      	cmp	r0, r3
 8004a16:	d9f1      	bls.n	80049fc <HAL_RCC_OscConfig+0x4d8>
          return HAL_TIMEOUT;
 8004a18:	2003      	movs	r0, #3
 8004a1a:	e0ac      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 8004a1c:	f7fd f860 	bl	8001ae0 <HAL_GetTick>
 8004a20:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a26:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a2a:	f023 0301 	bic.w	r3, r3, #1
 8004a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3a:	f013 0f02 	tst.w	r3, #2
 8004a3e:	d008      	beq.n	8004a52 <HAL_RCC_OscConfig+0x52e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a40:	f7fd f84e 	bl	8001ae0 <HAL_GetTick>
 8004a44:	1b80      	subs	r0, r0, r6
 8004a46:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a4a:	4298      	cmp	r0, r3
 8004a4c:	d9f1      	bls.n	8004a32 <HAL_RCC_OscConfig+0x50e>
          return HAL_TIMEOUT;
 8004a4e:	2003      	movs	r0, #3
 8004a50:	e091      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 808d 	beq.w	8004b74 <HAL_RCC_OscConfig+0x650>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a5a:	2d0c      	cmp	r5, #12
 8004a5c:	d062      	beq.n	8004b24 <HAL_RCC_OscConfig+0x600>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d01f      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x57e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004a6c:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	f022 0203 	bic.w	r2, r2, #3
 8004a74:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8004a7c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004a80:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8004a82:	f7fd f82d 	bl	8001ae0 <HAL_GetTick>
 8004a86:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004a92:	d073      	beq.n	8004b7c <HAL_RCC_OscConfig+0x658>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a94:	f7fd f824 	bl	8001ae0 <HAL_GetTick>
 8004a98:	1b00      	subs	r0, r0, r4
 8004a9a:	280a      	cmp	r0, #10
 8004a9c:	d9f4      	bls.n	8004a88 <HAL_RCC_OscConfig+0x564>
            return HAL_TIMEOUT;
 8004a9e:	2003      	movs	r0, #3
 8004aa0:	e069      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004aa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aa6:	6813      	ldr	r3, [r2, #0]
 8004aa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aac:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004aae:	f7fd f817 	bl	8001ae0 <HAL_GetTick>
 8004ab2:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004abe:	d12a      	bne.n	8004b16 <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ac0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ac4:	68d3      	ldr	r3, [r2, #12]
 8004ac6:	4934      	ldr	r1, [pc, #208]	; (8004b98 <HAL_RCC_OscConfig+0x674>)
 8004ac8:	4019      	ands	r1, r3
 8004aca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004acc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004ace:	4303      	orrs	r3, r0
 8004ad0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004ad2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004ad6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004ad8:	4303      	orrs	r3, r0
 8004ada:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004adc:	4303      	orrs	r3, r0
 8004ade:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004ae0:	4303      	orrs	r3, r0
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004ae6:	6813      	ldr	r3, [r2, #0]
 8004ae8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aec:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aee:	68d3      	ldr	r3, [r2, #12]
 8004af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af4:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004af6:	f7fc fff3 	bl	8001ae0 <HAL_GetTick>
 8004afa:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004b06:	d137      	bne.n	8004b78 <HAL_RCC_OscConfig+0x654>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b08:	f7fc ffea 	bl	8001ae0 <HAL_GetTick>
 8004b0c:	1b00      	subs	r0, r0, r4
 8004b0e:	280a      	cmp	r0, #10
 8004b10:	d9f4      	bls.n	8004afc <HAL_RCC_OscConfig+0x5d8>
            return HAL_TIMEOUT;
 8004b12:	2003      	movs	r0, #3
 8004b14:	e02f      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b16:	f7fc ffe3 	bl	8001ae0 <HAL_GetTick>
 8004b1a:	1b40      	subs	r0, r0, r5
 8004b1c:	280a      	cmp	r0, #10
 8004b1e:	d9c9      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 8004b20:	2003      	movs	r0, #3
 8004b22:	e028      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d02b      	beq.n	8004b80 <HAL_RCC_OscConfig+0x65c>
        pll_config = RCC->PLLCFGR;
 8004b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2c:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004b2e:	f003 0103 	and.w	r1, r3, #3
 8004b32:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004b34:	4291      	cmp	r1, r2
 8004b36:	d125      	bne.n	8004b84 <HAL_RCC_OscConfig+0x660>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004b38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b3e:	428a      	cmp	r2, r1
 8004b40:	d122      	bne.n	8004b88 <HAL_RCC_OscConfig+0x664>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004b42:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004b48:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004b4c:	d11e      	bne.n	8004b8c <HAL_RCC_OscConfig+0x668>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004b4e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8004b52:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d11b      	bne.n	8004b90 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 8004b58:	2000      	movs	r0, #0
 8004b5a:	e00c      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
    return HAL_ERROR;
 8004b5c:	2001      	movs	r0, #1
}
 8004b5e:	4770      	bx	lr
        return HAL_ERROR;
 8004b60:	2001      	movs	r0, #1
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
            return HAL_ERROR;
 8004b64:	2001      	movs	r0, #1
 8004b66:	e006      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8004b68:	2001      	movs	r0, #1
 8004b6a:	e004      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8004b6c:	2001      	movs	r0, #1
 8004b6e:	e002      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8004b70:	2001      	movs	r0, #1
 8004b72:	e000      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
  return HAL_OK;
 8004b74:	2000      	movs	r0, #0
}
 8004b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8004b78:	2000      	movs	r0, #0
 8004b7a:	e7fc      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	e7fa      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8004b80:	2001      	movs	r0, #1
 8004b82:	e7f8      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8004b84:	2001      	movs	r0, #1
 8004b86:	e7f6      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
 8004b88:	2001      	movs	r0, #1
 8004b8a:	e7f4      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	e7f2      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
 8004b90:	2001      	movs	r0, #1
 8004b92:	e7f0      	b.n	8004b76 <HAL_RCC_OscConfig+0x652>
 8004b94:	58000400 	.word	0x58000400
 8004b98:	11c1808c 	.word	0x11c1808c

08004b9c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	f000 8127 	beq.w	8004df0 <HAL_RCC_ClockConfig+0x254>
{
 8004ba2:	b570      	push	{r4, r5, r6, lr}
 8004ba4:	460c      	mov	r4, r1
 8004ba6:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba8:	4b93      	ldr	r3, [pc, #588]	; (8004df8 <HAL_RCC_ClockConfig+0x25c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	428b      	cmp	r3, r1
 8004bb2:	d32d      	bcc.n	8004c10 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb4:	682b      	ldr	r3, [r5, #0]
 8004bb6:	f013 0f02 	tst.w	r3, #2
 8004bba:	d13f      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004bbc:	682b      	ldr	r3, [r5, #0]
 8004bbe:	f013 0f20 	tst.w	r3, #32
 8004bc2:	d153      	bne.n	8004c6c <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004bc4:	682b      	ldr	r3, [r5, #0]
 8004bc6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004bca:	d16a      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bcc:	682b      	ldr	r3, [r5, #0]
 8004bce:	f013 0f04 	tst.w	r3, #4
 8004bd2:	f040 8083 	bne.w	8004cdc <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd6:	682b      	ldr	r3, [r5, #0]
 8004bd8:	f013 0f08 	tst.w	r3, #8
 8004bdc:	f040 8097 	bne.w	8004d0e <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	f013 0f01 	tst.w	r3, #1
 8004be6:	f000 80de 	beq.w	8004da6 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bea:	686b      	ldr	r3, [r5, #4]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	f000 80a8 	beq.w	8004d42 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	f000 80ad 	beq.w	8004d52 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f040 80b2 	bne.w	8004d62 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004bfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c02:	6812      	ldr	r2, [r2, #0]
 8004c04:	f012 0f02 	tst.w	r2, #2
 8004c08:	f040 80b1 	bne.w	8004d6e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004c0c:	2001      	movs	r0, #1
 8004c0e:	e0ee      	b.n	8004dee <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c10:	4a79      	ldr	r2, [pc, #484]	; (8004df8 <HAL_RCC_ClockConfig+0x25c>)
 8004c12:	6813      	ldr	r3, [r2, #0]
 8004c14:	f023 0307 	bic.w	r3, r3, #7
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004c1c:	f7fc ff60 	bl	8001ae0 <HAL_GetTick>
 8004c20:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c22:	4b75      	ldr	r3, [pc, #468]	; (8004df8 <HAL_RCC_ClockConfig+0x25c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	42a3      	cmp	r3, r4
 8004c2c:	d0c2      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c2e:	f7fc ff57 	bl	8001ae0 <HAL_GetTick>
 8004c32:	1b80      	subs	r0, r0, r6
 8004c34:	2802      	cmp	r0, #2
 8004c36:	d9f4      	bls.n	8004c22 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8004c38:	2003      	movs	r0, #3
 8004c3a:	e0d8      	b.n	8004dee <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004c3c:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c42:	688a      	ldr	r2, [r1, #8]
 8004c44:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004c4c:	f7fc ff48 	bl	8001ae0 <HAL_GetTick>
 8004c50:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004c5c:	d1ae      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c5e:	f7fc ff3f 	bl	8001ae0 <HAL_GetTick>
 8004c62:	1b80      	subs	r0, r0, r6
 8004c64:	2802      	cmp	r0, #2
 8004c66:	d9f4      	bls.n	8004c52 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8004c68:	2003      	movs	r0, #3
 8004c6a:	e0c0      	b.n	8004dee <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004c6c:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c72:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8004c76:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004c80:	f7fc ff2e 	bl	8001ae0 <HAL_GetTick>
 8004c84:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004c8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004c92:	d197      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c94:	f7fc ff24 	bl	8001ae0 <HAL_GetTick>
 8004c98:	1b80      	subs	r0, r0, r6
 8004c9a:	2802      	cmp	r0, #2
 8004c9c:	d9f3      	bls.n	8004c86 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8004c9e:	2003      	movs	r0, #3
 8004ca0:	e0a5      	b.n	8004dee <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004ca2:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ca8:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8004cac:	f023 030f 	bic.w	r3, r3, #15
 8004cb0:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8004cb4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004cb8:	f7fc ff12 	bl	8001ae0 <HAL_GetTick>
 8004cbc:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004cc6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004cca:	f47f af7f 	bne.w	8004bcc <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cce:	f7fc ff07 	bl	8001ae0 <HAL_GetTick>
 8004cd2:	1b80      	subs	r0, r0, r6
 8004cd4:	2802      	cmp	r0, #2
 8004cd6:	d9f2      	bls.n	8004cbe <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8004cd8:	2003      	movs	r0, #3
 8004cda:	e088      	b.n	8004dee <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004cdc:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004cde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ce2:	688a      	ldr	r2, [r1, #8]
 8004ce4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004cec:	f7fc fef8 	bl	8001ae0 <HAL_GetTick>
 8004cf0:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004cfc:	f47f af6b 	bne.w	8004bd6 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d00:	f7fc feee 	bl	8001ae0 <HAL_GetTick>
 8004d04:	1b80      	subs	r0, r0, r6
 8004d06:	2802      	cmp	r0, #2
 8004d08:	d9f3      	bls.n	8004cf2 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8004d0a:	2003      	movs	r0, #3
 8004d0c:	e06f      	b.n	8004dee <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004d0e:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d14:	6893      	ldr	r3, [r2, #8]
 8004d16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004d1a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004d1e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004d20:	f7fc fede 	bl	8001ae0 <HAL_GetTick>
 8004d24:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004d30:	f47f af56 	bne.w	8004be0 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d34:	f7fc fed4 	bl	8001ae0 <HAL_GetTick>
 8004d38:	1b80      	subs	r0, r0, r6
 8004d3a:	2802      	cmp	r0, #2
 8004d3c:	d9f3      	bls.n	8004d26 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8004d3e:	2003      	movs	r0, #3
 8004d40:	e055      	b.n	8004dee <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d46:	6812      	ldr	r2, [r2, #0]
 8004d48:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004d4c:	d10f      	bne.n	8004d6e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004d4e:	2001      	movs	r0, #1
 8004d50:	e04d      	b.n	8004dee <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004d52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d56:	6812      	ldr	r2, [r2, #0]
 8004d58:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004d5c:	d107      	bne.n	8004d6e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004d5e:	2001      	movs	r0, #1
 8004d60:	e045      	b.n	8004dee <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d66:	6812      	ldr	r2, [r2, #0]
 8004d68:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004d6c:	d042      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d72:	688a      	ldr	r2, [r1, #8]
 8004d74:	f022 0203 	bic.w	r2, r2, #3
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004d7c:	f7fc feb0 	bl	8001ae0 <HAL_GetTick>
 8004d80:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d8c:	686a      	ldr	r2, [r5, #4]
 8004d8e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004d92:	d008      	beq.n	8004da6 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d94:	f7fc fea4 	bl	8001ae0 <HAL_GetTick>
 8004d98:	1b80      	subs	r0, r0, r6
 8004d9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d9e:	4298      	cmp	r0, r3
 8004da0:	d9ef      	bls.n	8004d82 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8004da2:	2003      	movs	r0, #3
 8004da4:	e023      	b.n	8004dee <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004da6:	4b14      	ldr	r3, [pc, #80]	; (8004df8 <HAL_RCC_ClockConfig+0x25c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	42a3      	cmp	r3, r4
 8004db0:	d915      	bls.n	8004dde <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db2:	4a11      	ldr	r2, [pc, #68]	; (8004df8 <HAL_RCC_ClockConfig+0x25c>)
 8004db4:	6813      	ldr	r3, [r2, #0]
 8004db6:	f023 0307 	bic.w	r3, r3, #7
 8004dba:	4323      	orrs	r3, r4
 8004dbc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004dbe:	f7fc fe8f 	bl	8001ae0 <HAL_GetTick>
 8004dc2:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <HAL_RCC_ClockConfig+0x25c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	42a3      	cmp	r3, r4
 8004dce:	d006      	beq.n	8004dde <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004dd0:	f7fc fe86 	bl	8001ae0 <HAL_GetTick>
 8004dd4:	1b40      	subs	r0, r0, r5
 8004dd6:	2802      	cmp	r0, #2
 8004dd8:	d9f4      	bls.n	8004dc4 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8004dda:	2003      	movs	r0, #3
 8004ddc:	e007      	b.n	8004dee <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004dde:	f7ff fb91 	bl	8004504 <HAL_RCC_GetHCLKFreq>
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <HAL_RCC_ClockConfig+0x260>)
 8004de4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004de6:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <HAL_RCC_ClockConfig+0x264>)
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	f7fc fe77 	bl	8001adc <HAL_InitTick>
}
 8004dee:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004df0:	2001      	movs	r0, #1
}
 8004df2:	4770      	bx	lr
        return HAL_ERROR;
 8004df4:	2001      	movs	r0, #1
 8004df6:	e7fa      	b.n	8004dee <HAL_RCC_ClockConfig+0x252>
 8004df8:	58004000 	.word	0x58004000
 8004dfc:	20000070 	.word	0x20000070
 8004e00:	20000074 	.word	0x20000074

08004e04 <HAL_RCC_GetPCLK1Freq>:
{
 8004e04:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004e06:	f7ff fb7d 	bl	8004504 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004e14:	4a02      	ldr	r2, [pc, #8]	; (8004e20 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004e1a:	40d8      	lsrs	r0, r3
 8004e1c:	bd08      	pop	{r3, pc}
 8004e1e:	bf00      	nop
 8004e20:	08013d60 	.word	0x08013d60

08004e24 <HAL_RCC_GetPCLK2Freq>:
{
 8004e24:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004e26:	f7ff fb6d 	bl	8004504 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004e34:	4a02      	ldr	r2, [pc, #8]	; (8004e40 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004e3a:	40d8      	lsrs	r0, r3
 8004e3c:	bd08      	pop	{r3, pc}
 8004e3e:	bf00      	nop
 8004e40:	08013d60 	.word	0x08013d60

08004e44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e48:	6803      	ldr	r3, [r0, #0]
 8004e4a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004e4e:	f040 80ab 	bne.w	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004e52:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	f013 0f01 	tst.w	r3, #1
 8004e5a:	d00a      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e5c:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e62:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004e66:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004e6a:	b292      	uxth	r2, r2
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	f013 0f02 	tst.w	r3, #2
 8004e78:	d00a      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e7a:	68a2      	ldr	r2, [r4, #8]
 8004e7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e80:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004e84:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004e88:	b292      	uxth	r2, r2
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	f013 0f20 	tst.w	r3, #32
 8004e96:	d009      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e98:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004e9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e9e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004ea2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004eb2:	d00c      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004eb4:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004eb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eba:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004ebe:	0c02      	lsrs	r2, r0, #16
 8004ec0:	0412      	lsls	r2, r2, #16
 8004ec2:	ea23 0302 	bic.w	r3, r3, r2
 8004ec6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004ed4:	d00c      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ed6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004ed8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004edc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004ee0:	0c02      	lsrs	r2, r0, #16
 8004ee2:	0412      	lsls	r2, r2, #16
 8004ee4:	ea23 0302 	bic.w	r3, r3, r2
 8004ee8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004ef6:	d00c      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004ef8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004efe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004f02:	0c02      	lsrs	r2, r0, #16
 8004f04:	0412      	lsls	r2, r2, #16
 8004f06:	ea23 0302 	bic.w	r3, r3, r2
 8004f0a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f18:	f040 809e 	bne.w	8005058 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004f22:	f040 80aa 	bne.w	800507a <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004f2c:	f040 80b6 	bne.w	800509c <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	f013 0f10 	tst.w	r3, #16
 8004f36:	d00e      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004f38:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004f3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f3e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004f42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004f4c:	68e3      	ldr	r3, [r4, #12]
 8004f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f52:	f000 80b4 	beq.w	80050be <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004f5c:	d00f      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004f60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f64:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004f68:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f74:	b91b      	cbnz	r3, 8004f7e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004f76:	68cb      	ldr	r3, [r1, #12]
 8004f78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f7c:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004f84:	d00e      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004f88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f8c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004f90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004f9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa0:	f000 8092 	beq.w	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8004fa8:	f7ff f922 	bl	80041f0 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8004fac:	f7fc fd98 	bl	8001ae0 <HAL_GetTick>
 8004fb0:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004fb2:	4b48      	ldr	r3, [pc, #288]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004fba:	d106      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fbc:	f7fc fd90 	bl	8001ae0 <HAL_GetTick>
 8004fc0:	1b40      	subs	r0, r0, r5
 8004fc2:	2802      	cmp	r0, #2
 8004fc4:	d9f5      	bls.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8004fc6:	2503      	movs	r5, #3
 8004fc8:	e000      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004fca:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8004fcc:	2d00      	cmp	r5, #0
 8004fce:	f47f af41 	bne.w	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004fde:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d024      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004fec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ff0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004ff4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004ff8:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ffc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005000:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005004:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8005008:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800500c:	f012 0f02 	tst.w	r2, #2
 8005010:	d10f      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8005012:	2d00      	cmp	r5, #0
 8005014:	f47f af1e 	bne.w	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005018:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800501a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800501e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005022:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800502c:	e712      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 800502e:	2200      	movs	r2, #0
 8005030:	e7ec      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8005032:	f7fc fd55 	bl	8001ae0 <HAL_GetTick>
 8005036:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005040:	f013 0f02 	tst.w	r3, #2
 8005044:	d1e5      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005046:	f7fc fd4b 	bl	8001ae0 <HAL_GetTick>
 800504a:	1b80      	subs	r0, r0, r6
 800504c:	f241 3388 	movw	r3, #5000	; 0x1388
 8005050:	4298      	cmp	r0, r3
 8005052:	d9f1      	bls.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8005054:	2503      	movs	r5, #3
 8005056:	e7dc      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005058:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800505a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800505e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005062:	0919      	lsrs	r1, r3, #4
 8005064:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8005068:	ea22 0201 	bic.w	r2, r2, r1
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8005078:	e750      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800507a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800507c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8005080:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005084:	0919      	lsrs	r1, r3, #4
 8005086:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800508a:	ea22 0201 	bic.w	r2, r2, r1
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800509a:	e744      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800509c:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800509e:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80050a2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80050a6:	0919      	lsrs	r1, r3, #4
 80050a8:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80050ac:	ea22 0201 	bic.w	r2, r2, r1
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80050bc:	e738      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80050be:	68cb      	ldr	r3, [r1, #12]
 80050c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050c4:	60cb      	str	r3, [r1, #12]
 80050c6:	e746      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050c8:	68cb      	ldr	r3, [r1, #12]
 80050ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ce:	60cb      	str	r3, [r1, #12]
 80050d0:	e768      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80050d2:	bf00      	nop
 80050d4:	58000400 	.word	0x58000400

080050d8 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050d8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d036      	beq.n	800514e <HAL_RTC_DeactivateAlarm+0x76>
 80050e0:	2301      	movs	r3, #1
 80050e2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050e6:	2302      	movs	r3, #2
 80050e8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050ec:	4b19      	ldr	r3, [pc, #100]	; (8005154 <HAL_RTC_DeactivateAlarm+0x7c>)
 80050ee:	22ca      	movs	r2, #202	; 0xca
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24
 80050f2:	2253      	movs	r2, #83	; 0x53
 80050f4:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80050f6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80050fa:	d019      	beq.n	8005130 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80050fc:	4b15      	ldr	r3, [pc, #84]	; (8005154 <HAL_RTC_DeactivateAlarm+0x7c>)
 80050fe:	699a      	ldr	r2, [r3, #24]
 8005100:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8005104:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8005106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005108:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800510c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800510e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005110:	f022 0202 	bic.w	r2, r2, #2
 8005114:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005116:	2202      	movs	r2, #2
 8005118:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800511a:	4b0e      	ldr	r3, [pc, #56]	; (8005154 <HAL_RTC_DeactivateAlarm+0x7c>)
 800511c:	22ff      	movs	r2, #255	; 0xff
 800511e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005120:	2301      	movs	r3, #1
 8005122:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005126:	2300      	movs	r3, #0
 8005128:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 800512c:	4618      	mov	r0, r3
 800512e:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005130:	699a      	ldr	r2, [r3, #24]
 8005132:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8005136:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8005138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800513a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800513e:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005140:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005142:	f022 0201 	bic.w	r2, r2, #1
 8005146:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005148:	2201      	movs	r2, #1
 800514a:	65da      	str	r2, [r3, #92]	; 0x5c
 800514c:	e7e5      	b.n	800511a <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 800514e:	2002      	movs	r0, #2
}
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40002800 	.word	0x40002800

08005158 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800515c:	4b0d      	ldr	r3, [pc, #52]	; (8005194 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800515e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8005160:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005162:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8005164:	f015 0f01 	tst.w	r5, #1
 8005168:	d106      	bne.n	8005178 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800516a:	f015 0f02 	tst.w	r5, #2
 800516e:	d109      	bne.n	8005184 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005170:	2301      	movs	r3, #1
 8005172:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8005176:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005178:	4b06      	ldr	r3, [pc, #24]	; (8005194 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800517a:	2201      	movs	r2, #1
 800517c:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 800517e:	f7fc fea9 	bl	8001ed4 <HAL_RTC_AlarmAEventCallback>
 8005182:	e7f2      	b.n	800516a <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005184:	4b03      	ldr	r3, [pc, #12]	; (8005194 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8005186:	2202      	movs	r2, #2
 8005188:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800518a:	4620      	mov	r0, r4
 800518c:	f000 f9e6 	bl	800555c <HAL_RTCEx_AlarmBEventCallback>
 8005190:	e7ee      	b.n	8005170 <HAL_RTC_AlarmIRQHandler+0x18>
 8005192:	bf00      	nop
 8005194:	40002800 	.word	0x40002800

08005198 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005198:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800519a:	4a0b      	ldr	r2, [pc, #44]	; (80051c8 <HAL_RTC_WaitForSynchro+0x30>)
 800519c:	68d3      	ldr	r3, [r2, #12]
 800519e:	f023 0320 	bic.w	r3, r3, #32
 80051a2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80051a4:	f7fc fc9c 	bl	8001ae0 <HAL_GetTick>
 80051a8:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80051aa:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <HAL_RTC_WaitForSynchro+0x30>)
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f013 0f20 	tst.w	r3, #32
 80051b2:	d107      	bne.n	80051c4 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051b4:	f7fc fc94 	bl	8001ae0 <HAL_GetTick>
 80051b8:	1b00      	subs	r0, r0, r4
 80051ba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80051be:	d9f4      	bls.n	80051aa <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 80051c0:	2003      	movs	r0, #3
 80051c2:	e000      	b.n	80051c6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80051c4:	2000      	movs	r0, #0
}
 80051c6:	bd10      	pop	{r4, pc}
 80051c8:	40002800 	.word	0x40002800

080051cc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80051cc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80051ce:	4b11      	ldr	r3, [pc, #68]	; (8005214 <RTC_EnterInitMode+0x48>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80051d6:	d002      	beq.n	80051de <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80051d8:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 80051da:	4620      	mov	r0, r4
 80051dc:	bd70      	pop	{r4, r5, r6, pc}
 80051de:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80051e0:	4a0c      	ldr	r2, [pc, #48]	; (8005214 <RTC_EnterInitMode+0x48>)
 80051e2:	68d3      	ldr	r3, [r2, #12]
 80051e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e8:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80051ea:	f7fc fc79 	bl	8001ae0 <HAL_GetTick>
 80051ee:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 80051f0:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80051f2:	4b08      	ldr	r3, [pc, #32]	; (8005214 <RTC_EnterInitMode+0x48>)
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80051fa:	d1ee      	bne.n	80051da <RTC_EnterInitMode+0xe>
 80051fc:	2c03      	cmp	r4, #3
 80051fe:	d0ec      	beq.n	80051da <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005200:	f7fc fc6e 	bl	8001ae0 <HAL_GetTick>
 8005204:	1b43      	subs	r3, r0, r5
 8005206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800520a:	d9f2      	bls.n	80051f2 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800520c:	2403      	movs	r4, #3
 800520e:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8005212:	e7ee      	b.n	80051f2 <RTC_EnterInitMode+0x26>
 8005214:	40002800 	.word	0x40002800

08005218 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005218:	b510      	push	{r4, lr}
 800521a:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800521c:	4b11      	ldr	r3, [pc, #68]	; (8005264 <RTC_ExitInitMode+0x4c>)
 800521e:	68da      	ldr	r2, [r3, #12]
 8005220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005224:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f013 0f20 	tst.w	r3, #32
 800522c:	d107      	bne.n	800523e <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800522e:	f7ff ffb3 	bl	8005198 <HAL_RTC_WaitForSynchro>
 8005232:	4603      	mov	r3, r0
 8005234:	b1a0      	cbz	r0, 8005260 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800523c:	e010      	b.n	8005260 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800523e:	4a09      	ldr	r2, [pc, #36]	; (8005264 <RTC_ExitInitMode+0x4c>)
 8005240:	6993      	ldr	r3, [r2, #24]
 8005242:	f023 0320 	bic.w	r3, r3, #32
 8005246:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005248:	f7ff ffa6 	bl	8005198 <HAL_RTC_WaitForSynchro>
 800524c:	4603      	mov	r3, r0
 800524e:	b110      	cbz	r0, 8005256 <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005256:	4903      	ldr	r1, [pc, #12]	; (8005264 <RTC_ExitInitMode+0x4c>)
 8005258:	698a      	ldr	r2, [r1, #24]
 800525a:	f042 0220 	orr.w	r2, r2, #32
 800525e:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 8005260:	4618      	mov	r0, r3
 8005262:	bd10      	pop	{r4, pc}
 8005264:	40002800 	.word	0x40002800

08005268 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8005268:	2800      	cmp	r0, #0
 800526a:	d04a      	beq.n	8005302 <HAL_RTC_Init+0x9a>
{
 800526c:	b538      	push	{r3, r4, r5, lr}
 800526e:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005270:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8005274:	b19b      	cbz	r3, 800529e <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005276:	2302      	movs	r3, #2
 8005278:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800527c:	4b22      	ldr	r3, [pc, #136]	; (8005308 <HAL_RTC_Init+0xa0>)
 800527e:	22ca      	movs	r2, #202	; 0xca
 8005280:	625a      	str	r2, [r3, #36]	; 0x24
 8005282:	2253      	movs	r2, #83	; 0x53
 8005284:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8005286:	4620      	mov	r0, r4
 8005288:	f7ff ffa0 	bl	80051cc <RTC_EnterInitMode>
    if (status == HAL_OK)
 800528c:	b160      	cbz	r0, 80052a8 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800528e:	4b1e      	ldr	r3, [pc, #120]	; (8005308 <HAL_RTC_Init+0xa0>)
 8005290:	22ff      	movs	r2, #255	; 0xff
 8005292:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8005294:	b910      	cbnz	r0, 800529c <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 8005296:	2301      	movs	r3, #1
 8005298:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800529c:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 800529e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 80052a2:	f7fc fa7f 	bl	80017a4 <HAL_RTC_MspInit>
 80052a6:	e7e6      	b.n	8005276 <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80052a8:	4b17      	ldr	r3, [pc, #92]	; (8005308 <HAL_RTC_Init+0xa0>)
 80052aa:	699a      	ldr	r2, [r3, #24]
 80052ac:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 80052b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b4:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80052b6:	6999      	ldr	r1, [r3, #24]
 80052b8:	6862      	ldr	r2, [r4, #4]
 80052ba:	6920      	ldr	r0, [r4, #16]
 80052bc:	4302      	orrs	r2, r0
 80052be:	69a0      	ldr	r0, [r4, #24]
 80052c0:	4302      	orrs	r2, r0
 80052c2:	430a      	orrs	r2, r1
 80052c4:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80052c6:	68e2      	ldr	r2, [r4, #12]
 80052c8:	68a1      	ldr	r1, [r4, #8]
 80052ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80052ce:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80052d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80052d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80052da:	4301      	orrs	r1, r0
 80052dc:	430a      	orrs	r2, r1
 80052de:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 80052e0:	4620      	mov	r0, r4
 80052e2:	f7ff ff99 	bl	8005218 <RTC_ExitInitMode>
      if (status == HAL_OK)
 80052e6:	2800      	cmp	r0, #0
 80052e8:	d1d1      	bne.n	800528e <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 80052ea:	4907      	ldr	r1, [pc, #28]	; (8005308 <HAL_RTC_Init+0xa0>)
 80052ec:	698b      	ldr	r3, [r1, #24]
 80052ee:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80052f2:	6a22      	ldr	r2, [r4, #32]
 80052f4:	69e5      	ldr	r5, [r4, #28]
 80052f6:	432a      	orrs	r2, r5
 80052f8:	6965      	ldr	r5, [r4, #20]
 80052fa:	432a      	orrs	r2, r5
 80052fc:	4313      	orrs	r3, r2
 80052fe:	618b      	str	r3, [r1, #24]
 8005300:	e7c5      	b.n	800528e <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 8005302:	2001      	movs	r0, #1
}
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40002800 	.word	0x40002800

0800530c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800530c:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 800530e:	e002      	b.n	8005316 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8005310:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8005312:	380a      	subs	r0, #10
 8005314:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8005316:	2809      	cmp	r0, #9
 8005318:	d8fa      	bhi.n	8005310 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	b2db      	uxtb	r3, r3
}
 800531e:	4318      	orrs	r0, r3
 8005320:	4770      	bx	lr
	...

08005324 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8005324:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005328:	2b01      	cmp	r3, #1
 800532a:	f000 80b0 	beq.w	800548e <HAL_RTC_SetAlarm_IT+0x16a>
{
 800532e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005332:	4605      	mov	r5, r0
 8005334:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8005336:	2301      	movs	r3, #1
 8005338:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800533c:	2302      	movs	r3, #2
 800533e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8005342:	4b54      	ldr	r3, [pc, #336]	; (8005494 <HAL_RTC_SetAlarm_IT+0x170>)
 8005344:	68de      	ldr	r6, [r3, #12]
 8005346:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 800534a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800534e:	d043      	beq.n	80053d8 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8005350:	bb12      	cbnz	r2, 8005398 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005358:	d101      	bne.n	800535e <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800535a:	2300      	movs	r3, #0
 800535c:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800535e:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005362:	7820      	ldrb	r0, [r4, #0]
 8005364:	f7ff ffd2 	bl	800530c <RTC_ByteToBcd2>
 8005368:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800536a:	7860      	ldrb	r0, [r4, #1]
 800536c:	f7ff ffce 	bl	800530c <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005370:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005374:	78a0      	ldrb	r0, [r4, #2]
 8005376:	f7ff ffc9 	bl	800530c <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800537a:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800537c:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800537e:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005382:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8005386:	f7ff ffc1 	bl	800530c <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800538a:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800538e:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005390:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005392:	ea48 0000 	orr.w	r0, r8, r0
 8005396:	e020      	b.n	80053da <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8005398:	6948      	ldr	r0, [r1, #20]
 800539a:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 800539e:	d009      	beq.n	80053b4 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80053a0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80053a4:	d006      	beq.n	80053b4 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80053a6:	4b3b      	ldr	r3, [pc, #236]	; (8005494 <HAL_RTC_SetAlarm_IT+0x170>)
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80053ae:	d101      	bne.n	80053b4 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053b4:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80053b6:	7863      	ldrb	r3, [r4, #1]
 80053b8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80053be:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80053c0:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80053c2:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80053c4:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80053c8:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80053cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80053d0:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80053d2:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053d4:	4318      	orrs	r0, r3
 80053d6:	e000      	b.n	80053da <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80053d8:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053da:	4b2e      	ldr	r3, [pc, #184]	; (8005494 <HAL_RTC_SetAlarm_IT+0x170>)
 80053dc:	22ca      	movs	r2, #202	; 0xca
 80053de:	625a      	str	r2, [r3, #36]	; 0x24
 80053e0:	2253      	movs	r2, #83	; 0x53
 80053e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80053e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80053e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ea:	d02a      	beq.n	8005442 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80053ec:	4b29      	ldr	r3, [pc, #164]	; (8005494 <HAL_RTC_SetAlarm_IT+0x170>)
 80053ee:	699a      	ldr	r2, [r3, #24]
 80053f0:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80053f4:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80053f6:	2202      	movs	r2, #2
 80053f8:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80053fa:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80053fe:	d040      	beq.n	8005482 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8005400:	4b24      	ldr	r3, [pc, #144]	; (8005494 <HAL_RTC_SetAlarm_IT+0x170>)
 8005402:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8005404:	69a2      	ldr	r2, [r4, #24]
 8005406:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8005408:	6862      	ldr	r2, [r4, #4]
 800540a:	4b22      	ldr	r3, [pc, #136]	; (8005494 <HAL_RTC_SetAlarm_IT+0x170>)
 800540c:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800540e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005410:	f042 0202 	orr.w	r2, r2, #2
 8005414:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005416:	699a      	ldr	r2, [r3, #24]
 8005418:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 800541c:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800541e:	4a1e      	ldr	r2, [pc, #120]	; (8005498 <HAL_RTC_SetAlarm_IT+0x174>)
 8005420:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8005424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005428:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800542c:	4b19      	ldr	r3, [pc, #100]	; (8005494 <HAL_RTC_SetAlarm_IT+0x170>)
 800542e:	22ff      	movs	r2, #255	; 0xff
 8005430:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005432:	2301      	movs	r3, #1
 8005434:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8005438:	2000      	movs	r0, #0
 800543a:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 800543e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005442:	4b14      	ldr	r3, [pc, #80]	; (8005494 <HAL_RTC_SetAlarm_IT+0x170>)
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800544a:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800544c:	2201      	movs	r2, #1
 800544e:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005450:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005454:	d00f      	beq.n	8005476 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005456:	4b0f      	ldr	r3, [pc, #60]	; (8005494 <HAL_RTC_SetAlarm_IT+0x170>)
 8005458:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800545a:	69a2      	ldr	r2, [r4, #24]
 800545c:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800545e:	6862      	ldr	r2, [r4, #4]
 8005460:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <HAL_RTC_SetAlarm_IT+0x170>)
 8005462:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005464:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8005472:	619a      	str	r2, [r3, #24]
 8005474:	e7d3      	b.n	800541e <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8005476:	69a3      	ldr	r3, [r4, #24]
 8005478:	69e2      	ldr	r2, [r4, #28]
 800547a:	4313      	orrs	r3, r2
 800547c:	4a05      	ldr	r2, [pc, #20]	; (8005494 <HAL_RTC_SetAlarm_IT+0x170>)
 800547e:	6453      	str	r3, [r2, #68]	; 0x44
 8005480:	e7ed      	b.n	800545e <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005482:	69a3      	ldr	r3, [r4, #24]
 8005484:	69e2      	ldr	r2, [r4, #28]
 8005486:	4313      	orrs	r3, r2
 8005488:	4a02      	ldr	r2, [pc, #8]	; (8005494 <HAL_RTC_SetAlarm_IT+0x170>)
 800548a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800548c:	e7bc      	b.n	8005408 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 800548e:	2002      	movs	r0, #2
}
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40002800 	.word	0x40002800
 8005498:	58000800 	.word	0x58000800

0800549c <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800549c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d017      	beq.n	80054d4 <HAL_RTCEx_EnableBypassShadow+0x38>
 80054a4:	2101      	movs	r1, #1
 80054a6:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054aa:	2302      	movs	r3, #2
 80054ac:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054b0:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 80054b2:	22ca      	movs	r2, #202	; 0xca
 80054b4:	625a      	str	r2, [r3, #36]	; 0x24
 80054b6:	2253      	movs	r2, #83	; 0x53
 80054b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80054ba:	699a      	ldr	r2, [r3, #24]
 80054bc:	f042 0220 	orr.w	r2, r2, #32
 80054c0:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054c2:	22ff      	movs	r2, #255	; 0xff
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80054c6:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054ca:	2300      	movs	r3, #0
 80054cc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80054d0:	4618      	mov	r0, r3
 80054d2:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80054d4:	2002      	movs	r0, #2
}
 80054d6:	4770      	bx	lr
 80054d8:	40002800 	.word	0x40002800

080054dc <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054dc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d020      	beq.n	8005526 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 80054e4:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 80054e6:	2101      	movs	r1, #1
 80054e8:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054ec:	2302      	movs	r3, #2
 80054ee:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054f2:	4b0e      	ldr	r3, [pc, #56]	; (800552c <HAL_RTCEx_SetSSRU_IT+0x50>)
 80054f4:	22ca      	movs	r2, #202	; 0xca
 80054f6:	625a      	str	r2, [r3, #36]	; 0x24
 80054f8:	2253      	movs	r2, #83	; 0x53
 80054fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005502:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8005504:	4c0a      	ldr	r4, [pc, #40]	; (8005530 <HAL_RTCEx_SetSSRU_IT+0x54>)
 8005506:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800550a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800550e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005512:	22ff      	movs	r2, #255	; 0xff
 8005514:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005516:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800551a:	2300      	movs	r3, #0
 800551c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8005520:	4618      	mov	r0, r3
}
 8005522:	bc10      	pop	{r4}
 8005524:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8005526:	2002      	movs	r0, #2
}
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40002800 	.word	0x40002800
 8005530:	58000800 	.word	0x58000800

08005534 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005534:	b510      	push	{r4, lr}
 8005536:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8005538:	4b07      	ldr	r3, [pc, #28]	; (8005558 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 800553a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005540:	d103      	bne.n	800554a <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005542:	2301      	movs	r3, #1
 8005544:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8005548:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 800554a:	4b03      	ldr	r3, [pc, #12]	; (8005558 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 800554c:	2240      	movs	r2, #64	; 0x40
 800554e:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8005550:	f7fc fcc4 	bl	8001edc <HAL_RTCEx_SSRUEventCallback>
 8005554:	e7f5      	b.n	8005542 <HAL_RTCEx_SSRUIRQHandler+0xe>
 8005556:	bf00      	nop
 8005558:	40002800 	.word	0x40002800

0800555c <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800555c:	4770      	bx	lr

0800555e <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800555e:	0089      	lsls	r1, r1, #2
 8005560:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005564:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005568:	600a      	str	r2, [r1, #0]
}
 800556a:	4770      	bx	lr

0800556c <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800556c:	0089      	lsls	r1, r1, #2
 800556e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005572:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005576:	6808      	ldr	r0, [r1, #0]
}
 8005578:	4770      	bx	lr
	...

0800557c <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800557c:	4b07      	ldr	r3, [pc, #28]	; (800559c <SUBGHZSPI_Init+0x20>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005584:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005586:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 800558a:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800558c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005590:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005598:	601a      	str	r2, [r3, #0]
}
 800559a:	4770      	bx	lr
 800559c:	58010000 	.word	0x58010000

080055a0 <HAL_SUBGHZ_Init>:
{
 80055a0:	b530      	push	{r4, r5, lr}
 80055a2:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 80055a4:	2800      	cmp	r0, #0
 80055a6:	d04e      	beq.n	8005646 <HAL_SUBGHZ_Init+0xa6>
 80055a8:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80055aa:	7983      	ldrb	r3, [r0, #6]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d03b      	beq.n	8005628 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80055b0:	2302      	movs	r3, #2
 80055b2:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80055b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055b8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80055bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80055c4:	4b21      	ldr	r3, [pc, #132]	; (800564c <HAL_SUBGHZ_Init+0xac>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80055cc:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80055d0:	2264      	movs	r2, #100	; 0x64
 80055d2:	fb02 f303 	mul.w	r3, r2, r3
 80055d6:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 80055d8:	9b01      	ldr	r3, [sp, #4]
 80055da:	b34b      	cbz	r3, 8005630 <HAL_SUBGHZ_Init+0x90>
    count--;
 80055dc:	9b01      	ldr	r3, [sp, #4]
 80055de:	3b01      	subs	r3, #1
 80055e0:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80055e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ea:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80055ee:	d1f3      	bne.n	80055d8 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 80055f0:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80055f2:	4b17      	ldr	r3, [pc, #92]	; (8005650 <HAL_SUBGHZ_Init+0xb0>)
 80055f4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80055f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005600:	4914      	ldr	r1, [pc, #80]	; (8005654 <HAL_SUBGHZ_Init+0xb4>)
 8005602:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005606:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800560a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005614:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005616:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800561a:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 800561c:	b15d      	cbz	r5, 8005636 <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800561e:	2301      	movs	r3, #1
 8005620:	71a3      	strb	r3, [r4, #6]
}
 8005622:	4628      	mov	r0, r5
 8005624:	b003      	add	sp, #12
 8005626:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 8005628:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 800562a:	f7fc f96b 	bl	8001904 <HAL_SUBGHZ_MspInit>
 800562e:	e7bf      	b.n	80055b0 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005630:	2501      	movs	r5, #1
 8005632:	60a5      	str	r5, [r4, #8]
      break;
 8005634:	e7dd      	b.n	80055f2 <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005636:	6820      	ldr	r0, [r4, #0]
 8005638:	f7ff ffa0 	bl	800557c <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800563c:	2301      	movs	r3, #1
 800563e:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005640:	2300      	movs	r3, #0
 8005642:	60a3      	str	r3, [r4, #8]
 8005644:	e7eb      	b.n	800561e <HAL_SUBGHZ_Init+0x7e>
    return status;
 8005646:	2501      	movs	r5, #1
 8005648:	e7eb      	b.n	8005622 <HAL_SUBGHZ_Init+0x82>
 800564a:	bf00      	nop
 800564c:	20000070 	.word	0x20000070
 8005650:	58000400 	.word	0x58000400
 8005654:	58000800 	.word	0x58000800

08005658 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005658:	b082      	sub	sp, #8
 800565a:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800565c:	4b1a      	ldr	r3, [pc, #104]	; (80056c8 <SUBGHZSPI_Transmit+0x70>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005664:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005668:	2064      	movs	r0, #100	; 0x64
 800566a:	fb00 f303 	mul.w	r3, r0, r3
 800566e:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005670:	9b01      	ldr	r3, [sp, #4]
 8005672:	b14b      	cbz	r3, 8005688 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005674:	9b01      	ldr	r3, [sp, #4]
 8005676:	3b01      	subs	r3, #1
 8005678:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800567a:	4b14      	ldr	r3, [pc, #80]	; (80056cc <SUBGHZSPI_Transmit+0x74>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f013 0f02 	tst.w	r3, #2
 8005682:	d0f5      	beq.n	8005670 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005684:	2000      	movs	r0, #0
 8005686:	e001      	b.n	800568c <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005688:	2001      	movs	r0, #1
 800568a:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 800568c:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <SUBGHZSPI_Transmit+0x74>)
 800568e:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005690:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <SUBGHZSPI_Transmit+0x70>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005698:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800569c:	2164      	movs	r1, #100	; 0x64
 800569e:	fb01 f303 	mul.w	r3, r1, r3
 80056a2:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80056a4:	9b01      	ldr	r3, [sp, #4]
 80056a6:	b143      	cbz	r3, 80056ba <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80056a8:	9b01      	ldr	r3, [sp, #4]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80056ae:	4b07      	ldr	r3, [pc, #28]	; (80056cc <SUBGHZSPI_Transmit+0x74>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f013 0f01 	tst.w	r3, #1
 80056b6:	d0f5      	beq.n	80056a4 <SUBGHZSPI_Transmit+0x4c>
 80056b8:	e001      	b.n	80056be <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80056ba:	2001      	movs	r0, #1
 80056bc:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80056be:	4b03      	ldr	r3, [pc, #12]	; (80056cc <SUBGHZSPI_Transmit+0x74>)
 80056c0:	68db      	ldr	r3, [r3, #12]

  return status;
}
 80056c2:	b002      	add	sp, #8
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	20000070 	.word	0x20000070
 80056cc:	58010000 	.word	0x58010000

080056d0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80056d0:	b082      	sub	sp, #8
 80056d2:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80056d4:	4b1c      	ldr	r3, [pc, #112]	; (8005748 <SUBGHZSPI_Receive+0x78>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80056dc:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80056e0:	2064      	movs	r0, #100	; 0x64
 80056e2:	fb00 f303 	mul.w	r3, r0, r3
 80056e6:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80056e8:	9b01      	ldr	r3, [sp, #4]
 80056ea:	b14b      	cbz	r3, 8005700 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80056ec:	9b01      	ldr	r3, [sp, #4]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80056f2:	4b16      	ldr	r3, [pc, #88]	; (800574c <SUBGHZSPI_Receive+0x7c>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f013 0f02 	tst.w	r3, #2
 80056fa:	d0f5      	beq.n	80056e8 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80056fc:	2000      	movs	r0, #0
 80056fe:	e001      	b.n	8005704 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005700:	2001      	movs	r0, #1
 8005702:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8005704:	4b11      	ldr	r3, [pc, #68]	; (800574c <SUBGHZSPI_Receive+0x7c>)
 8005706:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800570a:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800570e:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <SUBGHZSPI_Receive+0x78>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005716:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800571a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800571e:	fb0c f303 	mul.w	r3, ip, r3
 8005722:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005724:	9b01      	ldr	r3, [sp, #4]
 8005726:	b143      	cbz	r3, 800573a <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005728:	9b01      	ldr	r3, [sp, #4]
 800572a:	3b01      	subs	r3, #1
 800572c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800572e:	4b07      	ldr	r3, [pc, #28]	; (800574c <SUBGHZSPI_Receive+0x7c>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f013 0f01 	tst.w	r3, #1
 8005736:	d0f5      	beq.n	8005724 <SUBGHZSPI_Receive+0x54>
 8005738:	e001      	b.n	800573e <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800573a:	2001      	movs	r0, #1
 800573c:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800573e:	4b03      	ldr	r3, [pc, #12]	; (800574c <SUBGHZSPI_Receive+0x7c>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	700b      	strb	r3, [r1, #0]

  return status;
}
 8005744:	b002      	add	sp, #8
 8005746:	4770      	bx	lr
 8005748:	20000070 	.word	0x20000070
 800574c:	58010000 	.word	0x58010000

08005750 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005750:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005752:	4b13      	ldr	r3, [pc, #76]	; (80057a0 <SUBGHZ_WaitOnBusy+0x50>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800575a:	f3c3 434b 	ubfx	r3, r3, #17, #12
 800575e:	2264      	movs	r2, #100	; 0x64
 8005760:	fb02 f303 	mul.w	r3, r2, r3
 8005764:	9301      	str	r3, [sp, #4]
 8005766:	e006      	b.n	8005776 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8005768:	2302      	movs	r3, #2
 800576a:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 800576c:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 800576e:	b002      	add	sp, #8
 8005770:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005772:	4213      	tst	r3, r2
 8005774:	d012      	beq.n	800579c <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005776:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <SUBGHZ_WaitOnBusy+0x54>)
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	f013 0304 	ands.w	r3, r3, #4
 800577e:	d000      	beq.n	8005782 <SUBGHZ_WaitOnBusy+0x32>
 8005780:	2301      	movs	r3, #1
    if (count == 0U)
 8005782:	9a01      	ldr	r2, [sp, #4]
 8005784:	2a00      	cmp	r2, #0
 8005786:	d0ef      	beq.n	8005768 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8005788:	9a01      	ldr	r2, [sp, #4]
 800578a:	3a01      	subs	r2, #1
 800578c:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800578e:	4a05      	ldr	r2, [pc, #20]	; (80057a4 <SUBGHZ_WaitOnBusy+0x54>)
 8005790:	6952      	ldr	r2, [r2, #20]
 8005792:	f012 0202 	ands.w	r2, r2, #2
 8005796:	d0ec      	beq.n	8005772 <SUBGHZ_WaitOnBusy+0x22>
 8005798:	2201      	movs	r2, #1
 800579a:	e7ea      	b.n	8005772 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 800579c:	2000      	movs	r0, #0
 800579e:	e7e6      	b.n	800576e <SUBGHZ_WaitOnBusy+0x1e>
 80057a0:	20000070 	.word	0x20000070
 80057a4:	58000400 	.word	0x58000400

080057a8 <SUBGHZ_CheckDeviceReady>:
{
 80057a8:	b500      	push	{lr}
 80057aa:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80057ac:	7903      	ldrb	r3, [r0, #4]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d004      	beq.n	80057bc <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80057b2:	f7ff ffcd 	bl	8005750 <SUBGHZ_WaitOnBusy>
}
 80057b6:	b003      	add	sp, #12
 80057b8:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 80057bc:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <SUBGHZ_CheckDeviceReady+0x4c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80057c4:	f3c3 334f 	ubfx	r3, r3, #13, #16
 80057c8:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80057ca:	4a0b      	ldr	r2, [pc, #44]	; (80057f8 <SUBGHZ_CheckDeviceReady+0x50>)
 80057cc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80057d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 80057d8:	9b01      	ldr	r3, [sp, #4]
 80057da:	3b01      	subs	r3, #1
 80057dc:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 80057de:	9b01      	ldr	r3, [sp, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1f9      	bne.n	80057d8 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80057e4:	4a04      	ldr	r2, [pc, #16]	; (80057f8 <SUBGHZ_CheckDeviceReady+0x50>)
 80057e6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80057ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80057f2:	e7de      	b.n	80057b2 <SUBGHZ_CheckDeviceReady+0xa>
 80057f4:	20000070 	.word	0x20000070
 80057f8:	58000400 	.word	0x58000400

080057fc <HAL_SUBGHZ_WriteRegisters>:
{
 80057fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005800:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005802:	7980      	ldrb	r0, [r0, #6]
 8005804:	fa5f f880 	uxtb.w	r8, r0
 8005808:	f1b8 0f01 	cmp.w	r8, #1
 800580c:	d13e      	bne.n	800588c <HAL_SUBGHZ_WriteRegisters+0x90>
 800580e:	460c      	mov	r4, r1
 8005810:	4617      	mov	r7, r2
 8005812:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005814:	796b      	ldrb	r3, [r5, #5]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d03b      	beq.n	8005892 <HAL_SUBGHZ_WriteRegisters+0x96>
 800581a:	2301      	movs	r3, #1
 800581c:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800581e:	2302      	movs	r3, #2
 8005820:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005822:	4628      	mov	r0, r5
 8005824:	f7ff ffc0 	bl	80057a8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005828:	4a1b      	ldr	r2, [pc, #108]	; (8005898 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 800582a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800582e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005836:	210d      	movs	r1, #13
 8005838:	4628      	mov	r0, r5
 800583a:	f7ff ff0d 	bl	8005658 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800583e:	0a21      	lsrs	r1, r4, #8
 8005840:	4628      	mov	r0, r5
 8005842:	f7ff ff09 	bl	8005658 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005846:	b2e1      	uxtb	r1, r4
 8005848:	4628      	mov	r0, r5
 800584a:	f7ff ff05 	bl	8005658 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800584e:	2400      	movs	r4, #0
 8005850:	e005      	b.n	800585e <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005852:	5d39      	ldrb	r1, [r7, r4]
 8005854:	4628      	mov	r0, r5
 8005856:	f7ff feff 	bl	8005658 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800585a:	3401      	adds	r4, #1
 800585c:	b2a4      	uxth	r4, r4
 800585e:	42b4      	cmp	r4, r6
 8005860:	d3f7      	bcc.n	8005852 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005862:	4a0d      	ldr	r2, [pc, #52]	; (8005898 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005864:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800586c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005870:	4628      	mov	r0, r5
 8005872:	f7ff ff6d 	bl	8005750 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005876:	68ab      	ldr	r3, [r5, #8]
 8005878:	b90b      	cbnz	r3, 800587e <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 800587a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800587e:	2301      	movs	r3, #1
 8005880:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005882:	2300      	movs	r3, #0
 8005884:	716b      	strb	r3, [r5, #5]
}
 8005886:	4640      	mov	r0, r8
 8005888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800588c:	f04f 0802 	mov.w	r8, #2
 8005890:	e7f9      	b.n	8005886 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8005892:	f04f 0802 	mov.w	r8, #2
 8005896:	e7f6      	b.n	8005886 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8005898:	58000400 	.word	0x58000400

0800589c <HAL_SUBGHZ_ReadRegisters>:
{
 800589c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80058a2:	7980      	ldrb	r0, [r0, #6]
 80058a4:	fa5f f880 	uxtb.w	r8, r0
 80058a8:	f1b8 0f01 	cmp.w	r8, #1
 80058ac:	d141      	bne.n	8005932 <HAL_SUBGHZ_ReadRegisters+0x96>
 80058ae:	460c      	mov	r4, r1
 80058b0:	4615      	mov	r5, r2
 80058b2:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80058b4:	7973      	ldrb	r3, [r6, #5]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d03e      	beq.n	8005938 <HAL_SUBGHZ_ReadRegisters+0x9c>
 80058ba:	2301      	movs	r3, #1
 80058bc:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80058be:	4630      	mov	r0, r6
 80058c0:	f7ff ff72 	bl	80057a8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80058c4:	4a1e      	ldr	r2, [pc, #120]	; (8005940 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80058c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80058ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80058d2:	211d      	movs	r1, #29
 80058d4:	4630      	mov	r0, r6
 80058d6:	f7ff febf 	bl	8005658 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80058da:	0a21      	lsrs	r1, r4, #8
 80058dc:	4630      	mov	r0, r6
 80058de:	f7ff febb 	bl	8005658 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80058e2:	b2e1      	uxtb	r1, r4
 80058e4:	4630      	mov	r0, r6
 80058e6:	f7ff feb7 	bl	8005658 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80058ea:	2100      	movs	r1, #0
 80058ec:	4630      	mov	r0, r6
 80058ee:	f7ff feb3 	bl	8005658 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80058f2:	2400      	movs	r4, #0
 80058f4:	e006      	b.n	8005904 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80058f6:	4629      	mov	r1, r5
 80058f8:	4630      	mov	r0, r6
 80058fa:	f7ff fee9 	bl	80056d0 <SUBGHZSPI_Receive>
      pData++;
 80058fe:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005900:	3401      	adds	r4, #1
 8005902:	b2a4      	uxth	r4, r4
 8005904:	42bc      	cmp	r4, r7
 8005906:	d3f6      	bcc.n	80058f6 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005908:	4a0d      	ldr	r2, [pc, #52]	; (8005940 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800590a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800590e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005916:	4630      	mov	r0, r6
 8005918:	f7ff ff1a 	bl	8005750 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800591c:	68b3      	ldr	r3, [r6, #8]
 800591e:	b90b      	cbnz	r3, 8005924 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8005920:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005924:	2301      	movs	r3, #1
 8005926:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005928:	2300      	movs	r3, #0
 800592a:	7173      	strb	r3, [r6, #5]
}
 800592c:	4640      	mov	r0, r8
 800592e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005932:	f04f 0802 	mov.w	r8, #2
 8005936:	e7f9      	b.n	800592c <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8005938:	f04f 0802 	mov.w	r8, #2
 800593c:	e7f6      	b.n	800592c <HAL_SUBGHZ_ReadRegisters+0x90>
 800593e:	bf00      	nop
 8005940:	58000400 	.word	0x58000400

08005944 <HAL_SUBGHZ_ExecSetCmd>:
{
 8005944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005948:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800594a:	7980      	ldrb	r0, [r0, #6]
 800594c:	fa5f f980 	uxtb.w	r9, r0
 8005950:	f1b9 0f01 	cmp.w	r9, #1
 8005954:	d143      	bne.n	80059de <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8005956:	4688      	mov	r8, r1
 8005958:	4617      	mov	r7, r2
 800595a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800595c:	796b      	ldrb	r3, [r5, #5]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d040      	beq.n	80059e4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8005962:	2301      	movs	r3, #1
 8005964:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005966:	4628      	mov	r0, r5
 8005968:	f7ff ff1e 	bl	80057a8 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800596c:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8005970:	d005      	beq.n	800597e <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8005972:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8005976:	d002      	beq.n	800597e <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005978:	2300      	movs	r3, #0
 800597a:	712b      	strb	r3, [r5, #4]
 800597c:	e001      	b.n	8005982 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800597e:	2301      	movs	r3, #1
 8005980:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005982:	4a1a      	ldr	r2, [pc, #104]	; (80059ec <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005984:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005988:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800598c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005990:	4641      	mov	r1, r8
 8005992:	4628      	mov	r0, r5
 8005994:	f7ff fe60 	bl	8005658 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005998:	2400      	movs	r4, #0
 800599a:	e005      	b.n	80059a8 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800599c:	5d39      	ldrb	r1, [r7, r4]
 800599e:	4628      	mov	r0, r5
 80059a0:	f7ff fe5a 	bl	8005658 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80059a4:	3401      	adds	r4, #1
 80059a6:	b2a4      	uxth	r4, r4
 80059a8:	42b4      	cmp	r4, r6
 80059aa:	d3f7      	bcc.n	800599c <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80059ac:	4a0f      	ldr	r2, [pc, #60]	; (80059ec <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80059ae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80059b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 80059ba:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 80059be:	d10a      	bne.n	80059d6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80059c0:	68ab      	ldr	r3, [r5, #8]
 80059c2:	b90b      	cbnz	r3, 80059c8 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 80059c4:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80059c8:	2301      	movs	r3, #1
 80059ca:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80059cc:	2300      	movs	r3, #0
 80059ce:	716b      	strb	r3, [r5, #5]
}
 80059d0:	4648      	mov	r0, r9
 80059d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80059d6:	4628      	mov	r0, r5
 80059d8:	f7ff feba 	bl	8005750 <SUBGHZ_WaitOnBusy>
 80059dc:	e7f0      	b.n	80059c0 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 80059de:	f04f 0902 	mov.w	r9, #2
 80059e2:	e7f5      	b.n	80059d0 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 80059e4:	f04f 0902 	mov.w	r9, #2
 80059e8:	e7f2      	b.n	80059d0 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 80059ea:	bf00      	nop
 80059ec:	58000400 	.word	0x58000400

080059f0 <HAL_SUBGHZ_ExecGetCmd>:
{
 80059f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f4:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80059f6:	7980      	ldrb	r0, [r0, #6]
 80059f8:	fa5f f880 	uxtb.w	r8, r0
 80059fc:	f1b8 0f01 	cmp.w	r8, #1
 8005a00:	d139      	bne.n	8005a76 <HAL_SUBGHZ_ExecGetCmd+0x86>
 8005a02:	460c      	mov	r4, r1
 8005a04:	4615      	mov	r5, r2
 8005a06:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005a08:	7973      	ldrb	r3, [r6, #5]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d036      	beq.n	8005a7c <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005a12:	4630      	mov	r0, r6
 8005a14:	f7ff fec8 	bl	80057a8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005a18:	4a1a      	ldr	r2, [pc, #104]	; (8005a84 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8005a1a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005a26:	4621      	mov	r1, r4
 8005a28:	4630      	mov	r0, r6
 8005a2a:	f7ff fe15 	bl	8005658 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005a2e:	2100      	movs	r1, #0
 8005a30:	4630      	mov	r0, r6
 8005a32:	f7ff fe11 	bl	8005658 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005a36:	2400      	movs	r4, #0
 8005a38:	e006      	b.n	8005a48 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	f7ff fe47 	bl	80056d0 <SUBGHZSPI_Receive>
      pData++;
 8005a42:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005a44:	3401      	adds	r4, #1
 8005a46:	b2a4      	uxth	r4, r4
 8005a48:	42bc      	cmp	r4, r7
 8005a4a:	d3f6      	bcc.n	8005a3a <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005a4c:	4a0d      	ldr	r2, [pc, #52]	; (8005a84 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8005a4e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	f7ff fe78 	bl	8005750 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005a60:	68b3      	ldr	r3, [r6, #8]
 8005a62:	b90b      	cbnz	r3, 8005a68 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8005a64:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	7173      	strb	r3, [r6, #5]
}
 8005a70:	4640      	mov	r0, r8
 8005a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005a76:	f04f 0802 	mov.w	r8, #2
 8005a7a:	e7f9      	b.n	8005a70 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8005a7c:	f04f 0802 	mov.w	r8, #2
 8005a80:	e7f6      	b.n	8005a70 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8005a82:	bf00      	nop
 8005a84:	58000400 	.word	0x58000400

08005a88 <HAL_SUBGHZ_IRQHandler>:
{
 8005a88:	b530      	push	{r4, r5, lr}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005a94:	2302      	movs	r3, #2
 8005a96:	aa01      	add	r2, sp, #4
 8005a98:	2112      	movs	r1, #18
 8005a9a:	f7ff ffa9 	bl	80059f0 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005a9e:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005aa2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005aa6:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005aaa:	f013 0f01 	tst.w	r3, #1
 8005aae:	d126      	bne.n	8005afe <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005ab0:	f014 0f02 	tst.w	r4, #2
 8005ab4:	d127      	bne.n	8005b06 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005ab6:	f014 0f04 	tst.w	r4, #4
 8005aba:	d128      	bne.n	8005b0e <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005abc:	f014 0f08 	tst.w	r4, #8
 8005ac0:	d129      	bne.n	8005b16 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005ac2:	f014 0f10 	tst.w	r4, #16
 8005ac6:	d12a      	bne.n	8005b1e <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005ac8:	f014 0f20 	tst.w	r4, #32
 8005acc:	d12b      	bne.n	8005b26 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005ace:	f014 0f40 	tst.w	r4, #64	; 0x40
 8005ad2:	d12c      	bne.n	8005b2e <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005ad4:	f014 0f80 	tst.w	r4, #128	; 0x80
 8005ad8:	d006      	beq.n	8005ae8 <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8005ada:	f414 7f80 	tst.w	r4, #256	; 0x100
 8005ade:	d02a      	beq.n	8005b36 <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f00b feea 	bl	80118bc <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8005ae8:	f414 7f00 	tst.w	r4, #512	; 0x200
 8005aec:	d128      	bne.n	8005b40 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8005aee:	2302      	movs	r3, #2
 8005af0:	aa01      	add	r2, sp, #4
 8005af2:	4619      	mov	r1, r3
 8005af4:	4628      	mov	r0, r5
 8005af6:	f7ff ff25 	bl	8005944 <HAL_SUBGHZ_ExecSetCmd>
}
 8005afa:	b003      	add	sp, #12
 8005afc:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005afe:	4628      	mov	r0, r5
 8005b00:	f00b fec4 	bl	801188c <HAL_SUBGHZ_TxCpltCallback>
 8005b04:	e7d4      	b.n	8005ab0 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005b06:	4628      	mov	r0, r5
 8005b08:	f00b fec8 	bl	801189c <HAL_SUBGHZ_RxCpltCallback>
 8005b0c:	e7d3      	b.n	8005ab6 <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f00b fef8 	bl	8011904 <HAL_SUBGHZ_PreambleDetectedCallback>
 8005b14:	e7d2      	b.n	8005abc <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8005b16:	4628      	mov	r0, r5
 8005b18:	f00b fefc 	bl	8011914 <HAL_SUBGHZ_SyncWordValidCallback>
 8005b1c:	e7d1      	b.n	8005ac2 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8005b1e:	4628      	mov	r0, r5
 8005b20:	f00b ff00 	bl	8011924 <HAL_SUBGHZ_HeaderValidCallback>
 8005b24:	e7d0      	b.n	8005ac8 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8005b26:	4628      	mov	r0, r5
 8005b28:	f00b fee4 	bl	80118f4 <HAL_SUBGHZ_HeaderErrorCallback>
 8005b2c:	e7cf      	b.n	8005ace <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8005b2e:	4628      	mov	r0, r5
 8005b30:	f00b febc 	bl	80118ac <HAL_SUBGHZ_CRCErrorCallback>
 8005b34:	e7ce      	b.n	8005ad4 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005b36:	2100      	movs	r1, #0
 8005b38:	4628      	mov	r0, r5
 8005b3a:	f00b febf 	bl	80118bc <HAL_SUBGHZ_CADStatusCallback>
 8005b3e:	e7d3      	b.n	8005ae8 <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005b40:	4628      	mov	r0, r5
 8005b42:	f00b fecd 	bl	80118e0 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8005b46:	e7d2      	b.n	8005aee <HAL_SUBGHZ_IRQHandler+0x66>

08005b48 <HAL_SUBGHZ_WriteBuffer>:
{
 8005b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b4c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005b4e:	7980      	ldrb	r0, [r0, #6]
 8005b50:	fa5f f880 	uxtb.w	r8, r0
 8005b54:	f1b8 0f01 	cmp.w	r8, #1
 8005b58:	d138      	bne.n	8005bcc <HAL_SUBGHZ_WriteBuffer+0x84>
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	4617      	mov	r7, r2
 8005b5e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005b60:	796b      	ldrb	r3, [r5, #5]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d035      	beq.n	8005bd2 <HAL_SUBGHZ_WriteBuffer+0x8a>
 8005b66:	2301      	movs	r3, #1
 8005b68:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f7ff fe1c 	bl	80057a8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005b70:	4a19      	ldr	r2, [pc, #100]	; (8005bd8 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005b72:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005b76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005b7e:	210e      	movs	r1, #14
 8005b80:	4628      	mov	r0, r5
 8005b82:	f7ff fd69 	bl	8005658 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005b86:	4621      	mov	r1, r4
 8005b88:	4628      	mov	r0, r5
 8005b8a:	f7ff fd65 	bl	8005658 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005b8e:	2400      	movs	r4, #0
 8005b90:	e005      	b.n	8005b9e <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005b92:	5d39      	ldrb	r1, [r7, r4]
 8005b94:	4628      	mov	r0, r5
 8005b96:	f7ff fd5f 	bl	8005658 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005b9a:	3401      	adds	r4, #1
 8005b9c:	b2a4      	uxth	r4, r4
 8005b9e:	42b4      	cmp	r4, r6
 8005ba0:	d3f7      	bcc.n	8005b92 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005ba2:	4a0d      	ldr	r2, [pc, #52]	; (8005bd8 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005ba4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	f7ff fdcd 	bl	8005750 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005bb6:	68ab      	ldr	r3, [r5, #8]
 8005bb8:	b90b      	cbnz	r3, 8005bbe <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8005bba:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	716b      	strb	r3, [r5, #5]
}
 8005bc6:	4640      	mov	r0, r8
 8005bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005bcc:	f04f 0802 	mov.w	r8, #2
 8005bd0:	e7f9      	b.n	8005bc6 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8005bd2:	f04f 0802 	mov.w	r8, #2
 8005bd6:	e7f6      	b.n	8005bc6 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8005bd8:	58000400 	.word	0x58000400

08005bdc <HAL_SUBGHZ_ReadBuffer>:
{
 8005bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005be2:	7980      	ldrb	r0, [r0, #6]
 8005be4:	fa5f f880 	uxtb.w	r8, r0
 8005be8:	f1b8 0f01 	cmp.w	r8, #1
 8005bec:	d13d      	bne.n	8005c6a <HAL_SUBGHZ_ReadBuffer+0x8e>
 8005bee:	460c      	mov	r4, r1
 8005bf0:	4615      	mov	r5, r2
 8005bf2:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005bf4:	7973      	ldrb	r3, [r6, #5]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d03a      	beq.n	8005c70 <HAL_SUBGHZ_ReadBuffer+0x94>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005bfe:	4630      	mov	r0, r6
 8005c00:	f7ff fdd2 	bl	80057a8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005c04:	4a1c      	ldr	r2, [pc, #112]	; (8005c78 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005c06:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005c0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005c12:	211e      	movs	r1, #30
 8005c14:	4630      	mov	r0, r6
 8005c16:	f7ff fd1f 	bl	8005658 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	f7ff fd1b 	bl	8005658 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005c22:	2100      	movs	r1, #0
 8005c24:	4630      	mov	r0, r6
 8005c26:	f7ff fd17 	bl	8005658 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005c2a:	2400      	movs	r4, #0
 8005c2c:	e006      	b.n	8005c3c <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005c2e:	4629      	mov	r1, r5
 8005c30:	4630      	mov	r0, r6
 8005c32:	f7ff fd4d 	bl	80056d0 <SUBGHZSPI_Receive>
      pData++;
 8005c36:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005c38:	3401      	adds	r4, #1
 8005c3a:	b2a4      	uxth	r4, r4
 8005c3c:	42bc      	cmp	r4, r7
 8005c3e:	d3f6      	bcc.n	8005c2e <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005c40:	4a0d      	ldr	r2, [pc, #52]	; (8005c78 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005c42:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005c4e:	4630      	mov	r0, r6
 8005c50:	f7ff fd7e 	bl	8005750 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005c54:	68b3      	ldr	r3, [r6, #8]
 8005c56:	b90b      	cbnz	r3, 8005c5c <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8005c58:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005c60:	2300      	movs	r3, #0
 8005c62:	7173      	strb	r3, [r6, #5]
}
 8005c64:	4640      	mov	r0, r8
 8005c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005c6a:	f04f 0802 	mov.w	r8, #2
 8005c6e:	e7f9      	b.n	8005c64 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8005c70:	f04f 0802 	mov.w	r8, #2
 8005c74:	e7f6      	b.n	8005c64 <HAL_SUBGHZ_ReadBuffer+0x88>
 8005c76:	bf00      	nop
 8005c78:	58000400 	.word	0x58000400

08005c7c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005c7c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7e:	e852 3f00 	ldrex	r3, [r2]
 8005c82:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	e842 3100 	strex	r1, r3, [r2]
 8005c8a:	2900      	cmp	r1, #0
 8005c8c:	d1f6      	bne.n	8005c7c <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005c8e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c90:	f102 0308 	add.w	r3, r2, #8
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	3208      	adds	r2, #8
 8005c9e:	e842 3100 	strex	r1, r3, [r2]
 8005ca2:	2900      	cmp	r1, #0
 8005ca4:	d1f3      	bne.n	8005c8e <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ca6:	2320      	movs	r3, #32
 8005ca8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8005cac:	4770      	bx	lr

08005cae <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	e852 3f00 	ldrex	r3, [r2]
 8005cb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb8:	e842 3100 	strex	r1, r3, [r2]
 8005cbc:	2900      	cmp	r1, #0
 8005cbe:	d1f6      	bne.n	8005cae <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cc0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	f102 0308 	add.w	r3, r2, #8
 8005cc6:	e853 3f00 	ldrex	r3, [r3]
 8005cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cce:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	3208      	adds	r2, #8
 8005cd4:	e842 3100 	strex	r1, r3, [r2]
 8005cd8:	2900      	cmp	r1, #0
 8005cda:	d1f1      	bne.n	8005cc0 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cdc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d006      	beq.n	8005cf0 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ce2:	2320      	movs	r3, #32
 8005ce4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cec:	6703      	str	r3, [r0, #112]	; 0x70
}
 8005cee:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf2:	e852 3f00 	ldrex	r3, [r2]
 8005cf6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfa:	e842 3100 	strex	r1, r3, [r2]
 8005cfe:	2900      	cmp	r1, #0
 8005d00:	d1f6      	bne.n	8005cf0 <UART_EndRxTransfer+0x42>
 8005d02:	e7ee      	b.n	8005ce2 <UART_EndRxTransfer+0x34>

08005d04 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8005d04:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d14c      	bne.n	8005da6 <HAL_UART_Transmit_DMA+0xa2>
{
 8005d0c:	b510      	push	{r4, lr}
 8005d0e:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8005d10:	2900      	cmp	r1, #0
 8005d12:	d04a      	beq.n	8005daa <HAL_UART_Transmit_DMA+0xa6>
 8005d14:	2a00      	cmp	r2, #0
 8005d16:	d04a      	beq.n	8005dae <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 8005d18:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d048      	beq.n	8005db2 <HAL_UART_Transmit_DMA+0xae>
 8005d20:	2301      	movs	r3, #1
 8005d22:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8005d26:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005d28:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8005d2c:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d30:	2300      	movs	r3, #0
 8005d32:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d36:	2321      	movs	r3, #33	; 0x21
 8005d38:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8005d3c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005d3e:	b1f3      	cbz	r3, 8005d7e <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005d40:	491d      	ldr	r1, [pc, #116]	; (8005db8 <HAL_UART_Transmit_DMA+0xb4>)
 8005d42:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005d44:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005d46:	491d      	ldr	r1, [pc, #116]	; (8005dbc <HAL_UART_Transmit_DMA+0xb8>)
 8005d48:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005d4a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005d4c:	491c      	ldr	r1, [pc, #112]	; (8005dc0 <HAL_UART_Transmit_DMA+0xbc>)
 8005d4e:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8005d50:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005d52:	2100      	movs	r1, #0
 8005d54:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005d56:	6801      	ldr	r1, [r0, #0]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	f101 0228 	add.w	r2, r1, #40	; 0x28
 8005d5e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005d60:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8005d62:	f7fd fe0f 	bl	8003984 <HAL_DMA_Start_IT>
 8005d66:	b150      	cbz	r0, 8005d7e <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d68:	2310      	movs	r3, #16
 8005d6a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8005d74:	2320      	movs	r3, #32
 8005d76:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8005d7a:	2001      	movs	r0, #1
 8005d7c:	e012      	b.n	8005da4 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	2240      	movs	r2, #64	; 0x40
 8005d82:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8005d84:	2300      	movs	r3, #0
 8005d86:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d8a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	f102 0308 	add.w	r3, r2, #8
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	3208      	adds	r2, #8
 8005d9a:	e842 3100 	strex	r1, r3, [r2]
 8005d9e:	2900      	cmp	r1, #0
 8005da0:	d1f3      	bne.n	8005d8a <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 8005da2:	2000      	movs	r0, #0
}
 8005da4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005da6:	2002      	movs	r0, #2
}
 8005da8:	4770      	bx	lr
      return HAL_ERROR;
 8005daa:	2001      	movs	r0, #1
 8005dac:	e7fa      	b.n	8005da4 <HAL_UART_Transmit_DMA+0xa0>
 8005dae:	2001      	movs	r0, #1
 8005db0:	e7f8      	b.n	8005da4 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 8005db2:	2002      	movs	r0, #2
 8005db4:	e7f6      	b.n	8005da4 <HAL_UART_Transmit_DMA+0xa0>
 8005db6:	bf00      	nop
 8005db8:	08005dc5 	.word	0x08005dc5
 8005dbc:	08005e33 	.word	0x08005e33
 8005dc0:	08005e3f 	.word	0x08005e3f

08005dc4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005dc4:	b508      	push	{r3, lr}
 8005dc6:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dc8:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f013 0f20 	tst.w	r3, #32
 8005dd2:	d118      	bne.n	8005e06 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dda:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	f102 0308 	add.w	r3, r2, #8
 8005de0:	e853 3f00 	ldrex	r3, [r3]
 8005de4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de8:	3208      	adds	r2, #8
 8005dea:	e842 3100 	strex	r1, r3, [r2]
 8005dee:	2900      	cmp	r1, #0
 8005df0:	d1f3      	bne.n	8005dda <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005df2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	e852 3f00 	ldrex	r3, [r2]
 8005df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	e842 3100 	strex	r1, r3, [r2]
 8005e00:	2900      	cmp	r1, #0
 8005e02:	d1f6      	bne.n	8005df2 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e04:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005e06:	f7fc f9a9 	bl	800215c <HAL_UART_TxCpltCallback>
}
 8005e0a:	e7fb      	b.n	8005e04 <UART_DMATransmitCplt+0x40>

08005e0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e0c:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e0e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	e852 3f00 	ldrex	r3, [r2]
 8005e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	e842 3100 	strex	r1, r3, [r2]
 8005e1c:	2900      	cmp	r1, #0
 8005e1e:	d1f6      	bne.n	8005e0e <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e20:	2320      	movs	r3, #32
 8005e22:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e26:	2300      	movs	r3, #0
 8005e28:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e2a:	f7fc f997 	bl	800215c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e2e:	bd08      	pop	{r3, pc}

08005e30 <HAL_UART_TxHalfCpltCallback>:
}
 8005e30:	4770      	bx	lr

08005e32 <UART_DMATxHalfCplt>:
{
 8005e32:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005e34:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005e36:	f7ff fffb 	bl	8005e30 <HAL_UART_TxHalfCpltCallback>
}
 8005e3a:	bd08      	pop	{r3, pc}

08005e3c <HAL_UART_ErrorCallback>:
}
 8005e3c:	4770      	bx	lr

08005e3e <UART_DMAError>:
{
 8005e3e:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e40:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005e42:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005e46:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e52:	d001      	beq.n	8005e58 <UART_DMAError+0x1a>
 8005e54:	2a21      	cmp	r2, #33	; 0x21
 8005e56:	d010      	beq.n	8005e7a <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e60:	d001      	beq.n	8005e66 <UART_DMAError+0x28>
 8005e62:	2d22      	cmp	r5, #34	; 0x22
 8005e64:	d010      	beq.n	8005e88 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e66:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005e6a:	f043 0310 	orr.w	r3, r3, #16
 8005e6e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 8005e72:	4620      	mov	r0, r4
 8005e74:	f7ff ffe2 	bl	8005e3c <HAL_UART_ErrorCallback>
}
 8005e78:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005e80:	4620      	mov	r0, r4
 8005e82:	f7ff fefb 	bl	8005c7c <UART_EndTxTransfer>
 8005e86:	e7e7      	b.n	8005e58 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f7ff ff0d 	bl	8005cae <UART_EndRxTransfer>
 8005e94:	e7e7      	b.n	8005e66 <UART_DMAError+0x28>

08005e96 <UART_DMAAbortOnError>:
{
 8005e96:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e98:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005ea0:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8005ea4:	f7ff ffca 	bl	8005e3c <HAL_UART_ErrorCallback>
}
 8005ea8:	bd08      	pop	{r3, pc}

08005eaa <HAL_UARTEx_RxEventCallback>:
}
 8005eaa:	4770      	bx	lr

08005eac <HAL_UART_IRQHandler>:
{
 8005eac:	b570      	push	{r4, r5, r6, lr}
 8005eae:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005eb0:	6801      	ldr	r1, [r0, #0]
 8005eb2:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005eb4:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005eb6:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005eb8:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8005ebc:	401a      	ands	r2, r3
 8005ebe:	d108      	bne.n	8005ed2 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ec0:	f013 0f20 	tst.w	r3, #32
 8005ec4:	d005      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ec6:	f010 0f20 	tst.w	r0, #32
 8005eca:	d134      	bne.n	8005f36 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ecc:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005ed0:	d131      	bne.n	8005f36 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8005ed2:	b12a      	cbz	r2, 8005ee0 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005ed4:	4a95      	ldr	r2, [pc, #596]	; (800612c <HAL_UART_IRQHandler+0x280>)
 8005ed6:	402a      	ands	r2, r5
 8005ed8:	d133      	bne.n	8005f42 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005eda:	4e95      	ldr	r6, [pc, #596]	; (8006130 <HAL_UART_IRQHandler+0x284>)
 8005edc:	4230      	tst	r0, r6
 8005ede:	d130      	bne.n	8005f42 <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005ee2:	2a01      	cmp	r2, #1
 8005ee4:	f000 80c3 	beq.w	800606e <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ee8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005eec:	d003      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x4a>
 8005eee:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8005ef2:	f040 815b 	bne.w	80061ac <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005ef6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005efa:	d007      	beq.n	8005f0c <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005efc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005f00:	f040 815b 	bne.w	80061ba <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005f04:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8005f08:	f040 8157 	bne.w	80061ba <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f0c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f10:	d003      	beq.n	8005f1a <HAL_UART_IRQHandler+0x6e>
 8005f12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f16:	f040 8157 	bne.w	80061c8 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f1a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005f1e:	d003      	beq.n	8005f28 <HAL_UART_IRQHandler+0x7c>
 8005f20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005f24:	f040 8154 	bne.w	80061d0 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f28:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005f2c:	d002      	beq.n	8005f34 <HAL_UART_IRQHandler+0x88>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	f2c0 8152 	blt.w	80061d8 <HAL_UART_IRQHandler+0x32c>
}
 8005f34:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8005f36:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0fb      	beq.n	8005f34 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	4798      	blx	r3
      return;
 8005f40:	e7f8      	b.n	8005f34 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f42:	f013 0f01 	tst.w	r3, #1
 8005f46:	d009      	beq.n	8005f5c <HAL_UART_IRQHandler+0xb0>
 8005f48:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005f4c:	d006      	beq.n	8005f5c <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f4e:	2601      	movs	r6, #1
 8005f50:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f52:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005f56:	4331      	orrs	r1, r6
 8005f58:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f5c:	f013 0f02 	tst.w	r3, #2
 8005f60:	d00b      	beq.n	8005f7a <HAL_UART_IRQHandler+0xce>
 8005f62:	f015 0f01 	tst.w	r5, #1
 8005f66:	d008      	beq.n	8005f7a <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f68:	6821      	ldr	r1, [r4, #0]
 8005f6a:	2602      	movs	r6, #2
 8005f6c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f6e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005f72:	f041 0104 	orr.w	r1, r1, #4
 8005f76:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f7a:	f013 0f04 	tst.w	r3, #4
 8005f7e:	d00b      	beq.n	8005f98 <HAL_UART_IRQHandler+0xec>
 8005f80:	f015 0f01 	tst.w	r5, #1
 8005f84:	d008      	beq.n	8005f98 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f86:	6821      	ldr	r1, [r4, #0]
 8005f88:	2604      	movs	r6, #4
 8005f8a:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f8c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005f90:	f041 0102 	orr.w	r1, r1, #2
 8005f94:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f98:	f013 0f08 	tst.w	r3, #8
 8005f9c:	d00b      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f9e:	f010 0f20 	tst.w	r0, #32
 8005fa2:	d100      	bne.n	8005fa6 <HAL_UART_IRQHandler+0xfa>
 8005fa4:	b13a      	cbz	r2, 8005fb6 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fa6:	6822      	ldr	r2, [r4, #0]
 8005fa8:	2108      	movs	r1, #8
 8005faa:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fac:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fb6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005fba:	d00c      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x12a>
 8005fbc:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8005fc0:	d009      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fc2:	6822      	ldr	r2, [r4, #0]
 8005fc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005fc8:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fca:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005fce:	f042 0220 	orr.w	r2, r2, #32
 8005fd2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fd6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005fda:	2a00      	cmp	r2, #0
 8005fdc:	d0aa      	beq.n	8005f34 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005fde:	f013 0f20 	tst.w	r3, #32
 8005fe2:	d009      	beq.n	8005ff8 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005fe4:	f010 0f20 	tst.w	r0, #32
 8005fe8:	d102      	bne.n	8005ff0 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005fea:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005fee:	d003      	beq.n	8005ff8 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8005ff0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005ff2:	b10b      	cbz	r3, 8005ff8 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005ff8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006004:	d102      	bne.n	800600c <HAL_UART_IRQHandler+0x160>
 8006006:	f012 0f28 	tst.w	r2, #40	; 0x28
 800600a:	d029      	beq.n	8006060 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 800600c:	4620      	mov	r0, r4
 800600e:	f7ff fe4e 	bl	8005cae <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f013 0f40 	tst.w	r3, #64	; 0x40
 800601a:	d01d      	beq.n	8006058 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800601c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601e:	f102 0308 	add.w	r3, r2, #8
 8006022:	e853 3f00 	ldrex	r3, [r3]
 8006026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	3208      	adds	r2, #8
 800602c:	e842 3100 	strex	r1, r3, [r2]
 8006030:	2900      	cmp	r1, #0
 8006032:	d1f3      	bne.n	800601c <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8006034:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006036:	b15b      	cbz	r3, 8006050 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006038:	4a3e      	ldr	r2, [pc, #248]	; (8006134 <HAL_UART_IRQHandler+0x288>)
 800603a:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800603c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800603e:	f7fd fd27 	bl	8003a90 <HAL_DMA_Abort_IT>
 8006042:	2800      	cmp	r0, #0
 8006044:	f43f af76 	beq.w	8005f34 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006048:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800604a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800604c:	4798      	blx	r3
 800604e:	e771      	b.n	8005f34 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8006050:	4620      	mov	r0, r4
 8006052:	f7ff fef3 	bl	8005e3c <HAL_UART_ErrorCallback>
 8006056:	e76d      	b.n	8005f34 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8006058:	4620      	mov	r0, r4
 800605a:	f7ff feef 	bl	8005e3c <HAL_UART_ErrorCallback>
 800605e:	e769      	b.n	8005f34 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8006060:	4620      	mov	r0, r4
 8006062:	f7ff feeb 	bl	8005e3c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006066:	2300      	movs	r3, #0
 8006068:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 800606c:	e762      	b.n	8005f34 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800606e:	f013 0f10 	tst.w	r3, #16
 8006072:	f43f af39 	beq.w	8005ee8 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006076:	f010 0f10 	tst.w	r0, #16
 800607a:	f43f af35 	beq.w	8005ee8 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800607e:	2310      	movs	r3, #16
 8006080:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f013 0f40 	tst.w	r3, #64	; 0x40
 800608a:	d055      	beq.n	8006138 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800608c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800608e:	6813      	ldr	r3, [r2, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8006094:	2b00      	cmp	r3, #0
 8006096:	f43f af4d 	beq.w	8005f34 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800609a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800609e:	4299      	cmp	r1, r3
 80060a0:	f67f af48 	bls.w	8005f34 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 80060a4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80060a8:	6813      	ldr	r3, [r2, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f013 0f20 	tst.w	r3, #32
 80060b0:	d131      	bne.n	8006116 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060b2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	e852 3f00 	ldrex	r3, [r2]
 80060b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	e842 3100 	strex	r1, r3, [r2]
 80060c0:	2900      	cmp	r1, #0
 80060c2:	d1f6      	bne.n	80060b2 <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	f102 0308 	add.w	r3, r2, #8
 80060ca:	e853 3f00 	ldrex	r3, [r3]
 80060ce:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	3208      	adds	r2, #8
 80060d4:	e842 3100 	strex	r1, r3, [r2]
 80060d8:	2900      	cmp	r1, #0
 80060da:	d1f3      	bne.n	80060c4 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060dc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060de:	f102 0308 	add.w	r3, r2, #8
 80060e2:	e853 3f00 	ldrex	r3, [r3]
 80060e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ea:	3208      	adds	r2, #8
 80060ec:	e842 3100 	strex	r1, r3, [r2]
 80060f0:	2900      	cmp	r1, #0
 80060f2:	d1f3      	bne.n	80060dc <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 80060f4:	2320      	movs	r3, #32
 80060f6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fa:	2300      	movs	r3, #0
 80060fc:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060fe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006100:	e852 3f00 	ldrex	r3, [r2]
 8006104:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	e842 3100 	strex	r1, r3, [r2]
 800610c:	2900      	cmp	r1, #0
 800610e:	d1f6      	bne.n	80060fe <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006110:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006112:	f7fd fc83 	bl	8003a1c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006116:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800611a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800611e:	b29b      	uxth	r3, r3
 8006120:	1ac9      	subs	r1, r1, r3
 8006122:	b289      	uxth	r1, r1
 8006124:	4620      	mov	r0, r4
 8006126:	f7ff fec0 	bl	8005eaa <HAL_UARTEx_RxEventCallback>
      return;
 800612a:	e703      	b.n	8005f34 <HAL_UART_IRQHandler+0x88>
 800612c:	10000001 	.word	0x10000001
 8006130:	04000120 	.word	0x04000120
 8006134:	08005e97 	.word	0x08005e97
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006138:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800613c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006140:	b29b      	uxth	r3, r3
 8006142:	1ac9      	subs	r1, r1, r3
 8006144:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8006146:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	f43f aef1 	beq.w	8005f34 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 8006152:	2900      	cmp	r1, #0
 8006154:	f43f aeee 	beq.w	8005f34 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006158:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	e852 3f00 	ldrex	r3, [r2]
 800615e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006162:	e842 3000 	strex	r0, r3, [r2]
 8006166:	2800      	cmp	r0, #0
 8006168:	d1f6      	bne.n	8006158 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800616a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616c:	f102 0308 	add.w	r3, r2, #8
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006178:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617c:	3208      	adds	r2, #8
 800617e:	e842 3000 	strex	r0, r3, [r2]
 8006182:	2800      	cmp	r0, #0
 8006184:	d1f1      	bne.n	800616a <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8006186:	2320      	movs	r3, #32
 8006188:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618c:	2300      	movs	r3, #0
 800618e:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8006190:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006192:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	e852 3f00 	ldrex	r3, [r2]
 8006198:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619c:	e842 3000 	strex	r0, r3, [r2]
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d1f6      	bne.n	8006192 <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061a4:	4620      	mov	r0, r4
 80061a6:	f7ff fe80 	bl	8005eaa <HAL_UARTEx_RxEventCallback>
      return;
 80061aa:	e6c3      	b.n	8005f34 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80061b0:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80061b2:	4620      	mov	r0, r4
 80061b4:	f000 fe1c 	bl	8006df0 <HAL_UARTEx_WakeupCallback>
    return;
 80061b8:	e6bc      	b.n	8005f34 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 80061ba:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f43f aeb9 	beq.w	8005f34 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 80061c2:	4620      	mov	r0, r4
 80061c4:	4798      	blx	r3
    return;
 80061c6:	e6b5      	b.n	8005f34 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 80061c8:	4620      	mov	r0, r4
 80061ca:	f7ff fe1f 	bl	8005e0c <UART_EndTransmit_IT>
    return;
 80061ce:	e6b1      	b.n	8005f34 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80061d0:	4620      	mov	r0, r4
 80061d2:	f000 fe0f 	bl	8006df4 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80061d6:	e6ad      	b.n	8005f34 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80061d8:	4620      	mov	r0, r4
 80061da:	f000 fe0a 	bl	8006df2 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80061de:	e6a9      	b.n	8005f34 <HAL_UART_IRQHandler+0x88>

080061e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80061e0:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80061e2:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061e6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80061ea:	2a22      	cmp	r2, #34	; 0x22
 80061ec:	d005      	beq.n	80061fa <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061ee:	6802      	ldr	r2, [r0, #0]
 80061f0:	6993      	ldr	r3, [r2, #24]
 80061f2:	f043 0308 	orr.w	r3, r3, #8
 80061f6:	6193      	str	r3, [r2, #24]
  }
}
 80061f8:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061fa:	6802      	ldr	r2, [r0, #0]
 80061fc:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8006202:	400b      	ands	r3, r1
 8006204:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8006206:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006208:	3301      	adds	r3, #1
 800620a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800620c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006210:	b29b      	uxth	r3, r3
 8006212:	3b01      	subs	r3, #1
 8006214:	b29b      	uxth	r3, r3
 8006216:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800621a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800621e:	b29b      	uxth	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e9      	bne.n	80061f8 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006224:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006226:	e852 3f00 	ldrex	r3, [r2]
 800622a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	e842 3100 	strex	r1, r3, [r2]
 8006232:	2900      	cmp	r1, #0
 8006234:	d1f6      	bne.n	8006224 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006236:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	f102 0308 	add.w	r3, r2, #8
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006244:	3208      	adds	r2, #8
 8006246:	e842 3100 	strex	r1, r3, [r2]
 800624a:	2900      	cmp	r1, #0
 800624c:	d1f3      	bne.n	8006236 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800624e:	2320      	movs	r3, #32
 8006250:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8006254:	2300      	movs	r3, #0
 8006256:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006258:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800625a:	2b01      	cmp	r3, #1
 800625c:	d116      	bne.n	800628c <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625e:	2300      	movs	r3, #0
 8006260:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006262:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	e852 3f00 	ldrex	r3, [r2]
 8006268:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626c:	e842 3100 	strex	r1, r3, [r2]
 8006270:	2900      	cmp	r1, #0
 8006272:	d1f6      	bne.n	8006262 <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006274:	6803      	ldr	r3, [r0, #0]
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	f012 0f10 	tst.w	r2, #16
 800627c:	d001      	beq.n	8006282 <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800627e:	2210      	movs	r2, #16
 8006280:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006282:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8006286:	f7ff fe10 	bl	8005eaa <HAL_UARTEx_RxEventCallback>
 800628a:	e7b5      	b.n	80061f8 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800628c:	f7fb ff76 	bl	800217c <HAL_UART_RxCpltCallback>
 8006290:	e7b2      	b.n	80061f8 <UART_RxISR_8BIT+0x18>

08006292 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006292:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006294:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006298:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800629c:	2b22      	cmp	r3, #34	; 0x22
 800629e:	d005      	beq.n	80062ac <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062a0:	6802      	ldr	r2, [r0, #0]
 80062a2:	6993      	ldr	r3, [r2, #24]
 80062a4:	f043 0308 	orr.w	r3, r3, #8
 80062a8:	6193      	str	r3, [r2, #24]
  }
}
 80062aa:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062ac:	6803      	ldr	r3, [r0, #0]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80062b0:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80062b2:	4013      	ands	r3, r2
 80062b4:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 80062b6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80062b8:	3302      	adds	r3, #2
 80062ba:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80062bc:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	3b01      	subs	r3, #1
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80062ca:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1ea      	bne.n	80062aa <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062d4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	e852 3f00 	ldrex	r3, [r2]
 80062da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062de:	e842 3100 	strex	r1, r3, [r2]
 80062e2:	2900      	cmp	r1, #0
 80062e4:	d1f6      	bne.n	80062d4 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e8:	f102 0308 	add.w	r3, r2, #8
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f4:	3208      	adds	r2, #8
 80062f6:	e842 3100 	strex	r1, r3, [r2]
 80062fa:	2900      	cmp	r1, #0
 80062fc:	d1f3      	bne.n	80062e6 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 80062fe:	2320      	movs	r3, #32
 8006300:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8006304:	2300      	movs	r3, #0
 8006306:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006308:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800630a:	2b01      	cmp	r3, #1
 800630c:	d116      	bne.n	800633c <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800630e:	2300      	movs	r3, #0
 8006310:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006312:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	e852 3f00 	ldrex	r3, [r2]
 8006318:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631c:	e842 3100 	strex	r1, r3, [r2]
 8006320:	2900      	cmp	r1, #0
 8006322:	d1f6      	bne.n	8006312 <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006324:	6803      	ldr	r3, [r0, #0]
 8006326:	69da      	ldr	r2, [r3, #28]
 8006328:	f012 0f10 	tst.w	r2, #16
 800632c:	d001      	beq.n	8006332 <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800632e:	2210      	movs	r2, #16
 8006330:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006332:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8006336:	f7ff fdb8 	bl	8005eaa <HAL_UARTEx_RxEventCallback>
 800633a:	e7b6      	b.n	80062aa <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800633c:	f7fb ff1e 	bl	800217c <HAL_UART_RxCpltCallback>
 8006340:	e7b3      	b.n	80062aa <UART_RxISR_16BIT+0x18>
	...

08006344 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8006348:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800634c:	6803      	ldr	r3, [r0, #0]
 800634e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006350:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006354:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006358:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800635c:	2a22      	cmp	r2, #34	; 0x22
 800635e:	d005      	beq.n	800636c <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	f042 0208 	orr.w	r2, r2, #8
 8006366:	619a      	str	r2, [r3, #24]
  }
}
 8006368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800636c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800636e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006372:	e008      	b.n	8006386 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006374:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006378:	2b00      	cmp	r3, #0
 800637a:	d14c      	bne.n	8006416 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 800637c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006380:	b29b      	uxth	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d04e      	beq.n	8006424 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006386:	2f00      	cmp	r7, #0
 8006388:	f000 8087 	beq.w	800649a <UART_RxISR_8BIT_FIFOEN+0x156>
 800638c:	f015 0f20 	tst.w	r5, #32
 8006390:	f000 8083 	beq.w	800649a <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006398:	b2f3      	uxtb	r3, r6
 800639a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800639c:	400b      	ands	r3, r1
 800639e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 80063a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063a2:	3301      	adds	r3, #1
 80063a4:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80063a6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	3b01      	subs	r3, #1
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80063b8:	f015 0f07 	tst.w	r5, #7
 80063bc:	d0de      	beq.n	800637c <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063be:	f015 0f01 	tst.w	r5, #1
 80063c2:	d009      	beq.n	80063d8 <UART_RxISR_8BIT_FIFOEN+0x94>
 80063c4:	f419 7f80 	tst.w	r9, #256	; 0x100
 80063c8:	d006      	beq.n	80063d8 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063ca:	2201      	movs	r2, #1
 80063cc:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063ce:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80063d2:	4313      	orrs	r3, r2
 80063d4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063d8:	f015 0f02 	tst.w	r5, #2
 80063dc:	d00b      	beq.n	80063f6 <UART_RxISR_8BIT_FIFOEN+0xb2>
 80063de:	f018 0f01 	tst.w	r8, #1
 80063e2:	d008      	beq.n	80063f6 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	2202      	movs	r2, #2
 80063e8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063ea:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80063ee:	f043 0304 	orr.w	r3, r3, #4
 80063f2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063f6:	f015 0f04 	tst.w	r5, #4
 80063fa:	d0bb      	beq.n	8006374 <UART_RxISR_8BIT_FIFOEN+0x30>
 80063fc:	f018 0f01 	tst.w	r8, #1
 8006400:	d0b8      	beq.n	8006374 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	2204      	movs	r2, #4
 8006406:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006408:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800640c:	f043 0302 	orr.w	r3, r3, #2
 8006410:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006414:	e7ae      	b.n	8006374 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8006416:	4620      	mov	r0, r4
 8006418:	f7ff fd10 	bl	8005e3c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641c:	2300      	movs	r3, #0
 800641e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006422:	e7ab      	b.n	800637c <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006424:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006426:	e852 3f00 	ldrex	r3, [r2]
 800642a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	e842 3100 	strex	r1, r3, [r2]
 8006432:	2900      	cmp	r1, #0
 8006434:	d1f6      	bne.n	8006424 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006436:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	f102 0308 	add.w	r3, r2, #8
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006444:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006448:	3208      	adds	r2, #8
 800644a:	e842 3100 	strex	r1, r3, [r2]
 800644e:	2900      	cmp	r1, #0
 8006450:	d1f1      	bne.n	8006436 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8006452:	2320      	movs	r3, #32
 8006454:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8006458:	2300      	movs	r3, #0
 800645a:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800645c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800645e:	2b01      	cmp	r3, #1
 8006460:	d003      	beq.n	800646a <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 8006462:	4620      	mov	r0, r4
 8006464:	f7fb fe8a 	bl	800217c <HAL_UART_RxCpltCallback>
 8006468:	e78d      	b.n	8006386 <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800646a:	2300      	movs	r3, #0
 800646c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800646e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	e852 3f00 	ldrex	r3, [r2]
 8006474:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006478:	e842 3100 	strex	r1, r3, [r2]
 800647c:	2900      	cmp	r1, #0
 800647e:	d1f6      	bne.n	800646e <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	69da      	ldr	r2, [r3, #28]
 8006484:	f012 0f10 	tst.w	r2, #16
 8006488:	d001      	beq.n	800648e <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800648a:	2210      	movs	r2, #16
 800648c:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800648e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006492:	4620      	mov	r0, r4
 8006494:	f7ff fd09 	bl	8005eaa <HAL_UARTEx_RxEventCallback>
 8006498:	e775      	b.n	8006386 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800649a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800649e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f43f af61 	beq.w	8006368 <UART_RxISR_8BIT_FIFOEN+0x24>
 80064a6:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80064aa:	429a      	cmp	r2, r3
 80064ac:	f67f af5c 	bls.w	8006368 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80064b0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b2:	f102 0308 	add.w	r3, r2, #8
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064be:	3208      	adds	r2, #8
 80064c0:	e842 3100 	strex	r1, r3, [r2]
 80064c4:	2900      	cmp	r1, #0
 80064c6:	d1f3      	bne.n	80064b0 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 80064c8:	4b05      	ldr	r3, [pc, #20]	; (80064e0 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 80064ca:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80064cc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ce:	e852 3f00 	ldrex	r3, [r2]
 80064d2:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	e842 3100 	strex	r1, r3, [r2]
 80064da:	2900      	cmp	r1, #0
 80064dc:	d1f6      	bne.n	80064cc <UART_RxISR_8BIT_FIFOEN+0x188>
 80064de:	e743      	b.n	8006368 <UART_RxISR_8BIT_FIFOEN+0x24>
 80064e0:	080061e1 	.word	0x080061e1

080064e4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80064e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80064e8:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80064ec:	6803      	ldr	r3, [r0, #0]
 80064ee:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80064f0:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80064f4:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064f8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80064fc:	2a22      	cmp	r2, #34	; 0x22
 80064fe:	d005      	beq.n	800650c <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006500:	699a      	ldr	r2, [r3, #24]
 8006502:	f042 0208 	orr.w	r2, r2, #8
 8006506:	619a      	str	r2, [r3, #24]
  }
}
 8006508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800650c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800650e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006512:	e008      	b.n	8006526 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006514:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006518:	2b00      	cmp	r3, #0
 800651a:	d14b      	bne.n	80065b4 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 800651c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006520:	b29b      	uxth	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d04d      	beq.n	80065c2 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006526:	2f00      	cmp	r7, #0
 8006528:	f000 8086 	beq.w	8006638 <UART_RxISR_16BIT_FIFOEN+0x154>
 800652c:	f015 0f20 	tst.w	r5, #32
 8006530:	f000 8082 	beq.w	8006638 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006534:	6823      	ldr	r3, [r4, #0]
 8006536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006538:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800653a:	4033      	ands	r3, r6
 800653c:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800653e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006540:	3302      	adds	r3, #2
 8006542:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8006544:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006548:	b29b      	uxth	r3, r3
 800654a:	3b01      	subs	r3, #1
 800654c:	b29b      	uxth	r3, r3
 800654e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006556:	f015 0f07 	tst.w	r5, #7
 800655a:	d0df      	beq.n	800651c <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800655c:	f015 0f01 	tst.w	r5, #1
 8006560:	d009      	beq.n	8006576 <UART_RxISR_16BIT_FIFOEN+0x92>
 8006562:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006566:	d006      	beq.n	8006576 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006568:	2201      	movs	r2, #1
 800656a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800656c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006570:	4313      	orrs	r3, r2
 8006572:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006576:	f015 0f02 	tst.w	r5, #2
 800657a:	d00b      	beq.n	8006594 <UART_RxISR_16BIT_FIFOEN+0xb0>
 800657c:	f018 0f01 	tst.w	r8, #1
 8006580:	d008      	beq.n	8006594 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	2202      	movs	r2, #2
 8006586:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006588:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800658c:	f043 0304 	orr.w	r3, r3, #4
 8006590:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006594:	f015 0f04 	tst.w	r5, #4
 8006598:	d0bc      	beq.n	8006514 <UART_RxISR_16BIT_FIFOEN+0x30>
 800659a:	f018 0f01 	tst.w	r8, #1
 800659e:	d0b9      	beq.n	8006514 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	2204      	movs	r2, #4
 80065a4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065a6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80065aa:	f043 0302 	orr.w	r3, r3, #2
 80065ae:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80065b2:	e7af      	b.n	8006514 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80065b4:	4620      	mov	r0, r4
 80065b6:	f7ff fc41 	bl	8005e3c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ba:	2300      	movs	r3, #0
 80065bc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80065c0:	e7ac      	b.n	800651c <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065c2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	e852 3f00 	ldrex	r3, [r2]
 80065c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	e842 3100 	strex	r1, r3, [r2]
 80065d0:	2900      	cmp	r1, #0
 80065d2:	d1f6      	bne.n	80065c2 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065d4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d6:	f102 0308 	add.w	r3, r2, #8
 80065da:	e853 3f00 	ldrex	r3, [r3]
 80065de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065e2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	3208      	adds	r2, #8
 80065e8:	e842 3100 	strex	r1, r3, [r2]
 80065ec:	2900      	cmp	r1, #0
 80065ee:	d1f1      	bne.n	80065d4 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 80065f0:	2320      	movs	r3, #32
 80065f2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065fa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d003      	beq.n	8006608 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 8006600:	4620      	mov	r0, r4
 8006602:	f7fb fdbb 	bl	800217c <HAL_UART_RxCpltCallback>
 8006606:	e78e      	b.n	8006526 <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006608:	2300      	movs	r3, #0
 800660a:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800660c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	e852 3f00 	ldrex	r3, [r2]
 8006612:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	e842 3100 	strex	r1, r3, [r2]
 800661a:	2900      	cmp	r1, #0
 800661c:	d1f6      	bne.n	800660c <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	69da      	ldr	r2, [r3, #28]
 8006622:	f012 0f10 	tst.w	r2, #16
 8006626:	d001      	beq.n	800662c <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006628:	2210      	movs	r2, #16
 800662a:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800662c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006630:	4620      	mov	r0, r4
 8006632:	f7ff fc3a 	bl	8005eaa <HAL_UARTEx_RxEventCallback>
 8006636:	e776      	b.n	8006526 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8006638:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800663c:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800663e:	2b00      	cmp	r3, #0
 8006640:	f43f af62 	beq.w	8006508 <UART_RxISR_16BIT_FIFOEN+0x24>
 8006644:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006648:	429a      	cmp	r2, r3
 800664a:	f67f af5d 	bls.w	8006508 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800664e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	f102 0308 	add.w	r3, r2, #8
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	3208      	adds	r2, #8
 800665e:	e842 3100 	strex	r1, r3, [r2]
 8006662:	2900      	cmp	r1, #0
 8006664:	d1f3      	bne.n	800664e <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 8006666:	4b06      	ldr	r3, [pc, #24]	; (8006680 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 8006668:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800666a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	e852 3f00 	ldrex	r3, [r2]
 8006670:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006674:	e842 3100 	strex	r1, r3, [r2]
 8006678:	2900      	cmp	r1, #0
 800667a:	d1f6      	bne.n	800666a <UART_RxISR_16BIT_FIFOEN+0x186>
 800667c:	e744      	b.n	8006508 <UART_RxISR_16BIT_FIFOEN+0x24>
 800667e:	bf00      	nop
 8006680:	08006293 	.word	0x08006293

08006684 <UART_SetConfig>:
{
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006688:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800668a:	6883      	ldr	r3, [r0, #8]
 800668c:	6902      	ldr	r2, [r0, #16]
 800668e:	4313      	orrs	r3, r2
 8006690:	6942      	ldr	r2, [r0, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	69c2      	ldr	r2, [r0, #28]
 8006696:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006698:	6808      	ldr	r0, [r1, #0]
 800669a:	4a9d      	ldr	r2, [pc, #628]	; (8006910 <UART_SetConfig+0x28c>)
 800669c:	4002      	ands	r2, r0
 800669e:	4313      	orrs	r3, r2
 80066a0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066a2:	6822      	ldr	r2, [r4, #0]
 80066a4:	6853      	ldr	r3, [r2, #4]
 80066a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80066aa:	68e1      	ldr	r1, [r4, #12]
 80066ac:	430b      	orrs	r3, r1
 80066ae:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066b0:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066b2:	6822      	ldr	r2, [r4, #0]
 80066b4:	4b97      	ldr	r3, [pc, #604]	; (8006914 <UART_SetConfig+0x290>)
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d001      	beq.n	80066be <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 80066ba:	6a23      	ldr	r3, [r4, #32]
 80066bc:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066be:	6893      	ldr	r3, [r2, #8]
 80066c0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80066c4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80066c8:	430b      	orrs	r3, r1
 80066ca:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066cc:	6822      	ldr	r2, [r4, #0]
 80066ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80066d0:	f023 030f 	bic.w	r3, r3, #15
 80066d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80066d6:	430b      	orrs	r3, r1
 80066d8:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	4a8e      	ldr	r2, [pc, #568]	; (8006918 <UART_SetConfig+0x294>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d01c      	beq.n	800671c <UART_SetConfig+0x98>
 80066e2:	4a8e      	ldr	r2, [pc, #568]	; (800691c <UART_SetConfig+0x298>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d031      	beq.n	800674c <UART_SetConfig+0xc8>
 80066e8:	4a8a      	ldr	r2, [pc, #552]	; (8006914 <UART_SetConfig+0x290>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d04b      	beq.n	8006786 <UART_SetConfig+0x102>
 80066ee:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80066f0:	4988      	ldr	r1, [pc, #544]	; (8006914 <UART_SetConfig+0x290>)
 80066f2:	428b      	cmp	r3, r1
 80066f4:	d068      	beq.n	80067c8 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066f6:	69e0      	ldr	r0, [r4, #28]
 80066f8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80066fc:	f000 80a5 	beq.w	800684a <UART_SetConfig+0x1c6>
    switch (clocksource)
 8006700:	2a08      	cmp	r2, #8
 8006702:	f200 811f 	bhi.w	8006944 <UART_SetConfig+0x2c0>
 8006706:	e8df f012 	tbh	[pc, r2, lsl #1]
 800670a:	00d3      	.short	0x00d3
 800670c:	00d100f5 	.word	0x00d100f5
 8006710:	00f8011d 	.word	0x00f8011d
 8006714:	011d011d 	.word	0x011d011d
 8006718:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800671c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006720:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006724:	f002 0203 	and.w	r2, r2, #3
 8006728:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 800672c:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8006730:	2a03      	cmp	r2, #3
 8006732:	d809      	bhi.n	8006748 <UART_SetConfig+0xc4>
 8006734:	e8df f002 	tbb	[pc, r2]
 8006738:	063c0402 	.word	0x063c0402
 800673c:	2201      	movs	r2, #1
 800673e:	e7d7      	b.n	80066f0 <UART_SetConfig+0x6c>
 8006740:	2204      	movs	r2, #4
 8006742:	e7d5      	b.n	80066f0 <UART_SetConfig+0x6c>
 8006744:	2208      	movs	r2, #8
 8006746:	e7d3      	b.n	80066f0 <UART_SetConfig+0x6c>
 8006748:	2210      	movs	r2, #16
 800674a:	e7d1      	b.n	80066f0 <UART_SetConfig+0x6c>
 800674c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006750:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006754:	f002 020c 	and.w	r2, r2, #12
 8006758:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800675c:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8006760:	2a0c      	cmp	r2, #12
 8006762:	d80e      	bhi.n	8006782 <UART_SetConfig+0xfe>
 8006764:	e8df f002 	tbb	[pc, r2]
 8006768:	0d0d0d07 	.word	0x0d0d0d07
 800676c:	0d0d0d09 	.word	0x0d0d0d09
 8006770:	0d0d0d26 	.word	0x0d0d0d26
 8006774:	0b          	.byte	0x0b
 8006775:	00          	.byte	0x00
 8006776:	2200      	movs	r2, #0
 8006778:	e7ba      	b.n	80066f0 <UART_SetConfig+0x6c>
 800677a:	2204      	movs	r2, #4
 800677c:	e7b8      	b.n	80066f0 <UART_SetConfig+0x6c>
 800677e:	2208      	movs	r2, #8
 8006780:	e7b6      	b.n	80066f0 <UART_SetConfig+0x6c>
 8006782:	2210      	movs	r2, #16
 8006784:	e7b4      	b.n	80066f0 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006786:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800678a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800678e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8006792:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006796:	d00f      	beq.n	80067b8 <UART_SetConfig+0x134>
 8006798:	d805      	bhi.n	80067a6 <UART_SetConfig+0x122>
 800679a:	b17a      	cbz	r2, 80067bc <UART_SetConfig+0x138>
 800679c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80067a0:	d10e      	bne.n	80067c0 <UART_SetConfig+0x13c>
 80067a2:	2204      	movs	r2, #4
 80067a4:	e7a4      	b.n	80066f0 <UART_SetConfig+0x6c>
 80067a6:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80067aa:	d10b      	bne.n	80067c4 <UART_SetConfig+0x140>
 80067ac:	2208      	movs	r2, #8
 80067ae:	e79f      	b.n	80066f0 <UART_SetConfig+0x6c>
 80067b0:	2202      	movs	r2, #2
 80067b2:	e79d      	b.n	80066f0 <UART_SetConfig+0x6c>
 80067b4:	2202      	movs	r2, #2
 80067b6:	e79b      	b.n	80066f0 <UART_SetConfig+0x6c>
 80067b8:	2202      	movs	r2, #2
 80067ba:	e799      	b.n	80066f0 <UART_SetConfig+0x6c>
 80067bc:	2200      	movs	r2, #0
 80067be:	e797      	b.n	80066f0 <UART_SetConfig+0x6c>
 80067c0:	2210      	movs	r2, #16
 80067c2:	e795      	b.n	80066f0 <UART_SetConfig+0x6c>
 80067c4:	2210      	movs	r2, #16
 80067c6:	e793      	b.n	80066f0 <UART_SetConfig+0x6c>
    switch (clocksource)
 80067c8:	2a08      	cmp	r2, #8
 80067ca:	f200 809c 	bhi.w	8006906 <UART_SetConfig+0x282>
 80067ce:	e8df f002 	tbb	[pc, r2]
 80067d2:	9a08      	.short	0x9a08
 80067d4:	9a379a3a 	.word	0x9a379a3a
 80067d8:	9a9a      	.short	0x9a9a
 80067da:	05          	.byte	0x05
 80067db:	00          	.byte	0x00
 80067dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80067e0:	e004      	b.n	80067ec <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 80067e2:	f7fe fb0f 	bl	8004e04 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80067e6:	2800      	cmp	r0, #0
 80067e8:	f000 808f 	beq.w	800690a <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067ee:	4b4c      	ldr	r3, [pc, #304]	; (8006920 <UART_SetConfig+0x29c>)
 80067f0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80067f4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067f8:	6865      	ldr	r5, [r4, #4]
 80067fa:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80067fe:	4299      	cmp	r1, r3
 8006800:	f200 8094 	bhi.w	800692c <UART_SetConfig+0x2a8>
 8006804:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006808:	f200 8092 	bhi.w	8006930 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800680c:	2600      	movs	r6, #0
 800680e:	4633      	mov	r3, r6
 8006810:	4631      	mov	r1, r6
 8006812:	f7fa fae3 	bl	8000ddc <__aeabi_uldivmod>
 8006816:	0209      	lsls	r1, r1, #8
 8006818:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800681c:	0200      	lsls	r0, r0, #8
 800681e:	086b      	lsrs	r3, r5, #1
 8006820:	18c0      	adds	r0, r0, r3
 8006822:	462a      	mov	r2, r5
 8006824:	4633      	mov	r3, r6
 8006826:	f141 0100 	adc.w	r1, r1, #0
 800682a:	f7fa fad7 	bl	8000ddc <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800682e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006832:	4b3c      	ldr	r3, [pc, #240]	; (8006924 <UART_SetConfig+0x2a0>)
 8006834:	429a      	cmp	r2, r3
 8006836:	d87d      	bhi.n	8006934 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	60d8      	str	r0, [r3, #12]
 800683c:	4630      	mov	r0, r6
 800683e:	e050      	b.n	80068e2 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8006840:	f7fd fdd8 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
        break;
 8006844:	e7cf      	b.n	80067e6 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8006846:	4838      	ldr	r0, [pc, #224]	; (8006928 <UART_SetConfig+0x2a4>)
 8006848:	e7d0      	b.n	80067ec <UART_SetConfig+0x168>
    switch (clocksource)
 800684a:	2a08      	cmp	r2, #8
 800684c:	d874      	bhi.n	8006938 <UART_SetConfig+0x2b4>
 800684e:	e8df f002 	tbb	[pc, r2]
 8006852:	2707      	.short	0x2707
 8006854:	732a7305 	.word	0x732a7305
 8006858:	7373      	.short	0x7373
 800685a:	0b          	.byte	0x0b
 800685b:	00          	.byte	0x00
 800685c:	4832      	ldr	r0, [pc, #200]	; (8006928 <UART_SetConfig+0x2a4>)
 800685e:	e003      	b.n	8006868 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006860:	f7fe fad0 	bl	8004e04 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006864:	2800      	cmp	r0, #0
 8006866:	d069      	beq.n	800693c <UART_SetConfig+0x2b8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006868:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800686a:	4b2d      	ldr	r3, [pc, #180]	; (8006920 <UART_SetConfig+0x29c>)
 800686c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006870:	fbb0 f0f3 	udiv	r0, r0, r3
 8006874:	6862      	ldr	r2, [r4, #4]
 8006876:	0853      	lsrs	r3, r2, #1
 8006878:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800687c:	fbb0 f0f2 	udiv	r0, r0, r2
 8006880:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006882:	f1a0 0210 	sub.w	r2, r0, #16
 8006886:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800688a:	429a      	cmp	r2, r3
 800688c:	d858      	bhi.n	8006940 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800688e:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006892:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8006896:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	60d8      	str	r0, [r3, #12]
 800689c:	2000      	movs	r0, #0
 800689e:	e020      	b.n	80068e2 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80068a0:	f7fe fac0 	bl	8004e24 <HAL_RCC_GetPCLK2Freq>
        break;
 80068a4:	e7de      	b.n	8006864 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 80068a6:	f7fd fda5 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
        break;
 80068aa:	e7db      	b.n	8006864 <UART_SetConfig+0x1e0>
    switch (clocksource)
 80068ac:	481e      	ldr	r0, [pc, #120]	; (8006928 <UART_SetConfig+0x2a4>)
 80068ae:	e003      	b.n	80068b8 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 80068b0:	f7fe faa8 	bl	8004e04 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80068b4:	2800      	cmp	r0, #0
 80068b6:	d047      	beq.n	8006948 <UART_SetConfig+0x2c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80068ba:	4b19      	ldr	r3, [pc, #100]	; (8006920 <UART_SetConfig+0x29c>)
 80068bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80068c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80068c4:	6863      	ldr	r3, [r4, #4]
 80068c6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80068ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80068ce:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068d0:	f1a0 0210 	sub.w	r2, r0, #16
 80068d4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80068d8:	429a      	cmp	r2, r3
 80068da:	d837      	bhi.n	800694c <UART_SetConfig+0x2c8>
        huart->Instance->BRR = usartdiv;
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	60d8      	str	r0, [r3, #12]
 80068e0:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80068e2:	2301      	movs	r3, #1
 80068e4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80068e8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80068ec:	2300      	movs	r3, #0
 80068ee:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 80068f0:	6763      	str	r3, [r4, #116]	; 0x74
}
 80068f2:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80068f4:	f7fe fa96 	bl	8004e24 <HAL_RCC_GetPCLK2Freq>
        break;
 80068f8:	e7dc      	b.n	80068b4 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 80068fa:	f7fd fd7b 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
        break;
 80068fe:	e7d9      	b.n	80068b4 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8006900:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006904:	e7d8      	b.n	80068b8 <UART_SetConfig+0x234>
    switch (clocksource)
 8006906:	2001      	movs	r0, #1
 8006908:	e7eb      	b.n	80068e2 <UART_SetConfig+0x25e>
 800690a:	2000      	movs	r0, #0
 800690c:	e7e9      	b.n	80068e2 <UART_SetConfig+0x25e>
 800690e:	bf00      	nop
 8006910:	cfff69f3 	.word	0xcfff69f3
 8006914:	40008000 	.word	0x40008000
 8006918:	40013800 	.word	0x40013800
 800691c:	40004400 	.word	0x40004400
 8006920:	08013dc0 	.word	0x08013dc0
 8006924:	000ffcff 	.word	0x000ffcff
 8006928:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 800692c:	2001      	movs	r0, #1
 800692e:	e7d8      	b.n	80068e2 <UART_SetConfig+0x25e>
 8006930:	2001      	movs	r0, #1
 8006932:	e7d6      	b.n	80068e2 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8006934:	2001      	movs	r0, #1
 8006936:	e7d4      	b.n	80068e2 <UART_SetConfig+0x25e>
    switch (clocksource)
 8006938:	2001      	movs	r0, #1
 800693a:	e7d2      	b.n	80068e2 <UART_SetConfig+0x25e>
 800693c:	2000      	movs	r0, #0
 800693e:	e7d0      	b.n	80068e2 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8006940:	2001      	movs	r0, #1
 8006942:	e7ce      	b.n	80068e2 <UART_SetConfig+0x25e>
    switch (clocksource)
 8006944:	2001      	movs	r0, #1
 8006946:	e7cc      	b.n	80068e2 <UART_SetConfig+0x25e>
 8006948:	2000      	movs	r0, #0
 800694a:	e7ca      	b.n	80068e2 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800694c:	2001      	movs	r0, #1
 800694e:	e7c8      	b.n	80068e2 <UART_SetConfig+0x25e>

08006950 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006950:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006952:	f013 0f01 	tst.w	r3, #1
 8006956:	d006      	beq.n	8006966 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006958:	6802      	ldr	r2, [r0, #0]
 800695a:	6853      	ldr	r3, [r2, #4]
 800695c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006960:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006962:	430b      	orrs	r3, r1
 8006964:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006966:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006968:	f013 0f02 	tst.w	r3, #2
 800696c:	d006      	beq.n	800697c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800696e:	6802      	ldr	r2, [r0, #0]
 8006970:	6853      	ldr	r3, [r2, #4]
 8006972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006976:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006978:	430b      	orrs	r3, r1
 800697a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800697c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800697e:	f013 0f04 	tst.w	r3, #4
 8006982:	d006      	beq.n	8006992 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006984:	6802      	ldr	r2, [r0, #0]
 8006986:	6853      	ldr	r3, [r2, #4]
 8006988:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800698c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800698e:	430b      	orrs	r3, r1
 8006990:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006992:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006994:	f013 0f08 	tst.w	r3, #8
 8006998:	d006      	beq.n	80069a8 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800699a:	6802      	ldr	r2, [r0, #0]
 800699c:	6853      	ldr	r3, [r2, #4]
 800699e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069a2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80069a4:	430b      	orrs	r3, r1
 80069a6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80069aa:	f013 0f10 	tst.w	r3, #16
 80069ae:	d006      	beq.n	80069be <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069b0:	6802      	ldr	r2, [r0, #0]
 80069b2:	6893      	ldr	r3, [r2, #8]
 80069b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069b8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80069ba:	430b      	orrs	r3, r1
 80069bc:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80069c0:	f013 0f20 	tst.w	r3, #32
 80069c4:	d006      	beq.n	80069d4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069c6:	6802      	ldr	r2, [r0, #0]
 80069c8:	6893      	ldr	r3, [r2, #8]
 80069ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069ce:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80069d0:	430b      	orrs	r3, r1
 80069d2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80069d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80069da:	d00a      	beq.n	80069f2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069dc:	6802      	ldr	r2, [r0, #0]
 80069de:	6853      	ldr	r3, [r2, #4]
 80069e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80069e4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80069e6:	430b      	orrs	r3, r1
 80069e8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069ea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80069ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f0:	d00b      	beq.n	8006a0a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80069f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80069f8:	d006      	beq.n	8006a08 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069fa:	6802      	ldr	r2, [r0, #0]
 80069fc:	6853      	ldr	r3, [r2, #4]
 80069fe:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006a02:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006a04:	430b      	orrs	r3, r1
 8006a06:	6053      	str	r3, [r2, #4]
}
 8006a08:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a0a:	6802      	ldr	r2, [r0, #0]
 8006a0c:	6853      	ldr	r3, [r2, #4]
 8006a0e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006a12:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006a14:	430b      	orrs	r3, r1
 8006a16:	6053      	str	r3, [r2, #4]
 8006a18:	e7eb      	b.n	80069f2 <UART_AdvFeatureConfig+0xa2>

08006a1a <UART_WaitOnFlagUntilTimeout>:
{
 8006a1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a1e:	4605      	mov	r5, r0
 8006a20:	460f      	mov	r7, r1
 8006a22:	4616      	mov	r6, r2
 8006a24:	4699      	mov	r9, r3
 8006a26:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a2a:	682c      	ldr	r4, [r5, #0]
 8006a2c:	69e4      	ldr	r4, [r4, #28]
 8006a2e:	ea37 0304 	bics.w	r3, r7, r4
 8006a32:	bf0c      	ite	eq
 8006a34:	f04f 0c01 	moveq.w	ip, #1
 8006a38:	f04f 0c00 	movne.w	ip, #0
 8006a3c:	45b4      	cmp	ip, r6
 8006a3e:	d157      	bne.n	8006af0 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 8006a40:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006a44:	d0f1      	beq.n	8006a2a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a46:	f7fb f84b 	bl	8001ae0 <HAL_GetTick>
 8006a4a:	eba0 0009 	sub.w	r0, r0, r9
 8006a4e:	4540      	cmp	r0, r8
 8006a50:	d82f      	bhi.n	8006ab2 <UART_WaitOnFlagUntilTimeout+0x98>
 8006a52:	f1b8 0f00 	cmp.w	r8, #0
 8006a56:	d02c      	beq.n	8006ab2 <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	f012 0f04 	tst.w	r2, #4
 8006a60:	d0e3      	beq.n	8006a2a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a62:	69da      	ldr	r2, [r3, #28]
 8006a64:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006a68:	d0df      	beq.n	8006a2a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a6e:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006a70:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	e852 3f00 	ldrex	r3, [r2]
 8006a76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	e842 3100 	strex	r1, r3, [r2]
 8006a7e:	2900      	cmp	r1, #0
 8006a80:	d1f6      	bne.n	8006a70 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a82:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a84:	f102 0308 	add.w	r3, r2, #8
 8006a88:	e853 3f00 	ldrex	r3, [r3]
 8006a8c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	3208      	adds	r2, #8
 8006a92:	e842 3100 	strex	r1, r3, [r2]
 8006a96:	2900      	cmp	r1, #0
 8006a98:	d1f3      	bne.n	8006a82 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 8006a9a:	2320      	movs	r3, #32
 8006a9c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006aa0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006aa4:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8006aae:	2003      	movs	r0, #3
 8006ab0:	e01f      	b.n	8006af2 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ab2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	e852 3f00 	ldrex	r3, [r2]
 8006ab8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abc:	e842 3100 	strex	r1, r3, [r2]
 8006ac0:	2900      	cmp	r1, #0
 8006ac2:	d1f6      	bne.n	8006ab2 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	f102 0308 	add.w	r3, r2, #8
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad2:	3208      	adds	r2, #8
 8006ad4:	e842 3100 	strex	r1, r3, [r2]
 8006ad8:	2900      	cmp	r1, #0
 8006ada:	d1f3      	bne.n	8006ac4 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8006adc:	2320      	movs	r3, #32
 8006ade:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006ae2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8006aec:	2003      	movs	r0, #3
 8006aee:	e000      	b.n	8006af2 <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 8006af0:	2000      	movs	r0, #0
}
 8006af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006af6 <UART_CheckIdleState>:
{
 8006af6:	b530      	push	{r4, r5, lr}
 8006af8:	b083      	sub	sp, #12
 8006afa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006afc:	2300      	movs	r3, #0
 8006afe:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8006b02:	f7fa ffed 	bl	8001ae0 <HAL_GetTick>
 8006b06:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b08:	6822      	ldr	r2, [r4, #0]
 8006b0a:	6812      	ldr	r2, [r2, #0]
 8006b0c:	f012 0f08 	tst.w	r2, #8
 8006b10:	d10f      	bne.n	8006b32 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f013 0f04 	tst.w	r3, #4
 8006b1a:	d118      	bne.n	8006b4e <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8006b1c:	2320      	movs	r3, #32
 8006b1e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006b22:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b26:	2000      	movs	r0, #0
 8006b28:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8006b2a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006b2e:	b003      	add	sp, #12
 8006b30:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b40:	4620      	mov	r0, r4
 8006b42:	f7ff ff6a 	bl	8006a1a <UART_WaitOnFlagUntilTimeout>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	d0e3      	beq.n	8006b12 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006b4a:	2003      	movs	r0, #3
 8006b4c:	e7ef      	b.n	8006b2e <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	462b      	mov	r3, r5
 8006b56:	2200      	movs	r2, #0
 8006b58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f7ff ff5c 	bl	8006a1a <UART_WaitOnFlagUntilTimeout>
 8006b62:	2800      	cmp	r0, #0
 8006b64:	d0da      	beq.n	8006b1c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006b66:	2003      	movs	r0, #3
 8006b68:	e7e1      	b.n	8006b2e <UART_CheckIdleState+0x38>

08006b6a <HAL_UART_Init>:
  if (huart == NULL)
 8006b6a:	b378      	cbz	r0, 8006bcc <HAL_UART_Init+0x62>
{
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006b70:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006b74:	b30b      	cbz	r3, 8006bba <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006b76:	2324      	movs	r3, #36	; 0x24
 8006b78:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006b7c:	6822      	ldr	r2, [r4, #0]
 8006b7e:	6813      	ldr	r3, [r2, #0]
 8006b80:	f023 0301 	bic.w	r3, r3, #1
 8006b84:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b86:	4620      	mov	r0, r4
 8006b88:	f7ff fd7c 	bl	8006684 <UART_SetConfig>
 8006b8c:	2801      	cmp	r0, #1
 8006b8e:	d013      	beq.n	8006bb8 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b92:	b9bb      	cbnz	r3, 8006bc4 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b94:	6822      	ldr	r2, [r4, #0]
 8006b96:	6853      	ldr	r3, [r2, #4]
 8006b98:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006b9c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b9e:	6822      	ldr	r2, [r4, #0]
 8006ba0:	6893      	ldr	r3, [r2, #8]
 8006ba2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006ba6:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006ba8:	6822      	ldr	r2, [r4, #0]
 8006baa:	6813      	ldr	r3, [r2, #0]
 8006bac:	f043 0301 	orr.w	r3, r3, #1
 8006bb0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f7ff ff9f 	bl	8006af6 <UART_CheckIdleState>
}
 8006bb8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006bba:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006bbe:	f7fb f9c9 	bl	8001f54 <HAL_UART_MspInit>
 8006bc2:	e7d8      	b.n	8006b76 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f7ff fec3 	bl	8006950 <UART_AdvFeatureConfig>
 8006bca:	e7e3      	b.n	8006b94 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8006bcc:	2001      	movs	r0, #1
}
 8006bce:	4770      	bx	lr

08006bd0 <UART_Start_Receive_IT>:
{
 8006bd0:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8006bd2:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006bd4:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006bd8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8006be0:	6883      	ldr	r3, [r0, #8]
 8006be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be6:	d006      	beq.n	8006bf6 <UART_Start_Receive_IT+0x26>
 8006be8:	b9a3      	cbnz	r3, 8006c14 <UART_Start_Receive_IT+0x44>
 8006bea:	6903      	ldr	r3, [r0, #16]
 8006bec:	b973      	cbnz	r3, 8006c0c <UART_Start_Receive_IT+0x3c>
 8006bee:	23ff      	movs	r3, #255	; 0xff
 8006bf0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006bf4:	e014      	b.n	8006c20 <UART_Start_Receive_IT+0x50>
 8006bf6:	6903      	ldr	r3, [r0, #16]
 8006bf8:	b923      	cbnz	r3, 8006c04 <UART_Start_Receive_IT+0x34>
 8006bfa:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006bfe:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006c02:	e00d      	b.n	8006c20 <UART_Start_Receive_IT+0x50>
 8006c04:	23ff      	movs	r3, #255	; 0xff
 8006c06:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006c0a:	e009      	b.n	8006c20 <UART_Start_Receive_IT+0x50>
 8006c0c:	237f      	movs	r3, #127	; 0x7f
 8006c0e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006c12:	e005      	b.n	8006c20 <UART_Start_Receive_IT+0x50>
 8006c14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c18:	d030      	beq.n	8006c7c <UART_Start_Receive_IT+0xac>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c20:	2300      	movs	r3, #0
 8006c22:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c26:	2322      	movs	r3, #34	; 0x22
 8006c28:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2c:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2e:	f101 0308 	add.w	r3, r1, #8
 8006c32:	e853 3f00 	ldrex	r3, [r3]
 8006c36:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	3108      	adds	r1, #8
 8006c3c:	e841 3400 	strex	r4, r3, [r1]
 8006c40:	2c00      	cmp	r4, #0
 8006c42:	d1f3      	bne.n	8006c2c <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006c44:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006c46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c4a:	d021      	beq.n	8006c90 <UART_Start_Receive_IT+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c4c:	6883      	ldr	r3, [r0, #8]
 8006c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c52:	d048      	beq.n	8006ce6 <UART_Start_Receive_IT+0x116>
      huart->RxISR = UART_RxISR_8BIT;
 8006c54:	4b2c      	ldr	r3, [pc, #176]	; (8006d08 <UART_Start_Receive_IT+0x138>)
 8006c56:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006c5e:	6903      	ldr	r3, [r0, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d046      	beq.n	8006cf2 <UART_Start_Receive_IT+0x122>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006c64:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	e852 3f00 	ldrex	r3, [r2]
 8006c6a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	e842 3100 	strex	r1, r3, [r2]
 8006c72:	2900      	cmp	r1, #0
 8006c74:	d1f6      	bne.n	8006c64 <UART_Start_Receive_IT+0x94>
}
 8006c76:	2000      	movs	r0, #0
 8006c78:	bc10      	pop	{r4}
 8006c7a:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006c7c:	6903      	ldr	r3, [r0, #16]
 8006c7e:	b91b      	cbnz	r3, 8006c88 <UART_Start_Receive_IT+0xb8>
 8006c80:	237f      	movs	r3, #127	; 0x7f
 8006c82:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006c86:	e7cb      	b.n	8006c20 <UART_Start_Receive_IT+0x50>
 8006c88:	233f      	movs	r3, #63	; 0x3f
 8006c8a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006c8e:	e7c7      	b.n	8006c20 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006c90:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d8d9      	bhi.n	8006c4c <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c98:	6883      	ldr	r3, [r0, #8]
 8006c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c9e:	d01c      	beq.n	8006cda <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006ca0:	4b1a      	ldr	r3, [pc, #104]	; (8006d0c <UART_Start_Receive_IT+0x13c>)
 8006ca2:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006caa:	6903      	ldr	r3, [r0, #16]
 8006cac:	b143      	cbz	r3, 8006cc0 <UART_Start_Receive_IT+0xf0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	e852 3f00 	ldrex	r3, [r2]
 8006cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	e842 3100 	strex	r1, r3, [r2]
 8006cbc:	2900      	cmp	r1, #0
 8006cbe:	d1f6      	bne.n	8006cae <UART_Start_Receive_IT+0xde>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006cc0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	f102 0308 	add.w	r3, r2, #8
 8006cc6:	e853 3f00 	ldrex	r3, [r3]
 8006cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cce:	3208      	adds	r2, #8
 8006cd0:	e842 3100 	strex	r1, r3, [r2]
 8006cd4:	2900      	cmp	r1, #0
 8006cd6:	d1f3      	bne.n	8006cc0 <UART_Start_Receive_IT+0xf0>
 8006cd8:	e7cd      	b.n	8006c76 <UART_Start_Receive_IT+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cda:	6903      	ldr	r3, [r0, #16]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1df      	bne.n	8006ca0 <UART_Start_Receive_IT+0xd0>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <UART_Start_Receive_IT+0x140>)
 8006ce2:	6703      	str	r3, [r0, #112]	; 0x70
 8006ce4:	e7de      	b.n	8006ca4 <UART_Start_Receive_IT+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce6:	6903      	ldr	r3, [r0, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1b3      	bne.n	8006c54 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8006cec:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <UART_Start_Receive_IT+0x144>)
 8006cee:	6703      	str	r3, [r0, #112]	; 0x70
 8006cf0:	e7b2      	b.n	8006c58 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006cf2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	e852 3f00 	ldrex	r3, [r2]
 8006cf8:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfc:	e842 3100 	strex	r1, r3, [r2]
 8006d00:	2900      	cmp	r1, #0
 8006d02:	d1f6      	bne.n	8006cf2 <UART_Start_Receive_IT+0x122>
 8006d04:	e7b7      	b.n	8006c76 <UART_Start_Receive_IT+0xa6>
 8006d06:	bf00      	nop
 8006d08:	080061e1 	.word	0x080061e1
 8006d0c:	08006345 	.word	0x08006345
 8006d10:	080064e5 	.word	0x080064e5
 8006d14:	08006293 	.word	0x08006293

08006d18 <HAL_UART_Receive_IT>:
{
 8006d18:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d1a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006d1e:	2b20      	cmp	r3, #32
 8006d20:	d11e      	bne.n	8006d60 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8006d22:	b1f9      	cbz	r1, 8006d64 <HAL_UART_Receive_IT+0x4c>
 8006d24:	b302      	cbz	r2, 8006d68 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 8006d26:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d01e      	beq.n	8006d6c <HAL_UART_Receive_IT+0x54>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d34:	2300      	movs	r3, #0
 8006d36:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d38:	6803      	ldr	r3, [r0, #0]
 8006d3a:	4c0d      	ldr	r4, [pc, #52]	; (8006d70 <HAL_UART_Receive_IT+0x58>)
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	d00c      	beq.n	8006d5a <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006d46:	d008      	beq.n	8006d5a <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d48:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	e854 3f00 	ldrex	r3, [r4]
 8006d4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	e844 3500 	strex	r5, r3, [r4]
 8006d56:	2d00      	cmp	r5, #0
 8006d58:	d1f6      	bne.n	8006d48 <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 8006d5a:	f7ff ff39 	bl	8006bd0 <UART_Start_Receive_IT>
 8006d5e:	e000      	b.n	8006d62 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8006d60:	2002      	movs	r0, #2
}
 8006d62:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006d64:	2001      	movs	r0, #1
 8006d66:	e7fc      	b.n	8006d62 <HAL_UART_Receive_IT+0x4a>
 8006d68:	2001      	movs	r0, #1
 8006d6a:	e7fa      	b.n	8006d62 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8006d6c:	2002      	movs	r0, #2
 8006d6e:	e7f8      	b.n	8006d62 <HAL_UART_Receive_IT+0x4a>
 8006d70:	40008000 	.word	0x40008000

08006d74 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006d74:	b082      	sub	sp, #8
 8006d76:	ab02      	add	r3, sp, #8
 8006d78:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006d7c:	6802      	ldr	r2, [r0, #0]
 8006d7e:	6853      	ldr	r3, [r2, #4]
 8006d80:	f023 0310 	bic.w	r3, r3, #16
 8006d84:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006d8c:	6802      	ldr	r2, [r0, #0]
 8006d8e:	6853      	ldr	r3, [r2, #4]
 8006d90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d94:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8006d98:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006d9c:	6053      	str	r3, [r2, #4]
}
 8006d9e:	b002      	add	sp, #8
 8006da0:	4770      	bx	lr
	...

08006da4 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006da4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006da6:	b92b      	cbnz	r3, 8006db4 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006da8:	2301      	movs	r3, #1
 8006daa:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006dae:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8006db2:	4770      	bx	lr
{
 8006db4:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006db6:	6803      	ldr	r3, [r0, #0]
 8006db8:	689a      	ldr	r2, [r3, #8]
 8006dba:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dbe:	6899      	ldr	r1, [r3, #8]
 8006dc0:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dc2:	4d09      	ldr	r5, [pc, #36]	; (8006de8 <UARTEx_SetNbDataToProcess+0x44>)
 8006dc4:	5c6b      	ldrb	r3, [r5, r1]
 8006dc6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006dc8:	4c08      	ldr	r4, [pc, #32]	; (8006dec <UARTEx_SetNbDataToProcess+0x48>)
 8006dca:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dcc:	fb93 f3f1 	sdiv	r3, r3, r1
 8006dd0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dd4:	5cab      	ldrb	r3, [r5, r2]
 8006dd6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006dd8:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dda:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dde:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8006de2:	bc30      	pop	{r4, r5}
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	08013de0 	.word	0x08013de0
 8006dec:	08013dd8 	.word	0x08013dd8

08006df0 <HAL_UARTEx_WakeupCallback>:
}
 8006df0:	4770      	bx	lr

08006df2 <HAL_UARTEx_RxFifoFullCallback>:
}
 8006df2:	4770      	bx	lr

08006df4 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006df4:	4770      	bx	lr

08006df6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8006df6:	b510      	push	{r4, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	ab04      	add	r3, sp, #16
 8006dfc:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8006e00:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d035      	beq.n	8006e74 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8006e08:	4604      	mov	r4, r0
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006e10:	2324      	movs	r3, #36	; 0x24
 8006e12:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006e16:	6802      	ldr	r2, [r0, #0]
 8006e18:	6813      	ldr	r3, [r2, #0]
 8006e1a:	f023 0301 	bic.w	r3, r3, #1
 8006e1e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006e20:	6801      	ldr	r1, [r0, #0]
 8006e22:	688b      	ldr	r3, [r1, #8]
 8006e24:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006e28:	9a02      	ldr	r2, [sp, #8]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006e2e:	b1aa      	cbz	r2, 8006e5c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8006e30:	6822      	ldr	r2, [r4, #0]
 8006e32:	6813      	ldr	r3, [r2, #0]
 8006e34:	f043 0301 	orr.w	r3, r3, #1
 8006e38:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8006e3a:	f7fa fe51 	bl	8001ae0 <HAL_GetTick>
 8006e3e:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e40:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8006e44:	9200      	str	r2, [sp, #0]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f7ff fde4 	bl	8006a1a <UART_WaitOnFlagUntilTimeout>
 8006e52:	b948      	cbnz	r0, 8006e68 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8006e54:	2320      	movs	r3, #32
 8006e56:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006e5a:	e006      	b.n	8006e6a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006e5c:	ab04      	add	r3, sp, #16
 8006e5e:	e913 0006 	ldmdb	r3, {r1, r2}
 8006e62:	f7ff ff87 	bl	8006d74 <UARTEx_Wakeup_AddressConfig>
 8006e66:	e7e3      	b.n	8006e30 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8006e68:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006e70:	b004      	add	sp, #16
 8006e72:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006e74:	2002      	movs	r0, #2
 8006e76:	e7fb      	b.n	8006e70 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08006e78 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8006e78:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d010      	beq.n	8006ea2 <HAL_UARTEx_EnableStopMode+0x2a>
 8006e80:	2301      	movs	r3, #1
 8006e82:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006e86:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	e852 3f00 	ldrex	r3, [r2]
 8006e8c:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e90:	e842 3100 	strex	r1, r3, [r2]
 8006e94:	2900      	cmp	r1, #0
 8006e96:	d1f6      	bne.n	8006e86 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006ea2:	2002      	movs	r0, #2
}
 8006ea4:	4770      	bx	lr

08006ea6 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8006ea6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d01d      	beq.n	8006eea <HAL_UARTEx_EnableFifoMode+0x44>
{
 8006eae:	b510      	push	{r4, lr}
 8006eb0:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006eb8:	2324      	movs	r3, #36	; 0x24
 8006eba:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ebe:	6802      	ldr	r2, [r0, #0]
 8006ec0:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006ec2:	6811      	ldr	r1, [r2, #0]
 8006ec4:	f021 0101 	bic.w	r1, r1, #1
 8006ec8:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006eca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006ece:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006ed2:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ed4:	6802      	ldr	r2, [r0, #0]
 8006ed6:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8006ed8:	f7ff ff64 	bl	8006da4 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8006edc:	2320      	movs	r3, #32
 8006ede:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006ee8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006eea:	2002      	movs	r0, #2
}
 8006eec:	4770      	bx	lr

08006eee <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006eee:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006ef0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d01d      	beq.n	8006f34 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006ef8:	4604      	mov	r4, r0
 8006efa:	2301      	movs	r3, #1
 8006efc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006f00:	2324      	movs	r3, #36	; 0x24
 8006f02:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f06:	6803      	ldr	r3, [r0, #0]
 8006f08:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	f022 0201 	bic.w	r2, r2, #1
 8006f10:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f12:	6802      	ldr	r2, [r0, #0]
 8006f14:	6893      	ldr	r3, [r2, #8]
 8006f16:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006f1a:	4319      	orrs	r1, r3
 8006f1c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006f1e:	f7ff ff41 	bl	8006da4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006f26:	2320      	movs	r3, #32
 8006f28:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006f32:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006f34:	2002      	movs	r0, #2
 8006f36:	e7fc      	b.n	8006f32 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006f38 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006f38:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006f3a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d01d      	beq.n	8006f7e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006f42:	4604      	mov	r4, r0
 8006f44:	2301      	movs	r3, #1
 8006f46:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006f4a:	2324      	movs	r3, #36	; 0x24
 8006f4c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f50:	6803      	ldr	r3, [r0, #0]
 8006f52:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	f022 0201 	bic.w	r2, r2, #1
 8006f5a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f5c:	6802      	ldr	r2, [r0, #0]
 8006f5e:	6893      	ldr	r3, [r2, #8]
 8006f60:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8006f64:	4319      	orrs	r1, r3
 8006f66:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006f68:	f7ff ff1c 	bl	8006da4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006f70:	2320      	movs	r3, #32
 8006f72:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006f76:	2000      	movs	r0, #0
 8006f78:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006f7c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006f7e:	2002      	movs	r0, #2
 8006f80:	e7fc      	b.n	8006f7c <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08006f84 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8006f84:	2804      	cmp	r0, #4
 8006f86:	d807      	bhi.n	8006f98 <LmHandlerPackageIsInitialized+0x14>
{
 8006f88:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8006f8a:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <LmHandlerPackageIsInitialized+0x1c>)
 8006f8c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	b11b      	cbz	r3, 8006f9c <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8006f94:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8006f96:	bd08      	pop	{r3, pc}
        return false;
 8006f98:	2000      	movs	r0, #0
}
 8006f9a:	4770      	bx	lr
        return false;
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	e7fa      	b.n	8006f96 <LmHandlerPackageIsInitialized+0x12>
 8006fa0:	20000608 	.word	0x20000608

08006fa4 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8006fa4:	b570      	push	{r4, r5, r6, lr}
 8006fa6:	4605      	mov	r5, r0
 8006fa8:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006faa:	2400      	movs	r4, #0
 8006fac:	e005      	b.n	8006fba <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	b10b      	cbz	r3, 8006fb6 <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006fb6:	3401      	adds	r4, #1
 8006fb8:	b264      	sxtb	r4, r4
 8006fba:	2c04      	cmp	r4, #4
 8006fbc:	dc24      	bgt.n	8007008 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8006fbe:	4b13      	ldr	r3, [pc, #76]	; (800700c <LmHandlerPackagesNotify+0x68>)
 8006fc0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0f6      	beq.n	8006fb6 <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8006fc8:	2d03      	cmp	r5, #3
 8006fca:	d8f4      	bhi.n	8006fb6 <LmHandlerPackagesNotify+0x12>
 8006fcc:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <LmHandlerPackagesNotify+0x30>)
 8006fce:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8006fd2:	bf00      	nop
 8006fd4:	08006faf 	.word	0x08006faf
 8006fd8:	08006fe5 	.word	0x08006fe5
 8006fdc:	08006ff1 	.word	0x08006ff1
 8006fe0:	08006ffd 	.word	0x08006ffd
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d0e5      	beq.n	8006fb6 <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 8006fea:	4630      	mov	r0, r6
 8006fec:	4798      	blx	r3
 8006fee:	e7e2      	b.n	8006fb6 <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d0df      	beq.n	8006fb6 <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	4798      	blx	r3
 8006ffa:	e7dc      	b.n	8006fb6 <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0d9      	beq.n	8006fb6 <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8007002:	4630      	mov	r0, r6
 8007004:	4798      	blx	r3
 8007006:	e7d6      	b.n	8006fb6 <LmHandlerPackagesNotify+0x12>
                    break;
                }
            }
        }
    }
}
 8007008:	bd70      	pop	{r4, r5, r6, pc}
 800700a:	bf00      	nop
 800700c:	20000608 	.word	0x20000608

08007010 <McpsConfirm>:
{
 8007010:	b510      	push	{r4, lr}
 8007012:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8007014:	480c      	ldr	r0, [pc, #48]	; (8007048 <McpsConfirm+0x38>)
 8007016:	2301      	movs	r3, #1
 8007018:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 800701a:	7863      	ldrb	r3, [r4, #1]
 800701c:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800701e:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8007022:	7283      	strb	r3, [r0, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8007024:	68e3      	ldr	r3, [r4, #12]
 8007026:	60c3      	str	r3, [r0, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8007028:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800702c:	7603      	strb	r3, [r0, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800702e:	6923      	ldr	r3, [r4, #16]
 8007030:	7643      	strb	r3, [r0, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8007032:	7923      	ldrb	r3, [r4, #4]
 8007034:	7243      	strb	r3, [r0, #9]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8007036:	4b05      	ldr	r3, [pc, #20]	; (800704c <McpsConfirm+0x3c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703c:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800703e:	4621      	mov	r1, r4
 8007040:	2000      	movs	r0, #0
 8007042:	f7ff ffaf 	bl	8006fa4 <LmHandlerPackagesNotify>
}
 8007046:	bd10      	pop	{r4, pc}
 8007048:	200000ac 	.word	0x200000ac
 800704c:	20000604 	.word	0x20000604

08007050 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 8007050:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007052:	2400      	movs	r4, #0
 8007054:	e001      	b.n	800705a <LmHandlerPackageIsTxPending+0xa>
 8007056:	3401      	adds	r4, #1
 8007058:	b264      	sxtb	r4, r4
 800705a:	2c04      	cmp	r4, #4
 800705c:	dc0a      	bgt.n	8007074 <LmHandlerPackageIsTxPending+0x24>
    {
        if( LmHandlerPackages[i] != NULL )
 800705e:	4b07      	ldr	r3, [pc, #28]	; (800707c <LmHandlerPackageIsTxPending+0x2c>)
 8007060:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d0f6      	beq.n	8007056 <LmHandlerPackageIsTxPending+0x6>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	4798      	blx	r3
 800706c:	4603      	mov	r3, r0
 800706e:	2800      	cmp	r0, #0
 8007070:	d0f1      	beq.n	8007056 <LmHandlerPackageIsTxPending+0x6>
 8007072:	e000      	b.n	8007076 <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	bd10      	pop	{r4, pc}
 800707a:	bf00      	nop
 800707c:	20000608 	.word	0x20000608

08007080 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 8007080:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007082:	2400      	movs	r4, #0
 8007084:	e001      	b.n	800708a <LmHandlerPackagesProcess+0xa>
 8007086:	3401      	adds	r4, #1
 8007088:	b264      	sxtb	r4, r4
 800708a:	2c04      	cmp	r4, #4
 800708c:	dc12      	bgt.n	80070b4 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800708e:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <LmHandlerPackagesProcess+0x38>)
 8007090:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d0f6      	beq.n	8007086 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8007098:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800709a:	2b00      	cmp	r3, #0
 800709c:	d0f3      	beq.n	8007086 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800709e:	b2e0      	uxtb	r0, r4
 80070a0:	f7ff ff70 	bl	8006f84 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80070a4:	2800      	cmp	r0, #0
 80070a6:	d0ee      	beq.n	8007086 <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 80070a8:	4b03      	ldr	r3, [pc, #12]	; (80070b8 <LmHandlerPackagesProcess+0x38>)
 80070aa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	4798      	blx	r3
 80070b2:	e7e8      	b.n	8007086 <LmHandlerPackagesProcess+0x6>
        }
    }
}
 80070b4:	bd38      	pop	{r3, r4, r5, pc}
 80070b6:	bf00      	nop
 80070b8:	20000608 	.word	0x20000608

080070bc <LmHandlerBeaconReq>:
{
 80070bc:	b500      	push	{lr}
 80070be:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_BEACON_ACQUISITION;
 80070c0:	230b      	movs	r3, #11
 80070c2:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 80070c6:	a801      	add	r0, sp, #4
 80070c8:	f003 fff2 	bl	800b0b0 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 80070cc:	9a05      	ldr	r2, [sp, #20]
 80070ce:	4b04      	ldr	r3, [pc, #16]	; (80070e0 <LmHandlerBeaconReq+0x24>)
 80070d0:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 80070d2:	b910      	cbnz	r0, 80070da <LmHandlerBeaconReq+0x1e>
}
 80070d4:	b007      	add	sp, #28
 80070d6:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80070da:	f04f 30ff 	mov.w	r0, #4294967295
 80070de:	e7f9      	b.n	80070d4 <LmHandlerBeaconReq+0x18>
 80070e0:	200005fc 	.word	0x200005fc

080070e4 <LmHandlerDeviceTimeReq>:
{
 80070e4:	b500      	push	{lr}
 80070e6:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 80070e8:	2309      	movs	r3, #9
 80070ea:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 80070ee:	a801      	add	r0, sp, #4
 80070f0:	f003 ffde 	bl	800b0b0 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 80070f4:	9a05      	ldr	r2, [sp, #20]
 80070f6:	4b04      	ldr	r3, [pc, #16]	; (8007108 <LmHandlerDeviceTimeReq+0x24>)
 80070f8:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 80070fa:	b910      	cbnz	r0, 8007102 <LmHandlerDeviceTimeReq+0x1e>
}
 80070fc:	b007      	add	sp, #28
 80070fe:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8007102:	f04f 30ff 	mov.w	r0, #4294967295
 8007106:	e7f9      	b.n	80070fc <LmHandlerDeviceTimeReq+0x18>
 8007108:	200005fc 	.word	0x200005fc

0800710c <MlmeIndication>:
{
 800710c:	b510      	push	{r4, lr}
 800710e:	b08a      	sub	sp, #40	; 0x28
 8007110:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8007112:	4b40      	ldr	r3, [pc, #256]	; (8007214 <MlmeIndication+0x108>)
 8007114:	2200      	movs	r2, #0
 8007116:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8007118:	7842      	ldrb	r2, [r0, #1]
 800711a:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800711c:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8007120:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8007122:	f9b1 2000 	ldrsh.w	r2, [r1]
 8007126:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8007128:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800712c:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800712e:	78ca      	ldrb	r2, [r1, #3]
 8007130:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8007132:	6842      	ldr	r2, [r0, #4]
 8007134:	60da      	str	r2, [r3, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 8007136:	7803      	ldrb	r3, [r0, #0]
 8007138:	2b0a      	cmp	r3, #10
 800713a:	d007      	beq.n	800714c <MlmeIndication+0x40>
 800713c:	2b0e      	cmp	r3, #14
 800713e:	d005      	beq.n	800714c <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8007140:	4b35      	ldr	r3, [pc, #212]	; (8007218 <MlmeIndication+0x10c>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007146:	4933      	ldr	r1, [pc, #204]	; (8007214 <MlmeIndication+0x108>)
 8007148:	2000      	movs	r0, #0
 800714a:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800714c:	4621      	mov	r1, r4
 800714e:	2003      	movs	r0, #3
 8007150:	f7ff ff28 	bl	8006fa4 <LmHandlerPackagesNotify>
    switch( mlmeIndication->MlmeIndication )
 8007154:	7823      	ldrb	r3, [r4, #0]
 8007156:	2b0a      	cmp	r3, #10
 8007158:	d02a      	beq.n	80071b0 <MlmeIndication+0xa4>
 800715a:	2b0e      	cmp	r3, #14
 800715c:	d007      	beq.n	800716e <MlmeIndication+0x62>
 800715e:	2b06      	cmp	r3, #6
 8007160:	d001      	beq.n	8007166 <MlmeIndication+0x5a>
}
 8007162:	b00a      	add	sp, #40	; 0x28
 8007164:	bd10      	pop	{r4, pc}
            IsUplinkTxPending = true;
 8007166:	4b2d      	ldr	r3, [pc, #180]	; (800721c <MlmeIndication+0x110>)
 8007168:	2201      	movs	r2, #1
 800716a:	701a      	strb	r2, [r3, #0]
        break;
 800716c:	e7f9      	b.n	8007162 <MlmeIndication+0x56>
            mibReq.Type = MIB_DEVICE_CLASS;
 800716e:	2400      	movs	r4, #0
 8007170:	f88d 4004 	strb.w	r4, [sp, #4]
            mibReq.Param.Class = CLASS_A;
 8007174:	f88d 4008 	strb.w	r4, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007178:	a801      	add	r0, sp, #4
 800717a:	f003 fd13 	bl	800aba4 <LoRaMacMibSetRequestConfirm>
            BeaconParams.State = LORAMAC_HANDLER_BEACON_LOST;
 800717e:	4828      	ldr	r0, [pc, #160]	; (8007220 <MlmeIndication+0x114>)
 8007180:	2301      	movs	r3, #1
 8007182:	7043      	strb	r3, [r0, #1]
            BeaconParams.Info.Time.Seconds = 0;
 8007184:	6044      	str	r4, [r0, #4]
            BeaconParams.Info.GwSpecific.InfoDesc = 0;
 8007186:	7584      	strb	r4, [r0, #22]
            UTIL_MEM_set_8( BeaconParams.Info.GwSpecific.Info, 0, 6 );
 8007188:	2206      	movs	r2, #6
 800718a:	4621      	mov	r1, r4
 800718c:	3017      	adds	r0, #23
 800718e:	f00a fe3c 	bl	8011e0a <UTIL_MEM_set_8>
            if (LmHandlerCallbacks->OnClassChange != NULL)
 8007192:	4b21      	ldr	r3, [pc, #132]	; (8007218 <MlmeIndication+0x10c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007198:	b10b      	cbz	r3, 800719e <MlmeIndication+0x92>
                LmHandlerCallbacks->OnClassChange( CLASS_A );
 800719a:	4620      	mov	r0, r4
 800719c:	4798      	blx	r3
            if (LmHandlerCallbacks->OnBeaconStatusChange != NULL)
 800719e:	4b1e      	ldr	r3, [pc, #120]	; (8007218 <MlmeIndication+0x10c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a4:	b10b      	cbz	r3, 80071aa <MlmeIndication+0x9e>
                LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 80071a6:	481e      	ldr	r0, [pc, #120]	; (8007220 <MlmeIndication+0x114>)
 80071a8:	4798      	blx	r3
            LmHandlerDeviceTimeReq( );
 80071aa:	f7ff ff9b 	bl	80070e4 <LmHandlerDeviceTimeReq>
        break;
 80071ae:	e7d8      	b.n	8007162 <MlmeIndication+0x56>
            if( mlmeIndication->Status == LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 80071b0:	7863      	ldrb	r3, [r4, #1]
 80071b2:	2b0d      	cmp	r3, #13
 80071b4:	d017      	beq.n	80071e6 <MlmeIndication+0xda>
            else if ( mlmeIndication->Status == LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND )
 80071b6:	2b0f      	cmp	r3, #15
 80071b8:	d1d3      	bne.n	8007162 <MlmeIndication+0x56>
                BeaconParams.State = LORAMAC_HANDLER_BEACON_NRX;
 80071ba:	4b19      	ldr	r3, [pc, #100]	; (8007220 <MlmeIndication+0x114>)
 80071bc:	2203      	movs	r2, #3
 80071be:	705a      	strb	r2, [r3, #1]
                BeaconParams.Info = mlmeIndication->BeaconInfo;
 80071c0:	f103 0c04 	add.w	ip, r3, #4
 80071c4:	3408      	adds	r4, #8
 80071c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80071cc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80071d0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
                if (LmHandlerCallbacks->OnBeaconStatusChange != NULL)
 80071d4:	4b10      	ldr	r3, [pc, #64]	; (8007218 <MlmeIndication+0x10c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0c1      	beq.n	8007162 <MlmeIndication+0x56>
                    LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 80071de:	f1ac 0014 	sub.w	r0, ip, #20
 80071e2:	4798      	blx	r3
}
 80071e4:	e7bd      	b.n	8007162 <MlmeIndication+0x56>
                BeaconParams.State = LORAMAC_HANDLER_BEACON_RX;
 80071e6:	4b0e      	ldr	r3, [pc, #56]	; (8007220 <MlmeIndication+0x114>)
 80071e8:	2202      	movs	r2, #2
 80071ea:	705a      	strb	r2, [r3, #1]
                BeaconParams.Info = mlmeIndication->BeaconInfo;
 80071ec:	f103 0c04 	add.w	ip, r3, #4
 80071f0:	3408      	adds	r4, #8
 80071f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80071f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80071fc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
                if (LmHandlerCallbacks->OnBeaconStatusChange != NULL)
 8007200:	4b05      	ldr	r3, [pc, #20]	; (8007218 <MlmeIndication+0x10c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0ab      	beq.n	8007162 <MlmeIndication+0x56>
                    LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 800720a:	f1ac 0014 	sub.w	r0, ip, #20
 800720e:	4798      	blx	r3
 8007210:	e7a7      	b.n	8007162 <MlmeIndication+0x56>
 8007212:	bf00      	nop
 8007214:	20000098 	.word	0x20000098
 8007218:	20000604 	.word	0x20000604
 800721c:	20000601 	.word	0x20000601
 8007220:	200005d8 	.word	0x200005d8

08007224 <LmHandlerJoin>:
{
 8007224:	b510      	push	{r4, lr}
 8007226:	b08e      	sub	sp, #56	; 0x38
 8007228:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 800722a:	2301      	movs	r3, #1
 800722c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8007230:	4b26      	ldr	r3, [pc, #152]	; (80072cc <LmHandlerJoin+0xa8>)
 8007232:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8007236:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    if ( mode == ACTIVATION_TYPE_OTAA )
 800723a:	2802      	cmp	r0, #2
 800723c:	d021      	beq.n	8007282 <LmHandlerJoin+0x5e>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800723e:	2101      	movs	r1, #1
 8007240:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8007244:	4b22      	ldr	r3, [pc, #136]	; (80072d0 <LmHandlerJoin+0xac>)
 8007246:	7199      	strb	r1, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8007248:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800724a:	2100      	movs	r1, #0
 800724c:	7159      	strb	r1, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800724e:	71dc      	strb	r4, [r3, #7]
        if (CtxRestoreDone == false)
 8007250:	4b20      	ldr	r3, [pc, #128]	; (80072d4 <LmHandlerJoin+0xb0>)
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	b1f3      	cbz	r3, 8007294 <LmHandlerJoin+0x70>
        LoRaMacStart();
 8007256:	f003 fa9d 	bl	800a794 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800725a:	2301      	movs	r3, #1
 800725c:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8007260:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007264:	4668      	mov	r0, sp
 8007266:	f003 fc9d 	bl	800aba4 <LoRaMacMibSetRequestConfirm>
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800726a:	4b1a      	ldr	r3, [pc, #104]	; (80072d4 <LmHandlerJoin+0xb0>)
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	b103      	cbz	r3, 8007272 <LmHandlerJoin+0x4e>
 8007270:	b114      	cbz	r4, 8007278 <LmHandlerJoin+0x54>
        LoRaMacMlmeRequest( &mlmeReq );
 8007272:	a809      	add	r0, sp, #36	; 0x24
 8007274:	f003 ff1c 	bl	800b0b0 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8007278:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800727a:	4b17      	ldr	r3, [pc, #92]	; (80072d8 <LmHandlerJoin+0xb4>)
 800727c:	601a      	str	r2, [r3, #0]
}
 800727e:	b00e      	add	sp, #56	; 0x38
 8007280:	bd10      	pop	{r4, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8007282:	2202      	movs	r2, #2
 8007284:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8007288:	4b11      	ldr	r3, [pc, #68]	; (80072d0 <LmHandlerJoin+0xac>)
 800728a:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800728c:	71d9      	strb	r1, [r3, #7]
        LoRaMacStart();
 800728e:	f003 fa81 	bl	800a794 <LoRaMacStart>
 8007292:	e7ea      	b.n	800726a <LmHandlerJoin+0x46>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8007294:	231f      	movs	r3, #31
 8007296:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800729a:	f88d 2004 	strb.w	r2, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800729e:	4668      	mov	r0, sp
 80072a0:	f003 fc80 	bl	800aba4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 80072a4:	2320      	movs	r3, #32
 80072a6:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 80072aa:	4b08      	ldr	r3, [pc, #32]	; (80072cc <LmHandlerJoin+0xa8>)
 80072ac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80072b0:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80072b4:	4668      	mov	r0, sp
 80072b6:	f003 fc75 	bl	800aba4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80072ba:	2329      	movs	r3, #41	; 0x29
 80072bc:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80072c0:	4b06      	ldr	r3, [pc, #24]	; (80072dc <LmHandlerJoin+0xb8>)
 80072c2:	9301      	str	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 80072c4:	4668      	mov	r0, sp
 80072c6:	f003 fc6d 	bl	800aba4 <LoRaMacMibSetRequestConfirm>
 80072ca:	e7c4      	b.n	8007256 <LmHandlerJoin+0x32>
 80072cc:	2000061c 	.word	0x2000061c
 80072d0:	20000090 	.word	0x20000090
 80072d4:	200005f8 	.word	0x200005f8
 80072d8:	200005fc 	.word	0x200005fc
 80072dc:	01000400 	.word	0x01000400

080072e0 <LmHandlerGetDutyCycleWaitTime>:
}
 80072e0:	4b01      	ldr	r3, [pc, #4]	; (80072e8 <LmHandlerGetDutyCycleWaitTime+0x8>)
 80072e2:	6818      	ldr	r0, [r3, #0]
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	200005fc 	.word	0x200005fc

080072ec <LmHandlerJoinStatus>:
{
 80072ec:	b500      	push	{lr}
 80072ee:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80072f0:	2301      	movs	r3, #1
 80072f2:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 80072f6:	a801      	add	r0, sp, #4
 80072f8:	f003 fb06 	bl	800a908 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 80072fc:	b920      	cbnz	r0, 8007308 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 80072fe:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8007302:	b110      	cbz	r0, 800730a <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8007304:	2001      	movs	r0, #1
 8007306:	e000      	b.n	800730a <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 8007308:	2000      	movs	r0, #0
}
 800730a:	b00b      	add	sp, #44	; 0x2c
 800730c:	f85d fb04 	ldr.w	pc, [sp], #4

08007310 <LmHandlerSend>:
{
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	4604      	mov	r4, r0
 8007316:	460d      	mov	r5, r1
 8007318:	4616      	mov	r6, r2
    if (LoRaMacIsBusy() == true)
 800731a:	f002 fff5 	bl	800a308 <LoRaMacIsBusy>
 800731e:	2800      	cmp	r0, #0
 8007320:	d164      	bne.n	80073ec <LmHandlerSend+0xdc>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8007322:	f7ff ffe3 	bl	80072ec <LmHandlerJoinStatus>
 8007326:	2801      	cmp	r0, #1
 8007328:	d137      	bne.n	800739a <LmHandlerSend+0x8a>
    TxParams.MsgType = isTxConfirmed;
 800732a:	4b33      	ldr	r3, [pc, #204]	; (80073f8 <LmHandlerSend+0xe8>)
 800732c:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800732e:	3d00      	subs	r5, #0
 8007330:	bf18      	it	ne
 8007332:	2501      	movne	r5, #1
 8007334:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8007338:	4b30      	ldr	r3, [pc, #192]	; (80073fc <LmHandlerSend+0xec>)
 800733a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800733e:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8007342:	4669      	mov	r1, sp
 8007344:	7860      	ldrb	r0, [r4, #1]
 8007346:	f003 fa73 	bl	800a830 <LoRaMacQueryTxPossible>
 800734a:	b370      	cbz	r0, 80073aa <LmHandlerSend+0x9a>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800734c:	2300      	movs	r3, #0
 800734e:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8007352:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8007354:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8007358:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 800735c:	4b26      	ldr	r3, [pc, #152]	; (80073f8 <LmHandlerSend+0xe8>)
 800735e:	f103 0c10 	add.w	ip, r3, #16
 8007362:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007366:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800736a:	4a24      	ldr	r2, [pc, #144]	; (80073fc <LmHandlerSend+0xec>)
 800736c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007370:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8007372:	4631      	mov	r1, r6
 8007374:	a801      	add	r0, sp, #4
 8007376:	f003 ff95 	bl	800b2a4 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800737a:	9a05      	ldr	r2, [sp, #20]
 800737c:	4b20      	ldr	r3, [pc, #128]	; (8007400 <LmHandlerSend+0xf0>)
 800737e:	601a      	str	r2, [r3, #0]
    switch (status)
 8007380:	2811      	cmp	r0, #17
 8007382:	d830      	bhi.n	80073e6 <LmHandlerSend+0xd6>
 8007384:	e8df f000 	tbb	[pc, r0]
 8007388:	2f2f1c21 	.word	0x2f2f1c21
 800738c:	352f2f2f 	.word	0x352f2f2f
 8007390:	2c2f2f2f 	.word	0x2c2f2f2f
 8007394:	1c1c2f2f 	.word	0x1c1c2f2f
 8007398:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800739a:	4b1a      	ldr	r3, [pc, #104]	; (8007404 <LmHandlerSend+0xf4>)
 800739c:	79d9      	ldrb	r1, [r3, #7]
 800739e:	7998      	ldrb	r0, [r3, #6]
 80073a0:	f7ff ff40 	bl	8007224 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80073a4:	f06f 0502 	mvn.w	r5, #2
 80073a8:	e00c      	b.n	80073c4 <LmHandlerSend+0xb4>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 80073aa:	7823      	ldrb	r3, [r4, #0]
 80073ac:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 80073b0:	7863      	ldrb	r3, [r4, #1]
 80073b2:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 80073b6:	6863      	ldr	r3, [r4, #4]
 80073b8:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 80073ba:	f04f 35ff 	mov.w	r5, #4294967295
 80073be:	e7cd      	b.n	800735c <LmHandlerSend+0x4c>
    switch (status)
 80073c0:	f06f 0501 	mvn.w	r5, #1
}
 80073c4:	4628      	mov	r0, r5
 80073c6:	b006      	add	sp, #24
 80073c8:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 80073ca:	4b0f      	ldr	r3, [pc, #60]	; (8007408 <LmHandlerSend+0xf8>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	701a      	strb	r2, [r3, #0]
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 80073d0:	f115 0f07 	cmn.w	r5, #7
 80073d4:	d0f6      	beq.n	80073c4 <LmHandlerSend+0xb4>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 80073d6:	2500      	movs	r5, #0
 80073d8:	e7f4      	b.n	80073c4 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80073da:	f06f 0504 	mvn.w	r5, #4
            break;
 80073de:	e7f1      	b.n	80073c4 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 80073e0:	f06f 0505 	mvn.w	r5, #5
            break;
 80073e4:	e7ee      	b.n	80073c4 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80073e6:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 80073ea:	e7eb      	b.n	80073c4 <LmHandlerSend+0xb4>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80073ec:	f06f 0501 	mvn.w	r5, #1
 80073f0:	e7e8      	b.n	80073c4 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80073f2:	f06f 0502 	mvn.w	r5, #2
 80073f6:	e7e5      	b.n	80073c4 <LmHandlerSend+0xb4>
 80073f8:	200000ac 	.word	0x200000ac
 80073fc:	2000061c 	.word	0x2000061c
 8007400:	200005fc 	.word	0x200005fc
 8007404:	20000090 	.word	0x20000090
 8007408:	20000601 	.word	0x20000601

0800740c <LmHandlerProcess>:
{
 800740c:	b500      	push	{lr}
 800740e:	b083      	sub	sp, #12
    LoRaMacProcess( );
 8007410:	f002 ff94 	bl	800a33c <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 8007414:	f7ff fe34 	bl	8007080 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 8007418:	f7ff fe1a 	bl	8007050 <LmHandlerPackageIsTxPending>
 800741c:	b910      	cbnz	r0, 8007424 <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 800741e:	4b0b      	ldr	r3, [pc, #44]	; (800744c <LmHandlerProcess+0x40>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	b913      	cbnz	r3, 800742a <LmHandlerProcess+0x1e>
}
 8007424:	b003      	add	sp, #12
 8007426:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 800742a:	2200      	movs	r2, #0
 800742c:	f88d 2000 	strb.w	r2, [sp]
 8007430:	f88d 2001 	strb.w	r2, [sp, #1]
 8007434:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 8007436:	4b06      	ldr	r3, [pc, #24]	; (8007450 <LmHandlerProcess+0x44>)
 8007438:	78d9      	ldrb	r1, [r3, #3]
 800743a:	4668      	mov	r0, sp
 800743c:	f7ff ff68 	bl	8007310 <LmHandlerSend>
 8007440:	2800      	cmp	r0, #0
 8007442:	d1ef      	bne.n	8007424 <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 8007444:	4b01      	ldr	r3, [pc, #4]	; (800744c <LmHandlerProcess+0x40>)
 8007446:	2200      	movs	r2, #0
 8007448:	701a      	strb	r2, [r3, #0]
 800744a:	e7eb      	b.n	8007424 <LmHandlerProcess+0x18>
 800744c:	20000601 	.word	0x20000601
 8007450:	2000061c 	.word	0x2000061c

08007454 <LmHandlerPingSlotReq>:
{
 8007454:	b510      	push	{r4, lr}
 8007456:	b088      	sub	sp, #32
 8007458:	4604      	mov	r4, r0
    mlmeReq.Type = MLME_PING_SLOT_INFO;
 800745a:	230c      	movs	r3, #12
 800745c:	f88d 300c 	strb.w	r3, [sp, #12]
    mlmeReq.Req.PingSlotInfo.PingSlot.Fields.Periodicity = periodicity;
 8007460:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8007464:	f360 0302 	bfi	r3, r0, #0, #3
 8007468:	f88d 3010 	strb.w	r3, [sp, #16]
    mlmeReq.Req.PingSlotInfo.PingSlot.Fields.RFU = 0;
 800746c:	b2db      	uxtb	r3, r3
 800746e:	f36f 03c7 	bfc	r3, #3, #5
 8007472:	f88d 3010 	strb.w	r3, [sp, #16]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8007476:	a803      	add	r0, sp, #12
 8007478:	f003 fe1a 	bl	800b0b0 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800747c:	9a07      	ldr	r2, [sp, #28]
 800747e:	4b0a      	ldr	r3, [pc, #40]	; (80074a8 <LmHandlerPingSlotReq+0x54>)
 8007480:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 8007482:	b968      	cbnz	r0, 80074a0 <LmHandlerPingSlotReq+0x4c>
        LmHandlerParams.PingSlotPeriodicity = periodicity;
 8007484:	4b09      	ldr	r3, [pc, #36]	; (80074ac <LmHandlerPingSlotReq+0x58>)
 8007486:	731c      	strb	r4, [r3, #12]
        LmHandlerAppData_t appData =
 8007488:	2200      	movs	r2, #0
 800748a:	f88d 2004 	strb.w	r2, [sp, #4]
 800748e:	f88d 2005 	strb.w	r2, [sp, #5]
 8007492:	9202      	str	r2, [sp, #8]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
 8007494:	78d9      	ldrb	r1, [r3, #3]
 8007496:	a801      	add	r0, sp, #4
 8007498:	f7ff ff3a 	bl	8007310 <LmHandlerSend>
}
 800749c:	b008      	add	sp, #32
 800749e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80074a0:	f04f 30ff 	mov.w	r0, #4294967295
 80074a4:	e7fa      	b.n	800749c <LmHandlerPingSlotReq+0x48>
 80074a6:	bf00      	nop
 80074a8:	200005fc 	.word	0x200005fc
 80074ac:	2000061c 	.word	0x2000061c

080074b0 <LmHandlerRequestClass>:
{
 80074b0:	b510      	push	{r4, lr}
 80074b2:	b08a      	sub	sp, #40	; 0x28
 80074b4:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 80074b6:	f002 ff27 	bl	800a308 <LoRaMacIsBusy>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d13e      	bne.n	800753c <LmHandlerRequestClass+0x8c>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80074be:	f7ff ff15 	bl	80072ec <LmHandlerJoinStatus>
 80074c2:	2801      	cmp	r0, #1
 80074c4:	d13d      	bne.n	8007542 <LmHandlerRequestClass+0x92>
    mibReq.Type = MIB_DEVICE_CLASS;
 80074c6:	2300      	movs	r3, #0
 80074c8:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80074cc:	a801      	add	r0, sp, #4
 80074ce:	f003 fa1b 	bl	800a908 <LoRaMacMibGetRequestConfirm>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d138      	bne.n	8007548 <LmHandlerRequestClass+0x98>
    currentClass = mibReq.Param.Class;
 80074d6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 80074da:	42a3      	cmp	r3, r4
 80074dc:	d037      	beq.n	800754e <LmHandlerRequestClass+0x9e>
        switch( newClass )
 80074de:	2c01      	cmp	r4, #1
 80074e0:	d016      	beq.n	8007510 <LmHandlerRequestClass+0x60>
 80074e2:	2c02      	cmp	r4, #2
 80074e4:	d01b      	beq.n	800751e <LmHandlerRequestClass+0x6e>
 80074e6:	b114      	cbz	r4, 80074ee <LmHandlerRequestClass+0x3e>
 80074e8:	2000      	movs	r0, #0
}
 80074ea:	b00a      	add	sp, #40	; 0x28
 80074ec:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 80074ee:	b90b      	cbnz	r3, 80074f4 <LmHandlerRequestClass+0x44>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80074f0:	2000      	movs	r0, #0
 80074f2:	e7fa      	b.n	80074ea <LmHandlerRequestClass+0x3a>
                    mibReq.Param.Class = newClass;
 80074f4:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80074f8:	a801      	add	r0, sp, #4
 80074fa:	f003 fb53 	bl	800aba4 <LoRaMacMibSetRequestConfirm>
 80074fe:	bb40      	cbnz	r0, 8007552 <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8007500:	4b1c      	ldr	r3, [pc, #112]	; (8007574 <LmHandlerRequestClass+0xc4>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007506:	b33b      	cbz	r3, 8007558 <LmHandlerRequestClass+0xa8>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8007508:	4620      	mov	r0, r4
 800750a:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800750c:	2000      	movs	r0, #0
 800750e:	e7ec      	b.n	80074ea <LmHandlerRequestClass+0x3a>
                if( currentClass != CLASS_A )
 8007510:	bb23      	cbnz	r3, 800755c <LmHandlerRequestClass+0xac>
                    errorStatus = LmHandlerDeviceTimeReq( );
 8007512:	f7ff fde7 	bl	80070e4 <LmHandlerDeviceTimeReq>
                    IsClassBSwitchPending = true;
 8007516:	4b18      	ldr	r3, [pc, #96]	; (8007578 <LmHandlerRequestClass+0xc8>)
 8007518:	2201      	movs	r2, #1
 800751a:	701a      	strb	r2, [r3, #0]
 800751c:	e7e5      	b.n	80074ea <LmHandlerRequestClass+0x3a>
                if( currentClass != CLASS_A )
 800751e:	bb03      	cbnz	r3, 8007562 <LmHandlerRequestClass+0xb2>
                    mibReq.Param.Class = newClass;
 8007520:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8007524:	a801      	add	r0, sp, #4
 8007526:	f003 fb3d 	bl	800aba4 <LoRaMacMibSetRequestConfirm>
 800752a:	b9e8      	cbnz	r0, 8007568 <LmHandlerRequestClass+0xb8>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800752c:	4b11      	ldr	r3, [pc, #68]	; (8007574 <LmHandlerRequestClass+0xc4>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007532:	b1e3      	cbz	r3, 800756e <LmHandlerRequestClass+0xbe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8007534:	4620      	mov	r0, r4
 8007536:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007538:	2000      	movs	r0, #0
 800753a:	e7d6      	b.n	80074ea <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800753c:	f06f 0001 	mvn.w	r0, #1
 8007540:	e7d3      	b.n	80074ea <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007542:	f06f 0002 	mvn.w	r0, #2
 8007546:	e7d0      	b.n	80074ea <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_ERROR;
 8007548:	f04f 30ff 	mov.w	r0, #4294967295
 800754c:	e7cd      	b.n	80074ea <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800754e:	2000      	movs	r0, #0
 8007550:	e7cb      	b.n	80074ea <LmHandlerRequestClass+0x3a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8007552:	f04f 30ff 	mov.w	r0, #4294967295
 8007556:	e7c8      	b.n	80074ea <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007558:	2000      	movs	r0, #0
 800755a:	e7c6      	b.n	80074ea <LmHandlerRequestClass+0x3a>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800755c:	f04f 30ff 	mov.w	r0, #4294967295
 8007560:	e7c3      	b.n	80074ea <LmHandlerRequestClass+0x3a>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8007562:	f04f 30ff 	mov.w	r0, #4294967295
 8007566:	e7c0      	b.n	80074ea <LmHandlerRequestClass+0x3a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8007568:	f04f 30ff 	mov.w	r0, #4294967295
 800756c:	e7bd      	b.n	80074ea <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800756e:	2000      	movs	r0, #0
 8007570:	e7bb      	b.n	80074ea <LmHandlerRequestClass+0x3a>
 8007572:	bf00      	nop
 8007574:	20000604 	.word	0x20000604
 8007578:	20000600 	.word	0x20000600

0800757c <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 800757c:	b170      	cbz	r0, 800759c <LmHandlerGetCurrentClass+0x20>
{
 800757e:	b510      	push	{r4, lr}
 8007580:	b08a      	sub	sp, #40	; 0x28
 8007582:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8007584:	2300      	movs	r3, #0
 8007586:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800758a:	a801      	add	r0, sp, #4
 800758c:	f003 f9bc 	bl	800a908 <LoRaMacMibGetRequestConfirm>
 8007590:	b938      	cbnz	r0, 80075a2 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8007592:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007596:	7023      	strb	r3, [r4, #0]
}
 8007598:	b00a      	add	sp, #40	; 0x28
 800759a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800759c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80075a0:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80075a2:	f04f 30ff 	mov.w	r0, #4294967295
 80075a6:	e7f7      	b.n	8007598 <LmHandlerGetCurrentClass+0x1c>

080075a8 <McpsIndication>:
{
 80075a8:	b530      	push	{r4, r5, lr}
 80075aa:	b085      	sub	sp, #20
 80075ac:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 80075ae:	2200      	movs	r2, #0
 80075b0:	f88d 2007 	strb.w	r2, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 80075b4:	491d      	ldr	r1, [pc, #116]	; (800762c <McpsIndication+0x84>)
 80075b6:	2201      	movs	r2, #1
 80075b8:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 80075ba:	7842      	ldrb	r2, [r0, #1]
 80075bc:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 80075be:	bb5a      	cbnz	r2, 8007618 <McpsIndication+0x70>
 80075c0:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 80075c2:	f990 2004 	ldrsb.w	r2, [r0, #4]
 80075c6:	720a      	strb	r2, [r1, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80075c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80075cc:	724a      	strb	r2, [r1, #9]
    RxParams.Snr = rxStatus->Snr;
 80075ce:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80075d2:	728a      	strb	r2, [r1, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80075d4:	78db      	ldrb	r3, [r3, #3]
 80075d6:	740b      	strb	r3, [r1, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80075d8:	6903      	ldr	r3, [r0, #16]
 80075da:	60cb      	str	r3, [r1, #12]
    appData.Port = mcpsIndication->Port;
 80075dc:	78c3      	ldrb	r3, [r0, #3]
 80075de:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 80075e2:	7b03      	ldrb	r3, [r0, #12]
 80075e4:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 80075e8:	6883      	ldr	r3, [r0, #8]
 80075ea:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 80075ec:	4d10      	ldr	r5, [pc, #64]	; (8007630 <McpsIndication+0x88>)
 80075ee:	682b      	ldr	r3, [r5, #0]
 80075f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f2:	a802      	add	r0, sp, #8
 80075f4:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 80075f6:	682b      	ldr	r3, [r5, #0]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fa:	b113      	cbz	r3, 8007602 <McpsIndication+0x5a>
 80075fc:	7e22      	ldrb	r2, [r4, #24]
 80075fe:	b102      	cbz	r2, 8007602 <McpsIndication+0x5a>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8007600:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8007602:	4621      	mov	r1, r4
 8007604:	2001      	movs	r0, #1
 8007606:	f7ff fccd 	bl	8006fa4 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 800760a:	f10d 0007 	add.w	r0, sp, #7
 800760e:	f7ff ffb5 	bl	800757c <LmHandlerGetCurrentClass>
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 8007612:	7963      	ldrb	r3, [r4, #5]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d001      	beq.n	800761c <McpsIndication+0x74>
}
 8007618:	b005      	add	sp, #20
 800761a:	bd30      	pop	{r4, r5, pc}
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800761c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1f9      	bne.n	8007618 <McpsIndication+0x70>
        IsUplinkTxPending = true;
 8007624:	4b03      	ldr	r3, [pc, #12]	; (8007634 <McpsIndication+0x8c>)
 8007626:	2201      	movs	r2, #1
 8007628:	701a      	strb	r2, [r3, #0]
 800762a:	e7f5      	b.n	8007618 <McpsIndication+0x70>
 800762c:	20000098 	.word	0x20000098
 8007630:	20000604 	.word	0x20000604
 8007634:	20000601 	.word	0x20000601

08007638 <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 8007638:	b180      	cbz	r0, 800765c <LmHandlerGetTxDatarate+0x24>
{
 800763a:	b510      	push	{r4, lr}
 800763c:	b08a      	sub	sp, #40	; 0x28
 800763e:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8007640:	2320      	movs	r3, #32
 8007642:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8007646:	a801      	add	r0, sp, #4
 8007648:	f003 f95e 	bl	800a908 <LoRaMacMibGetRequestConfirm>
 800764c:	b948      	cbnz	r0, 8007662 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 800764e:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8007652:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8007654:	4a04      	ldr	r2, [pc, #16]	; (8007668 <LmHandlerGetTxDatarate+0x30>)
 8007656:	7113      	strb	r3, [r2, #4]
}
 8007658:	b00a      	add	sp, #40	; 0x28
 800765a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800765c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007660:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007662:	f04f 30ff 	mov.w	r0, #4294967295
 8007666:	e7f7      	b.n	8007658 <LmHandlerGetTxDatarate+0x20>
 8007668:	2000061c 	.word	0x2000061c

0800766c <MlmeConfirm>:
{
 800766c:	b510      	push	{r4, lr}
 800766e:	b08a      	sub	sp, #40	; 0x28
 8007670:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 8007672:	4837      	ldr	r0, [pc, #220]	; (8007750 <MlmeConfirm+0xe4>)
 8007674:	2300      	movs	r3, #0
 8007676:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 8007678:	7863      	ldrb	r3, [r4, #1]
 800767a:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800767c:	4b35      	ldr	r3, [pc, #212]	; (8007754 <MlmeConfirm+0xe8>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007682:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8007684:	4621      	mov	r1, r4
 8007686:	2002      	movs	r0, #2
 8007688:	f7ff fc8c 	bl	8006fa4 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 800768c:	7823      	ldrb	r3, [r4, #0]
 800768e:	3b01      	subs	r3, #1
 8007690:	2b0b      	cmp	r3, #11
 8007692:	d831      	bhi.n	80076f8 <MlmeConfirm+0x8c>
 8007694:	e8df f003 	tbb	[pc, r3]
 8007698:	29303006 	.word	0x29303006
 800769c:	30303030 	.word	0x30303030
 80076a0:	43393032 	.word	0x43393032
            mibReq.Type = MIB_DEV_ADDR;
 80076a4:	2306      	movs	r3, #6
 80076a6:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 80076aa:	a801      	add	r0, sp, #4
 80076ac:	f003 f92c 	bl	800a908 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80076b0:	9a02      	ldr	r2, [sp, #8]
 80076b2:	4b29      	ldr	r3, [pc, #164]	; (8007758 <MlmeConfirm+0xec>)
 80076b4:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80076b6:	4829      	ldr	r0, [pc, #164]	; (800775c <MlmeConfirm+0xf0>)
 80076b8:	f7ff ffbe 	bl	8007638 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80076bc:	7863      	ldrb	r3, [r4, #1]
 80076be:	b163      	cbz	r3, 80076da <MlmeConfirm+0x6e>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80076c0:	4b27      	ldr	r3, [pc, #156]	; (8007760 <MlmeConfirm+0xf4>)
 80076c2:	22ff      	movs	r2, #255	; 0xff
 80076c4:	715a      	strb	r2, [r3, #5]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80076c6:	4b23      	ldr	r3, [pc, #140]	; (8007754 <MlmeConfirm+0xe8>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	4824      	ldr	r0, [pc, #144]	; (8007760 <MlmeConfirm+0xf4>)
 80076ce:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80076d0:	7863      	ldrb	r3, [r4, #1]
 80076d2:	b98b      	cbnz	r3, 80076f8 <MlmeConfirm+0x8c>
                SecureElementPrintSessionKeys();
 80076d4:	f008 fa68 	bl	800fba8 <SecureElementPrintSessionKeys>
        break;
 80076d8:	e00e      	b.n	80076f8 <MlmeConfirm+0x8c>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80076da:	4b21      	ldr	r3, [pc, #132]	; (8007760 <MlmeConfirm+0xf4>)
 80076dc:	2200      	movs	r2, #0
 80076de:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80076e0:	4b20      	ldr	r3, [pc, #128]	; (8007764 <MlmeConfirm+0xf8>)
 80076e2:	7858      	ldrb	r0, [r3, #1]
 80076e4:	f7ff fee4 	bl	80074b0 <LmHandlerRequestClass>
 80076e8:	e7ed      	b.n	80076c6 <MlmeConfirm+0x5a>
            RxParams.LinkCheck = true;
 80076ea:	4b1f      	ldr	r3, [pc, #124]	; (8007768 <MlmeConfirm+0xfc>)
 80076ec:	2201      	movs	r2, #1
 80076ee:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 80076f0:	7a22      	ldrb	r2, [r4, #8]
 80076f2:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 80076f4:	7a62      	ldrb	r2, [r4, #9]
 80076f6:	74da      	strb	r2, [r3, #19]
}
 80076f8:	b00a      	add	sp, #40	; 0x28
 80076fa:	bd10      	pop	{r4, pc}
            if( IsClassBSwitchPending == true )
 80076fc:	4b1b      	ldr	r3, [pc, #108]	; (800776c <MlmeConfirm+0x100>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0f9      	beq.n	80076f8 <MlmeConfirm+0x8c>
                LmHandlerBeaconReq( );
 8007704:	f7ff fcda 	bl	80070bc <LmHandlerBeaconReq>
 8007708:	e7f6      	b.n	80076f8 <MlmeConfirm+0x8c>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800770a:	7863      	ldrb	r3, [r4, #1]
 800770c:	b923      	cbnz	r3, 8007718 <MlmeConfirm+0xac>
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800770e:	4b15      	ldr	r3, [pc, #84]	; (8007764 <MlmeConfirm+0xf8>)
 8007710:	7b18      	ldrb	r0, [r3, #12]
 8007712:	f7ff fe9f 	bl	8007454 <LmHandlerPingSlotReq>
 8007716:	e7ef      	b.n	80076f8 <MlmeConfirm+0x8c>
                LmHandlerDeviceTimeReq( );
 8007718:	f7ff fce4 	bl	80070e4 <LmHandlerDeviceTimeReq>
 800771c:	e7ec      	b.n	80076f8 <MlmeConfirm+0x8c>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800771e:	7863      	ldrb	r3, [r4, #1]
 8007720:	b98b      	cbnz	r3, 8007746 <MlmeConfirm+0xda>
                mibReq.Type = MIB_DEVICE_CLASS;
 8007722:	f88d 3004 	strb.w	r3, [sp, #4]
                mibReq.Param.Class = CLASS_B;
 8007726:	2301      	movs	r3, #1
 8007728:	f88d 3008 	strb.w	r3, [sp, #8]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800772c:	a801      	add	r0, sp, #4
 800772e:	f003 fa39 	bl	800aba4 <LoRaMacMibSetRequestConfirm>
                if (LmHandlerCallbacks->OnClassChange != NULL)
 8007732:	4b08      	ldr	r3, [pc, #32]	; (8007754 <MlmeConfirm+0xe8>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007738:	b10b      	cbz	r3, 800773e <MlmeConfirm+0xd2>
                    LmHandlerCallbacks->OnClassChange( CLASS_B );
 800773a:	2001      	movs	r0, #1
 800773c:	4798      	blx	r3
                IsClassBSwitchPending = false;
 800773e:	4b0b      	ldr	r3, [pc, #44]	; (800776c <MlmeConfirm+0x100>)
 8007740:	2200      	movs	r2, #0
 8007742:	701a      	strb	r2, [r3, #0]
 8007744:	e7d8      	b.n	80076f8 <MlmeConfirm+0x8c>
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8007746:	4b07      	ldr	r3, [pc, #28]	; (8007764 <MlmeConfirm+0xf8>)
 8007748:	7b18      	ldrb	r0, [r3, #12]
 800774a:	f7ff fe83 	bl	8007454 <LmHandlerPingSlotReq>
}
 800774e:	e7d3      	b.n	80076f8 <MlmeConfirm+0x8c>
 8007750:	200000ac 	.word	0x200000ac
 8007754:	20000604 	.word	0x20000604
 8007758:	20000078 	.word	0x20000078
 800775c:	20000094 	.word	0x20000094
 8007760:	20000090 	.word	0x20000090
 8007764:	2000061c 	.word	0x2000061c
 8007768:	20000098 	.word	0x20000098
 800776c:	20000600 	.word	0x20000600

08007770 <LmHandlerSetSystemMaxRxError>:
{
 8007770:	b500      	push	{lr}
 8007772:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8007774:	2323      	movs	r3, #35	; 0x23
 8007776:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800777a:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800777c:	a801      	add	r0, sp, #4
 800777e:	f003 fa11 	bl	800aba4 <LoRaMacMibSetRequestConfirm>
 8007782:	b910      	cbnz	r0, 800778a <LmHandlerSetSystemMaxRxError+0x1a>
}
 8007784:	b00b      	add	sp, #44	; 0x2c
 8007786:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800778a:	f04f 30ff 	mov.w	r0, #4294967295
 800778e:	e7f9      	b.n	8007784 <LmHandlerSetSystemMaxRxError+0x14>

08007790 <LmHandlerConfigure>:
{
 8007790:	b570      	push	{r4, r5, r6, lr}
 8007792:	b090      	sub	sp, #64	; 0x40
 8007794:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8007796:	4c79      	ldr	r4, [pc, #484]	; (800797c <LmHandlerConfigure+0x1ec>)
 8007798:	2214      	movs	r2, #20
 800779a:	4620      	mov	r0, r4
 800779c:	f00a fb2a 	bl	8011df4 <UTIL_MEM_cpy_8>
    IsClassBSwitchPending = false;
 80077a0:	2300      	movs	r3, #0
 80077a2:	4a77      	ldr	r2, [pc, #476]	; (8007980 <LmHandlerConfigure+0x1f0>)
 80077a4:	7013      	strb	r3, [r2, #0]
    IsUplinkTxPending = false;
 80077a6:	4a77      	ldr	r2, [pc, #476]	; (8007984 <LmHandlerConfigure+0x1f4>)
 80077a8:	7013      	strb	r3, [r2, #0]
    loraInfo = LoraInfo_GetPtr();
 80077aa:	f7fb f92f 	bl	8002a0c <LoraInfo_GetPtr>
    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 80077ae:	7822      	ldrb	r2, [r4, #0]
 80077b0:	2301      	movs	r3, #1
 80077b2:	4093      	lsls	r3, r2
 80077b4:	6841      	ldr	r1, [r0, #4]
 80077b6:	420b      	tst	r3, r1
 80077b8:	d106      	bne.n	80077c8 <LmHandlerConfigure+0x38>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 80077ba:	4b73      	ldr	r3, [pc, #460]	; (8007988 <LmHandlerConfigure+0x1f8>)
 80077bc:	2201      	movs	r2, #1
 80077be:	2100      	movs	r1, #0
 80077c0:	4608      	mov	r0, r1
 80077c2:	f00a fa01 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 80077c6:	e7fe      	b.n	80077c6 <LmHandlerConfigure+0x36>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 80077c8:	4970      	ldr	r1, [pc, #448]	; (800798c <LmHandlerConfigure+0x1fc>)
 80077ca:	4871      	ldr	r0, [pc, #452]	; (8007990 <LmHandlerConfigure+0x200>)
 80077cc:	f002 fe00 	bl	800a3d0 <LoRaMacInitialization>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	f040 80cf 	bne.w	8007974 <LmHandlerConfigure+0x1e4>
    mibReq.Type = MIB_NVM_CTXS;
 80077d6:	2327      	movs	r3, #39	; 0x27
 80077d8:	f88d 301c 	strb.w	r3, [sp, #28]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 80077dc:	a807      	add	r0, sp, #28
 80077de:	f003 f9e1 	bl	800aba4 <LoRaMacMibSetRequestConfirm>
 80077e2:	2800      	cmp	r0, #0
 80077e4:	f040 8087 	bne.w	80078f6 <LmHandlerConfigure+0x166>
        CtxRestoreDone = true;
 80077e8:	4b6a      	ldr	r3, [pc, #424]	; (8007994 <LmHandlerConfigure+0x204>)
 80077ea:	2201      	movs	r2, #1
 80077ec:	701a      	strb	r2, [r3, #0]
    if (CtxRestoreDone == true)
 80077ee:	4b69      	ldr	r3, [pc, #420]	; (8007994 <LmHandlerConfigure+0x204>)
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 80a8 	beq.w	8007948 <LmHandlerConfigure+0x1b8>
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 80077f8:	4b67      	ldr	r3, [pc, #412]	; (8007998 <LmHandlerConfigure+0x208>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	b10b      	cbz	r3, 8007804 <LmHandlerConfigure+0x74>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 8007800:	2000      	movs	r0, #0
 8007802:	4798      	blx	r3
        mibReq.Type = MIB_DEV_ADDR;
 8007804:	2306      	movs	r3, #6
 8007806:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800780a:	a807      	add	r0, sp, #28
 800780c:	f003 f87c 	bl	800a908 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8007810:	9a08      	ldr	r2, [sp, #32]
 8007812:	4b62      	ldr	r3, [pc, #392]	; (800799c <LmHandlerConfigure+0x20c>)
 8007814:	615a      	str	r2, [r3, #20]
        mibReq.Type = MIB_NVM_CTXS;
 8007816:	2327      	movs	r3, #39	; 0x27
 8007818:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800781c:	a807      	add	r0, sp, #28
 800781e:	f003 f873 	bl	800a908 <LoRaMacMibGetRequestConfirm>
        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 8007822:	9a08      	ldr	r2, [sp, #32]
 8007824:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
 8007828:	4b54      	ldr	r3, [pc, #336]	; (800797c <LmHandlerConfigure+0x1ec>)
 800782a:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800782c:	f892 1104 	ldrb.w	r1, [r2, #260]	; 0x104
 8007830:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 8007832:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 8007836:	709a      	strb	r2, [r3, #2]
    mibReq.Type = MIB_DEV_EUI;
 8007838:	2502      	movs	r5, #2
 800783a:	f88d 501c 	strb.w	r5, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800783e:	a807      	add	r0, sp, #28
 8007840:	f003 f862 	bl	800a908 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8007844:	4c55      	ldr	r4, [pc, #340]	; (800799c <LmHandlerConfigure+0x20c>)
 8007846:	2208      	movs	r2, #8
 8007848:	9908      	ldr	r1, [sp, #32]
 800784a:	4620      	mov	r0, r4
 800784c:	f008 fb13 	bl	800fe76 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8007850:	2303      	movs	r3, #3
 8007852:	f88d 301c 	strb.w	r3, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007856:	a807      	add	r0, sp, #28
 8007858:	f003 f856 	bl	800a908 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800785c:	2208      	movs	r2, #8
 800785e:	9908      	ldr	r1, [sp, #32]
 8007860:	18a0      	adds	r0, r4, r2
 8007862:	f008 fb08 	bl	800fe76 <memcpy1>
    SecureElementPrintKeys();
 8007866:	f008 f93f 	bl	800fae8 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800786a:	7de3      	ldrb	r3, [r4, #23]
 800786c:	7da2      	ldrb	r2, [r4, #22]
 800786e:	7d61      	ldrb	r1, [r4, #21]
 8007870:	7d20      	ldrb	r0, [r4, #20]
 8007872:	9003      	str	r0, [sp, #12]
 8007874:	9102      	str	r1, [sp, #8]
 8007876:	9201      	str	r2, [sp, #4]
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	4b49      	ldr	r3, [pc, #292]	; (80079a0 <LmHandlerConfigure+0x210>)
 800787c:	2200      	movs	r2, #0
 800787e:	4611      	mov	r1, r2
 8007880:	4628      	mov	r0, r5
 8007882:	f00a f9a1 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8007886:	260f      	movs	r6, #15
 8007888:	f88d 601c 	strb.w	r6, [sp, #28]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800788c:	2301      	movs	r3, #1
 800788e:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8007892:	a807      	add	r0, sp, #28
 8007894:	f003 f986 	bl	800aba4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8007898:	2310      	movs	r3, #16
 800789a:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800789e:	2500      	movs	r5, #0
 80078a0:	f88d 5020 	strb.w	r5, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80078a4:	a807      	add	r0, sp, #28
 80078a6:	f003 f97d 	bl	800aba4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 80078aa:	2304      	movs	r3, #4
 80078ac:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 80078b0:	4c32      	ldr	r4, [pc, #200]	; (800797c <LmHandlerConfigure+0x1ec>)
 80078b2:	78a3      	ldrb	r3, [r4, #2]
 80078b4:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80078b8:	a807      	add	r0, sp, #28
 80078ba:	f003 f973 	bl	800aba4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 80078be:	2338      	movs	r3, #56	; 0x38
 80078c0:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 80078c4:	6923      	ldr	r3, [r4, #16]
 80078c6:	9308      	str	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80078c8:	a807      	add	r0, sp, #28
 80078ca:	f003 f96b 	bl	800aba4 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80078ce:	f88d 6014 	strb.w	r6, [sp, #20]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 80078d2:	a905      	add	r1, sp, #20
 80078d4:	7820      	ldrb	r0, [r4, #0]
 80078d6:	f006 f908 	bl	800daea <RegionGetPhyParam>
 80078da:	9004      	str	r0, [sp, #16]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 80078dc:	1b43      	subs	r3, r0, r5
 80078de:	bf18      	it	ne
 80078e0:	2301      	movne	r3, #1
 80078e2:	71a3      	strb	r3, [r4, #6]
    LmHandlerSetSystemMaxRxError( 20 );
 80078e4:	2014      	movs	r0, #20
 80078e6:	f7ff ff43 	bl	8007770 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 80078ea:	79a0      	ldrb	r0, [r4, #6]
 80078ec:	f003 fdc8 	bl	800b480 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 80078f0:	4628      	mov	r0, r5
}
 80078f2:	b010      	add	sp, #64	; 0x40
 80078f4:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 80078f6:	2328      	movs	r3, #40	; 0x28
 80078f8:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 80078fc:	4b26      	ldr	r3, [pc, #152]	; (8007998 <LmHandlerConfigure+0x208>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	b14b      	cbz	r3, 8007918 <LmHandlerConfigure+0x188>
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007904:	a807      	add	r0, sp, #28
 8007906:	f002 ffff 	bl	800a908 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800790a:	4b23      	ldr	r3, [pc, #140]	; (8007998 <LmHandlerConfigure+0x208>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	f240 517c 	movw	r1, #1404	; 0x57c
 8007914:	9808      	ldr	r0, [sp, #32]
 8007916:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 8007918:	2327      	movs	r3, #39	; 0x27
 800791a:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800791e:	a807      	add	r0, sp, #28
 8007920:	f003 f940 	bl	800aba4 <LoRaMacMibSetRequestConfirm>
 8007924:	2800      	cmp	r0, #0
 8007926:	f47f af62 	bne.w	80077ee <LmHandlerConfigure+0x5e>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800792a:	2301      	movs	r3, #1
 800792c:	f88d 301c 	strb.w	r3, [sp, #28]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007930:	a807      	add	r0, sp, #28
 8007932:	f002 ffe9 	bl	800a908 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 8007936:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800793a:	2b00      	cmp	r3, #0
 800793c:	f43f af57 	beq.w	80077ee <LmHandlerConfigure+0x5e>
                CtxRestoreDone = true;
 8007940:	4b14      	ldr	r3, [pc, #80]	; (8007994 <LmHandlerConfigure+0x204>)
 8007942:	2201      	movs	r2, #1
 8007944:	701a      	strb	r2, [r3, #0]
 8007946:	e752      	b.n	80077ee <LmHandlerConfigure+0x5e>
        mibReq.Type = MIB_NET_ID;
 8007948:	2305      	movs	r3, #5
 800794a:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800794e:	2300      	movs	r3, #0
 8007950:	9308      	str	r3, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8007952:	a807      	add	r0, sp, #28
 8007954:	f003 f926 	bl	800aba4 <LoRaMacMibSetRequestConfirm>
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8007958:	4b0f      	ldr	r3, [pc, #60]	; (8007998 <LmHandlerConfigure+0x208>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	4798      	blx	r3
 8007960:	4b0e      	ldr	r3, [pc, #56]	; (800799c <LmHandlerConfigure+0x20c>)
 8007962:	6158      	str	r0, [r3, #20]
        mibReq.Type = MIB_DEV_ADDR;
 8007964:	2306      	movs	r3, #6
 8007966:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800796a:	9008      	str	r0, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800796c:	a807      	add	r0, sp, #28
 800796e:	f003 f919 	bl	800aba4 <LoRaMacMibSetRequestConfirm>
 8007972:	e761      	b.n	8007838 <LmHandlerConfigure+0xa8>
        return LORAMAC_HANDLER_ERROR;
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	e7bb      	b.n	80078f2 <LmHandlerConfigure+0x162>
 800797a:	bf00      	nop
 800797c:	2000061c 	.word	0x2000061c
 8007980:	20000600 	.word	0x20000600
 8007984:	20000601 	.word	0x20000601
 8007988:	08013de8 	.word	0x08013de8
 800798c:	20000640 	.word	0x20000640
 8007990:	20000654 	.word	0x20000654
 8007994:	200005f8 	.word	0x200005f8
 8007998:	20000604 	.word	0x20000604
 800799c:	20000078 	.word	0x20000078
 80079a0:	08013e34 	.word	0x08013e34

080079a4 <LmHandlerPackageRegister>:
    switch( id )
 80079a4:	b9f0      	cbnz	r0, 80079e4 <LmHandlerPackageRegister+0x40>
{
 80079a6:	b538      	push	{r3, r4, r5, lr}
 80079a8:	460c      	mov	r4, r1
 80079aa:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 80079ac:	f000 fb76 	bl	800809c <LmhpCompliancePackageFactory>
    if( package != NULL )
 80079b0:	b1a8      	cbz	r0, 80079de <LmHandlerPackageRegister+0x3a>
        LmHandlerPackages[id] = package;
 80079b2:	4a0e      	ldr	r2, [pc, #56]	; (80079ec <LmHandlerPackageRegister+0x48>)
 80079b4:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80079b8:	4a0d      	ldr	r2, [pc, #52]	; (80079f0 <LmHandlerPackageRegister+0x4c>)
 80079ba:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 80079bc:	4a0d      	ldr	r2, [pc, #52]	; (80079f4 <LmHandlerPackageRegister+0x50>)
 80079be:	6812      	ldr	r2, [r2, #0]
 80079c0:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80079c2:	6301      	str	r1, [r0, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 80079c4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80079c6:	6341      	str	r1, [r0, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 80079c8:	490b      	ldr	r1, [pc, #44]	; (80079f8 <LmHandlerPackageRegister+0x54>)
 80079ca:	62c1      	str	r1, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 80079cc:	6992      	ldr	r2, [r2, #24]
 80079ce:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 80079d0:	6843      	ldr	r3, [r0, #4]
 80079d2:	22f2      	movs	r2, #242	; 0xf2
 80079d4:	4909      	ldr	r1, [pc, #36]	; (80079fc <LmHandlerPackageRegister+0x58>)
 80079d6:	4620      	mov	r0, r4
 80079d8:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 80079da:	2000      	movs	r0, #0
}
 80079dc:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 80079de:	f04f 30ff 	mov.w	r0, #4294967295
 80079e2:	e7fb      	b.n	80079dc <LmHandlerPackageRegister+0x38>
 80079e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	20000608 	.word	0x20000608
 80079f0:	08007225 	.word	0x08007225
 80079f4:	20000604 	.word	0x20000604
 80079f8:	080070e5 	.word	0x080070e5
 80079fc:	200004e4 	.word	0x200004e4

08007a00 <LmHandlerInit>:
{
 8007a00:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 8007a02:	4b13      	ldr	r3, [pc, #76]	; (8007a50 <LmHandlerInit+0x50>)
 8007a04:	6018      	str	r0, [r3, #0]
	LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007a06:	4b13      	ldr	r3, [pc, #76]	; (8007a54 <LmHandlerInit+0x54>)
 8007a08:	4a13      	ldr	r2, [pc, #76]	; (8007a58 <LmHandlerInit+0x58>)
 8007a0a:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8007a0c:	4a13      	ldr	r2, [pc, #76]	; (8007a5c <LmHandlerInit+0x5c>)
 8007a0e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8007a10:	4a13      	ldr	r2, [pc, #76]	; (8007a60 <LmHandlerInit+0x60>)
 8007a12:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8007a14:	4a13      	ldr	r2, [pc, #76]	; (8007a64 <LmHandlerInit+0x64>)
 8007a16:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8007a18:	6802      	ldr	r2, [r0, #0]
 8007a1a:	4b13      	ldr	r3, [pc, #76]	; (8007a68 <LmHandlerInit+0x68>)
 8007a1c:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8007a1e:	6842      	ldr	r2, [r0, #4]
 8007a20:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8007a22:	6882      	ldr	r2, [r0, #8]
 8007a24:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8007a26:	4a11      	ldr	r2, [pc, #68]	; (8007a6c <LmHandlerInit+0x6c>)
 8007a28:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8007a2a:	6982      	ldr	r2, [r0, #24]
 8007a2c:	611a      	str	r2, [r3, #16]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 8007a2e:	4b10      	ldr	r3, [pc, #64]	; (8007a70 <LmHandlerInit+0x70>)
 8007a30:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 8007a32:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007a34:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 8007a36:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007a38:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 8007a3a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a3c:	60da      	str	r2, [r3, #12]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8007a3e:	4619      	mov	r1, r3
 8007a40:	2000      	movs	r0, #0
 8007a42:	f7ff ffaf 	bl	80079a4 <LmHandlerPackageRegister>
 8007a46:	b900      	cbnz	r0, 8007a4a <LmHandlerInit+0x4a>
}
 8007a48:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 8007a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a4e:	e7fb      	b.n	8007a48 <LmHandlerInit+0x48>
 8007a50:	20000604 	.word	0x20000604
 8007a54:	20000654 	.word	0x20000654
 8007a58:	08007011 	.word	0x08007011
 8007a5c:	080075a9 	.word	0x080075a9
 8007a60:	0800766d 	.word	0x0800766d
 8007a64:	0800710d 	.word	0x0800710d
 8007a68:	20000640 	.word	0x20000640
 8007a6c:	0800da9d 	.word	0x0800da9d
 8007a70:	20000630 	.word	0x20000630

08007a74 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
    if (featureVersion == NULL)
 8007a74:	b161      	cbz	r1, 8007a90 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch(lmhType)
 8007a76:	b118      	cbz	r0, 8007a80 <LmHandlerGetVersion+0xc>
 8007a78:	2801      	cmp	r0, #1
 8007a7a:	d005      	beq.n	8007a88 <LmHandlerGetVersion+0x14>
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 8007a80:	4a05      	ldr	r2, [pc, #20]	; (8007a98 <LmHandlerGetVersion+0x24>)
 8007a82:	600a      	str	r2, [r1, #0]
            break;
        default:
          break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 8007a84:	2000      	movs	r0, #0
            break;
 8007a86:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 8007a88:	4a04      	ldr	r2, [pc, #16]	; (8007a9c <LmHandlerGetVersion+0x28>)
 8007a8a:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8007a8c:	2000      	movs	r0, #0
            break;
 8007a8e:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007a90:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	01000400 	.word	0x01000400
 8007a9c:	02010001 	.word	0x02010001

08007aa0 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 8007aa0:	b508      	push	{r3, lr}
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 8007aa2:	f003 fd01 	bl	800b4a8 <LoRaMacDeInitialization>
 8007aa6:	b900      	cbnz	r0, 8007aaa <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8007aa8:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007aaa:	f06f 0001 	mvn.w	r0, #1
 8007aae:	e7fb      	b.n	8007aa8 <LmHandlerStop+0x8>

08007ab0 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 8007ab0:	b508      	push	{r3, lr}
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 8007ab2:	f002 fe8b 	bl	800a7cc <LoRaMacHalt>
 8007ab6:	b900      	cbnz	r0, 8007aba <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8007ab8:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007aba:	f06f 0001 	mvn.w	r0, #1
 8007abe:	e7fb      	b.n	8007ab8 <LmHandlerHalt+0x8>

08007ac0 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8007ac0:	b510      	push	{r4, lr}
 8007ac2:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 8007ac4:	f7ff fff4 	bl	8007ab0 <LmHandlerHalt>

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 8007ac8:	4604      	mov	r4, r0
 8007aca:	b148      	cbz	r0, 8007ae0 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 8007acc:	b92c      	cbnz	r4, 8007ada <LmHandlerNvmDataStore+0x1a>
 8007ace:	4b18      	ldr	r3, [pc, #96]	; (8007b30 <LmHandlerNvmDataStore+0x70>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	69db      	ldr	r3, [r3, #28]
 8007ad4:	b10b      	cbz	r3, 8007ada <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 8007ad6:	2001      	movs	r0, #1
 8007ad8:	4798      	blx	r3
    }

    return lmhStatus;
}
 8007ada:	4620      	mov	r0, r4
 8007adc:	b00a      	add	sp, #40	; 0x28
 8007ade:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 8007ae0:	f005 ffe4 	bl	800daac <NvmDataMgmtStoreBegin>
        if (status == NVM_DATA_NO_UPDATED_DATA)
 8007ae4:	f110 0f02 	cmn.w	r0, #2
 8007ae8:	d012      	beq.n	8007b10 <LmHandlerNvmDataStore+0x50>
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 8007aea:	b9d0      	cbnz	r0, 8007b22 <LmHandlerNvmDataStore+0x62>
 8007aec:	4b10      	ldr	r3, [pc, #64]	; (8007b30 <LmHandlerNvmDataStore+0x70>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	b1cb      	cbz	r3, 8007b28 <LmHandlerNvmDataStore+0x68>
          mibReq.Type = MIB_NVM_CTXS;
 8007af4:	2327      	movs	r3, #39	; 0x27
 8007af6:	f88d 3004 	strb.w	r3, [sp, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 8007afa:	a801      	add	r0, sp, #4
 8007afc:	f002 ff04 	bl	800a908 <LoRaMacMibGetRequestConfirm>
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 8007b00:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <LmHandlerNvmDataStore+0x70>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 8007b0a:	9802      	ldr	r0, [sp, #8]
 8007b0c:	4798      	blx	r3
 8007b0e:	e001      	b.n	8007b14 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 8007b10:	f06f 0407 	mvn.w	r4, #7
        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 8007b14:	f005 ffda 	bl	800dacc <NvmDataMgmtStoreEnd>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d0d7      	beq.n	8007acc <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007b1c:	f04f 34ff 	mov.w	r4, #4294967295
 8007b20:	e7db      	b.n	8007ada <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007b22:	f04f 34ff 	mov.w	r4, #4294967295
 8007b26:	e7f5      	b.n	8007b14 <LmHandlerNvmDataStore+0x54>
 8007b28:	f04f 34ff 	mov.w	r4, #4294967295
 8007b2c:	e7f2      	b.n	8007b14 <LmHandlerNvmDataStore+0x54>
 8007b2e:	bf00      	nop
 8007b30:	20000604 	.word	0x20000604

08007b34 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8007b34:	4b01      	ldr	r3, [pc, #4]	; (8007b3c <LmhpComplianceIsInitialized+0x8>)
 8007b36:	7818      	ldrb	r0, [r3, #0]
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	20000668 	.word	0x20000668

08007b40 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 8007b40:	4b01      	ldr	r3, [pc, #4]	; (8007b48 <LmhpComplianceIsTxPending+0x8>)
 8007b42:	7858      	ldrb	r0, [r3, #1]
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	20000668 	.word	0x20000668

08007b4c <LmhpComplianceOnMlmeConfirm>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 8007b4c:	4770      	bx	lr

08007b4e <LmhpComplianceOnMlmeIndication>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 8007b4e:	4770      	bx	lr

08007b50 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 8007b50:	b508      	push	{r3, lr}
    ComplianceTestState.IsTxPending = true;
 8007b52:	4b03      	ldr	r3, [pc, #12]	; (8007b60 <OnProcessTimer+0x10>)
 8007b54:	2201      	movs	r2, #1
 8007b56:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 8007b58:	4b02      	ldr	r3, [pc, #8]	; (8007b64 <OnProcessTimer+0x14>)
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	4798      	blx	r3
}
 8007b5e:	bd08      	pop	{r3, pc}
 8007b60:	20000668 	.word	0x20000668
 8007b64:	200000c8 	.word	0x200000c8

08007b68 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8007b68:	4b8d      	ldr	r3, [pc, #564]	; (8007da0 <LmhpComplianceOnMcpsIndication+0x238>)
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 81fd 	beq.w	8007f6c <LmhpComplianceOnMcpsIndication+0x404>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 8007b72:	78c3      	ldrb	r3, [r0, #3]
 8007b74:	b90b      	cbnz	r3, 8007b7a <LmhpComplianceOnMcpsIndication+0x12>
 8007b76:	7b83      	ldrb	r3, [r0, #14]
 8007b78:	b11b      	cbz	r3, 8007b82 <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 8007b7a:	4a89      	ldr	r2, [pc, #548]	; (8007da0 <LmhpComplianceOnMcpsIndication+0x238>)
 8007b7c:	8a13      	ldrh	r3, [r2, #16]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 8007b82:	7b43      	ldrb	r3, [r0, #13]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 81f1 	beq.w	8007f6c <LmhpComplianceOnMcpsIndication+0x404>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8007b8a:	78c3      	ldrb	r3, [r0, #3]
 8007b8c:	2be0      	cmp	r3, #224	; 0xe0
 8007b8e:	f040 81ed 	bne.w	8007f6c <LmhpComplianceOnMcpsIndication+0x404>
{
 8007b92:	b570      	push	{r4, r5, r6, lr}
 8007b94:	b094      	sub	sp, #80	; 0x50
    ComplianceTestState.DataBufferSize = 0;
 8007b96:	4b82      	ldr	r3, [pc, #520]	; (8007da0 <LmhpComplianceOnMcpsIndication+0x238>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 8007b9c:	6884      	ldr	r4, [r0, #8]
 8007b9e:	7823      	ldrb	r3, [r4, #0]
 8007ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8007ba2:	f200 8093 	bhi.w	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
 8007ba6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007baa:	0080      	.short	0x0080
 8007bac:	00a600a1 	.word	0x00a600a1
 8007bb0:	00b400ac 	.word	0x00b400ac
 8007bb4:	00c800c1 	.word	0x00c800c1
 8007bb8:	00f200e1 	.word	0x00f200e1
 8007bbc:	0133011f 	.word	0x0133011f
 8007bc0:	00910091 	.word	0x00910091
 8007bc4:	00910091 	.word	0x00910091
 8007bc8:	00910091 	.word	0x00910091
 8007bcc:	00910091 	.word	0x00910091
 8007bd0:	00910091 	.word	0x00910091
 8007bd4:	00910091 	.word	0x00910091
 8007bd8:	00910091 	.word	0x00910091
 8007bdc:	00910091 	.word	0x00910091
 8007be0:	00910091 	.word	0x00910091
 8007be4:	00910091 	.word	0x00910091
 8007be8:	01370091 	.word	0x01370091
 8007bec:	0142013e 	.word	0x0142013e
 8007bf0:	00910091 	.word	0x00910091
 8007bf4:	00910091 	.word	0x00910091
 8007bf8:	00910091 	.word	0x00910091
 8007bfc:	00910091 	.word	0x00910091
 8007c00:	00910091 	.word	0x00910091
 8007c04:	00910091 	.word	0x00910091
 8007c08:	00910091 	.word	0x00910091
 8007c0c:	00910091 	.word	0x00910091
 8007c10:	00910091 	.word	0x00910091
 8007c14:	00910091 	.word	0x00910091
 8007c18:	00910091 	.word	0x00910091
 8007c1c:	00910091 	.word	0x00910091
 8007c20:	00910091 	.word	0x00910091
 8007c24:	00910091 	.word	0x00910091
 8007c28:	00910091 	.word	0x00910091
 8007c2c:	00910091 	.word	0x00910091
 8007c30:	00910091 	.word	0x00910091
 8007c34:	00910091 	.word	0x00910091
 8007c38:	00910091 	.word	0x00910091
 8007c3c:	00910091 	.word	0x00910091
 8007c40:	00910091 	.word	0x00910091
 8007c44:	00910091 	.word	0x00910091
 8007c48:	00910091 	.word	0x00910091
 8007c4c:	00910091 	.word	0x00910091
 8007c50:	00910091 	.word	0x00910091
 8007c54:	00910091 	.word	0x00910091
 8007c58:	00910091 	.word	0x00910091
 8007c5c:	00910091 	.word	0x00910091
 8007c60:	00910091 	.word	0x00910091
 8007c64:	00910091 	.word	0x00910091
 8007c68:	00910091 	.word	0x00910091
 8007c6c:	00910091 	.word	0x00910091
 8007c70:	00910091 	.word	0x00910091
 8007c74:	00910091 	.word	0x00910091
 8007c78:	00910091 	.word	0x00910091
 8007c7c:	00910091 	.word	0x00910091
 8007c80:	00910091 	.word	0x00910091
 8007c84:	00910091 	.word	0x00910091
 8007c88:	00910091 	.word	0x00910091
 8007c8c:	00910091 	.word	0x00910091
 8007c90:	00910091 	.word	0x00910091
 8007c94:	00910091 	.word	0x00910091
 8007c98:	00910091 	.word	0x00910091
 8007c9c:	00910091 	.word	0x00910091
 8007ca0:	00910091 	.word	0x00910091
 8007ca4:	016e014d 	.word	0x016e014d
 8007ca8:	017c      	.short	0x017c
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 8007caa:	4b3d      	ldr	r3, [pc, #244]	; (8007da0 <LmhpComplianceOnMcpsIndication+0x238>)
 8007cac:	68da      	ldr	r2, [r3, #12]
 8007cae:	2101      	movs	r1, #1
 8007cb0:	7299      	strb	r1, [r3, #10]
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	7010      	strb	r0, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 8007cb6:	68d8      	ldr	r0, [r3, #12]
 8007cb8:	7a9a      	ldrb	r2, [r3, #10]
 8007cba:	1854      	adds	r4, r2, r1
 8007cbc:	729c      	strb	r4, [r3, #10]
 8007cbe:	2406      	movs	r4, #6
 8007cc0:	5484      	strb	r4, [r0, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 8007cc2:	68d8      	ldr	r0, [r3, #12]
 8007cc4:	7a9a      	ldrb	r2, [r3, #10]
 8007cc6:	1854      	adds	r4, r2, r1
 8007cc8:	729c      	strb	r4, [r3, #10]
 8007cca:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 8007ccc:	4b34      	ldr	r3, [pc, #208]	; (8007da0 <LmhpComplianceOnMcpsIndication+0x238>)
 8007cce:	7a9b      	ldrb	r3, [r3, #10]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 8144 	beq.w	8007f5e <LmhpComplianceOnMcpsIndication+0x3f6>
        TimerSetValue( &ProcessTimer, 1000 );
 8007cd6:	4c33      	ldr	r4, [pc, #204]	; (8007da4 <LmhpComplianceOnMcpsIndication+0x23c>)
 8007cd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007cdc:	4620      	mov	r0, r4
 8007cde:	f00a fb67 	bl	80123b0 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f00a fb1e 	bl	8012324 <UTIL_TIMER_Start>
}
 8007ce8:	b014      	add	sp, #80	; 0x50
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
        ComplianceTestState.IsResetCmdPending = true;
 8007cec:	4b2c      	ldr	r3, [pc, #176]	; (8007da0 <LmhpComplianceOnMcpsIndication+0x238>)
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 8007cf4:	e7ea      	b.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8007cf6:	4b2c      	ldr	r3, [pc, #176]	; (8007da8 <LmhpComplianceOnMcpsIndication+0x240>)
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	2002      	movs	r0, #2
 8007cfe:	4798      	blx	r3
        break;
 8007d00:	e7e4      	b.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 8007d02:	7862      	ldrb	r2, [r4, #1]
 8007d04:	4b26      	ldr	r3, [pc, #152]	; (8007da0 <LmhpComplianceOnMcpsIndication+0x238>)
 8007d06:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 8007d10:	e7dc      	b.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type            = MIB_ADR;
 8007d12:	2304      	movs	r3, #4
 8007d14:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 8007d18:	7863      	ldrb	r3, [r4, #1]
 8007d1a:	3b00      	subs	r3, #0
 8007d1c:	bf18      	it	ne
 8007d1e:	2301      	movne	r3, #1
 8007d20:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007d24:	4668      	mov	r0, sp
 8007d26:	f002 ff3d 	bl	800aba4 <LoRaMacMibSetRequestConfirm>
        break;
 8007d2a:	e7cf      	b.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 8007d2c:	7860      	ldrb	r0, [r4, #1]
 8007d2e:	3800      	subs	r0, #0
 8007d30:	bf18      	it	ne
 8007d32:	2001      	movne	r0, #1
 8007d34:	f003 fba4 	bl	800b480 <LoRaMacTestSetDutyCycleOn>
        break;
 8007d38:	e7c8      	b.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8007d3a:	466d      	mov	r5, sp
 8007d3c:	4e1b      	ldr	r6, [pc, #108]	; (8007dac <LmhpComplianceOnMcpsIndication+0x244>)
 8007d3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d42:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d46:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8007d4a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 8007d4e:	7863      	ldrb	r3, [r4, #1]
        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8007d50:	2b0a      	cmp	r3, #10
 8007d52:	d8bb      	bhi.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8007d54:	4a16      	ldr	r2, [pc, #88]	; (8007db0 <LmhpComplianceOnMcpsIndication+0x248>)
 8007d56:	6812      	ldr	r2, [r2, #0]
 8007d58:	6852      	ldr	r2, [r2, #4]
 8007d5a:	2a00      	cmp	r2, #0
 8007d5c:	d0b6      	beq.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8007d5e:	a914      	add	r1, sp, #80	; 0x50
 8007d60:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007d64:	f853 0c50 	ldr.w	r0, [r3, #-80]
 8007d68:	4790      	blx	r2
        break;
 8007d6a:	e7af      	b.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8007d6c:	7862      	ldrb	r2, [r4, #1]
        if( ( frameType == 1 ) || ( frameType == 2 ) )
 8007d6e:	1e53      	subs	r3, r2, #1
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d8aa      	bhi.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8007d76:	1e50      	subs	r0, r2, #1
 8007d78:	bf18      	it	ne
 8007d7a:	2001      	movne	r0, #1
 8007d7c:	4b08      	ldr	r3, [pc, #32]	; (8007da0 <LmhpComplianceOnMcpsIndication+0x238>)
 8007d7e:	7218      	strb	r0, [r3, #8]
            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8007d80:	4b0b      	ldr	r3, [pc, #44]	; (8007db0 <LmhpComplianceOnMcpsIndication+0x248>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0a0      	beq.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 8007d8a:	4798      	blx	r3
 8007d8c:	e79e      	b.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 8007d8e:	4b04      	ldr	r3, [pc, #16]	; (8007da0 <LmhpComplianceOnMcpsIndication+0x238>)
 8007d90:	68da      	ldr	r2, [r3, #12]
 8007d92:	2101      	movs	r1, #1
 8007d94:	7299      	strb	r1, [r3, #10]
 8007d96:	2308      	movs	r3, #8
 8007d98:	7013      	strb	r3, [r2, #0]
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	e01b      	b.n	8007dd6 <LmhpComplianceOnMcpsIndication+0x26e>
 8007d9e:	bf00      	nop
 8007da0:	20000668 	.word	0x20000668
 8007da4:	200006a0 	.word	0x200006a0
 8007da8:	200000c8 	.word	0x200000c8
 8007dac:	08013814 	.word	0x08013814
 8007db0:	20000664 	.word	0x20000664
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8007db4:	6882      	ldr	r2, [r0, #8]
 8007db6:	f101 0c01 	add.w	ip, r1, #1
 8007dba:	5c52      	ldrb	r2, [r2, r1]
 8007dbc:	496c      	ldr	r1, [pc, #432]	; (8007f70 <LmhpComplianceOnMcpsIndication+0x408>)
 8007dbe:	68cd      	ldr	r5, [r1, #12]
 8007dc0:	7a8c      	ldrb	r4, [r1, #10]
 8007dc2:	f104 0e01 	add.w	lr, r4, #1
 8007dc6:	f881 e00a 	strb.w	lr, [r1, #10]
 8007dca:	3201      	adds	r2, #1
 8007dcc:	552a      	strb	r2, [r5, r4]
             i++ )
 8007dce:	3301      	adds	r3, #1
 8007dd0:	b2db      	uxtb	r3, r3
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8007dd2:	fa5f f18c 	uxtb.w	r1, ip
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8007dd6:	4a66      	ldr	r2, [pc, #408]	; (8007f70 <LmhpComplianceOnMcpsIndication+0x408>)
 8007dd8:	7a52      	ldrb	r2, [r2, #9]
 8007dda:	7b04      	ldrb	r4, [r0, #12]
 8007ddc:	42a2      	cmp	r2, r4
 8007dde:	bf28      	it	cs
 8007de0:	4622      	movcs	r2, r4
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d8e6      	bhi.n	8007db4 <LmhpComplianceOnMcpsIndication+0x24c>
 8007de6:	e771      	b.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 8007de8:	4b61      	ldr	r3, [pc, #388]	; (8007f70 <LmhpComplianceOnMcpsIndication+0x408>)
 8007dea:	68da      	ldr	r2, [r3, #12]
 8007dec:	2101      	movs	r1, #1
 8007dee:	7299      	strb	r1, [r3, #10]
 8007df0:	2109      	movs	r1, #9
 8007df2:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 8007df4:	8a18      	ldrh	r0, [r3, #16]
 8007df6:	68d9      	ldr	r1, [r3, #12]
 8007df8:	7a9a      	ldrb	r2, [r3, #10]
 8007dfa:	1c54      	adds	r4, r2, #1
 8007dfc:	729c      	strb	r4, [r3, #10]
 8007dfe:	5488      	strb	r0, [r1, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 8007e00:	8a1a      	ldrh	r2, [r3, #16]
 8007e02:	68d8      	ldr	r0, [r3, #12]
 8007e04:	7a99      	ldrb	r1, [r3, #10]
 8007e06:	1c4c      	adds	r4, r1, #1
 8007e08:	729c      	strb	r4, [r3, #10]
 8007e0a:	0a13      	lsrs	r3, r2, #8
 8007e0c:	5443      	strb	r3, [r0, r1]
        break;
 8007e0e:	e75d      	b.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.RxAppCnt = 0;
 8007e10:	4b57      	ldr	r3, [pc, #348]	; (8007f70 <LmhpComplianceOnMcpsIndication+0x408>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	821a      	strh	r2, [r3, #16]
        break;
 8007e16:	e759      	b.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
        mlmeReq.Type = MLME_LINK_CHECK;
 8007e18:	2304      	movs	r3, #4
 8007e1a:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMlmeRequest( &mlmeReq );
 8007e1e:	4668      	mov	r0, sp
 8007e20:	f003 f946 	bl	800b0b0 <LoRaMacMlmeRequest>
        break;
 8007e24:	e752      	b.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnDeviceTimeRequest( );
 8007e26:	4b53      	ldr	r3, [pc, #332]	; (8007f74 <LmhpComplianceOnMcpsIndication+0x40c>)
 8007e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2a:	4798      	blx	r3
        break;
 8007e2c:	e74e      	b.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 8007e2e:	7860      	ldrb	r0, [r4, #1]
 8007e30:	4b4f      	ldr	r3, [pc, #316]	; (8007f70 <LmhpComplianceOnMcpsIndication+0x408>)
 8007e32:	7558      	strb	r0, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 8007e34:	4b50      	ldr	r3, [pc, #320]	; (8007f78 <LmhpComplianceOnMcpsIndication+0x410>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f43f af46 	beq.w	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 8007e40:	4798      	blx	r3
 8007e42:	e743      	b.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
        if( mcpsIndication->BufferSize == 7 )
 8007e44:	7b03      	ldrb	r3, [r0, #12]
 8007e46:	2b07      	cmp	r3, #7
 8007e48:	f47f af40 	bne.w	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
            mlmeReq.Type = MLME_TXCW;
 8007e4c:	2305      	movs	r3, #5
 8007e4e:	f88d 3000 	strb.w	r3, [sp]
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 8007e52:	7863      	ldrb	r3, [r4, #1]
 8007e54:	78a2      	ldrb	r2, [r4, #2]
 8007e56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            mlmeReq.Req.TxCw.Timeout =
 8007e5a:	f8ad 3004 	strh.w	r3, [sp, #4]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8007e5e:	78e3      	ldrb	r3, [r4, #3]
 8007e60:	7922      	ldrb	r2, [r4, #4]
 8007e62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8007e66:	7962      	ldrb	r2, [r4, #5]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8007e68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8007e6c:	2264      	movs	r2, #100	; 0x64
 8007e6e:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 8007e72:	9302      	str	r3, [sp, #8]
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8007e74:	6883      	ldr	r3, [r0, #8]
 8007e76:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8007e7a:	f88d 300c 	strb.w	r3, [sp, #12]
            LoRaMacMlmeRequest( &mlmeReq );
 8007e7e:	4668      	mov	r0, sp
 8007e80:	f003 f916 	bl	800b0b0 <LoRaMacMlmeRequest>
        break;
 8007e84:	e722      	b.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 8007e86:	2339      	movs	r3, #57	; 0x39
 8007e88:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        mibReq.Param.IsCertPortOn = false;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007e92:	a80b      	add	r0, sp, #44	; 0x2c
 8007e94:	f002 fe86 	bl	800aba4 <LoRaMacMibSetRequestConfirm>
        ComplianceTestState.IsResetCmdPending = true;
 8007e98:	4b35      	ldr	r3, [pc, #212]	; (8007f70 <LmhpComplianceOnMcpsIndication+0x408>)
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 8007ea0:	e714      	b.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_LORAWAN_VERSION;
 8007ea2:	232a      	movs	r3, #42	; 0x2a
 8007ea4:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8007ea8:	4668      	mov	r0, sp
 8007eaa:	f002 fd2d 	bl	800a908 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 8007eae:	9901      	ldr	r1, [sp, #4]
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 8007eb0:	9a02      	ldr	r2, [sp, #8]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 8007eb2:	4b2f      	ldr	r3, [pc, #188]	; (8007f70 <LmhpComplianceOnMcpsIndication+0x408>)
 8007eb4:	68dc      	ldr	r4, [r3, #12]
 8007eb6:	7a98      	ldrb	r0, [r3, #10]
 8007eb8:	1c45      	adds	r5, r0, #1
 8007eba:	729d      	strb	r5, [r3, #10]
 8007ebc:	257f      	movs	r5, #127	; 0x7f
 8007ebe:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 8007ec0:	482d      	ldr	r0, [pc, #180]	; (8007f78 <LmhpComplianceOnMcpsIndication+0x410>)
 8007ec2:	6800      	ldr	r0, [r0, #0]
 8007ec4:	68dd      	ldr	r5, [r3, #12]
 8007ec6:	7a9c      	ldrb	r4, [r3, #10]
 8007ec8:	1c66      	adds	r6, r4, #1
 8007eca:	729e      	strb	r6, [r3, #10]
 8007ecc:	78c6      	ldrb	r6, [r0, #3]
 8007ece:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 8007ed0:	68dd      	ldr	r5, [r3, #12]
 8007ed2:	7a9c      	ldrb	r4, [r3, #10]
 8007ed4:	1c66      	adds	r6, r4, #1
 8007ed6:	729e      	strb	r6, [r3, #10]
 8007ed8:	7886      	ldrb	r6, [r0, #2]
 8007eda:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 8007edc:	68dd      	ldr	r5, [r3, #12]
 8007ede:	7a9c      	ldrb	r4, [r3, #10]
 8007ee0:	1c66      	adds	r6, r4, #1
 8007ee2:	729e      	strb	r6, [r3, #10]
 8007ee4:	7846      	ldrb	r6, [r0, #1]
 8007ee6:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8007ee8:	68dd      	ldr	r5, [r3, #12]
 8007eea:	7a9c      	ldrb	r4, [r3, #10]
 8007eec:	1c66      	adds	r6, r4, #1
 8007eee:	729e      	strb	r6, [r3, #10]
 8007ef0:	7800      	ldrb	r0, [r0, #0]
 8007ef2:	5528      	strb	r0, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 8007ef4:	68dc      	ldr	r4, [r3, #12]
 8007ef6:	7a98      	ldrb	r0, [r3, #10]
 8007ef8:	1c45      	adds	r5, r0, #1
 8007efa:	729d      	strb	r5, [r3, #10]
 8007efc:	f3c1 6507 	ubfx	r5, r1, #24, #8
 8007f00:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 8007f02:	68dc      	ldr	r4, [r3, #12]
 8007f04:	7a98      	ldrb	r0, [r3, #10]
 8007f06:	1c45      	adds	r5, r0, #1
 8007f08:	729d      	strb	r5, [r3, #10]
 8007f0a:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8007f0e:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8007f10:	68dc      	ldr	r4, [r3, #12]
 8007f12:	7a98      	ldrb	r0, [r3, #10]
 8007f14:	1c45      	adds	r5, r0, #1
 8007f16:	729d      	strb	r5, [r3, #10]
 8007f18:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8007f1c:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 8007f1e:	68dc      	ldr	r4, [r3, #12]
 8007f20:	7a98      	ldrb	r0, [r3, #10]
 8007f22:	1c45      	adds	r5, r0, #1
 8007f24:	729d      	strb	r5, [r3, #10]
 8007f26:	5421      	strb	r1, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8007f28:	68d8      	ldr	r0, [r3, #12]
 8007f2a:	7a99      	ldrb	r1, [r3, #10]
 8007f2c:	1c4c      	adds	r4, r1, #1
 8007f2e:	729c      	strb	r4, [r3, #10]
 8007f30:	f3c2 6407 	ubfx	r4, r2, #24, #8
 8007f34:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8007f36:	68d8      	ldr	r0, [r3, #12]
 8007f38:	7a99      	ldrb	r1, [r3, #10]
 8007f3a:	1c4c      	adds	r4, r1, #1
 8007f3c:	729c      	strb	r4, [r3, #10]
 8007f3e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8007f42:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8007f44:	68d8      	ldr	r0, [r3, #12]
 8007f46:	7a99      	ldrb	r1, [r3, #10]
 8007f48:	1c4c      	adds	r4, r1, #1
 8007f4a:	729c      	strb	r4, [r3, #10]
 8007f4c:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8007f50:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8007f52:	68d8      	ldr	r0, [r3, #12]
 8007f54:	7a99      	ldrb	r1, [r3, #10]
 8007f56:	1c4c      	adds	r4, r1, #1
 8007f58:	729c      	strb	r4, [r3, #10]
 8007f5a:	5442      	strb	r2, [r0, r1]
        break;
 8007f5c:	e6b6      	b.n	8007ccc <LmhpComplianceOnMcpsIndication+0x164>
        TimerStop(&ProcessTimer);
 8007f5e:	4807      	ldr	r0, [pc, #28]	; (8007f7c <LmhpComplianceOnMcpsIndication+0x414>)
 8007f60:	f00a f986 	bl	8012270 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8007f64:	4b02      	ldr	r3, [pc, #8]	; (8007f70 <LmhpComplianceOnMcpsIndication+0x408>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	705a      	strb	r2, [r3, #1]
 8007f6a:	e6bd      	b.n	8007ce8 <LmhpComplianceOnMcpsIndication+0x180>
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	20000668 	.word	0x20000668
 8007f74:	200000c8 	.word	0x200000c8
 8007f78:	20000664 	.word	0x20000664
 8007f7c:	200006a0 	.word	0x200006a0

08007f80 <LmhpComplianceProcess>:
{
 8007f80:	b530      	push	{r4, r5, lr}
 8007f82:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 8007f84:	4b28      	ldr	r3, [pc, #160]	; (8008028 <LmhpComplianceProcess+0xa8>)
 8007f86:	785b      	ldrb	r3, [r3, #1]
 8007f88:	b993      	cbnz	r3, 8007fb0 <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 8007f8a:	4b27      	ldr	r3, [pc, #156]	; (8008028 <LmhpComplianceProcess+0xa8>)
 8007f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d13f      	bne.n	8008014 <LmhpComplianceProcess+0x94>
    if( ComplianceTestState.IsResetCmdPending == true )
 8007f94:	4b24      	ldr	r3, [pc, #144]	; (8008028 <LmhpComplianceProcess+0xa8>)
 8007f96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f9a:	b13b      	cbz	r3, 8007fac <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 8007f9c:	4b22      	ldr	r3, [pc, #136]	; (8008028 <LmhpComplianceProcess+0xa8>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if (CompliancePackage.OnSystemReset != NULL)
 8007fa4:	4b21      	ldr	r3, [pc, #132]	; (800802c <LmhpComplianceProcess+0xac>)
 8007fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa8:	b103      	cbz	r3, 8007fac <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 8007faa:	4798      	blx	r3
}
 8007fac:	b003      	add	sp, #12
 8007fae:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 8007fb0:	f00a f91e 	bl	80121f0 <UTIL_TIMER_GetCurrentTime>
 8007fb4:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 8007fb6:	4b1c      	ldr	r3, [pc, #112]	; (8008028 <LmhpComplianceProcess+0xa8>)
 8007fb8:	685d      	ldr	r5, [r3, #4]
 8007fba:	f7ff f991 	bl	80072e0 <LmHandlerGetDutyCycleWaitTime>
 8007fbe:	4405      	add	r5, r0
 8007fc0:	42a5      	cmp	r5, r4
 8007fc2:	d2e7      	bcs.n	8007f94 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 8007fc4:	4b18      	ldr	r3, [pc, #96]	; (8008028 <LmhpComplianceProcess+0xa8>)
 8007fc6:	7a9b      	ldrb	r3, [r3, #10]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d0e3      	beq.n	8007f94 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData = {
 8007fcc:	22e0      	movs	r2, #224	; 0xe0
 8007fce:	f88d 2000 	strb.w	r2, [sp]
 8007fd2:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 8007fd6:	4b14      	ldr	r3, [pc, #80]	; (8008028 <LmhpComplianceProcess+0xa8>)
 8007fd8:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData = {
 8007fda:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 8007fdc:	2201      	movs	r2, #1
 8007fde:	7a19      	ldrb	r1, [r3, #8]
 8007fe0:	4668      	mov	r0, sp
 8007fe2:	f7ff f995 	bl	8007310 <LmHandlerSend>
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 8007fe6:	f110 0f02 	cmn.w	r0, #2
 8007fea:	d009      	beq.n	8008000 <LmhpComplianceProcess+0x80>
 8007fec:	f110 0f06 	cmn.w	r0, #6
 8007ff0:	d006      	beq.n	8008000 <LmhpComplianceProcess+0x80>
                    ComplianceTestState.IsTxPending = false;
 8007ff2:	4b0d      	ldr	r3, [pc, #52]	; (8008028 <LmhpComplianceProcess+0xa8>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 8007ff8:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 8007ffa:	4b0b      	ldr	r3, [pc, #44]	; (8008028 <LmhpComplianceProcess+0xa8>)
 8007ffc:	605c      	str	r4, [r3, #4]
 8007ffe:	e7c9      	b.n	8007f94 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1000 );
 8008000:	4d0b      	ldr	r5, [pc, #44]	; (8008030 <LmhpComplianceProcess+0xb0>)
 8008002:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008006:	4628      	mov	r0, r5
 8008008:	f00a f9d2 	bl	80123b0 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800800c:	4628      	mov	r0, r5
 800800e:	f00a f989 	bl	8012324 <UTIL_TIMER_Start>
 8008012:	e7f2      	b.n	8007ffa <LmhpComplianceProcess+0x7a>
            ComplianceTestState.IsClassReqCmdPending = false;
 8008014:	4b04      	ldr	r3, [pc, #16]	; (8008028 <LmhpComplianceProcess+0xa8>)
 8008016:	2200      	movs	r2, #0
 8008018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800801c:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 8008020:	f7ff fa46 	bl	80074b0 <LmHandlerRequestClass>
 8008024:	e7b6      	b.n	8007f94 <LmhpComplianceProcess+0x14>
 8008026:	bf00      	nop
 8008028:	20000668 	.word	0x20000668
 800802c:	200000c8 	.word	0x200000c8
 8008030:	200006a0 	.word	0x200006a0

08008034 <LmhpComplianceInit>:
{
 8008034:	b530      	push	{r4, r5, lr}
 8008036:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8008038:	b188      	cbz	r0, 800805e <LmhpComplianceInit+0x2a>
 800803a:	4603      	mov	r3, r0
 800803c:	b179      	cbz	r1, 800805e <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800803e:	4813      	ldr	r0, [pc, #76]	; (800808c <LmhpComplianceInit+0x58>)
 8008040:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 8008042:	4b13      	ldr	r3, [pc, #76]	; (8008090 <LmhpComplianceInit+0x5c>)
 8008044:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8008046:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 8008048:	2201      	movs	r2, #1
 800804a:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800804c:	2200      	movs	r2, #0
 800804e:	9200      	str	r2, [sp, #0]
 8008050:	4b10      	ldr	r3, [pc, #64]	; (8008094 <LmhpComplianceInit+0x60>)
 8008052:	f04f 31ff 	mov.w	r1, #4294967295
 8008056:	4810      	ldr	r0, [pc, #64]	; (8008098 <LmhpComplianceInit+0x64>)
 8008058:	f00a f8ac 	bl	80121b4 <UTIL_TIMER_Create>
 800805c:	e004      	b.n	8008068 <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 800805e:	2300      	movs	r3, #0
 8008060:	4a0a      	ldr	r2, [pc, #40]	; (800808c <LmhpComplianceInit+0x58>)
 8008062:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8008064:	4a0a      	ldr	r2, [pc, #40]	; (8008090 <LmhpComplianceInit+0x5c>)
 8008066:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 8008068:	4c09      	ldr	r4, [pc, #36]	; (8008090 <LmhpComplianceInit+0x5c>)
 800806a:	2500      	movs	r5, #0
 800806c:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800806e:	2220      	movs	r2, #32
 8008070:	4629      	mov	r1, r5
 8008072:	f104 0014 	add.w	r0, r4, #20
 8008076:	f007 ff16 	bl	800fea6 <memset1>
    ComplianceTestState.IsTxPending = false;
 800807a:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800807c:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800807e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 8008082:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8008086:	b003      	add	sp, #12
 8008088:	bd30      	pop	{r4, r5, pc}
 800808a:	bf00      	nop
 800808c:	20000664 	.word	0x20000664
 8008090:	20000668 	.word	0x20000668
 8008094:	08007b51 	.word	0x08007b51
 8008098:	200006a0 	.word	0x200006a0

0800809c <LmhpCompliancePackageFactory>:
}
 800809c:	4800      	ldr	r0, [pc, #0]	; (80080a0 <LmhpCompliancePackageFactory+0x4>)
 800809e:	4770      	bx	lr
 80080a0:	200000c8 	.word	0x200000c8

080080a4 <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 80080a4:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 80080a6:	4a06      	ldr	r2, [pc, #24]	; (80080c0 <OnRadioRxError+0x1c>)
 80080a8:	7813      	ldrb	r3, [r2, #0]
 80080aa:	f043 0304 	orr.w	r3, r3, #4
 80080ae:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80080b0:	4b04      	ldr	r3, [pc, #16]	; (80080c4 <OnRadioRxError+0x20>)
 80080b2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80080b6:	b113      	cbz	r3, 80080be <OnRadioRxError+0x1a>
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	b103      	cbz	r3, 80080be <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80080bc:	4798      	blx	r3
    }
}
 80080be:	bd08      	pop	{r3, pc}
 80080c0:	200006b8 	.word	0x200006b8
 80080c4:	200006bc 	.word	0x200006bc

080080c8 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80080c8:	4b07      	ldr	r3, [pc, #28]	; (80080e8 <UpdateRxSlotIdleState+0x20>)
 80080ca:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d004      	beq.n	80080dc <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80080d2:	4b06      	ldr	r3, [pc, #24]	; (80080ec <UpdateRxSlotIdleState+0x24>)
 80080d4:	2206      	movs	r2, #6
 80080d6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 80080da:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 80080dc:	4b03      	ldr	r3, [pc, #12]	; (80080ec <UpdateRxSlotIdleState+0x24>)
 80080de:	2202      	movs	r2, #2
 80080e0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	20008000 	.word	0x20008000
 80080ec:	200006bc 	.word	0x200006bc

080080f0 <LoRaMacEnableRequests>:
    return true;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 80080f0:	4b01      	ldr	r3, [pc, #4]	; (80080f8 <LoRaMacEnableRequests+0x8>)
 80080f2:	f883 0496 	strb.w	r0, [r3, #1174]	; 0x496
}
 80080f6:	4770      	bx	lr
 80080f8:	200006bc 	.word	0x200006bc

080080fc <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 80080fc:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80080fe:	4b15      	ldr	r3, [pc, #84]	; (8008154 <LoRaMacHandleIndicationEvents+0x58>)
 8008100:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8008104:	f013 0f08 	tst.w	r3, #8
 8008108:	d00e      	beq.n	8008128 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800810a:	4812      	ldr	r0, [pc, #72]	; (8008154 <LoRaMacHandleIndicationEvents+0x58>)
 800810c:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 8008110:	f36f 03c3 	bfc	r3, #3, #1
 8008114:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8008118:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 8008122:	f200 406c 	addw	r0, r0, #1132	; 0x46c
 8008126:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008128:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <LoRaMacHandleIndicationEvents+0x58>)
 800812a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800812e:	f013 0f02 	tst.w	r3, #2
 8008132:	d00e      	beq.n	8008152 <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8008134:	4807      	ldr	r0, [pc, #28]	; (8008154 <LoRaMacHandleIndicationEvents+0x58>)
 8008136:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 800813a:	f36f 0341 	bfc	r3, #1, #1
 800813e:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8008142:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 800814c:	f200 4024 	addw	r0, r0, #1060	; 0x424
 8008150:	4798      	blx	r3
    }
}
 8008152:	bd08      	pop	{r3, pc}
 8008154:	200006bc 	.word	0x200006bc

08008158 <CheckForMinimumAbpDatarate>:
}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 8008158:	b110      	cbz	r0, 8008160 <CheckForMinimumAbpDatarate+0x8>
 800815a:	2901      	cmp	r1, #1
 800815c:	d001      	beq.n	8008162 <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 800815e:	2000      	movs	r0, #0
}
 8008160:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8008162:	2a00      	cmp	r2, #0
 8008164:	d0fc      	beq.n	8008160 <CheckForMinimumAbpDatarate+0x8>
    return false;
 8008166:	2000      	movs	r0, #0
 8008168:	4770      	bx	lr
	...

0800816c <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800816c:	4b07      	ldr	r3, [pc, #28]	; (800818c <LoRaMacCheckForRxAbort+0x20>)
 800816e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8008172:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008176:	d008      	beq.n	800818a <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8008178:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800817c:	4a03      	ldr	r2, [pc, #12]	; (800818c <LoRaMacCheckForRxAbort+0x20>)
 800817e:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008182:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8008186:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800818a:	4770      	bx	lr
 800818c:	200006bc 	.word	0x200006bc

08008190 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8008190:	4b06      	ldr	r3, [pc, #24]	; (80081ac <CalculateBackOff+0x1c>)
 8008192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008194:	b94b      	cbnz	r3, 80081aa <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8008196:	4a05      	ldr	r2, [pc, #20]	; (80081ac <CalculateBackOff+0x1c>)
 8008198:	f8b2 310c 	ldrh.w	r3, [r2, #268]	; 0x10c
 800819c:	4904      	ldr	r1, [pc, #16]	; (80081b0 <CalculateBackOff+0x20>)
 800819e:	f8d1 1420 	ldr.w	r1, [r1, #1056]	; 0x420
 80081a2:	3b01      	subs	r3, #1
 80081a4:	fb01 f303 	mul.w	r3, r1, r3
 80081a8:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 80081aa:	4770      	bx	lr
 80081ac:	20008000 	.word	0x20008000
 80081b0:	200006bc 	.word	0x200006bc

080081b4 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80081b4:	b508      	push	{r3, lr}
 80081b6:	4684      	mov	ip, r0
 80081b8:	4608      	mov	r0, r1
 80081ba:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80081bc:	4b06      	ldr	r3, [pc, #24]	; (80081d8 <SetTxContinuousWave+0x24>)
 80081be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c0:	4662      	mov	r2, ip
 80081c2:	b249      	sxtb	r1, r1
 80081c4:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80081c6:	4a05      	ldr	r2, [pc, #20]	; (80081dc <SetTxContinuousWave+0x28>)
 80081c8:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 80081cc:	f043 0302 	orr.w	r3, r3, #2
 80081d0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 80081d4:	2000      	movs	r0, #0
 80081d6:	bd08      	pop	{r3, pc}
 80081d8:	080145a0 	.word	0x080145a0
 80081dc:	200006bc 	.word	0x200006bc

080081e0 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80081e0:	4602      	mov	r2, r0
 80081e2:	b1f8      	cbz	r0, 8008224 <DetermineFrameType+0x44>
 80081e4:	b301      	cbz	r1, 8008228 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80081e6:	7b03      	ldrb	r3, [r0, #12]
 80081e8:	f013 030f 	ands.w	r3, r3, #15
 80081ec:	d005      	beq.n	80081fa <DetermineFrameType+0x1a>
 80081ee:	f890 0020 	ldrb.w	r0, [r0, #32]
 80081f2:	b110      	cbz	r0, 80081fa <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 80081f4:	2000      	movs	r0, #0
 80081f6:	7008      	strb	r0, [r1, #0]
 80081f8:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80081fa:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 80081fe:	b910      	cbnz	r0, 8008206 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8008200:	2301      	movs	r3, #1
 8008202:	700b      	strb	r3, [r1, #0]
 8008204:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8008206:	b92b      	cbnz	r3, 8008214 <DetermineFrameType+0x34>
 8008208:	f892 0020 	ldrb.w	r0, [r2, #32]
 800820c:	b910      	cbnz	r0, 8008214 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 800820e:	2302      	movs	r3, #2
 8008210:	700b      	strb	r3, [r1, #0]
 8008212:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8008214:	b953      	cbnz	r3, 800822c <DetermineFrameType+0x4c>
 8008216:	f892 2020 	ldrb.w	r2, [r2, #32]
 800821a:	b14a      	cbz	r2, 8008230 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 800821c:	2203      	movs	r2, #3
 800821e:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8008220:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8008222:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008224:	2003      	movs	r0, #3
 8008226:	4770      	bx	lr
 8008228:	2003      	movs	r0, #3
 800822a:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 800822c:	2018      	movs	r0, #24
 800822e:	4770      	bx	lr
 8008230:	2018      	movs	r0, #24
}
 8008232:	4770      	bx	lr

08008234 <CheckRetrans>:
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 8008234:	4288      	cmp	r0, r1
 8008236:	d201      	bcs.n	800823c <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 8008238:	2000      	movs	r0, #0
 800823a:	4770      	bx	lr
        return true;
 800823c:	2001      	movs	r0, #1
}
 800823e:	4770      	bx	lr

08008240 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8008240:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8008242:	4b0b      	ldr	r3, [pc, #44]	; (8008270 <CheckRetransUnconfirmedUplink+0x30>)
 8008244:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8008248:	4b0a      	ldr	r3, [pc, #40]	; (8008274 <CheckRetransUnconfirmedUplink+0x34>)
 800824a:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800824e:	f7ff fff1 	bl	8008234 <CheckRetrans>
 8008252:	b950      	cbnz	r0, 800826a <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008254:	4b07      	ldr	r3, [pc, #28]	; (8008274 <CheckRetransUnconfirmedUplink+0x34>)
 8008256:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800825a:	f013 0f02 	tst.w	r3, #2
 800825e:	d004      	beq.n	800826a <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008260:	4b04      	ldr	r3, [pc, #16]	; (8008274 <CheckRetransUnconfirmedUplink+0x34>)
 8008262:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 8008266:	2b01      	cmp	r3, #1
 8008268:	d900      	bls.n	800826c <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 800826a:	bd08      	pop	{r3, pc}
            return true;
 800826c:	2001      	movs	r0, #1
 800826e:	e7fc      	b.n	800826a <CheckRetransUnconfirmedUplink+0x2a>
 8008270:	20008000 	.word	0x20008000
 8008274:	200006bc 	.word	0x200006bc

08008278 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8008278:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800827a:	4b09      	ldr	r3, [pc, #36]	; (80082a0 <CheckRetransConfirmedUplink+0x28>)
 800827c:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8008280:	4b08      	ldr	r3, [pc, #32]	; (80082a4 <CheckRetransConfirmedUplink+0x2c>)
 8008282:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 8008286:	f7ff ffd5 	bl	8008234 <CheckRetrans>
 800828a:	b940      	cbnz	r0, 800829e <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800828c:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <CheckRetransConfirmedUplink+0x2c>)
 800828e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8008292:	f013 0f02 	tst.w	r3, #2
 8008296:	d002      	beq.n	800829e <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008298:	4b02      	ldr	r3, [pc, #8]	; (80082a4 <CheckRetransConfirmedUplink+0x2c>)
 800829a:	f893 0448 	ldrb.w	r0, [r3, #1096]	; 0x448
        {
            return true;
        }
    }
    return false;
}
 800829e:	bd08      	pop	{r3, pc}
 80082a0:	20008000 	.word	0x20008000
 80082a4:	200006bc 	.word	0x200006bc

080082a8 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 80082a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80082ac:	d000      	beq.n	80082b0 <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 80082ae:	3001      	adds	r0, #1
    }
    return counter;
}
 80082b0:	4770      	bx	lr
	...

080082b4 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80082b4:	b510      	push	{r4, lr}
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80082b6:	4b12      	ldr	r3, [pc, #72]	; (8008300 <StopRetransmission+0x4c>)
 80082b8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80082bc:	f013 0f02 	tst.w	r3, #2
 80082c0:	d004      	beq.n	80082cc <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80082c2:	4b0f      	ldr	r3, [pc, #60]	; (8008300 <StopRetransmission+0x4c>)
 80082c4:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d908      	bls.n	80082de <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80082cc:	4b0d      	ldr	r3, [pc, #52]	; (8008304 <StopRetransmission+0x50>)
 80082ce:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80082d2:	b123      	cbz	r3, 80082de <StopRetransmission+0x2a>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 80082d4:	4c0b      	ldr	r4, [pc, #44]	; (8008304 <StopRetransmission+0x50>)
 80082d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80082d8:	f7ff ffe6 	bl	80082a8 <IncreaseAdrAckCounter>
 80082dc:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80082de:	4b08      	ldr	r3, [pc, #32]	; (8008300 <StopRetransmission+0x4c>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.NodeAckRequested = false;
 80082e6:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 80082ea:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80082ee:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80082f2:	f022 0202 	bic.w	r2, r2, #2
 80082f6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 80082fa:	2001      	movs	r0, #1
 80082fc:	bd10      	pop	{r4, pc}
 80082fe:	bf00      	nop
 8008300:	200006bc 	.word	0x200006bc
 8008304:	20008000 	.word	0x20008000

08008308 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8008308:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800830a:	4b04      	ldr	r3, [pc, #16]	; (800831c <CallNvmDataChangeCallback+0x14>)
 800830c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008310:	b113      	cbz	r3, 8008318 <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8008312:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8008314:	b103      	cbz	r3, 8008318 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8008316:	4798      	blx	r3
    }
}
 8008318:	bd08      	pop	{r3, pc}
 800831a:	bf00      	nop
 800831c:	200006bc 	.word	0x200006bc

08008320 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8008320:	4b04      	ldr	r3, [pc, #16]	; (8008334 <IsRequestPending+0x14>)
 8008322:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
 8008326:	f010 0005 	ands.w	r0, r0, #5
 800832a:	d100      	bne.n	800832e <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 800832c:	4770      	bx	lr
        return 1;
 800832e:	2001      	movs	r0, #1
 8008330:	e7fc      	b.n	800832c <IsRequestPending+0xc>
 8008332:	bf00      	nop
 8008334:	200006bc 	.word	0x200006bc

08008338 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8008338:	b500      	push	{lr}
 800833a:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800833c:	4b0d      	ldr	r3, [pc, #52]	; (8008374 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800833e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8008342:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8008346:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800834a:	220d      	movs	r2, #13
 800834c:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008350:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008354:	b113      	cbz	r3, 800835c <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008356:	230e      	movs	r3, #14
 8008358:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800835c:	a902      	add	r1, sp, #8
 800835e:	4b05      	ldr	r3, [pc, #20]	; (8008374 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8008360:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008364:	f005 fbc1 	bl	800daea <RegionGetPhyParam>
 8008368:	9001      	str	r0, [sp, #4]
}
 800836a:	b2c0      	uxtb	r0, r0
 800836c:	b005      	add	sp, #20
 800836e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008372:	bf00      	nop
 8008374:	20008000 	.word	0x20008000

08008378 <ValidatePayloadLength>:
{
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4605      	mov	r5, r0
 800837c:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800837e:	4608      	mov	r0, r1
 8008380:	f7ff ffda 	bl	8008338 <GetMaxAppPayloadWithoutFOptsLength>
 8008384:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 8008386:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008388:	4293      	cmp	r3, r2
 800838a:	d303      	bcc.n	8008394 <ValidatePayloadLength+0x1c>
 800838c:	2aff      	cmp	r2, #255	; 0xff
 800838e:	d903      	bls.n	8008398 <ValidatePayloadLength+0x20>
    return false;
 8008390:	2000      	movs	r0, #0
 8008392:	e000      	b.n	8008396 <ValidatePayloadLength+0x1e>
 8008394:	2000      	movs	r0, #0
}
 8008396:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8008398:	2001      	movs	r0, #1
 800839a:	e7fc      	b.n	8008396 <ValidatePayloadLength+0x1e>

0800839c <ProcessRadioTxDone>:
{
 800839c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800839e:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80083a0:	4b35      	ldr	r3, [pc, #212]	; (8008478 <ProcessRadioTxDone+0xdc>)
 80083a2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d002      	beq.n	80083b0 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 80083aa:	4b34      	ldr	r3, [pc, #208]	; (800847c <ProcessRadioTxDone+0xe0>)
 80083ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ae:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 80083b0:	4c33      	ldr	r4, [pc, #204]	; (8008480 <ProcessRadioTxDone+0xe4>)
 80083b2:	f504 7560 	add.w	r5, r4, #896	; 0x380
 80083b6:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 80083ba:	4628      	mov	r0, r5
 80083bc:	f009 fff8 	bl	80123b0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80083c0:	4628      	mov	r0, r5
 80083c2:	f009 ffaf 	bl	8012324 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80083c6:	f504 7566 	add.w	r5, r4, #920	; 0x398
 80083ca:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 80083ce:	4628      	mov	r0, r5
 80083d0:	f009 ffee 	bl	80123b0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80083d4:	4628      	mov	r0, r5
 80083d6:	f009 ffa5 	bl	8012324 <UTIL_TIMER_Start>
    if( MacCtx.NodeAckRequested == true )
 80083da:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d134      	bne.n	800844c <ProcessRadioTxDone+0xb0>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80083e2:	4b27      	ldr	r3, [pc, #156]	; (8008480 <ProcessRadioTxDone+0xe4>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 80083ea:	4b26      	ldr	r3, [pc, #152]	; (8008484 <ProcessRadioTxDone+0xe8>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4c22      	ldr	r4, [pc, #136]	; (8008478 <ProcessRadioTxDone+0xdc>)
 80083f0:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 80083f2:	4f23      	ldr	r7, [pc, #140]	; (8008480 <ProcessRadioTxDone+0xe4>)
 80083f4:	f897 241f 	ldrb.w	r2, [r7, #1055]	; 0x41f
 80083f8:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80083fc:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80083fe:	ae0c      	add	r6, sp, #48	; 0x30
 8008400:	4630      	mov	r0, r6
 8008402:	f009 fe69 	bl	80120d8 <SysTimeGetMcuTime>
 8008406:	ad02      	add	r5, sp, #8
 8008408:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8008412:	e896 0006 	ldmia.w	r6, {r1, r2}
 8008416:	4628      	mov	r0, r5
 8008418:	f009 fdfb 	bl	8012012 <SysTimeSub>
 800841c:	ab07      	add	r3, sp, #28
 800841e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008422:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8008426:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800842a:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 800842c:	2301      	movs	r3, #1
 800842e:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008432:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8008436:	b90b      	cbnz	r3, 800843c <ProcessRadioTxDone+0xa0>
        txDone.Joined  = false;
 8008438:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800843c:	a904      	add	r1, sp, #16
 800843e:	4b0e      	ldr	r3, [pc, #56]	; (8008478 <ProcessRadioTxDone+0xdc>)
 8008440:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008444:	f005 fb61 	bl	800db0a <RegionSetBandTxDone>
}
 8008448:	b00f      	add	sp, #60	; 0x3c
 800844a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800844c:	2315      	movs	r3, #21
 800844e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008452:	a90a      	add	r1, sp, #40	; 0x28
 8008454:	4b08      	ldr	r3, [pc, #32]	; (8008478 <ProcessRadioTxDone+0xdc>)
 8008456:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800845a:	f005 fb46 	bl	800daea <RegionGetPhyParam>
 800845e:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8008460:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8008464:	f204 4404 	addw	r4, r4, #1028	; 0x404
 8008468:	4401      	add	r1, r0
 800846a:	4620      	mov	r0, r4
 800846c:	f009 ffa0 	bl	80123b0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8008470:	4620      	mov	r0, r4
 8008472:	f009 ff57 	bl	8012324 <UTIL_TIMER_Start>
 8008476:	e7b8      	b.n	80083ea <ProcessRadioTxDone+0x4e>
 8008478:	20008000 	.word	0x20008000
 800847c:	080145a0 	.word	0x080145a0
 8008480:	200006bc 	.word	0x200006bc
 8008484:	20000c7c 	.word	0x20000c7c

08008488 <OnRetransmitTimeoutTimerEvent>:
{
 8008488:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800848a:	4c09      	ldr	r4, [pc, #36]	; (80084b0 <OnRetransmitTimeoutTimerEvent+0x28>)
 800848c:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8008490:	f009 feee 	bl	8012270 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8008494:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 8008498:	b113      	cbz	r3, 80084a0 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 800849a:	2201      	movs	r2, #1
 800849c:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80084a0:	4b03      	ldr	r3, [pc, #12]	; (80084b0 <OnRetransmitTimeoutTimerEvent+0x28>)
 80084a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80084a6:	b113      	cbz	r3, 80084ae <OnRetransmitTimeoutTimerEvent+0x26>
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	b103      	cbz	r3, 80084ae <OnRetransmitTimeoutTimerEvent+0x26>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80084ac:	4798      	blx	r3
}
 80084ae:	bd10      	pop	{r4, pc}
 80084b0:	200006bc 	.word	0x200006bc

080084b4 <PrepareRxDoneAbort>:
{
 80084b4:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80084b6:	4b0e      	ldr	r3, [pc, #56]	; (80084f0 <PrepareRxDoneAbort+0x3c>)
 80084b8:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80084bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80084c0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 80084c4:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 80084c8:	b973      	cbnz	r3, 80084e8 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80084ca:	4b09      	ldr	r3, [pc, #36]	; (80084f0 <PrepareRxDoneAbort+0x3c>)
 80084cc:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 80084d0:	f042 0202 	orr.w	r2, r2, #2
 80084d4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 80084d8:	b2d2      	uxtb	r2, r2
 80084da:	f042 0220 	orr.w	r2, r2, #32
 80084de:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 80084e2:	f7ff fdf1 	bl	80080c8 <UpdateRxSlotIdleState>
}
 80084e6:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 80084e8:	2000      	movs	r0, #0
 80084ea:	f7ff ffcd 	bl	8008488 <OnRetransmitTimeoutTimerEvent>
 80084ee:	e7ec      	b.n	80084ca <PrepareRxDoneAbort+0x16>
 80084f0:	200006bc 	.word	0x200006bc

080084f4 <LoRaMacCheckForBeaconAcquisition>:
{
 80084f4:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80084f6:	200b      	movs	r0, #11
 80084f8:	f004 fd90 	bl	800d01c <LoRaMacConfirmQueueIsCmdActive>
 80084fc:	b188      	cbz	r0, 8008522 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80084fe:	4b0b      	ldr	r3, [pc, #44]	; (800852c <LoRaMacCheckForBeaconAcquisition+0x38>)
 8008500:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008504:	f010 0f01 	tst.w	r0, #1
 8008508:	d10d      	bne.n	8008526 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800850a:	f010 0004 	ands.w	r0, r0, #4
 800850e:	d009      	beq.n	8008524 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008510:	461a      	mov	r2, r3
 8008512:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8008516:	f023 0302 	bic.w	r3, r3, #2
 800851a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800851e:	2001      	movs	r0, #1
 8008520:	e000      	b.n	8008524 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 8008522:	2000      	movs	r0, #0
}
 8008524:	bd08      	pop	{r3, pc}
    return 0x00;
 8008526:	2000      	movs	r0, #0
 8008528:	e7fc      	b.n	8008524 <LoRaMacCheckForBeaconAcquisition+0x30>
 800852a:	bf00      	nop
 800852c:	200006bc 	.word	0x200006bc

08008530 <GetFCntDown>:
{
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	9c04      	ldr	r4, [sp, #16]
 8008534:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8008536:	b1f2      	cbz	r2, 8008576 <GetFCntDown+0x46>
 8008538:	4694      	mov	ip, r2
 800853a:	b1f4      	cbz	r4, 800857a <GetFCntDown+0x4a>
 800853c:	b1fd      	cbz	r5, 800857e <GetFCntDown+0x4e>
    switch( addrID )
 800853e:	b188      	cbz	r0, 8008564 <GetFCntDown+0x34>
 8008540:	2801      	cmp	r0, #1
 8008542:	d11e      	bne.n	8008582 <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 8008544:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008548:	2b01      	cmp	r3, #1
 800854a:	d002      	beq.n	8008552 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 800854c:	2303      	movs	r3, #3
 800854e:	7023      	strb	r3, [r4, #0]
 8008550:	e00a      	b.n	8008568 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8008552:	b121      	cbz	r1, 800855e <GetFCntDown+0x2e>
 8008554:	2903      	cmp	r1, #3
 8008556:	d002      	beq.n	800855e <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8008558:	2301      	movs	r3, #1
 800855a:	7023      	strb	r3, [r4, #0]
 800855c:	e004      	b.n	8008568 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800855e:	2302      	movs	r3, #2
 8008560:	7023      	strb	r3, [r4, #0]
 8008562:	e001      	b.n	8008568 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8008564:	2304      	movs	r3, #4
 8008566:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8008568:	462a      	mov	r2, r5
 800856a:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 800856e:	7820      	ldrb	r0, [r4, #0]
 8008570:	f004 ff76 	bl	800d460 <LoRaMacCryptoGetFCntDown>
}
 8008574:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008576:	2009      	movs	r0, #9
 8008578:	e7fc      	b.n	8008574 <GetFCntDown+0x44>
 800857a:	2009      	movs	r0, #9
 800857c:	e7fa      	b.n	8008574 <GetFCntDown+0x44>
 800857e:	2009      	movs	r0, #9
 8008580:	e7f8      	b.n	8008574 <GetFCntDown+0x44>
    switch( addrID )
 8008582:	2005      	movs	r0, #5
 8008584:	e7f6      	b.n	8008574 <GetFCntDown+0x44>

08008586 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8008586:	2801      	cmp	r0, #1
 8008588:	d900      	bls.n	800858c <RemoveMacCommands+0x6>
 800858a:	4770      	bx	lr
{
 800858c:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 800858e:	2a01      	cmp	r2, #1
 8008590:	d105      	bne.n	800859e <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 8008592:	f011 0f20 	tst.w	r1, #32
 8008596:	d004      	beq.n	80085a2 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8008598:	f004 fbdc 	bl	800cd54 <LoRaMacCommandsRemoveStickyAnsCmds>
 800859c:	e001      	b.n	80085a2 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800859e:	f004 fbd9 	bl	800cd54 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80085a2:	bd08      	pop	{r3, pc}

080085a4 <ProcessMacCommands>:
{
 80085a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a8:	b08f      	sub	sp, #60	; 0x3c
 80085aa:	4698      	mov	r8, r3
    uint8_t status = 0;
 80085ac:	2300      	movs	r3, #0
 80085ae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80085b2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 80085b6:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	f200 82d9 	bhi.w	8008b72 <ProcessMacCommands+0x5ce>
 80085c0:	4605      	mov	r5, r0
 80085c2:	460c      	mov	r4, r1
 80085c4:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 80085c6:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 80085ca:	42bc      	cmp	r4, r7
 80085cc:	f080 82d1 	bcs.w	8008b72 <ProcessMacCommands+0x5ce>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80085d0:	5d28      	ldrb	r0, [r5, r4]
 80085d2:	f004 fc27 	bl	800ce24 <LoRaMacCommandsGetCmdSize>
 80085d6:	4420      	add	r0, r4
 80085d8:	42b8      	cmp	r0, r7
 80085da:	f300 82ca 	bgt.w	8008b72 <ProcessMacCommands+0x5ce>
        switch( payload[macIndex++] )
 80085de:	1c66      	adds	r6, r4, #1
 80085e0:	b2f6      	uxtb	r6, r6
 80085e2:	5d2b      	ldrb	r3, [r5, r4]
 80085e4:	3b02      	subs	r3, #2
 80085e6:	2b11      	cmp	r3, #17
 80085e8:	f200 82c3 	bhi.w	8008b72 <ProcessMacCommands+0x5ce>
 80085ec:	e8df f013 	tbh	[pc, r3, lsl #1]
 80085f0:	00280012 	.word	0x00280012
 80085f4:	00c000ad 	.word	0x00c000ad
 80085f8:	011e0106 	.word	0x011e0106
 80085fc:	01740157 	.word	0x01740157
 8008600:	02c101bf 	.word	0x02c101bf
 8008604:	01ef02c1 	.word	0x01ef02c1
 8008608:	02c102c1 	.word	0x02c102c1
 800860c:	02680251 	.word	0x02680251
 8008610:	02a10287 	.word	0x02a10287
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8008614:	2004      	movs	r0, #4
 8008616:	f004 fd01 	bl	800d01c <LoRaMacConfirmQueueIsCmdActive>
 800861a:	b908      	cbnz	r0, 8008620 <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 800861c:	4634      	mov	r4, r6
 800861e:	e7d4      	b.n	80085ca <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8008620:	2104      	movs	r1, #4
 8008622:	2000      	movs	r0, #0
 8008624:	f004 fcae 	bl	800cf84 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8008628:	1ca3      	adds	r3, r4, #2
 800862a:	b2db      	uxtb	r3, r3
 800862c:	5da9      	ldrb	r1, [r5, r6]
 800862e:	4aa7      	ldr	r2, [pc, #668]	; (80088cc <ProcessMacCommands+0x328>)
 8008630:	f882 1460 	strb.w	r1, [r2, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8008634:	3403      	adds	r4, #3
 8008636:	b2e4      	uxtb	r4, r4
 8008638:	5ceb      	ldrb	r3, [r5, r3]
 800863a:	f882 3461 	strb.w	r3, [r2, #1121]	; 0x461
 800863e:	e7c4      	b.n	80085ca <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 8008640:	2300      	movs	r3, #0
 8008642:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 8008646:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800864a:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800864e:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 8008652:	f1b9 0f00 	cmp.w	r9, #0
 8008656:	d036      	beq.n	80086c6 <ProcessMacCommands+0x122>
                    macIndex += 4;
 8008658:	3405      	adds	r4, #5
 800865a:	b2e4      	uxtb	r4, r4
 800865c:	e7b5      	b.n	80085ca <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 800865e:	2305      	movs	r3, #5
 8008660:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8008664:	e050      	b.n	8008708 <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8008666:	4b9a      	ldr	r3, [pc, #616]	; (80088d0 <ProcessMacCommands+0x32c>)
 8008668:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800866c:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 8008670:	4293      	cmp	r3, r2
 8008672:	da03      	bge.n	800867c <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8008674:	4b96      	ldr	r3, [pc, #600]	; (80088d0 <ProcessMacCommands+0x32c>)
 8008676:	2101      	movs	r1, #1
 8008678:	f883 1109 	strb.w	r1, [r3, #265]	; 0x109
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800867c:	4b94      	ldr	r3, [pc, #592]	; (80088d0 <ProcessMacCommands+0x32c>)
 800867e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8008682:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8008686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800868a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800868e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8008692:	e04d      	b.n	8008730 <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8008694:	2201      	movs	r2, #1
 8008696:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800869a:	2003      	movs	r0, #3
 800869c:	f004 fafa 	bl	800cc94 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80086a0:	3401      	adds	r4, #1
 80086a2:	b2e4      	uxtb	r4, r4
 80086a4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80086a8:	498a      	ldr	r1, [pc, #552]	; (80088d4 <ProcessMacCommands+0x330>)
 80086aa:	fba1 2103 	umull	r2, r1, r1, r3
 80086ae:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 80086b2:	d3ef      	bcc.n	8008694 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 80086b4:	441e      	add	r6, r3
 80086b6:	b2f6      	uxtb	r6, r6
 80086b8:	1e74      	subs	r4, r6, #1
 80086ba:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 80086bc:	42a7      	cmp	r7, r4
 80086be:	d93a      	bls.n	8008736 <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 80086c0:	5d2b      	ldrb	r3, [r5, r4]
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	d136      	bne.n	8008734 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 80086c6:	1e73      	subs	r3, r6, #1
 80086c8:	442b      	add	r3, r5
 80086ca:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80086cc:	4b80      	ldr	r3, [pc, #512]	; (80088d0 <ProcessMacCommands+0x32c>)
 80086ce:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80086d2:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80086d6:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
 80086da:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80086de:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 80086e2:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80086e6:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 80086ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80086ee:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 80086f2:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 80086f6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80086fa:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80086fc:	2a00      	cmp	r2, #0
 80086fe:	d0ae      	beq.n	800865e <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8008700:	1bbb      	subs	r3, r7, r6
 8008702:	3301      	adds	r3, #1
 8008704:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8008708:	ab05      	add	r3, sp, #20
 800870a:	9301      	str	r3, [sp, #4]
 800870c:	ab03      	add	r3, sp, #12
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	f10d 030b 	add.w	r3, sp, #11
 8008714:	f10d 020a 	add.w	r2, sp, #10
 8008718:	a907      	add	r1, sp, #28
 800871a:	486d      	ldr	r0, [pc, #436]	; (80088d0 <ProcessMacCommands+0x32c>)
 800871c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8008720:	f005 fa3a 	bl	800db98 <RegionLinkAdrReq>
 8008724:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 8008728:	f000 0007 	and.w	r0, r0, #7
 800872c:	2807      	cmp	r0, #7
 800872e:	d09a      	beq.n	8008666 <ProcessMacCommands+0xc2>
{
 8008730:	2400      	movs	r4, #0
 8008732:	e7b7      	b.n	80086a4 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8008734:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 8008736:	42bc      	cmp	r4, r7
 8008738:	d204      	bcs.n	8008744 <ProcessMacCommands+0x1a0>
                        macIndex--;
 800873a:	3c01      	subs	r4, #1
 800873c:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 800873e:	f04f 0901 	mov.w	r9, #1
 8008742:	e742      	b.n	80085ca <ProcessMacCommands+0x26>
 8008744:	f04f 0901 	mov.w	r9, #1
                break;
 8008748:	e73f      	b.n	80085ca <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800874a:	3402      	adds	r4, #2
 800874c:	b2e4      	uxtb	r4, r4
 800874e:	5dab      	ldrb	r3, [r5, r6]
 8008750:	f003 030f 	and.w	r3, r3, #15
 8008754:	495e      	ldr	r1, [pc, #376]	; (80088d0 <ProcessMacCommands+0x32c>)
 8008756:	f881 3107 	strb.w	r3, [r1, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800875a:	2201      	movs	r2, #1
 800875c:	fa02 f303 	lsl.w	r3, r2, r3
 8008760:	f8a1 310c 	strh.w	r3, [r1, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8008764:	2200      	movs	r2, #0
 8008766:	a90b      	add	r1, sp, #44	; 0x2c
 8008768:	2004      	movs	r0, #4
 800876a:	f004 fa93 	bl	800cc94 <LoRaMacCommandsAddCmd>
                break;
 800876e:	e72c      	b.n	80085ca <ProcessMacCommands+0x26>
                status = 0x07;
 8008770:	2307      	movs	r3, #7
 8008772:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8008776:	5dab      	ldrb	r3, [r5, r6]
 8008778:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800877c:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8008780:	57ab      	ldrsb	r3, [r5, r6]
 8008782:	f003 030f 	and.w	r3, r3, #15
 8008786:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 800878a:	1ca3      	adds	r3, r4, #2
 800878c:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800878e:	1ce1      	adds	r1, r4, #3
 8008790:	b2c9      	uxtb	r1, r1
 8008792:	5ceb      	ldrb	r3, [r5, r3]
 8008794:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008796:	1d22      	adds	r2, r4, #4
 8008798:	b2d2      	uxtb	r2, r2
 800879a:	5c69      	ldrb	r1, [r5, r1]
 800879c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80087a0:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80087a2:	3405      	adds	r4, #5
 80087a4:	b2e4      	uxtb	r4, r4
 80087a6:	5caa      	ldrb	r2, [r5, r2]
 80087a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087ac:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 80087ae:	2264      	movs	r2, #100	; 0x64
 80087b0:	fb02 f303 	mul.w	r3, r2, r3
 80087b4:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80087b6:	a907      	add	r1, sp, #28
 80087b8:	4b45      	ldr	r3, [pc, #276]	; (80088d0 <ProcessMacCommands+0x32c>)
 80087ba:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80087be:	f005 f9fc 	bl	800dbba <RegionRxParamSetupReq>
 80087c2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 80087c6:	f000 0307 	and.w	r3, r0, #7
 80087ca:	2b07      	cmp	r3, #7
 80087cc:	d007      	beq.n	80087de <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 80087ce:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80087d2:	2201      	movs	r2, #1
 80087d4:	a90b      	add	r1, sp, #44	; 0x2c
 80087d6:	2005      	movs	r0, #5
 80087d8:	f004 fa5c 	bl	800cc94 <LoRaMacCommandsAddCmd>
                break;
 80087dc:	e6f5      	b.n	80085ca <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80087de:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80087e2:	4b3b      	ldr	r3, [pc, #236]	; (80088d0 <ProcessMacCommands+0x32c>)
 80087e4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80087e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80087ec:	9a08      	ldr	r2, [sp, #32]
 80087ee:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80087f0:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80087f2:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80087f6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 80087fa:	e7e8      	b.n	80087ce <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80087fc:	4b33      	ldr	r3, [pc, #204]	; (80088cc <ProcessMacCommands+0x328>)
 80087fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008802:	b17b      	cbz	r3, 8008824 <ProcessMacCommands+0x280>
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	b17b      	cbz	r3, 8008828 <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8008808:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800880a:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800880e:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 8008812:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8008816:	2202      	movs	r2, #2
 8008818:	a90b      	add	r1, sp, #44	; 0x2c
 800881a:	2006      	movs	r0, #6
 800881c:	f004 fa3a 	bl	800cc94 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 8008820:	4634      	mov	r4, r6
                break;
 8008822:	e6d2      	b.n	80085ca <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8008824:	20ff      	movs	r0, #255	; 0xff
 8008826:	e7f0      	b.n	800880a <ProcessMacCommands+0x266>
 8008828:	20ff      	movs	r0, #255	; 0xff
 800882a:	e7ee      	b.n	800880a <ProcessMacCommands+0x266>
                status = 0x03;
 800882c:	2303      	movs	r3, #3
 800882e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 8008832:	1ca3      	adds	r3, r4, #2
 8008834:	b2db      	uxtb	r3, r3
 8008836:	57aa      	ldrsb	r2, [r5, r6]
 8008838:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800883c:	aa07      	add	r2, sp, #28
 800883e:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8008840:	1ce2      	adds	r2, r4, #3
 8008842:	b2d2      	uxtb	r2, r2
 8008844:	5ceb      	ldrb	r3, [r5, r3]
 8008846:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008848:	1d21      	adds	r1, r4, #4
 800884a:	b2c9      	uxtb	r1, r1
 800884c:	5caa      	ldrb	r2, [r5, r2]
 800884e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008852:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008854:	1d62      	adds	r2, r4, #5
 8008856:	b2d2      	uxtb	r2, r2
 8008858:	5c69      	ldrb	r1, [r5, r1]
 800885a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800885e:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 8008860:	2164      	movs	r1, #100	; 0x64
 8008862:	fb01 f303 	mul.w	r3, r1, r3
 8008866:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 8008868:	2300      	movs	r3, #0
 800886a:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800886c:	3406      	adds	r4, #6
 800886e:	b2e4      	uxtb	r4, r4
 8008870:	56ab      	ldrsb	r3, [r5, r2]
 8008872:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8008876:	a905      	add	r1, sp, #20
 8008878:	4b15      	ldr	r3, [pc, #84]	; (80088d0 <ProcessMacCommands+0x32c>)
 800887a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800887e:	f005 f9a4 	bl	800dbca <RegionNewChannelReq>
 8008882:	b2c3      	uxtb	r3, r0
 8008884:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8008888:	2800      	cmp	r0, #0
 800888a:	f6ff ae9e 	blt.w	80085ca <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800888e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8008892:	2201      	movs	r2, #1
 8008894:	a90b      	add	r1, sp, #44	; 0x2c
 8008896:	2007      	movs	r0, #7
 8008898:	f004 f9fc 	bl	800cc94 <LoRaMacCommandsAddCmd>
                break;
 800889c:	e695      	b.n	80085ca <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800889e:	3402      	adds	r4, #2
 80088a0:	b2e4      	uxtb	r4, r4
 80088a2:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 80088a4:	f013 030f 	ands.w	r3, r3, #15
 80088a8:	d100      	bne.n	80088ac <ProcessMacCommands+0x308>
                    delay++;
 80088aa:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80088ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088b0:	fb02 f303 	mul.w	r3, r2, r3
 80088b4:	4a06      	ldr	r2, [pc, #24]	; (80088d0 <ProcessMacCommands+0x32c>)
 80088b6:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80088b8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80088bc:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80088be:	2200      	movs	r2, #0
 80088c0:	a90b      	add	r1, sp, #44	; 0x2c
 80088c2:	2008      	movs	r0, #8
 80088c4:	f004 f9e6 	bl	800cc94 <LoRaMacCommandsAddCmd>
                break;
 80088c8:	e67f      	b.n	80085ca <ProcessMacCommands+0x26>
 80088ca:	bf00      	nop
 80088cc:	200006bc 	.word	0x200006bc
 80088d0:	20008000 	.word	0x20008000
 80088d4:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 80088d8:	3402      	adds	r4, #2
 80088da:	b2e4      	uxtb	r4, r4
 80088dc:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 80088de:	2200      	movs	r2, #0
 80088e0:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 80088e4:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80088e8:	f013 0f20 	tst.w	r3, #32
 80088ec:	d002      	beq.n	80088f4 <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 80088ee:	2201      	movs	r2, #1
 80088f0:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80088f4:	f013 0f10 	tst.w	r3, #16
 80088f8:	d002      	beq.n	8008900 <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 80088fa:	2201      	movs	r2, #1
 80088fc:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8008900:	f003 030f 	and.w	r3, r3, #15
 8008904:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8008908:	a903      	add	r1, sp, #12
 800890a:	4b9b      	ldr	r3, [pc, #620]	; (8008b78 <ProcessMacCommands+0x5d4>)
 800890c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008910:	f005 f963 	bl	800dbda <RegionTxParamSetupReq>
 8008914:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008918:	f43f ae57 	beq.w	80085ca <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800891c:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8008920:	4e95      	ldr	r6, [pc, #596]	; (8008b78 <ProcessMacCommands+0x5d4>)
 8008922:	f886 a074 	strb.w	sl, [r6, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8008926:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800892a:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800892e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008932:	4a92      	ldr	r2, [pc, #584]	; (8008b7c <ProcessMacCommands+0x5d8>)
 8008934:	5cd0      	ldrb	r0, [r2, r3]
 8008936:	f7f7 ffed 	bl	8000914 <__aeabi_ui2f>
 800893a:	67b0      	str	r0, [r6, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800893c:	2302      	movs	r3, #2
 800893e:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008942:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008946:	a907      	add	r1, sp, #28
 8008948:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800894c:	f005 f8cd 	bl	800daea <RegionGetPhyParam>
 8008950:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8008952:	b240      	sxtb	r0, r0
 8008954:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 8008958:	4298      	cmp	r0, r3
 800895a:	bfb8      	it	lt
 800895c:	4618      	movlt	r0, r3
 800895e:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8008962:	2200      	movs	r2, #0
 8008964:	a90b      	add	r1, sp, #44	; 0x2c
 8008966:	2009      	movs	r0, #9
 8008968:	f004 f994 	bl	800cc94 <LoRaMacCommandsAddCmd>
                break;
 800896c:	e62d      	b.n	80085ca <ProcessMacCommands+0x26>
                status = 0x03;
 800896e:	2303      	movs	r3, #3
 8008970:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 8008974:	1ca3      	adds	r3, r4, #2
 8008976:	b2db      	uxtb	r3, r3
 8008978:	5daa      	ldrb	r2, [r5, r6]
 800897a:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800897e:	1ce1      	adds	r1, r4, #3
 8008980:	b2c9      	uxtb	r1, r1
 8008982:	5ceb      	ldrb	r3, [r5, r3]
 8008984:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008986:	1d22      	adds	r2, r4, #4
 8008988:	b2d2      	uxtb	r2, r2
 800898a:	5c69      	ldrb	r1, [r5, r1]
 800898c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008990:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008992:	3405      	adds	r4, #5
 8008994:	b2e4      	uxtb	r4, r4
 8008996:	5caa      	ldrb	r2, [r5, r2]
 8008998:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800899c:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 800899e:	2264      	movs	r2, #100	; 0x64
 80089a0:	fb02 f303 	mul.w	r3, r2, r3
 80089a4:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80089a6:	a907      	add	r1, sp, #28
 80089a8:	4b73      	ldr	r3, [pc, #460]	; (8008b78 <ProcessMacCommands+0x5d4>)
 80089aa:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80089ae:	f005 f91c 	bl	800dbea <RegionDlChannelReq>
 80089b2:	b2c3      	uxtb	r3, r0
 80089b4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80089b8:	2800      	cmp	r0, #0
 80089ba:	f6ff ae06 	blt.w	80085ca <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 80089be:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80089c2:	2201      	movs	r2, #1
 80089c4:	a90b      	add	r1, sp, #44	; 0x2c
 80089c6:	200a      	movs	r0, #10
 80089c8:	f004 f964 	bl	800cc94 <LoRaMacCommandsAddCmd>
                break;
 80089cc:	e5fd      	b.n	80085ca <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80089ce:	2009      	movs	r0, #9
 80089d0:	f004 fb24 	bl	800d01c <LoRaMacConfirmQueueIsCmdActive>
 80089d4:	b928      	cbnz	r0, 80089e2 <ProcessMacCommands+0x43e>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80089d6:	4b6a      	ldr	r3, [pc, #424]	; (8008b80 <ProcessMacCommands+0x5dc>)
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
        switch( payload[macIndex++] )
 80089de:	4634      	mov	r4, r6
 80089e0:	e5f3      	b.n	80085ca <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80089e2:	2109      	movs	r1, #9
 80089e4:	2000      	movs	r0, #0
 80089e6:	f004 facd 	bl	800cf84 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 80089ea:	a803      	add	r0, sp, #12
 80089ec:	2300      	movs	r3, #0
 80089ee:	9303      	str	r3, [sp, #12]
 80089f0:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 80089f2:	f10d 0a14 	add.w	sl, sp, #20
 80089f6:	9305      	str	r3, [sp, #20]
 80089f8:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 80089fa:	f10d 0b1c 	add.w	fp, sp, #28
 80089fe:	9307      	str	r3, [sp, #28]
 8008a00:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8008a02:	1ca1      	adds	r1, r4, #2
 8008a04:	b2c9      	uxtb	r1, r1
 8008a06:	5dab      	ldrb	r3, [r5, r6]
 8008a08:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8008a0a:	1ce2      	adds	r2, r4, #3
 8008a0c:	b2d2      	uxtb	r2, r2
 8008a0e:	5c69      	ldrb	r1, [r5, r1]
 8008a10:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008a14:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008a16:	1d21      	adds	r1, r4, #4
 8008a18:	b2c9      	uxtb	r1, r1
 8008a1a:	5caa      	ldrb	r2, [r5, r2]
 8008a1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a20:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008a22:	1d62      	adds	r2, r4, #5
 8008a24:	b2d2      	uxtb	r2, r2
 8008a26:	5c69      	ldrb	r1, [r5, r1]
 8008a28:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008a2c:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8008a2e:	3406      	adds	r4, #6
 8008a30:	b2e4      	uxtb	r4, r4
 8008a32:	5caa      	ldrb	r2, [r5, r2]
 8008a34:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8008a38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008a3c:	fb01 f202 	mul.w	r2, r1, r2
 8008a40:	0a12      	lsrs	r2, r2, #8
 8008a42:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8008a46:	c803      	ldmia	r0, {r0, r1}
 8008a48:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8008a4c:	4a4d      	ldr	r2, [pc, #308]	; (8008b84 <ProcessMacCommands+0x5e0>)
 8008a4e:	441a      	add	r2, r3
 8008a50:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 8008a52:	4658      	mov	r0, fp
 8008a54:	f009 fb1e 	bl	8012094 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8008a58:	4e49      	ldr	r6, [pc, #292]	; (8008b80 <ProcessMacCommands+0x5dc>)
 8008a5a:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 8008a64:	e89a 0006 	ldmia.w	sl, {r1, r2}
 8008a68:	a80c      	add	r0, sp, #48	; 0x30
 8008a6a:	f009 fad2 	bl	8012012 <SysTimeSub>
 8008a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a74:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8008a78:	4650      	mov	r0, sl
 8008a7a:	f009 faab 	bl	8011fd4 <SysTimeAdd>
                    SysTimeSet( sysTime );
 8008a7e:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8008a82:	f009 fae5 	bl	8012050 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8008a86:	f003 fd3d 	bl	800c504 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	f886 343c 	strb.w	r3, [r6, #1084]	; 0x43c
 8008a90:	e59b      	b.n	80085ca <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8008a92:	200c      	movs	r0, #12
 8008a94:	f004 fac2 	bl	800d01c <LoRaMacConfirmQueueIsCmdActive>
 8008a98:	b908      	cbnz	r0, 8008a9e <ProcessMacCommands+0x4fa>
        switch( payload[macIndex++] )
 8008a9a:	4634      	mov	r4, r6
 8008a9c:	e595      	b.n	80085ca <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8008a9e:	210c      	movs	r1, #12
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	f004 fa6f 	bl	800cf84 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8008aa6:	4b36      	ldr	r3, [pc, #216]	; (8008b80 <ProcessMacCommands+0x5dc>)
 8008aa8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8008aac:	3b04      	subs	r3, #4
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d801      	bhi.n	8008ab8 <ProcessMacCommands+0x514>
        switch( payload[macIndex++] )
 8008ab4:	4634      	mov	r4, r6
 8008ab6:	e588      	b.n	80085ca <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 8008ab8:	f003 fc84 	bl	800c3c4 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 8008abc:	4634      	mov	r4, r6
 8008abe:	e584      	b.n	80085ca <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 8008ac0:	1ca2      	adds	r2, r4, #2
 8008ac2:	b2d2      	uxtb	r2, r2
 8008ac4:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008ac6:	1ce1      	adds	r1, r4, #3
 8008ac8:	b2c9      	uxtb	r1, r1
 8008aca:	5caa      	ldrb	r2, [r5, r2]
 8008acc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008ad0:	1d22      	adds	r2, r4, #4
 8008ad2:	b2d2      	uxtb	r2, r2
 8008ad4:	5c69      	ldrb	r1, [r5, r1]
 8008ad6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 8008ada:	3405      	adds	r4, #5
 8008adc:	b2e4      	uxtb	r4, r4
 8008ade:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8008ae0:	2164      	movs	r1, #100	; 0x64
 8008ae2:	fb03 f101 	mul.w	r1, r3, r1
 8008ae6:	f000 000f 	and.w	r0, r0, #15
 8008aea:	f003 fc7f 	bl	800c3ec <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8008aee:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8008af2:	2201      	movs	r2, #1
 8008af4:	a90b      	add	r1, sp, #44	; 0x2c
 8008af6:	2011      	movs	r0, #17
 8008af8:	f004 f8cc 	bl	800cc94 <LoRaMacCommandsAddCmd>
                break;
 8008afc:	e565      	b.n	80085ca <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8008afe:	200d      	movs	r0, #13
 8008b00:	f004 fa8c 	bl	800d01c <LoRaMacConfirmQueueIsCmdActive>
 8008b04:	b908      	cbnz	r0, 8008b0a <ProcessMacCommands+0x566>
        switch( payload[macIndex++] )
 8008b06:	4634      	mov	r4, r6
 8008b08:	e55f      	b.n	80085ca <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8008b0a:	210d      	movs	r1, #13
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	f004 fa39 	bl	800cf84 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8008b12:	1ca2      	adds	r2, r4, #2
 8008b14:	b2d2      	uxtb	r2, r2
 8008b16:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008b18:	1ce3      	adds	r3, r4, #3
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8008b1e:	3404      	adds	r4, #4
 8008b20:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008b22:	4a19      	ldr	r2, [pc, #100]	; (8008b88 <ProcessMacCommands+0x5e4>)
 8008b24:	6812      	ldr	r2, [r2, #0]
 8008b26:	5ce9      	ldrb	r1, [r5, r3]
 8008b28:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8008b2c:	f003 fca8 	bl	800c480 <LoRaMacClassBBeaconTimingAns>
 8008b30:	e54b      	b.n	80085ca <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 8008b32:	1ca1      	adds	r1, r4, #2
 8008b34:	b2c9      	uxtb	r1, r1
 8008b36:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008b38:	1ce2      	adds	r2, r4, #3
 8008b3a:	b2d2      	uxtb	r2, r2
 8008b3c:	5c68      	ldrb	r0, [r5, r1]
 8008b3e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008b42:	3404      	adds	r4, #4
 8008b44:	b2e4      	uxtb	r4, r4
 8008b46:	5ca8      	ldrb	r0, [r5, r2]
 8008b48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8008b4c:	2064      	movs	r0, #100	; 0x64
 8008b4e:	fb03 f000 	mul.w	r0, r3, r0
 8008b52:	f003 fd37 	bl	800c5c4 <LoRaMacClassBBeaconFreqReq>
 8008b56:	b140      	cbz	r0, 8008b6a <ProcessMacCommands+0x5c6>
                        macCmdPayload[0] = 1;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8008b5e:	2201      	movs	r2, #1
 8008b60:	a90b      	add	r1, sp, #44	; 0x2c
 8008b62:	2013      	movs	r0, #19
 8008b64:	f004 f896 	bl	800cc94 <LoRaMacCommandsAddCmd>
                break;
 8008b68:	e52f      	b.n	80085ca <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8008b70:	e7f5      	b.n	8008b5e <ProcessMacCommands+0x5ba>
}
 8008b72:	b00f      	add	sp, #60	; 0x3c
 8008b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b78:	20008000 	.word	0x20008000
 8008b7c:	08013ea0 	.word	0x08013ea0
 8008b80:	200006bc 	.word	0x200006bc
 8008b84:	12d53d80 	.word	0x12d53d80
 8008b88:	20000c6c 	.word	0x20000c6c

08008b8c <ProcessRadioRxDone>:
{
 8008b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b90:	b0a1      	sub	sp, #132	; 0x84
    uint8_t *payload = RxDoneParams.Payload;
 8008b92:	4b96      	ldr	r3, [pc, #600]	; (8008dec <ProcessRadioRxDone+0x260>)
 8008b94:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 8008b96:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8008b98:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 8008b9c:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	9303      	str	r3, [sp, #12]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008ba4:	4a92      	ldr	r2, [pc, #584]	; (8008df0 <ProcessRadioRxDone+0x264>)
 8008ba6:	f8d2 80d4 	ldr.w	r8, [r2, #212]	; 0xd4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8008baa:	4a92      	ldr	r2, [pc, #584]	; (8008df4 <ProcessRadioRxDone+0x268>)
 8008bac:	7811      	ldrb	r1, [r2, #0]
 8008bae:	f363 0100 	bfi	r1, r3, #0, #1
 8008bb2:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 8008bb4:	4c90      	ldr	r4, [pc, #576]	; (8008df8 <ProcessRadioRxDone+0x26c>)
 8008bb6:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
    MacCtx.RxStatus.Rssi = rssi;
 8008bba:	f8a4 9490 	strh.w	r9, [r4, #1168]	; 0x490
    MacCtx.RxStatus.Snr = snr;
 8008bbe:	f884 7492 	strb.w	r7, [r4, #1170]	; 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8008bc2:	f894 2494 	ldrb.w	r2, [r4, #1172]	; 0x494
 8008bc6:	f884 2493 	strb.w	r2, [r4, #1171]	; 0x493
    MacCtx.McpsIndication.Port = 0;
 8008bca:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
    MacCtx.McpsIndication.Multicast = 0;
 8008bce:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
    MacCtx.McpsIndication.FramePending = 0;
 8008bd2:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 8008bd6:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 8008bda:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.RxData = false;
 8008bde:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    MacCtx.McpsIndication.AckReceived = false;
 8008be2:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8008be6:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008bea:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 8008bee:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008bf2:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8008bf6:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    Radio.Sleep( );
 8008bfa:	4b80      	ldr	r3, [pc, #512]	; (8008dfc <ProcessRadioRxDone+0x270>)
 8008bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfe:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8008c00:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 8008c04:	b1c3      	cbz	r3, 8008c38 <ProcessRadioRxDone+0xac>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8008c06:	4629      	mov	r1, r5
 8008c08:	4630      	mov	r0, r6
 8008c0a:	f003 fa19 	bl	800c040 <LoRaMacClassBRxBeacon>
 8008c0e:	b9c0      	cbnz	r0, 8008c42 <ProcessRadioRxDone+0xb6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008c10:	4b77      	ldr	r3, [pc, #476]	; (8008df0 <ProcessRadioRxDone+0x264>)
 8008c12:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d019      	beq.n	8008c4e <ProcessRadioRxDone+0xc2>
    macHdr.Value = payload[pktHeaderLen++];
 8008c1a:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 8008c1c:	0963      	lsrs	r3, r4, #5
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	2b06      	cmp	r3, #6
 8008c22:	f200 82d4 	bhi.w	80091ce <ProcessRadioRxDone+0x642>
 8008c26:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008c2a:	002f      	.short	0x002f
 8008c2c:	00b502d2 	.word	0x00b502d2
 8008c30:	00b102d2 	.word	0x00b102d2
 8008c34:	02a202d2 	.word	0x02a202d2
        TimerStop( &MacCtx.RxWindowTimer2 );
 8008c38:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8008c3c:	f009 fb18 	bl	8012270 <UTIL_TIMER_Stop>
 8008c40:	e7e1      	b.n	8008c06 <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8008c42:	4b6d      	ldr	r3, [pc, #436]	; (8008df8 <ProcessRadioRxDone+0x26c>)
 8008c44:	f8a3 9482 	strh.w	r9, [r3, #1154]	; 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008c48:	f883 7484 	strb.w	r7, [r3, #1156]	; 0x484
        return;
 8008c4c:	e2bc      	b.n	80091c8 <ProcessRadioRxDone+0x63c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008c4e:	f003 fb05 	bl	800c25c <LoRaMacClassBIsPingExpected>
 8008c52:	b150      	cbz	r0, 8008c6a <ProcessRadioRxDone+0xde>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008c54:	2000      	movs	r0, #0
 8008c56:	f003 f9e7 	bl	800c028 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	f002 fd78 	bl	800b750 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008c60:	4b65      	ldr	r3, [pc, #404]	; (8008df8 <ProcessRadioRxDone+0x26c>)
 8008c62:	2204      	movs	r2, #4
 8008c64:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 8008c68:	e7d7      	b.n	8008c1a <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008c6a:	f003 fb03 	bl	800c274 <LoRaMacClassBIsMulticastExpected>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	d0d3      	beq.n	8008c1a <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008c72:	2000      	movs	r0, #0
 8008c74:	f003 f9de 	bl	800c034 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008c78:	2000      	movs	r0, #0
 8008c7a:	f002 fd79 	bl	800b770 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008c7e:	4b5e      	ldr	r3, [pc, #376]	; (8008df8 <ProcessRadioRxDone+0x26c>)
 8008c80:	2205      	movs	r2, #5
 8008c82:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 8008c86:	e7c8      	b.n	8008c1a <ProcessRadioRxDone+0x8e>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8008c88:	2d10      	cmp	r5, #16
 8008c8a:	d962      	bls.n	8008d52 <ProcessRadioRxDone+0x1c6>
            macMsgJoinAccept.Buffer = payload;
 8008c8c:	9604      	str	r6, [sp, #16]
            macMsgJoinAccept.BufSize = size;
 8008c8e:	b2ed      	uxtb	r5, r5
 8008c90:	f88d 5014 	strb.w	r5, [sp, #20]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008c94:	4b56      	ldr	r3, [pc, #344]	; (8008df0 <ProcessRadioRxDone+0x264>)
 8008c96:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d160      	bne.n	8008d60 <ProcessRadioRxDone+0x1d4>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8008c9e:	f007 f8b9 	bl	800fe14 <SecureElementGetJoinEui>
 8008ca2:	4601      	mov	r1, r0
 8008ca4:	aa04      	add	r2, sp, #16
 8008ca6:	20ff      	movs	r0, #255	; 0xff
 8008ca8:	f004 fd2e 	bl	800d708 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d163      	bne.n	8008d78 <ProcessRadioRxDone+0x1ec>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8008cb0:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8008cb4:	4b4e      	ldr	r3, [pc, #312]	; (8008df0 <ProcessRadioRxDone+0x264>)
 8008cb6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8008cba:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8008cbe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008cc2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008cc6:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8008cca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008cce:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8008cd2:	9a07      	ldr	r2, [sp, #28]
 8008cd4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008cd8:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8008cdc:	f3c2 1101 	ubfx	r1, r2, #4, #2
 8008ce0:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008ce4:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8008ce8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008cec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8008cf0:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8008cf4:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8008cf6:	b90a      	cbnz	r2, 8008cfc <ProcessRadioRxDone+0x170>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8008cfc:	4c3c      	ldr	r4, [pc, #240]	; (8008df0 <ProcessRadioRxDone+0x264>)
 8008cfe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008d00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d04:	fb02 f303 	mul.w	r3, r2, r3
 8008d08:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008d0a:	4413      	add	r3, r2
 8008d0c:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008d14:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8008d18:	931e      	str	r3, [sp, #120]	; 0x78
                applyCFList.Size = size - 17;
 8008d1a:	3d11      	subs	r5, #17
 8008d1c:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
                applyCFList.JoinChannel = MacCtx.Channel;
 8008d20:	4b35      	ldr	r3, [pc, #212]	; (8008df8 <ProcessRadioRxDone+0x26c>)
 8008d22:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 8008d26:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008d2a:	a91d      	add	r1, sp, #116	; 0x74
 8008d2c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8008d30:	f004 ff03 	bl	800db3a <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008d34:	2302      	movs	r3, #2
 8008d36:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008d3a:	2001      	movs	r0, #1
 8008d3c:	f004 f96e 	bl	800d01c <LoRaMacConfirmQueueIsCmdActive>
 8008d40:	b9a8      	cbnz	r0, 8008d6e <ProcessRadioRxDone+0x1e2>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8008d42:	4a2d      	ldr	r2, [pc, #180]	; (8008df8 <ProcessRadioRxDone+0x26c>)
 8008d44:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8008d48:	f043 0308 	orr.w	r3, r3, #8
 8008d4c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 8008d50:	e227      	b.n	80091a2 <ProcessRadioRxDone+0x616>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008d52:	4b29      	ldr	r3, [pc, #164]	; (8008df8 <ProcessRadioRxDone+0x26c>)
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008d5a:	f7ff fbab 	bl	80084b4 <PrepareRxDoneAbort>
                return;
 8008d5e:	e233      	b.n	80091c8 <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008d60:	4b25      	ldr	r3, [pc, #148]	; (8008df8 <ProcessRadioRxDone+0x26c>)
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008d68:	f7ff fba4 	bl	80084b4 <PrepareRxDoneAbort>
                return;
 8008d6c:	e22c      	b.n	80091c8 <ProcessRadioRxDone+0x63c>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8008d6e:	2101      	movs	r1, #1
 8008d70:	2000      	movs	r0, #0
 8008d72:	f004 f907 	bl	800cf84 <LoRaMacConfirmQueueSetStatus>
 8008d76:	e7e4      	b.n	8008d42 <ProcessRadioRxDone+0x1b6>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008d78:	2001      	movs	r0, #1
 8008d7a:	f004 f94f 	bl	800d01c <LoRaMacConfirmQueueIsCmdActive>
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	d0df      	beq.n	8008d42 <ProcessRadioRxDone+0x1b6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008d82:	2101      	movs	r1, #1
 8008d84:	2007      	movs	r0, #7
 8008d86:	f004 f8fd 	bl	800cf84 <LoRaMacConfirmQueueSetStatus>
 8008d8a:	e7da      	b.n	8008d42 <ProcessRadioRxDone+0x1b6>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008d8c:	4b1a      	ldr	r3, [pc, #104]	; (8008df8 <ProcessRadioRxDone+0x26c>)
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008d94:	4b16      	ldr	r3, [pc, #88]	; (8008df0 <ProcessRadioRxDone+0x264>)
 8008d96:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8008d9a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8008d9e:	4a16      	ldr	r2, [pc, #88]	; (8008df8 <ProcessRadioRxDone+0x26c>)
 8008da0:	f992 2428 	ldrsb.w	r2, [r2, #1064]	; 0x428
 8008da4:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008da8:	220d      	movs	r2, #13
 8008daa:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008dae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008db2:	b113      	cbz	r3, 8008dba <ProcessRadioRxDone+0x22e>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008db4:	230e      	movs	r3, #14
 8008db6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008dba:	a91b      	add	r1, sp, #108	; 0x6c
 8008dbc:	4b0c      	ldr	r3, [pc, #48]	; (8008df0 <ProcessRadioRxDone+0x264>)
 8008dbe:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008dc2:	f004 fe92 	bl	800daea <RegionGetPhyParam>
 8008dc6:	901a      	str	r0, [sp, #104]	; 0x68
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8008dc8:	f1a5 030d 	sub.w	r3, r5, #13
 8008dcc:	b21b      	sxth	r3, r3
 8008dce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008dd2:	b200      	sxth	r0, r0
 8008dd4:	4283      	cmp	r3, r0
 8008dd6:	dc01      	bgt.n	8008ddc <ProcessRadioRxDone+0x250>
 8008dd8:	2d0b      	cmp	r5, #11
 8008dda:	d811      	bhi.n	8008e00 <ProcessRadioRxDone+0x274>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008ddc:	4b06      	ldr	r3, [pc, #24]	; (8008df8 <ProcessRadioRxDone+0x26c>)
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008de4:	f7ff fb66 	bl	80084b4 <PrepareRxDoneAbort>
                return;
 8008de8:	e1ee      	b.n	80091c8 <ProcessRadioRxDone+0x63c>
 8008dea:	bf00      	nop
 8008dec:	20000c6c 	.word	0x20000c6c
 8008df0:	20008000 	.word	0x20008000
 8008df4:	200006b8 	.word	0x200006b8
 8008df8:	200006bc 	.word	0x200006bc
 8008dfc:	080145a0 	.word	0x080145a0
            macMsgData.Buffer = payload;
 8008e00:	960e      	str	r6, [sp, #56]	; 0x38
            macMsgData.BufSize = size;
 8008e02:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008e06:	4bba      	ldr	r3, [pc, #744]	; (80090f0 <ProcessRadioRxDone+0x564>)
 8008e08:	9317      	str	r3, [sp, #92]	; 0x5c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008e0a:	23ff      	movs	r3, #255	; 0xff
 8008e0c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008e10:	a80e      	add	r0, sp, #56	; 0x38
 8008e12:	f004 fd3f 	bl	800d894 <LoRaMacParserData>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d142      	bne.n	8008ea0 <ProcessRadioRxDone+0x314>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008e1a:	4bb6      	ldr	r3, [pc, #728]	; (80090f4 <ProcessRadioRxDone+0x568>)
 8008e1c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d044      	beq.n	8008eae <ProcessRadioRxDone+0x322>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8008e24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e26:	4bb4      	ldr	r3, [pc, #720]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 8008e28:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8008e2c:	f10d 010a 	add.w	r1, sp, #10
 8008e30:	a80e      	add	r0, sp, #56	; 0x38
 8008e32:	f7ff f9d5 	bl	80081e0 <DetermineFrameType>
 8008e36:	4605      	mov	r5, r0
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d163      	bne.n	8008f04 <ProcessRadioRxDone+0x378>
            downLinkCounter = 0;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	9303      	str	r3, [sp, #12]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d065      	beq.n	8008f12 <ProcessRadioRxDone+0x386>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8008e46:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8008e48:	2d01      	cmp	r5, #1
 8008e4a:	d10a      	bne.n	8008e62 <ProcessRadioRxDone+0x2d6>
 8008e4c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8008e50:	2b03      	cmp	r3, #3
 8008e52:	f040 808a 	bne.w	8008f6a <ProcessRadioRxDone+0x3de>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8008e56:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8008e5a:	f013 0f60 	tst.w	r3, #96	; 0x60
 8008e5e:	f040 8084 	bne.w	8008f6a <ProcessRadioRxDone+0x3de>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8008e62:	ab03      	add	r3, sp, #12
 8008e64:	9301      	str	r3, [sp, #4]
 8008e66:	f10d 030b 	add.w	r3, sp, #11
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	4ba1      	ldr	r3, [pc, #644]	; (80090f4 <ProcessRadioRxDone+0x568>)
 8008e6e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008e72:	aa0e      	add	r2, sp, #56	; 0x38
 8008e74:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f7ff fb59 	bl	8008530 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d07f      	beq.n	8008f82 <ProcessRadioRxDone+0x3f6>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8008e82:	2807      	cmp	r0, #7
 8008e84:	d078      	beq.n	8008f78 <ProcessRadioRxDone+0x3ec>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008e86:	4b9c      	ldr	r3, [pc, #624]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008e8e:	9a03      	ldr	r2, [sp, #12]
 8008e90:	4b99      	ldr	r3, [pc, #612]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 8008e92:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8008e96:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
                PrepareRxDoneAbort( );
 8008e9a:	f7ff fb0b 	bl	80084b4 <PrepareRxDoneAbort>
                return;
 8008e9e:	e193      	b.n	80091c8 <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008ea0:	4b95      	ldr	r3, [pc, #596]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008ea8:	f7ff fb04 	bl	80084b4 <PrepareRxDoneAbort>
                return;
 8008eac:	e18c      	b.n	80091c8 <ProcessRadioRxDone+0x63c>
                if( LoRaMacClassBIsPingExpected( ) == true )
 8008eae:	f003 f9d5 	bl	800c25c <LoRaMacClassBIsPingExpected>
 8008eb2:	b188      	cbz	r0, 8008ed8 <ProcessRadioRxDone+0x34c>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	f003 f8b7 	bl	800c028 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8008eba:	2000      	movs	r0, #0
 8008ebc:	f002 fc48 	bl	800b750 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008ec0:	4b8d      	ldr	r3, [pc, #564]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 8008ec2:	2204      	movs	r2, #4
 8008ec4:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8008ec8:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8008ecc:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8008ed0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008ed2:	f003 fe09 	bl	800cae8 <LoRaMacClassBSetFPendingBit>
 8008ed6:	e7a5      	b.n	8008e24 <ProcessRadioRxDone+0x298>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008ed8:	f003 f9cc 	bl	800c274 <LoRaMacClassBIsMulticastExpected>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d0a1      	beq.n	8008e24 <ProcessRadioRxDone+0x298>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	f003 f8a7 	bl	800c034 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	f002 fc42 	bl	800b770 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008eec:	4b82      	ldr	r3, [pc, #520]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 8008eee:	2205      	movs	r2, #5
 8008ef0:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8008ef4:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8008ef8:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8008efc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008efe:	f003 fdf3 	bl	800cae8 <LoRaMacClassBSetFPendingBit>
 8008f02:	e78f      	b.n	8008e24 <ProcessRadioRxDone+0x298>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008f04:	4b7c      	ldr	r3, [pc, #496]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008f0c:	f7ff fad2 	bl	80084b4 <PrepareRxDoneAbort>
                return;
 8008f10:	e15a      	b.n	80091c8 <ProcessRadioRxDone+0x63c>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008f12:	4618      	mov	r0, r3
 8008f14:	4a77      	ldr	r2, [pc, #476]	; (80090f4 <ProcessRadioRxDone+0x568>)
 8008f16:	212c      	movs	r1, #44	; 0x2c
 8008f18:	fb01 2203 	mla	r2, r1, r3, r2
 8008f1c:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 8008f20:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008f22:	428a      	cmp	r2, r1
 8008f24:	d002      	beq.n	8008f2c <ProcessRadioRxDone+0x3a0>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008f26:	3301      	adds	r3, #1
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	e78a      	b.n	8008e42 <ProcessRadioRxDone+0x2b6>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8008f2c:	4971      	ldr	r1, [pc, #452]	; (80090f4 <ProcessRadioRxDone+0x568>)
 8008f2e:	262c      	movs	r6, #44	; 0x2c
 8008f30:	fb06 1103 	mla	r1, r6, r3, r1
 8008f34:	f891 10da 	ldrb.w	r1, [r1, #218]	; 0xda
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008f38:	2900      	cmp	r1, #0
 8008f3a:	d0f4      	beq.n	8008f26 <ProcessRadioRxDone+0x39a>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8008f3c:	4b6d      	ldr	r3, [pc, #436]	; (80090f4 <ProcessRadioRxDone+0x568>)
 8008f3e:	fb06 3000 	mla	r0, r6, r0, r3
 8008f42:	f890 60db 	ldrb.w	r6, [r0, #219]	; 0xdb
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8008f46:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
 8008f4a:	6809      	ldr	r1, [r1, #0]
 8008f4c:	9103      	str	r1, [sp, #12]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008f4e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d002      	beq.n	8008f5c <ProcessRadioRxDone+0x3d0>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8008f56:	4690      	mov	r8, r2
                    multicast = 1;
 8008f58:	2501      	movs	r5, #1
 8008f5a:	e775      	b.n	8008e48 <ProcessRadioRxDone+0x2bc>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8008f5c:	4b66      	ldr	r3, [pc, #408]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 8008f5e:	2103      	movs	r1, #3
 8008f60:	f883 1493 	strb.w	r1, [r3, #1171]	; 0x493
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8008f64:	4690      	mov	r8, r2
                    multicast = 1;
 8008f66:	2501      	movs	r5, #1
 8008f68:	e76e      	b.n	8008e48 <ProcessRadioRxDone+0x2bc>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008f6a:	4b63      	ldr	r3, [pc, #396]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008f72:	f7ff fa9f 	bl	80084b4 <PrepareRxDoneAbort>
                return;
 8008f76:	e127      	b.n	80091c8 <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8008f78:	4b5f      	ldr	r3, [pc, #380]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 8008f7a:	2208      	movs	r2, #8
 8008f7c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 8008f80:	e785      	b.n	8008e8e <ProcessRadioRxDone+0x302>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8008f82:	ab0e      	add	r3, sp, #56	; 0x38
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	9b03      	ldr	r3, [sp, #12]
 8008f88:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8008f8c:	4641      	mov	r1, r8
 8008f8e:	4630      	mov	r0, r6
 8008f90:	f004 fb0e 	bl	800d5b0 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d13d      	bne.n	8009014 <ProcessRadioRxDone+0x488>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008f98:	4b57      	ldr	r3, [pc, #348]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	f883 1425 	strb.w	r1, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 8008fa0:	f883 5426 	strb.w	r5, [r3, #1062]	; 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8008fa4:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8008fa8:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8008fac:	f883 0429 	strb.w	r0, [r3, #1065]	; 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 8008fb0:	f8c3 142c 	str.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 8008fb4:	f883 1430 	strb.w	r1, [r3, #1072]	; 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008fb8:	9803      	ldr	r0, [sp, #12]
 8008fba:	f8c3 0434 	str.w	r0, [r3, #1076]	; 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8008fbe:	f8c3 0470 	str.w	r0, [r3, #1136]	; 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008fc2:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8008fc6:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008fca:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008fce:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008fd2:	f893 0493 	ldrb.w	r0, [r3, #1171]	; 0x493
 8008fd6:	2801      	cmp	r0, #1
 8008fd8:	d92a      	bls.n	8009030 <ProcessRadioRxDone+0x4a4>
            if( multicast == 1 )
 8008fda:	2d01      	cmp	r5, #1
 8008fdc:	d02e      	beq.n	800903c <ProcessRadioRxDone+0x4b0>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8008fde:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8008fe2:	2ca0      	cmp	r4, #160	; 0xa0
 8008fe4:	d02f      	beq.n	8009046 <ProcessRadioRxDone+0x4ba>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	4a42      	ldr	r2, [pc, #264]	; (80090f4 <ProcessRadioRxDone+0x568>)
 8008fea:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008fee:	4a42      	ldr	r2, [pc, #264]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 8008ff0:	f882 3424 	strb.w	r3, [r2, #1060]	; 0x424
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8008ff4:	4b40      	ldr	r3, [pc, #256]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 8008ff6:	f893 2444 	ldrb.w	r2, [r3, #1092]	; 0x444
 8008ffa:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8008ffe:	f7ff fac2 	bl	8008586 <RemoveMacCommands>
            switch( fType )
 8009002:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8009006:	2b03      	cmp	r3, #3
 8009008:	f200 809a 	bhi.w	8009140 <ProcessRadioRxDone+0x5b4>
 800900c:	e8df f003 	tbb	[pc, r3]
 8009010:	88785d36 	.word	0x88785d36
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8009014:	2802      	cmp	r0, #2
 8009016:	d006      	beq.n	8009026 <ProcessRadioRxDone+0x49a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8009018:	4b37      	ldr	r3, [pc, #220]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 800901a:	220b      	movs	r2, #11
 800901c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8009020:	f7ff fa48 	bl	80084b4 <PrepareRxDoneAbort>
                return;
 8009024:	e0d0      	b.n	80091c8 <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8009026:	4b34      	ldr	r3, [pc, #208]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 8009028:	220a      	movs	r2, #10
 800902a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800902e:	e7f7      	b.n	8009020 <ProcessRadioRxDone+0x494>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8009030:	4b30      	ldr	r3, [pc, #192]	; (80090f4 <ProcessRadioRxDone+0x568>)
 8009032:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 8009034:	2201      	movs	r2, #1
 8009036:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 800903a:	e7ce      	b.n	8008fda <ProcessRadioRxDone+0x44e>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800903c:	4b2e      	ldr	r3, [pc, #184]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 800903e:	2202      	movs	r2, #2
 8009040:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 8009044:	e7d6      	b.n	8008ff4 <ProcessRadioRxDone+0x468>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8009046:	4b2b      	ldr	r3, [pc, #172]	; (80090f4 <ProcessRadioRxDone+0x568>)
 8009048:	2201      	movs	r2, #1
 800904a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800904e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8009052:	b913      	cbnz	r3, 800905a <ProcessRadioRxDone+0x4ce>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8009054:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009056:	4b27      	ldr	r3, [pc, #156]	; (80090f4 <ProcessRadioRxDone+0x568>)
 8009058:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800905a:	4b27      	ldr	r3, [pc, #156]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 800905c:	2201      	movs	r2, #1
 800905e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8009062:	4290      	cmp	r0, r2
 8009064:	d9c6      	bls.n	8008ff4 <ProcessRadioRxDone+0x468>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8009066:	4b23      	ldr	r3, [pc, #140]	; (80090f4 <ProcessRadioRxDone+0x568>)
 8009068:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800906c:	4b22      	ldr	r3, [pc, #136]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 800906e:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 8009072:	4a22      	ldr	r2, [pc, #136]	; (80090fc <ProcessRadioRxDone+0x570>)
 8009074:	6812      	ldr	r2, [r2, #0]
 8009076:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
 800907a:	e7bb      	b.n	8008ff4 <ProcessRadioRxDone+0x468>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800907c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8009080:	4c1d      	ldr	r4, [pc, #116]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 8009082:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	463b      	mov	r3, r7
 800908a:	f002 020f 	and.w	r2, r2, #15
 800908e:	2100      	movs	r1, #0
 8009090:	a812      	add	r0, sp, #72	; 0x48
 8009092:	f7ff fa87 	bl	80085a4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009096:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800909a:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800909e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090a0:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80090a4:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80090a8:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 80090ac:	2301      	movs	r3, #1
 80090ae:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 80090b2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80090b6:	2be0      	cmp	r3, #224	; 0xe0
 80090b8:	d049      	beq.n	800914e <ProcessRadioRxDone+0x5c2>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80090ba:	4a0f      	ldr	r2, [pc, #60]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 80090bc:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 80090c0:	f043 0302 	orr.w	r3, r3, #2
 80090c4:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 80090c8:	e06b      	b.n	80091a2 <ProcessRadioRxDone+0x616>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80090ca:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80090ce:	4c0a      	ldr	r4, [pc, #40]	; (80090f8 <ProcessRadioRxDone+0x56c>)
 80090d0:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	463b      	mov	r3, r7
 80090d8:	f002 020f 	and.w	r2, r2, #15
 80090dc:	2100      	movs	r1, #0
 80090de:	a812      	add	r0, sp, #72	; 0x48
 80090e0:	f7ff fa60 	bl	80085a4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80090e4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80090e8:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 80090ec:	e7e1      	b.n	80090b2 <ProcessRadioRxDone+0x526>
 80090ee:	bf00      	nop
 80090f0:	200008f4 	.word	0x200008f4
 80090f4:	20008000 	.word	0x20008000
 80090f8:	200006bc 	.word	0x200006bc
 80090fc:	20000c6c 	.word	0x20000c6c
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8009100:	4c3d      	ldr	r4, [pc, #244]	; (80091f8 <ProcessRadioRxDone+0x66c>)
 8009102:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	463b      	mov	r3, r7
 800910a:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800910e:	2100      	movs	r1, #0
 8009110:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009112:	f7ff fa47 	bl	80085a4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009116:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800911a:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 800911e:	e7c8      	b.n	80090b2 <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009120:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8009124:	4b34      	ldr	r3, [pc, #208]	; (80091f8 <ProcessRadioRxDone+0x66c>)
 8009126:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800912a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800912c:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009130:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 8009134:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 8009138:	2201      	movs	r2, #1
 800913a:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 800913e:	e7b8      	b.n	80090b2 <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009140:	4b2d      	ldr	r3, [pc, #180]	; (80091f8 <ProcessRadioRxDone+0x66c>)
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    PrepareRxDoneAbort( );
 8009148:	f7ff f9b4 	bl	80084b4 <PrepareRxDoneAbort>
                    break;
 800914c:	e7b1      	b.n	80090b2 <ProcessRadioRxDone+0x526>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800914e:	4a2b      	ldr	r2, [pc, #172]	; (80091fc <ProcessRadioRxDone+0x670>)
 8009150:	f892 210b 	ldrb.w	r2, [r2, #267]	; 0x10b
 8009154:	2a00      	cmp	r2, #0
 8009156:	d1b0      	bne.n	80090ba <ProcessRadioRxDone+0x52e>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009158:	4a27      	ldr	r2, [pc, #156]	; (80091f8 <ProcessRadioRxDone+0x66c>)
 800915a:	f882 3427 	strb.w	r3, [r2, #1063]	; 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800915e:	2300      	movs	r3, #0
 8009160:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 8009164:	f882 3430 	strb.w	r3, [r2, #1072]	; 0x430
                MacCtx.McpsIndication.RxData = false;
 8009168:	f882 3431 	strb.w	r3, [r2, #1073]	; 0x431
 800916c:	e7a5      	b.n	80090ba <ProcessRadioRxDone+0x52e>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800916e:	1e6a      	subs	r2, r5, #1
 8009170:	4c21      	ldr	r4, [pc, #132]	; (80091f8 <ProcessRadioRxDone+0x66c>)
 8009172:	f504 770e 	add.w	r7, r4, #568	; 0x238
 8009176:	b292      	uxth	r2, r2
 8009178:	1c71      	adds	r1, r6, #1
 800917a:	4638      	mov	r0, r7
 800917c:	f006 fe7b 	bl	800fe76 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8009180:	2303      	movs	r3, #3
 8009182:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800918c:	f8c4 742c 	str.w	r7, [r4, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8009190:	3d01      	subs	r5, #1
 8009192:	f884 5430 	strb.w	r5, [r4, #1072]	; 0x430
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009196:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 800919a:	f043 0302 	orr.w	r3, r3, #2
 800919e:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80091a2:	4b15      	ldr	r3, [pc, #84]	; (80091f8 <ProcessRadioRxDone+0x66c>)
 80091a4:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d917      	bls.n	80091dc <ProcessRadioRxDone+0x650>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 80091ac:	4b12      	ldr	r3, [pc, #72]	; (80091f8 <ProcessRadioRxDone+0x66c>)
 80091ae:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d006      	beq.n	80091c4 <ProcessRadioRxDone+0x638>
        MacCtx.MacFlags.Bits.MacDone = 1;
 80091b6:	4a10      	ldr	r2, [pc, #64]	; (80091f8 <ProcessRadioRxDone+0x66c>)
 80091b8:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 80091bc:	f043 0320 	orr.w	r3, r3, #32
 80091c0:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 80091c4:	f7fe ff80 	bl	80080c8 <UpdateRxSlotIdleState>
}
 80091c8:	b021      	add	sp, #132	; 0x84
 80091ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80091ce:	4b0a      	ldr	r3, [pc, #40]	; (80091f8 <ProcessRadioRxDone+0x66c>)
 80091d0:	2201      	movs	r2, #1
 80091d2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            PrepareRxDoneAbort( );
 80091d6:	f7ff f96d 	bl	80084b4 <PrepareRxDoneAbort>
            break;
 80091da:	e7e2      	b.n	80091a2 <ProcessRadioRxDone+0x616>
        if( MacCtx.NodeAckRequested == true )
 80091dc:	4b06      	ldr	r3, [pc, #24]	; (80091f8 <ProcessRadioRxDone+0x66c>)
 80091de:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d0e2      	beq.n	80091ac <ProcessRadioRxDone+0x620>
            if( MacCtx.McpsConfirm.AckReceived == true )
 80091e6:	4b04      	ldr	r3, [pc, #16]	; (80091f8 <ProcessRadioRxDone+0x66c>)
 80091e8:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d0dd      	beq.n	80091ac <ProcessRadioRxDone+0x620>
                OnRetransmitTimeoutTimerEvent( NULL );
 80091f0:	2000      	movs	r0, #0
 80091f2:	f7ff f949 	bl	8008488 <OnRetransmitTimeoutTimerEvent>
 80091f6:	e7d9      	b.n	80091ac <ProcessRadioRxDone+0x620>
 80091f8:	200006bc 	.word	0x200006bc
 80091fc:	20008000 	.word	0x20008000

08009200 <ProcessRadioTxTimeout>:
{
 8009200:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009202:	4b0f      	ldr	r3, [pc, #60]	; (8009240 <ProcessRadioTxTimeout+0x40>)
 8009204:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009208:	2b02      	cmp	r3, #2
 800920a:	d002      	beq.n	8009212 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800920c:	4b0d      	ldr	r3, [pc, #52]	; (8009244 <ProcessRadioTxTimeout+0x44>)
 800920e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009210:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8009212:	f7fe ff59 	bl	80080c8 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8009216:	4c0c      	ldr	r4, [pc, #48]	; (8009248 <ProcessRadioTxTimeout+0x48>)
 8009218:	2002      	movs	r0, #2
 800921a:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800921e:	f003 fedf 	bl	800cfe0 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8009222:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 8009226:	b113      	cbz	r3, 800922e <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 8009228:	2201      	movs	r2, #1
 800922a:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    MacCtx.MacFlags.Bits.MacDone = 1;
 800922e:	4a06      	ldr	r2, [pc, #24]	; (8009248 <ProcessRadioTxTimeout+0x48>)
 8009230:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8009234:	f043 0320 	orr.w	r3, r3, #32
 8009238:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
}
 800923c:	bd10      	pop	{r4, pc}
 800923e:	bf00      	nop
 8009240:	20008000 	.word	0x20008000
 8009244:	080145a0 	.word	0x080145a0
 8009248:	200006bc 	.word	0x200006bc

0800924c <CheckForClassBCollision>:
{
 800924c:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800924e:	f002 fff3 	bl	800c238 <LoRaMacClassBIsBeaconExpected>
 8009252:	b978      	cbnz	r0, 8009274 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009254:	4b09      	ldr	r3, [pc, #36]	; (800927c <CheckForClassBCollision+0x30>)
 8009256:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800925a:	2b01      	cmp	r3, #1
 800925c:	d001      	beq.n	8009262 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800925e:	2000      	movs	r0, #0
}
 8009260:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009262:	f002 fffb 	bl	800c25c <LoRaMacClassBIsPingExpected>
 8009266:	b938      	cbnz	r0, 8009278 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009268:	f003 f804 	bl	800c274 <LoRaMacClassBIsMulticastExpected>
 800926c:	2800      	cmp	r0, #0
 800926e:	d0f7      	beq.n	8009260 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8009270:	200f      	movs	r0, #15
 8009272:	e7f5      	b.n	8009260 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8009274:	200e      	movs	r0, #14
 8009276:	e7f3      	b.n	8009260 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8009278:	200f      	movs	r0, #15
 800927a:	e7f1      	b.n	8009260 <CheckForClassBCollision+0x14>
 800927c:	20008000 	.word	0x20008000

08009280 <HandleRadioRxErrorTimeout>:
{
 8009280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009282:	4605      	mov	r5, r0
 8009284:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009286:	4b34      	ldr	r3, [pc, #208]	; (8009358 <HandleRadioRxErrorTimeout+0xd8>)
 8009288:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800928c:	2b02      	cmp	r3, #2
 800928e:	d002      	beq.n	8009296 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8009290:	4b32      	ldr	r3, [pc, #200]	; (800935c <HandleRadioRxErrorTimeout+0xdc>)
 8009292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009294:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009296:	f002 ffcf 	bl	800c238 <LoRaMacClassBIsBeaconExpected>
 800929a:	4606      	mov	r6, r0
 800929c:	bb50      	cbnz	r0, 80092f4 <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800929e:	4b2e      	ldr	r3, [pc, #184]	; (8009358 <HandleRadioRxErrorTimeout+0xd8>)
 80092a0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d02c      	beq.n	8009302 <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 80092a8:	2e00      	cmp	r6, #0
 80092aa:	d152      	bne.n	8009352 <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80092ac:	4b2c      	ldr	r3, [pc, #176]	; (8009360 <HandleRadioRxErrorTimeout+0xe0>)
 80092ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d13c      	bne.n	8009330 <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 80092b6:	4b2a      	ldr	r3, [pc, #168]	; (8009360 <HandleRadioRxErrorTimeout+0xe0>)
 80092b8:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 80092bc:	b113      	cbz	r3, 80092c4 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80092be:	4b28      	ldr	r3, [pc, #160]	; (8009360 <HandleRadioRxErrorTimeout+0xe0>)
 80092c0:	f883 5445 	strb.w	r5, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80092c4:	4628      	mov	r0, r5
 80092c6:	f003 fe8b 	bl	800cfe0 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80092ca:	4b23      	ldr	r3, [pc, #140]	; (8009358 <HandleRadioRxErrorTimeout+0xd8>)
 80092cc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80092ce:	f008 ff99 	bl	8012204 <UTIL_TIMER_GetElapsedTime>
 80092d2:	4b23      	ldr	r3, [pc, #140]	; (8009360 <HandleRadioRxErrorTimeout+0xe0>)
 80092d4:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 80092d8:	4298      	cmp	r0, r3
 80092da:	d33a      	bcc.n	8009352 <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 80092dc:	4c20      	ldr	r4, [pc, #128]	; (8009360 <HandleRadioRxErrorTimeout+0xe0>)
 80092de:	f504 7066 	add.w	r0, r4, #920	; 0x398
 80092e2:	f008 ffc5 	bl	8012270 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80092e6:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 80092ea:	f043 0320 	orr.w	r3, r3, #32
 80092ee:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
 80092f2:	e02e      	b.n	8009352 <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80092f4:	2002      	movs	r0, #2
 80092f6:	f002 ffd5 	bl	800c2a4 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80092fa:	2000      	movs	r0, #0
 80092fc:	f002 fb08 	bl	800b910 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8009300:	e7cd      	b.n	800929e <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009302:	f002 ffab 	bl	800c25c <LoRaMacClassBIsPingExpected>
 8009306:	4607      	mov	r7, r0
 8009308:	b950      	cbnz	r0, 8009320 <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800930a:	f002 ffb3 	bl	800c274 <LoRaMacClassBIsMulticastExpected>
 800930e:	2800      	cmp	r0, #0
 8009310:	d0ca      	beq.n	80092a8 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009312:	2000      	movs	r0, #0
 8009314:	f002 fe8e 	bl	800c034 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009318:	2000      	movs	r0, #0
 800931a:	f002 fa29 	bl	800b770 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800931e:	e018      	b.n	8009352 <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009320:	2000      	movs	r0, #0
 8009322:	f002 fe81 	bl	800c028 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009326:	2000      	movs	r0, #0
 8009328:	f002 fa12 	bl	800b750 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800932c:	463e      	mov	r6, r7
 800932e:	e7ec      	b.n	800930a <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 8009330:	4b0b      	ldr	r3, [pc, #44]	; (8009360 <HandleRadioRxErrorTimeout+0xe0>)
 8009332:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 8009336:	b113      	cbz	r3, 800933e <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8009338:	4b09      	ldr	r3, [pc, #36]	; (8009360 <HandleRadioRxErrorTimeout+0xe0>)
 800933a:	f883 4445 	strb.w	r4, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800933e:	4620      	mov	r0, r4
 8009340:	f003 fe4e 	bl	800cfe0 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 8009344:	4a06      	ldr	r2, [pc, #24]	; (8009360 <HandleRadioRxErrorTimeout+0xe0>)
 8009346:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800934a:	f043 0320 	orr.w	r3, r3, #32
 800934e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 8009352:	f7fe feb9 	bl	80080c8 <UpdateRxSlotIdleState>
}
 8009356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009358:	20008000 	.word	0x20008000
 800935c:	080145a0 	.word	0x080145a0
 8009360:	200006bc 	.word	0x200006bc

08009364 <ProcessRadioRxError>:
{
 8009364:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8009366:	2106      	movs	r1, #6
 8009368:	2005      	movs	r0, #5
 800936a:	f7ff ff89 	bl	8009280 <HandleRadioRxErrorTimeout>
}
 800936e:	bd08      	pop	{r3, pc}

08009370 <ProcessRadioRxTimeout>:
{
 8009370:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8009372:	2104      	movs	r1, #4
 8009374:	2003      	movs	r0, #3
 8009376:	f7ff ff83 	bl	8009280 <HandleRadioRxErrorTimeout>
}
 800937a:	bd08      	pop	{r3, pc}

0800937c <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800937c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009380:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 8009382:	4a14      	ldr	r2, [pc, #80]	; (80093d4 <LoRaMacHandleIrqEvents+0x58>)
 8009384:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 8009386:	2000      	movs	r0, #0
 8009388:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800938a:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800938e:	b303      	cbz	r3, 80093d2 <LoRaMacHandleIrqEvents+0x56>
{
 8009390:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 8009392:	b2dc      	uxtb	r4, r3
 8009394:	f013 0f20 	tst.w	r3, #32
 8009398:	d10c      	bne.n	80093b4 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800939a:	f014 0f10 	tst.w	r4, #16
 800939e:	d10c      	bne.n	80093ba <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 80093a0:	f014 0f08 	tst.w	r4, #8
 80093a4:	d10c      	bne.n	80093c0 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 80093a6:	f014 0f04 	tst.w	r4, #4
 80093aa:	d10c      	bne.n	80093c6 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 80093ac:	f014 0f02 	tst.w	r4, #2
 80093b0:	d10c      	bne.n	80093cc <LoRaMacHandleIrqEvents+0x50>
}
 80093b2:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 80093b4:	f7fe fff2 	bl	800839c <ProcessRadioTxDone>
 80093b8:	e7ef      	b.n	800939a <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 80093ba:	f7ff fbe7 	bl	8008b8c <ProcessRadioRxDone>
 80093be:	e7ef      	b.n	80093a0 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 80093c0:	f7ff ff1e 	bl	8009200 <ProcessRadioTxTimeout>
 80093c4:	e7ef      	b.n	80093a6 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 80093c6:	f7ff ffcd 	bl	8009364 <ProcessRadioRxError>
 80093ca:	e7ef      	b.n	80093ac <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 80093cc:	f7ff ffd0 	bl	8009370 <ProcessRadioRxTimeout>
}
 80093d0:	e7ef      	b.n	80093b2 <LoRaMacHandleIrqEvents+0x36>
 80093d2:	4770      	bx	lr
 80093d4:	200006b8 	.word	0x200006b8

080093d8 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 80093d8:	b909      	cbnz	r1, 80093de <LoRaMacHandleResponseTimeout+0x6>
    return false;
 80093da:	2000      	movs	r0, #0
}
 80093dc:	4770      	bx	lr
{
 80093de:	b510      	push	{r4, lr}
 80093e0:	4604      	mov	r4, r0
 80093e2:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 80093e4:	f008 ff0e 	bl	8012204 <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 80093e8:	42a0      	cmp	r0, r4
 80093ea:	d801      	bhi.n	80093f0 <LoRaMacHandleResponseTimeout+0x18>
    return false;
 80093ec:	2000      	movs	r0, #0
}
 80093ee:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 80093f0:	4b02      	ldr	r3, [pc, #8]	; (80093fc <LoRaMacHandleResponseTimeout+0x24>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 80093f8:	2001      	movs	r0, #1
 80093fa:	e7f8      	b.n	80093ee <LoRaMacHandleResponseTimeout+0x16>
 80093fc:	20008000 	.word	0x20008000

08009400 <LoRaMacHandleMlmeRequest>:
{
 8009400:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009402:	4b14      	ldr	r3, [pc, #80]	; (8009454 <LoRaMacHandleMlmeRequest+0x54>)
 8009404:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009408:	f013 0f04 	tst.w	r3, #4
 800940c:	d100      	bne.n	8009410 <LoRaMacHandleMlmeRequest+0x10>
}
 800940e:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009410:	2001      	movs	r0, #1
 8009412:	f003 fe03 	bl	800d01c <LoRaMacConfirmQueueIsCmdActive>
 8009416:	b178      	cbz	r0, 8009438 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8009418:	2001      	movs	r0, #1
 800941a:	f003 fdc9 	bl	800cfb0 <LoRaMacConfirmQueueGetStatus>
 800941e:	b918      	cbnz	r0, 8009428 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 8009420:	4b0c      	ldr	r3, [pc, #48]	; (8009454 <LoRaMacHandleMlmeRequest+0x54>)
 8009422:	2200      	movs	r2, #0
 8009424:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009428:	4a0a      	ldr	r2, [pc, #40]	; (8009454 <LoRaMacHandleMlmeRequest+0x54>)
 800942a:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800942e:	f023 0302 	bic.w	r3, r3, #2
 8009432:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 8009436:	e7ea      	b.n	800940e <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8009438:	2005      	movs	r0, #5
 800943a:	f003 fdef 	bl	800d01c <LoRaMacConfirmQueueIsCmdActive>
 800943e:	2800      	cmp	r0, #0
 8009440:	d0e5      	beq.n	800940e <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009442:	4a04      	ldr	r2, [pc, #16]	; (8009454 <LoRaMacHandleMlmeRequest+0x54>)
 8009444:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8009448:	f023 0302 	bic.w	r3, r3, #2
 800944c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8009450:	e7dd      	b.n	800940e <LoRaMacHandleMlmeRequest+0xe>
 8009452:	bf00      	nop
 8009454:	200006bc 	.word	0x200006bc

08009458 <SerializeTxFrame>:
{
 8009458:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800945a:	4b0f      	ldr	r3, [pc, #60]	; (8009498 <SerializeTxFrame+0x40>)
 800945c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009460:	b11b      	cbz	r3, 800946a <SerializeTxFrame+0x12>
 8009462:	2b04      	cmp	r3, #4
 8009464:	d00a      	beq.n	800947c <SerializeTxFrame+0x24>
 8009466:	2003      	movs	r0, #3
}
 8009468:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800946a:	480c      	ldr	r0, [pc, #48]	; (800949c <SerializeTxFrame+0x44>)
 800946c:	f004 fa71 	bl	800d952 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8009470:	b968      	cbnz	r0, 800948e <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8009472:	4b09      	ldr	r3, [pc, #36]	; (8009498 <SerializeTxFrame+0x40>)
 8009474:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8009478:	801a      	strh	r2, [r3, #0]
            break;
 800947a:	e7f5      	b.n	8009468 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800947c:	4807      	ldr	r0, [pc, #28]	; (800949c <SerializeTxFrame+0x44>)
 800947e:	f004 fa9e 	bl	800d9be <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8009482:	b930      	cbnz	r0, 8009492 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009484:	4b04      	ldr	r3, [pc, #16]	; (8009498 <SerializeTxFrame+0x40>)
 8009486:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800948a:	801a      	strh	r2, [r3, #0]
            break;
 800948c:	e7ec      	b.n	8009468 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800948e:	2011      	movs	r0, #17
 8009490:	e7ea      	b.n	8009468 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8009492:	2011      	movs	r0, #17
 8009494:	e7e8      	b.n	8009468 <SerializeTxFrame+0x10>
 8009496:	bf00      	nop
 8009498:	200006bc 	.word	0x200006bc
 800949c:	200007c4 	.word	0x200007c4

080094a0 <ComputeRxWindowParameters>:
{
 80094a0:	b570      	push	{r4, r5, r6, lr}
 80094a2:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80094a4:	4c1d      	ldr	r4, [pc, #116]	; (800951c <ComputeRxWindowParameters+0x7c>)
 80094a6:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80094aa:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 80094ae:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 80094b2:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 80094b6:	4630      	mov	r0, r6
 80094b8:	f004 fbb5 	bl	800dc26 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80094bc:	4d18      	ldr	r5, [pc, #96]	; (8009520 <ComputeRxWindowParameters+0x80>)
 80094be:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80094c6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80094ca:	b241      	sxtb	r1, r0
 80094cc:	4630      	mov	r0, r6
 80094ce:	f004 fb43 	bl	800db58 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80094d2:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80094da:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80094de:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 80094e2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80094e6:	f004 fb37 	bl	800db58 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80094ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80094ec:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 80094f0:	440b      	add	r3, r1
 80094f2:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80094f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80094f8:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 80094fc:	4413      	add	r3, r2
 80094fe:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009502:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8009506:	b93b      	cbnz	r3, 8009518 <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009508:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800950a:	4419      	add	r1, r3
 800950c:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009510:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009512:	440a      	add	r2, r1
 8009514:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 8009518:	b002      	add	sp, #8
 800951a:	bd70      	pop	{r4, r5, r6, pc}
 800951c:	20008000 	.word	0x20008000
 8009520:	200006bc 	.word	0x200006bc

08009524 <VerifyTxFrame>:
{
 8009524:	b510      	push	{r4, lr}
 8009526:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 8009528:	2300      	movs	r3, #0
 800952a:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800952c:	4b0d      	ldr	r3, [pc, #52]	; (8009564 <VerifyTxFrame+0x40>)
 800952e:	f893 411c 	ldrb.w	r4, [r3, #284]	; 0x11c
 8009532:	b914      	cbnz	r4, 800953a <VerifyTxFrame+0x16>
}
 8009534:	4620      	mov	r0, r4
 8009536:	b002      	add	sp, #8
 8009538:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800953a:	a801      	add	r0, sp, #4
 800953c:	f003 fc1e 	bl	800cd7c <LoRaMacCommandsGetSizeSerializedCmds>
 8009540:	4604      	mov	r4, r0
 8009542:	b968      	cbnz	r0, 8009560 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8009544:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009548:	4b06      	ldr	r3, [pc, #24]	; (8009564 <VerifyTxFrame+0x40>)
 800954a:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800954e:	4b06      	ldr	r3, [pc, #24]	; (8009568 <VerifyTxFrame+0x44>)
 8009550:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 8009554:	f7fe ff10 	bl	8008378 <ValidatePayloadLength>
 8009558:	2800      	cmp	r0, #0
 800955a:	d1eb      	bne.n	8009534 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800955c:	2408      	movs	r4, #8
 800955e:	e7e9      	b.n	8009534 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009560:	2413      	movs	r4, #19
 8009562:	e7e7      	b.n	8009534 <VerifyTxFrame+0x10>
 8009564:	20008000 	.word	0x20008000
 8009568:	200006bc 	.word	0x200006bc

0800956c <SecureFrame>:
{
 800956c:	b530      	push	{r4, r5, lr}
 800956e:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 8009570:	2300      	movs	r3, #0
 8009572:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 8009574:	4b18      	ldr	r3, [pc, #96]	; (80095d8 <SecureFrame+0x6c>)
 8009576:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800957a:	b133      	cbz	r3, 800958a <SecureFrame+0x1e>
 800957c:	4605      	mov	r5, r0
 800957e:	460c      	mov	r4, r1
 8009580:	2b04      	cmp	r3, #4
 8009582:	d00b      	beq.n	800959c <SecureFrame+0x30>
 8009584:	2003      	movs	r0, #3
}
 8009586:	b003      	add	sp, #12
 8009588:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800958a:	4814      	ldr	r0, [pc, #80]	; (80095dc <SecureFrame+0x70>)
 800958c:	f003 ffa6 	bl	800d4dc <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8009590:	b9d8      	cbnz	r0, 80095ca <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8009592:	4b11      	ldr	r3, [pc, #68]	; (80095d8 <SecureFrame+0x6c>)
 8009594:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8009598:	801a      	strh	r2, [r3, #0]
            break;
 800959a:	e7f4      	b.n	8009586 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800959c:	a801      	add	r0, sp, #4
 800959e:	f003 ff53 	bl	800d448 <LoRaMacCryptoGetFCntUp>
 80095a2:	b9a0      	cbnz	r0, 80095ce <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80095a4:	4b0c      	ldr	r3, [pc, #48]	; (80095d8 <SecureFrame+0x6c>)
 80095a6:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80095aa:	b113      	cbz	r3, 80095b2 <SecureFrame+0x46>
                fCntUp -= 1;
 80095ac:	9b01      	ldr	r3, [sp, #4]
 80095ae:	3b01      	subs	r3, #1
 80095b0:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80095b2:	4b0a      	ldr	r3, [pc, #40]	; (80095dc <SecureFrame+0x70>)
 80095b4:	4622      	mov	r2, r4
 80095b6:	4629      	mov	r1, r5
 80095b8:	9801      	ldr	r0, [sp, #4]
 80095ba:	f003 ffb5 	bl	800d528 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80095be:	b940      	cbnz	r0, 80095d2 <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80095c0:	4b05      	ldr	r3, [pc, #20]	; (80095d8 <SecureFrame+0x6c>)
 80095c2:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80095c6:	801a      	strh	r2, [r3, #0]
            break;
 80095c8:	e7dd      	b.n	8009586 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80095ca:	2011      	movs	r0, #17
 80095cc:	e7db      	b.n	8009586 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80095ce:	2012      	movs	r0, #18
 80095d0:	e7d9      	b.n	8009586 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80095d2:	2011      	movs	r0, #17
 80095d4:	e7d7      	b.n	8009586 <SecureFrame+0x1a>
 80095d6:	bf00      	nop
 80095d8:	200006bc 	.word	0x200006bc
 80095dc:	200007c4 	.word	0x200007c4

080095e0 <SendFrameOnChannel>:
{
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	b086      	sub	sp, #24
 80095e4:	4606      	mov	r6, r0
    int8_t txPower = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 80095ec:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80095f0:	4d35      	ldr	r5, [pc, #212]	; (80096c8 <SendFrameOnChannel+0xe8>)
 80095f2:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 80095f6:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80095fa:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 80095fe:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8009602:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8009604:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009606:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8009608:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800960a:	4c30      	ldr	r4, [pc, #192]	; (80096cc <SendFrameOnChannel+0xec>)
 800960c:	8823      	ldrh	r3, [r4, #0]
 800960e:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009612:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
 8009616:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800961a:	f504 6384 	add.w	r3, r4, #1056	; 0x420
 800961e:	f10d 0207 	add.w	r2, sp, #7
 8009622:	a902      	add	r1, sp, #8
 8009624:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 8009628:	f004 faab 	bl	800db82 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009632:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 8009636:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 800963a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800963e:	f884 3447 	strb.w	r3, [r4, #1095]	; 0x447
    MacCtx.McpsConfirm.Channel = channel;
 8009642:	f8c4 6454 	str.w	r6, [r4, #1108]	; 0x454
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009646:	f8d4 3420 	ldr.w	r3, [r4, #1056]	; 0x420
 800964a:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800964e:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8009652:	f002 fe55 	bl	800c300 <LoRaMacClassBIsBeaconModeActive>
 8009656:	bb60      	cbnz	r0, 80096b2 <SendFrameOnChannel+0xd2>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009658:	4b1b      	ldr	r3, [pc, #108]	; (80096c8 <SendFrameOnChannel+0xe8>)
 800965a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800965e:	2b01      	cmp	r3, #1
 8009660:	d02f      	beq.n	80096c2 <SendFrameOnChannel+0xe2>
    LoRaMacClassBHaltBeaconing( );
 8009662:	f003 f817 	bl	800c694 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8009666:	4b18      	ldr	r3, [pc, #96]	; (80096c8 <SendFrameOnChannel+0xe8>)
 8009668:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800966c:	4b17      	ldr	r3, [pc, #92]	; (80096cc <SendFrameOnChannel+0xec>)
 800966e:	f893 141f 	ldrb.w	r1, [r3, #1055]	; 0x41f
 8009672:	b2c0      	uxtb	r0, r0
 8009674:	f7ff ff7a 	bl	800956c <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 8009678:	4604      	mov	r4, r0
 800967a:	b9b8      	cbnz	r0, 80096ac <SendFrameOnChannel+0xcc>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800967c:	4813      	ldr	r0, [pc, #76]	; (80096cc <SendFrameOnChannel+0xec>)
 800967e:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 8009682:	f043 0302 	orr.w	r3, r3, #2
 8009686:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 800968a:	f890 341c 	ldrb.w	r3, [r0, #1052]	; 0x41c
 800968e:	3301      	adds	r3, #1
 8009690:	b2db      	uxtb	r3, r3
 8009692:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8009696:	f880 3449 	strb.w	r3, [r0, #1097]	; 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 800969a:	2300      	movs	r3, #0
 800969c:	f8c0 349c 	str.w	r3, [r0, #1180]	; 0x49c
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80096a0:	4b0b      	ldr	r3, [pc, #44]	; (80096d0 <SendFrameOnChannel+0xf0>)
 80096a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a4:	f830 1b02 	ldrh.w	r1, [r0], #2
 80096a8:	b2c9      	uxtb	r1, r1
 80096aa:	4798      	blx	r3
}
 80096ac:	4620      	mov	r0, r4
 80096ae:	b006      	add	sp, #24
 80096b0:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80096b2:	f8d4 0420 	ldr.w	r0, [r4, #1056]	; 0x420
 80096b6:	f002 ffa9 	bl	800c60c <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d0cc      	beq.n	8009658 <SendFrameOnChannel+0x78>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80096be:	2410      	movs	r4, #16
 80096c0:	e7f4      	b.n	80096ac <SendFrameOnChannel+0xcc>
        LoRaMacClassBStopRxSlots( );
 80096c2:	f002 ffc9 	bl	800c658 <LoRaMacClassBStopRxSlots>
 80096c6:	e7cc      	b.n	8009662 <SendFrameOnChannel+0x82>
 80096c8:	20008000 	.word	0x20008000
 80096cc:	200006bc 	.word	0x200006bc
 80096d0:	080145a0 	.word	0x080145a0

080096d4 <ScheduleTx>:
{
 80096d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096d8:	b08c      	sub	sp, #48	; 0x30
 80096da:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 80096dc:	f7ff fdb6 	bl	800924c <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 80096e0:	4604      	mov	r4, r0
 80096e2:	b118      	cbz	r0, 80096ec <ScheduleTx+0x18>
}
 80096e4:	4620      	mov	r0, r4
 80096e6:	b00c      	add	sp, #48	; 0x30
 80096e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 80096ec:	f7fe fd50 	bl	8008190 <CalculateBackOff>
    status = SerializeTxFrame( );
 80096f0:	f7ff feb2 	bl	8009458 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 80096f4:	4604      	mov	r4, r0
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d1f4      	bne.n	80096e4 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 80096fa:	4e36      	ldr	r6, [pc, #216]	; (80097d4 <ScheduleTx+0x100>)
 80096fc:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80096fe:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009700:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 8009704:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8009708:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
 800970c:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8009710:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8009714:	4640      	mov	r0, r8
 8009716:	f008 fcdf 	bl	80120d8 <SysTimeGetMcuTime>
 800971a:	af02      	add	r7, sp, #8
 800971c:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
 8009726:	e898 0006 	ldmia.w	r8, {r1, r2}
 800972a:	4638      	mov	r0, r7
 800972c:	f008 fc71 	bl	8012012 <SysTimeSub>
 8009730:	ab07      	add	r3, sp, #28
 8009732:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009736:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800973a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800973c:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800973e:	2300      	movs	r3, #0
 8009740:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 8009744:	2301      	movs	r3, #1
 8009746:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800974a:	4b23      	ldr	r3, [pc, #140]	; (80097d8 <ScheduleTx+0x104>)
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009752:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8009756:	b92b      	cbnz	r3, 8009764 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 8009758:	2301      	movs	r3, #1
 800975a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800975e:	2300      	movs	r3, #0
 8009760:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8009764:	4a1c      	ldr	r2, [pc, #112]	; (80097d8 <ScheduleTx+0x104>)
 8009766:	481b      	ldr	r0, [pc, #108]	; (80097d4 <ScheduleTx+0x100>)
 8009768:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800976c:	9300      	str	r3, [sp, #0]
 800976e:	f502 6393 	add.w	r3, r2, #1176	; 0x498
 8009772:	f202 421f 	addw	r2, r2, #1055	; 0x41f
 8009776:	a904      	add	r1, sp, #16
 8009778:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800977c:	f004 fa47 	bl	800dc0e <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8009780:	b1b0      	cbz	r0, 80097b0 <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8009782:	280b      	cmp	r0, #11
 8009784:	d122      	bne.n	80097cc <ScheduleTx+0xf8>
 8009786:	b31d      	cbz	r5, 80097d0 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 8009788:	4b13      	ldr	r3, [pc, #76]	; (80097d8 <ScheduleTx+0x104>)
 800978a:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 800978e:	2900      	cmp	r1, #0
 8009790:	d0a8      	beq.n	80096e4 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8009792:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8009796:	f042 0220 	orr.w	r2, r2, #32
 800979a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800979e:	f503 755a 	add.w	r5, r3, #872	; 0x368
 80097a2:	4628      	mov	r0, r5
 80097a4:	f008 fe04 	bl	80123b0 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 80097a8:	4628      	mov	r0, r5
 80097aa:	f008 fdbb 	bl	8012324 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 80097ae:	e799      	b.n	80096e4 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 80097b0:	f7ff fe76 	bl	80094a0 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 80097b4:	f7ff feb6 	bl	8009524 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 80097b8:	4604      	mov	r4, r0
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d192      	bne.n	80096e4 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 80097be:	4b06      	ldr	r3, [pc, #24]	; (80097d8 <ScheduleTx+0x104>)
 80097c0:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 80097c4:	f7ff ff0c 	bl	80095e0 <SendFrameOnChannel>
 80097c8:	4604      	mov	r4, r0
 80097ca:	e78b      	b.n	80096e4 <ScheduleTx+0x10>
            return status;
 80097cc:	4604      	mov	r4, r0
 80097ce:	e789      	b.n	80096e4 <ScheduleTx+0x10>
 80097d0:	4604      	mov	r4, r0
 80097d2:	e787      	b.n	80096e4 <ScheduleTx+0x10>
 80097d4:	20008000 	.word	0x20008000
 80097d8:	200006bc 	.word	0x200006bc

080097dc <OnTxDelayedTimerEvent>:
{
 80097dc:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 80097de:	4c16      	ldr	r4, [pc, #88]	; (8009838 <OnTxDelayedTimerEvent+0x5c>)
 80097e0:	f504 705a 	add.w	r0, r4, #872	; 0x368
 80097e4:	f008 fd44 	bl	8012270 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80097e8:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 80097ec:	f023 0320 	bic.w	r3, r3, #32
 80097f0:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 80097f4:	f8d4 149c 	ldr.w	r1, [r4, #1180]	; 0x49c
 80097f8:	4b10      	ldr	r3, [pc, #64]	; (800983c <OnTxDelayedTimerEvent+0x60>)
 80097fa:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80097fe:	f7ff fdeb 	bl	80093d8 <LoRaMacHandleResponseTimeout>
 8009802:	b100      	cbz	r0, 8009806 <OnTxDelayedTimerEvent+0x2a>
}
 8009804:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 8009806:	2001      	movs	r0, #1
 8009808:	f7ff ff64 	bl	80096d4 <ScheduleTx>
 800980c:	2800      	cmp	r0, #0
 800980e:	d0f9      	beq.n	8009804 <OnTxDelayedTimerEvent+0x28>
 8009810:	280b      	cmp	r0, #11
 8009812:	d0f7      	beq.n	8009804 <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009814:	4b09      	ldr	r3, [pc, #36]	; (800983c <OnTxDelayedTimerEvent+0x60>)
 8009816:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800981a:	f884 2446 	strb.w	r2, [r4, #1094]	; 0x446
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800981e:	f894 241c 	ldrb.w	r2, [r4, #1052]	; 0x41c
 8009822:	f884 2449 	strb.w	r2, [r4, #1097]	; 0x449
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009826:	2009      	movs	r0, #9
 8009828:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800982c:	f003 fbd8 	bl	800cfe0 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8009830:	f7fe fd40 	bl	80082b4 <StopRetransmission>
            break;
 8009834:	e7e6      	b.n	8009804 <OnTxDelayedTimerEvent+0x28>
 8009836:	bf00      	nop
 8009838:	200006bc 	.word	0x200006bc
 800983c:	20008000 	.word	0x20008000

08009840 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009840:	4b1c      	ldr	r3, [pc, #112]	; (80098b4 <LoRaMacHandleMcpsRequest+0x74>)
 8009842:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009846:	f013 0f01 	tst.w	r3, #1
 800984a:	d032      	beq.n	80098b2 <LoRaMacHandleMcpsRequest+0x72>
{
 800984c:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800984e:	4b19      	ldr	r3, [pc, #100]	; (80098b4 <LoRaMacHandleMcpsRequest+0x74>)
 8009850:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8009854:	b12b      	cbz	r3, 8009862 <LoRaMacHandleMcpsRequest+0x22>
 8009856:	2b03      	cmp	r3, #3
 8009858:	d003      	beq.n	8009862 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800985a:	2b01      	cmp	r3, #1
 800985c:	d006      	beq.n	800986c <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800985e:	2000      	movs	r0, #0
 8009860:	e002      	b.n	8009868 <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8009862:	f7fe fced 	bl	8008240 <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 8009866:	b940      	cbnz	r0, 800987a <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 8009868:	b1b8      	cbz	r0, 800989a <LoRaMacHandleMcpsRequest+0x5a>
}
 800986a:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 800986c:	4b11      	ldr	r3, [pc, #68]	; (80098b4 <LoRaMacHandleMcpsRequest+0x74>)
 800986e:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 8009872:	b183      	cbz	r3, 8009896 <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 8009874:	f7fe fd00 	bl	8008278 <CheckRetransConfirmedUplink>
 8009878:	e7f5      	b.n	8009866 <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 800987a:	4c0e      	ldr	r4, [pc, #56]	; (80098b4 <LoRaMacHandleMcpsRequest+0x74>)
 800987c:	f504 705a 	add.w	r0, r4, #872	; 0x368
 8009880:	f008 fcf6 	bl	8012270 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009884:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8009888:	f023 0320 	bic.w	r3, r3, #32
 800988c:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 8009890:	f7fe fd10 	bl	80082b4 <StopRetransmission>
 8009894:	e7e9      	b.n	800986a <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 8009896:	2001      	movs	r0, #1
 8009898:	e7e6      	b.n	8009868 <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800989a:	4b06      	ldr	r3, [pc, #24]	; (80098b4 <LoRaMacHandleMcpsRequest+0x74>)
 800989c:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 80098a0:	f36f 1245 	bfc	r2, #5, #1
 80098a4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 80098a8:	f883 041d 	strb.w	r0, [r3, #1053]	; 0x41d
            OnTxDelayedTimerEvent( NULL );
 80098ac:	f7ff ff96 	bl	80097dc <OnTxDelayedTimerEvent>
}
 80098b0:	e7db      	b.n	800986a <LoRaMacHandleMcpsRequest+0x2a>
 80098b2:	4770      	bx	lr
 80098b4:	200006bc 	.word	0x200006bc

080098b8 <LoRaMacHandleRequestEvents>:
{
 80098b8:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 80098ba:	4b22      	ldr	r3, [pc, #136]	; (8009944 <LoRaMacHandleRequestEvents+0x8c>)
 80098bc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80098c0:	bb7b      	cbnz	r3, 8009922 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80098c2:	4b20      	ldr	r3, [pc, #128]	; (8009944 <LoRaMacHandleRequestEvents+0x8c>)
 80098c4:	f893 4495 	ldrb.w	r4, [r3, #1173]	; 0x495
 80098c8:	f014 0501 	ands.w	r5, r4, #1
 80098cc:	d005      	beq.n	80098da <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80098ce:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 80098d2:	f36f 0200 	bfc	r2, #0, #1
 80098d6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80098da:	4b1a      	ldr	r3, [pc, #104]	; (8009944 <LoRaMacHandleRequestEvents+0x8c>)
 80098dc:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80098e0:	f013 0f04 	tst.w	r3, #4
 80098e4:	d006      	beq.n	80098f4 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80098e6:	4b17      	ldr	r3, [pc, #92]	; (8009944 <LoRaMacHandleRequestEvents+0x8c>)
 80098e8:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 80098ec:	f36f 0282 	bfc	r2, #2, #1
 80098f0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80098f4:	2001      	movs	r0, #1
 80098f6:	f7fe fbfb 	bl	80080f0 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 80098fa:	b135      	cbz	r5, 800990a <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80098fc:	4811      	ldr	r0, [pc, #68]	; (8009944 <LoRaMacHandleRequestEvents+0x8c>)
 80098fe:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f200 4044 	addw	r0, r0, #1092	; 0x444
 8009908:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800990a:	f014 0f04 	tst.w	r4, #4
 800990e:	d109      	bne.n	8009924 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 8009910:	f002 fd14 	bl	800c33c <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8009914:	4b0b      	ldr	r3, [pc, #44]	; (8009944 <LoRaMacHandleRequestEvents+0x8c>)
 8009916:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800991a:	f36f 1245 	bfc	r2, #5, #1
 800991e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
}
 8009922:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8009924:	4808      	ldr	r0, [pc, #32]	; (8009948 <LoRaMacHandleRequestEvents+0x90>)
 8009926:	f003 fb85 	bl	800d034 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800992a:	f003 fbb5 	bl	800d098 <LoRaMacConfirmQueueGetCnt>
 800992e:	2800      	cmp	r0, #0
 8009930:	d0ee      	beq.n	8009910 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009932:	4a04      	ldr	r2, [pc, #16]	; (8009944 <LoRaMacHandleRequestEvents+0x8c>)
 8009934:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8009938:	f043 0304 	orr.w	r3, r3, #4
 800993c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 8009940:	e7e6      	b.n	8009910 <LoRaMacHandleRequestEvents+0x58>
 8009942:	bf00      	nop
 8009944:	200006bc 	.word	0x200006bc
 8009948:	20000b14 	.word	0x20000b14

0800994c <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 800994c:	4b07      	ldr	r3, [pc, #28]	; (800996c <LoRaMacHandleScheduleUplinkEvent+0x20>)
 800994e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009952:	b103      	cbz	r3, 8009956 <LoRaMacHandleScheduleUplinkEvent+0xa>
 8009954:	4770      	bx	lr
{
 8009956:	b500      	push	{lr}
 8009958:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 800995a:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800995e:	f10d 0007 	add.w	r0, sp, #7
 8009962:	f003 fa49 	bl	800cdf8 <LoRaMacCommandsStickyCmdsPending>
}
 8009966:	b003      	add	sp, #12
 8009968:	f85d fb04 	ldr.w	pc, [sp], #4
 800996c:	200006bc 	.word	0x200006bc

08009970 <OpenContinuousRxCWindow>:
{
 8009970:	b570      	push	{r4, r5, r6, lr}
 8009972:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8009974:	4c16      	ldr	r4, [pc, #88]	; (80099d0 <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009976:	4d17      	ldr	r5, [pc, #92]	; (80099d4 <OpenContinuousRxCWindow+0x64>)
 8009978:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 800997c:	9600      	str	r6, [sp, #0]
 800997e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009980:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8009984:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 8009988:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800998c:	f004 f8e4 	bl	800db58 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009990:	2302      	movs	r3, #2
 8009992:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009996:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800999a:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800999e:	2301      	movs	r3, #1
 80099a0:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80099a4:	f505 6285 	add.w	r2, r5, #1064	; 0x428
 80099a8:	4631      	mov	r1, r6
 80099aa:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80099ae:	f004 f8de 	bl	800db6e <RegionRxConfig>
 80099b2:	b158      	cbz	r0, 80099cc <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80099b4:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 80099b8:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( 0 ); // Continuous mode
 80099bc:	4b06      	ldr	r3, [pc, #24]	; (80099d8 <OpenContinuousRxCWindow+0x68>)
 80099be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c0:	2000      	movs	r0, #0
 80099c2:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80099c4:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 80099c8:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 80099cc:	b002      	add	sp, #8
 80099ce:	bd70      	pop	{r4, r5, r6, pc}
 80099d0:	20008000 	.word	0x20008000
 80099d4:	200006bc 	.word	0x200006bc
 80099d8:	080145a0 	.word	0x080145a0

080099dc <RxWindowSetup>:
{
 80099dc:	b538      	push	{r3, r4, r5, lr}
 80099de:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 80099e0:	f008 fc46 	bl	8012270 <UTIL_TIMER_Stop>
    Radio.Standby( );
 80099e4:	4b0c      	ldr	r3, [pc, #48]	; (8009a18 <RxWindowSetup+0x3c>)
 80099e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e8:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80099ea:	4a0c      	ldr	r2, [pc, #48]	; (8009a1c <RxWindowSetup+0x40>)
 80099ec:	4621      	mov	r1, r4
 80099ee:	4b0c      	ldr	r3, [pc, #48]	; (8009a20 <RxWindowSetup+0x44>)
 80099f0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80099f4:	f004 f8bb 	bl	800db6e <RegionRxConfig>
 80099f8:	b160      	cbz	r0, 8009a14 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80099fa:	4d0a      	ldr	r5, [pc, #40]	; (8009a24 <RxWindowSetup+0x48>)
 80099fc:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 8009a00:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8009a04:	4b04      	ldr	r3, [pc, #16]	; (8009a18 <RxWindowSetup+0x3c>)
 8009a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a08:	4a05      	ldr	r2, [pc, #20]	; (8009a20 <RxWindowSetup+0x44>)
 8009a0a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8009a0c:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8009a0e:	7ce3      	ldrb	r3, [r4, #19]
 8009a10:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 8009a14:	bd38      	pop	{r3, r4, r5, pc}
 8009a16:	bf00      	nop
 8009a18:	080145a0 	.word	0x080145a0
 8009a1c:	20000ae4 	.word	0x20000ae4
 8009a20:	20008000 	.word	0x20008000
 8009a24:	200006bc 	.word	0x200006bc

08009a28 <OnRxWindow2TimerEvent>:
{
 8009a28:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009a2a:	4b13      	ldr	r3, [pc, #76]	; (8009a78 <OnRxWindow2TimerEvent+0x50>)
 8009a2c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8009a30:	b903      	cbnz	r3, 8009a34 <OnRxWindow2TimerEvent+0xc>
}
 8009a32:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009a34:	4810      	ldr	r0, [pc, #64]	; (8009a78 <OnRxWindow2TimerEvent+0x50>)
 8009a36:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 8009a3a:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009a3e:	4b0f      	ldr	r3, [pc, #60]	; (8009a7c <OnRxWindow2TimerEvent+0x54>)
 8009a40:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009a42:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009a46:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009a4a:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009a4e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8009a52:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009a56:	2200      	movs	r2, #0
 8009a58:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009a62:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8009a66:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8009a6a:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 8009a6e:	f500 7066 	add.w	r0, r0, #920	; 0x398
 8009a72:	f7ff ffb3 	bl	80099dc <RxWindowSetup>
 8009a76:	e7dc      	b.n	8009a32 <OnRxWindow2TimerEvent+0xa>
 8009a78:	200006bc 	.word	0x200006bc
 8009a7c:	20008000 	.word	0x20008000

08009a80 <OnRxWindow1TimerEvent>:
{
 8009a80:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8009a82:	4811      	ldr	r0, [pc, #68]	; (8009ac8 <OnRxWindow1TimerEvent+0x48>)
 8009a84:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 8009a88:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8009a8c:	4b0f      	ldr	r3, [pc, #60]	; (8009acc <OnRxWindow1TimerEvent+0x4c>)
 8009a8e:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 8009a92:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009a96:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009a9a:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009a9e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8009aa2:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8009aac:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009ab0:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8009ab4:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8009ab8:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 8009abc:	f500 7060 	add.w	r0, r0, #896	; 0x380
 8009ac0:	f7ff ff8c 	bl	80099dc <RxWindowSetup>
}
 8009ac4:	bd08      	pop	{r3, pc}
 8009ac6:	bf00      	nop
 8009ac8:	200006bc 	.word	0x200006bc
 8009acc:	20008000 	.word	0x20008000

08009ad0 <LoRaMacHandleNvm>:
{
 8009ad0:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 8009ad2:	4b30      	ldr	r3, [pc, #192]	; (8009b94 <LoRaMacHandleNvm+0xc4>)
 8009ad4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009ad8:	b103      	cbz	r3, 8009adc <LoRaMacHandleNvm+0xc>
}
 8009ada:	bd38      	pop	{r3, r4, r5, pc}
 8009adc:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8009ade:	2124      	movs	r1, #36	; 0x24
 8009ae0:	f006 f9ea 	bl	800feb8 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 8009ae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ae6:	4283      	cmp	r3, r0
 8009ae8:	d052      	beq.n	8009b90 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 8009aea:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8009aec:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8009aee:	2114      	movs	r1, #20
 8009af0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009af4:	f006 f9e0 	bl	800feb8 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 8009af8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009afa:	4283      	cmp	r3, r0
 8009afc:	d002      	beq.n	8009b04 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 8009afe:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8009b00:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8009b04:	21e0      	movs	r1, #224	; 0xe0
 8009b06:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8009b0a:	f006 f9d5 	bl	800feb8 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8009b0e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009b12:	4283      	cmp	r3, r0
 8009b14:	d003      	beq.n	8009b1e <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 8009b16:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8009b1a:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8009b1e:	21bc      	movs	r1, #188	; 0xbc
 8009b20:	f504 7092 	add.w	r0, r4, #292	; 0x124
 8009b24:	f006 f9c8 	bl	800feb8 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 8009b28:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 8009b2c:	4283      	cmp	r3, r0
 8009b2e:	d003      	beq.n	8009b38 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 8009b30:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8009b34:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8009b38:	2100      	movs	r1, #0
 8009b3a:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 8009b3e:	f006 f9bb 	bl	800feb8 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 8009b42:	f8d4 31e4 	ldr.w	r3, [r4, #484]	; 0x1e4
 8009b46:	4283      	cmp	r3, r0
 8009b48:	d003      	beq.n	8009b52 <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 8009b4a:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8009b4e:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8009b52:	f44f 715e 	mov.w	r1, #888	; 0x378
 8009b56:	f504 70f4 	add.w	r0, r4, #488	; 0x1e8
 8009b5a:	f006 f9ad 	bl	800feb8 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 8009b5e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
 8009b62:	4283      	cmp	r3, r0
 8009b64:	d003      	beq.n	8009b6e <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 8009b66:	f8c4 0560 	str.w	r0, [r4, #1376]	; 0x560
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8009b6a:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8009b6e:	2114      	movs	r1, #20
 8009b70:	f204 5064 	addw	r0, r4, #1380	; 0x564
 8009b74:	f006 f9a0 	bl	800feb8 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 8009b78:	f8d4 3578 	ldr.w	r3, [r4, #1400]	; 0x578
 8009b7c:	4283      	cmp	r3, r0
 8009b7e:	d003      	beq.n	8009b88 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 8009b80:	f8c4 0578 	str.w	r0, [r4, #1400]	; 0x578
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8009b84:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 8009b88:	4628      	mov	r0, r5
 8009b8a:	f7fe fbbd 	bl	8008308 <CallNvmDataChangeCallback>
 8009b8e:	e7a4      	b.n	8009ada <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8009b90:	2500      	movs	r5, #0
 8009b92:	e7ac      	b.n	8009aee <LoRaMacHandleNvm+0x1e>
 8009b94:	200006bc 	.word	0x200006bc

08009b98 <RestoreNvmData>:
{
 8009b98:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8009b9a:	4b34      	ldr	r3, [pc, #208]	; (8009c6c <RestoreNvmData+0xd4>)
 8009b9c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d001      	beq.n	8009ba8 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 8009ba4:	2001      	movs	r0, #1
}
 8009ba6:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8009ba8:	4c31      	ldr	r4, [pc, #196]	; (8009c70 <RestoreNvmData+0xd8>)
 8009baa:	2124      	movs	r1, #36	; 0x24
 8009bac:	4620      	mov	r0, r4
 8009bae:	f006 f983 	bl	800feb8 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 8009bb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bb4:	4283      	cmp	r3, r0
 8009bb6:	d001      	beq.n	8009bbc <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009bb8:	2017      	movs	r0, #23
 8009bba:	e7f4      	b.n	8009ba6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8009bbc:	2114      	movs	r1, #20
 8009bbe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009bc2:	f006 f979 	bl	800feb8 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8009bc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009bc8:	4283      	cmp	r3, r0
 8009bca:	d001      	beq.n	8009bd0 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009bcc:	2017      	movs	r0, #23
 8009bce:	e7ea      	b.n	8009ba6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8009bd0:	21e0      	movs	r1, #224	; 0xe0
 8009bd2:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8009bd6:	f006 f96f 	bl	800feb8 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8009bda:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009bde:	4283      	cmp	r3, r0
 8009be0:	d001      	beq.n	8009be6 <RestoreNvmData+0x4e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009be2:	2017      	movs	r0, #23
 8009be4:	e7df      	b.n	8009ba6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8009be6:	21bc      	movs	r1, #188	; 0xbc
 8009be8:	f504 7092 	add.w	r0, r4, #292	; 0x124
 8009bec:	f006 f964 	bl	800feb8 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 8009bf0:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 8009bf4:	4283      	cmp	r3, r0
 8009bf6:	d001      	beq.n	8009bfc <RestoreNvmData+0x64>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009bf8:	2017      	movs	r0, #23
 8009bfa:	e7d4      	b.n	8009ba6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 8009c02:	f006 f959 	bl	800feb8 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8009c06:	f8d4 31e4 	ldr.w	r3, [r4, #484]	; 0x1e4
 8009c0a:	4283      	cmp	r3, r0
 8009c0c:	d001      	beq.n	8009c12 <RestoreNvmData+0x7a>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009c0e:	2017      	movs	r0, #23
 8009c10:	e7c9      	b.n	8009ba6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8009c12:	2114      	movs	r1, #20
 8009c14:	f204 5064 	addw	r0, r4, #1380	; 0x564
 8009c18:	f006 f94e 	bl	800feb8 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 8009c1c:	f8d4 3578 	ldr.w	r3, [r4, #1400]	; 0x578
 8009c20:	4283      	cmp	r3, r0
 8009c22:	d001      	beq.n	8009c28 <RestoreNvmData+0x90>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009c24:	2017      	movs	r0, #23
 8009c26:	e7be      	b.n	8009ba6 <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8009c28:	4625      	mov	r5, r4
 8009c2a:	4c12      	ldr	r4, [pc, #72]	; (8009c74 <RestoreNvmData+0xdc>)
 8009c2c:	f240 527c 	movw	r2, #1404	; 0x57c
 8009c30:	4629      	mov	r1, r5
 8009c32:	4620      	mov	r0, r4
 8009c34:	f006 f91f 	bl	800fe76 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8009c38:	f240 527c 	movw	r2, #1404	; 0x57c
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	4628      	mov	r0, r5
 8009c40:	f006 f931 	bl	800fea6 <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009c44:	4b09      	ldr	r3, [pc, #36]	; (8009c6c <RestoreNvmData+0xd4>)
 8009c46:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 8009c4a:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009c4e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8009c50:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009c54:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 8009c58:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009c62:	2202      	movs	r2, #2
 8009c64:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    return LORAMAC_STATUS_OK;
 8009c68:	2000      	movs	r0, #0
 8009c6a:	e79c      	b.n	8009ba6 <RestoreNvmData+0xe>
 8009c6c:	200006bc 	.word	0x200006bc
 8009c70:	2000857c 	.word	0x2000857c
 8009c74:	20008000 	.word	0x20008000

08009c78 <OnRadioRxTimeout>:
{
 8009c78:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8009c7a:	4a09      	ldr	r2, [pc, #36]	; (8009ca0 <OnRadioRxTimeout+0x28>)
 8009c7c:	7813      	ldrb	r3, [r2, #0]
 8009c7e:	f043 0302 	orr.w	r3, r3, #2
 8009c82:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009c84:	4b07      	ldr	r3, [pc, #28]	; (8009ca4 <OnRadioRxTimeout+0x2c>)
 8009c86:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009c8a:	b113      	cbz	r3, 8009c92 <OnRadioRxTimeout+0x1a>
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	b103      	cbz	r3, 8009c92 <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009c90:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8009c92:	4b05      	ldr	r3, [pc, #20]	; (8009ca8 <OnRadioRxTimeout+0x30>)
 8009c94:	2201      	movs	r2, #1
 8009c96:	2100      	movs	r1, #0
 8009c98:	2002      	movs	r0, #2
 8009c9a:	f007 ff95 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
}
 8009c9e:	bd08      	pop	{r3, pc}
 8009ca0:	200006b8 	.word	0x200006b8
 8009ca4:	200006bc 	.word	0x200006bc
 8009ca8:	08013e60 	.word	0x08013e60

08009cac <OnRadioTxTimeout>:
{
 8009cac:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8009cae:	4a09      	ldr	r2, [pc, #36]	; (8009cd4 <OnRadioTxTimeout+0x28>)
 8009cb0:	7813      	ldrb	r3, [r2, #0]
 8009cb2:	f043 0308 	orr.w	r3, r3, #8
 8009cb6:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009cb8:	4b07      	ldr	r3, [pc, #28]	; (8009cd8 <OnRadioTxTimeout+0x2c>)
 8009cba:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009cbe:	b113      	cbz	r3, 8009cc6 <OnRadioTxTimeout+0x1a>
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	b103      	cbz	r3, 8009cc6 <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009cc4:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8009cc6:	4b05      	ldr	r3, [pc, #20]	; (8009cdc <OnRadioTxTimeout+0x30>)
 8009cc8:	2201      	movs	r2, #1
 8009cca:	2100      	movs	r1, #0
 8009ccc:	2002      	movs	r0, #2
 8009cce:	f007 ff7b 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
}
 8009cd2:	bd08      	pop	{r3, pc}
 8009cd4:	200006b8 	.word	0x200006b8
 8009cd8:	200006bc 	.word	0x200006bc
 8009cdc:	08013e70 	.word	0x08013e70

08009ce0 <OnRadioRxDone>:
{
 8009ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce4:	4680      	mov	r8, r0
 8009ce6:	460f      	mov	r7, r1
 8009ce8:	4616      	mov	r6, r2
 8009cea:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8009cec:	f008 fa80 	bl	80121f0 <UTIL_TIMER_GetCurrentTime>
 8009cf0:	4c0f      	ldr	r4, [pc, #60]	; (8009d30 <OnRadioRxDone+0x50>)
 8009cf2:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 8009cf4:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 8009cf8:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 8009cfa:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 8009cfc:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8009cfe:	4b0d      	ldr	r3, [pc, #52]	; (8009d34 <OnRadioRxDone+0x54>)
 8009d00:	781a      	ldrb	r2, [r3, #0]
 8009d02:	f042 0210 	orr.w	r2, r2, #16
 8009d06:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8009d08:	b2d2      	uxtb	r2, r2
 8009d0a:	f042 0201 	orr.w	r2, r2, #1
 8009d0e:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009d10:	4b09      	ldr	r3, [pc, #36]	; (8009d38 <OnRadioRxDone+0x58>)
 8009d12:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009d16:	b113      	cbz	r3, 8009d1e <OnRadioRxDone+0x3e>
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	b103      	cbz	r3, 8009d1e <OnRadioRxDone+0x3e>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009d1c:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8009d1e:	4b07      	ldr	r3, [pc, #28]	; (8009d3c <OnRadioRxDone+0x5c>)
 8009d20:	2201      	movs	r2, #1
 8009d22:	2100      	movs	r1, #0
 8009d24:	2002      	movs	r0, #2
 8009d26:	f007 ff4f 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
}
 8009d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d2e:	bf00      	nop
 8009d30:	20000c6c 	.word	0x20000c6c
 8009d34:	200006b8 	.word	0x200006b8
 8009d38:	200006bc 	.word	0x200006bc
 8009d3c:	08013e80 	.word	0x08013e80

08009d40 <OnRadioTxDone>:
{
 8009d40:	b530      	push	{r4, r5, lr}
 8009d42:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8009d44:	f008 fa54 	bl	80121f0 <UTIL_TIMER_GetCurrentTime>
 8009d48:	4b0f      	ldr	r3, [pc, #60]	; (8009d88 <OnRadioTxDone+0x48>)
 8009d4a:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8009d4c:	4d0f      	ldr	r5, [pc, #60]	; (8009d8c <OnRadioTxDone+0x4c>)
 8009d4e:	466c      	mov	r4, sp
 8009d50:	4620      	mov	r0, r4
 8009d52:	f008 f99f 	bl	8012094 <SysTimeGet>
 8009d56:	f505 734e 	add.w	r3, r5, #824	; 0x338
 8009d5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009d5e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8009d62:	4a0b      	ldr	r2, [pc, #44]	; (8009d90 <OnRadioTxDone+0x50>)
 8009d64:	7813      	ldrb	r3, [r2, #0]
 8009d66:	f043 0320 	orr.w	r3, r3, #32
 8009d6a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009d6c:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8009d70:	b113      	cbz	r3, 8009d78 <OnRadioTxDone+0x38>
 8009d72:	691b      	ldr	r3, [r3, #16]
 8009d74:	b103      	cbz	r3, 8009d78 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009d76:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8009d78:	4b06      	ldr	r3, [pc, #24]	; (8009d94 <OnRadioTxDone+0x54>)
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	2002      	movs	r0, #2
 8009d80:	f007 ff22 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
}
 8009d84:	b003      	add	sp, #12
 8009d86:	bd30      	pop	{r4, r5, pc}
 8009d88:	20000c7c 	.word	0x20000c7c
 8009d8c:	200006bc 	.word	0x200006bc
 8009d90:	200006b8 	.word	0x200006b8
 8009d94:	08013e90 	.word	0x08013e90

08009d98 <ResetMacParameters>:
{
 8009d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d9a:	b091      	sub	sp, #68	; 0x44
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8009d9c:	4c53      	ldr	r4, [pc, #332]	; (8009eec <ResetMacParameters+0x154>)
 8009d9e:	2600      	movs	r6, #0
 8009da0:	f884 611c 	strb.w	r6, [r4, #284]	; 0x11c
    Nvm.MacGroup1.AdrAckCounter = 0;
 8009da4:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 8009da6:	4d52      	ldr	r5, [pc, #328]	; (8009ef0 <ResetMacParameters+0x158>)
 8009da8:	f885 641c 	strb.w	r6, [r5, #1052]	; 0x41c
    MacCtx.RetransmitTimeoutRetry = false;
 8009dac:	f885 641d 	strb.w	r6, [r5, #1053]	; 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 8009db0:	f8c5 649c 	str.w	r6, [r5, #1180]	; 0x49c
    Nvm.MacGroup2.MaxDCycle = 0;
 8009db4:	f884 6107 	strb.w	r6, [r4, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8009db8:	2701      	movs	r7, #1
 8009dba:	f8a4 710c 	strh.w	r7, [r4, #268]	; 0x10c
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009dbe:	f994 30cc 	ldrsb.w	r3, [r4, #204]	; 0xcc
 8009dc2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009dc6:	f994 30cd 	ldrsb.w	r3, [r4, #205]	; 0xcd
 8009dca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8009dce:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8009dd2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8009dd6:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8009dda:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 8009dde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009de2:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8009de6:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8009dea:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 8009dee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009df2:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8009df6:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 8009dfa:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8009dfe:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8009e02:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8009e06:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8009e0a:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8009e0c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8009e10:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 8009e12:	f885 641e 	strb.w	r6, [r5, #1054]	; 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 8009e16:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8009e1a:	f884 6109 	strb.w	r6, [r4, #265]	; 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 8009e1e:	f884 610a 	strb.w	r6, [r4, #266]	; 0x10a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8009e22:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8009e26:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 8009e2a:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8009e2c:	f504 73f4 	add.w	r3, r4, #488	; 0x1e8
 8009e30:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 8009e32:	4b30      	ldr	r3, [pc, #192]	; (8009ef4 <ResetMacParameters+0x15c>)
 8009e34:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009e36:	a901      	add	r1, sp, #4
 8009e38:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009e3c:	f003 fe6c 	bl	800db18 <RegionInitDefaults>
    MacCtx.Channel = 1; ///////////////0
 8009e40:	f885 741f 	strb.w	r7, [r5, #1055]	; 0x41f
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009e44:	f885 73d0 	strb.w	r7, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009e48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e4a:	f8c5 33d4 	str.w	r3, [r5, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009e4e:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8009e52:	f885 33e0 	strb.w	r3, [r5, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009e56:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8009e5a:	f885 33e1 	strb.w	r3, [r5, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009e5e:	f885 63e2 	strb.w	r6, [r5, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009e62:	f885 73e3 	strb.w	r7, [r5, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009e66:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8009e6a:	f885 33e4 	strb.w	r3, [r5, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009e6e:	f505 747a 	add.w	r4, r5, #1000	; 0x3e8
 8009e72:	f505 7c74 	add.w	ip, r5, #976	; 0x3d0
 8009e76:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e7c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009e80:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009e84:	f885 73fa 	strb.w	r7, [r5, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009e88:	2302      	movs	r3, #2
 8009e8a:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 8009e8e:	960e      	str	r6, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8009e90:	960f      	str	r6, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 8009e92:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8009e96:	b11b      	cbz	r3, 8009ea0 <ResetMacParameters+0x108>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8009e98:	685a      	ldr	r2, [r3, #4]
 8009e9a:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8009ea0:	4b13      	ldr	r3, [pc, #76]	; (8009ef0 <ResetMacParameters+0x158>)
 8009ea2:	f203 426c 	addw	r2, r3, #1132	; 0x46c
 8009ea6:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8009ea8:	f203 4224 	addw	r2, r3, #1060	; 0x424
 8009eac:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8009eae:	f503 628b 	add.w	r2, r3, #1112	; 0x458
 8009eb2:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8009eb4:	f203 4395 	addw	r3, r3, #1173	; 0x495
 8009eb8:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8009eba:	4a0c      	ldr	r2, [pc, #48]	; (8009eec <ResetMacParameters+0x154>)
 8009ebc:	f102 03d4 	add.w	r3, r2, #212	; 0xd4
 8009ec0:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8009ec2:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8009ec6:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8009ec8:	f102 0344 	add.w	r3, r2, #68	; 0x44
 8009ecc:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8009ece:	f102 03d8 	add.w	r3, r2, #216	; 0xd8
 8009ed2:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8009ed4:	f502 738e 	add.w	r3, r2, #284	; 0x11c
 8009ed8:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8009eda:	f202 5264 	addw	r2, r2, #1380	; 0x564
 8009ede:	a90e      	add	r1, sp, #56	; 0x38
 8009ee0:	a805      	add	r0, sp, #20
 8009ee2:	f002 f859 	bl	800bf98 <LoRaMacClassBInit>
}
 8009ee6:	b011      	add	sp, #68	; 0x44
 8009ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eea:	bf00      	nop
 8009eec:	20008000 	.word	0x20008000
 8009ef0:	200006bc 	.word	0x200006bc
 8009ef4:	20000bdc 	.word	0x20000bdc

08009ef8 <SwitchClass>:
{
 8009ef8:	b570      	push	{r4, r5, r6, lr}
 8009efa:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 8009efc:	4b3e      	ldr	r3, [pc, #248]	; (8009ff8 <SwitchClass+0x100>)
 8009efe:	f893 5104 	ldrb.w	r5, [r3, #260]	; 0x104
 8009f02:	2d01      	cmp	r5, #1
 8009f04:	d065      	beq.n	8009fd2 <SwitchClass+0xda>
 8009f06:	2d02      	cmp	r5, #2
 8009f08:	d06b      	beq.n	8009fe2 <SwitchClass+0xea>
 8009f0a:	b10d      	cbz	r5, 8009f10 <SwitchClass+0x18>
 8009f0c:	2003      	movs	r0, #3
}
 8009f0e:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 8009f10:	b930      	cbnz	r0, 8009f20 <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8009f12:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8009f16:	3364      	adds	r3, #100	; 0x64
 8009f18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f1c:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 8009f20:	2c01      	cmp	r4, #1
 8009f22:	d022      	beq.n	8009f6a <SwitchClass+0x72>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009f24:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 8009f26:	2c02      	cmp	r4, #2
 8009f28:	d1f1      	bne.n	8009f0e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009f2a:	4b33      	ldr	r3, [pc, #204]	; (8009ff8 <SwitchClass+0x100>)
 8009f2c:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009f30:	4e32      	ldr	r6, [pc, #200]	; (8009ffc <SwitchClass+0x104>)
 8009f32:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 8009f36:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 8009f3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f40:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009f44:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009f48:	2302      	movs	r3, #2
 8009f4a:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009f4e:	2300      	movs	r3, #0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	dd13      	ble.n	8009f7c <SwitchClass+0x84>
                MacCtx.NodeAckRequested = false;
 8009f54:	4b29      	ldr	r3, [pc, #164]	; (8009ffc <SwitchClass+0x104>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
                Radio.Sleep( );
 8009f5c:	4b28      	ldr	r3, [pc, #160]	; (800a000 <SwitchClass+0x108>)
 8009f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f60:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8009f62:	f7ff fd05 	bl	8009970 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8009f66:	4628      	mov	r0, r5
 8009f68:	e7d1      	b.n	8009f0e <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f002 fbbe 	bl	800c6ec <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 8009f70:	2800      	cmp	r0, #0
 8009f72:	d1d8      	bne.n	8009f26 <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8009f74:	4b20      	ldr	r3, [pc, #128]	; (8009ff8 <SwitchClass+0x100>)
 8009f76:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 8009f7a:	e7d4      	b.n	8009f26 <SwitchClass+0x2e>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	4a1e      	ldr	r2, [pc, #120]	; (8009ff8 <SwitchClass+0x100>)
 8009f80:	212c      	movs	r1, #44	; 0x2c
 8009f82:	fb01 2203 	mla	r2, r1, r3, r2
 8009f86:	f892 20da 	ldrb.w	r2, [r2, #218]	; 0xda
 8009f8a:	b912      	cbnz	r2, 8009f92 <SwitchClass+0x9a>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	b25b      	sxtb	r3, r3
 8009f90:	e7de      	b.n	8009f50 <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8009f92:	4a19      	ldr	r2, [pc, #100]	; (8009ff8 <SwitchClass+0x100>)
 8009f94:	fb01 2000 	mla	r0, r1, r0, r2
 8009f98:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 8009f9c:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8009f9e:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
 8009fa2:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009fa6:	4b15      	ldr	r3, [pc, #84]	; (8009ffc <SwitchClass+0x104>)
 8009fa8:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 8009fac:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009fb0:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009fb4:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 8009fb8:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009fbc:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8009fc0:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8009fc4:	2203      	movs	r2, #3
 8009fc6:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 8009fd0:	e7c0      	b.n	8009f54 <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8009fd2:	f002 fb8b 	bl	800c6ec <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d199      	bne.n	8009f0e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009fda:	4b07      	ldr	r3, [pc, #28]	; (8009ff8 <SwitchClass+0x100>)
 8009fdc:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 8009fe0:	e795      	b.n	8009f0e <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 8009fe2:	b938      	cbnz	r0, 8009ff4 <SwitchClass+0xfc>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009fe4:	4b04      	ldr	r3, [pc, #16]	; (8009ff8 <SwitchClass+0x100>)
 8009fe6:	f883 0104 	strb.w	r0, [r3, #260]	; 0x104
                Radio.Sleep( );
 8009fea:	4b05      	ldr	r3, [pc, #20]	; (800a000 <SwitchClass+0x108>)
 8009fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fee:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	e78c      	b.n	8009f0e <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009ff4:	2003      	movs	r0, #3
 8009ff6:	e78a      	b.n	8009f0e <SwitchClass+0x16>
 8009ff8:	20008000 	.word	0x20008000
 8009ffc:	200006bc 	.word	0x200006bc
 800a000:	080145a0 	.word	0x080145a0

0800a004 <SendReJoinReq>:
{
 800a004:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800a006:	28ff      	cmp	r0, #255	; 0xff
 800a008:	d003      	beq.n	800a012 <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800a00a:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800a00c:	f7ff fb62 	bl	80096d4 <ScheduleTx>
}
 800a010:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800a012:	2000      	movs	r0, #0
 800a014:	f7ff ff70 	bl	8009ef8 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800a018:	4d0e      	ldr	r5, [pc, #56]	; (800a054 <SendReJoinReq+0x50>)
 800a01a:	2400      	movs	r4, #0
 800a01c:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800a020:	1cab      	adds	r3, r5, #2
 800a022:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800a026:	23ff      	movs	r3, #255	; 0xff
 800a028:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800a02c:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800a030:	f005 fef0 	bl	800fe14 <SecureElementGetJoinEui>
 800a034:	4601      	mov	r1, r0
 800a036:	2208      	movs	r2, #8
 800a038:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800a03c:	f005 ff1b 	bl	800fe76 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800a040:	f005 fed2 	bl	800fde8 <SecureElementGetDevEui>
 800a044:	4601      	mov	r1, r0
 800a046:	2208      	movs	r2, #8
 800a048:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800a04c:	f005 ff13 	bl	800fe76 <memcpy1>
            allowDelayedTx = false;
 800a050:	4620      	mov	r0, r4
            break;
 800a052:	e7db      	b.n	800a00c <SendReJoinReq+0x8>
 800a054:	200006bc 	.word	0x200006bc

0800a058 <PrepareFrame>:
{
 800a058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a05c:	b083      	sub	sp, #12
 800a05e:	4605      	mov	r5, r0
 800a060:	460e      	mov	r6, r1
 800a062:	4617      	mov	r7, r2
 800a064:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800a068:	4959      	ldr	r1, [pc, #356]	; (800a1d0 <PrepareFrame+0x178>)
 800a06a:	2200      	movs	r2, #0
 800a06c:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800a06e:	f881 241e 	strb.w	r2, [r1, #1054]	; 0x41e
    uint32_t fCntUp = 0;
 800a072:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800a074:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800a076:	4698      	mov	r8, r3
 800a078:	b1cb      	cbz	r3, 800a0ae <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800a07a:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800a1d0 <PrepareFrame+0x178>
 800a07e:	4622      	mov	r2, r4
 800a080:	4641      	mov	r1, r8
 800a082:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800a086:	f005 fef6 	bl	800fe76 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800a08a:	b2e0      	uxtb	r0, r4
 800a08c:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800a090:	782b      	ldrb	r3, [r5, #0]
 800a092:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800a096:	782b      	ldrb	r3, [r5, #0]
 800a098:	095b      	lsrs	r3, r3, #5
 800a09a:	2b04      	cmp	r3, #4
 800a09c:	d009      	beq.n	800a0b2 <PrepareFrame+0x5a>
 800a09e:	2b07      	cmp	r3, #7
 800a0a0:	d079      	beq.n	800a196 <PrepareFrame+0x13e>
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d009      	beq.n	800a0ba <PrepareFrame+0x62>
 800a0a6:	2002      	movs	r0, #2
}
 800a0a8:	b003      	add	sp, #12
 800a0aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800a0ae:	4614      	mov	r4, r2
 800a0b0:	e7e3      	b.n	800a07a <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800a0b2:	4b47      	ldr	r3, [pc, #284]	; (800a1d0 <PrepareFrame+0x178>)
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800a0ba:	4b45      	ldr	r3, [pc, #276]	; (800a1d0 <PrepareFrame+0x178>)
 800a0bc:	2204      	movs	r2, #4
 800a0be:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800a0c2:	1c9a      	adds	r2, r3, #2
 800a0c4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800a0c8:	22ff      	movs	r2, #255	; 0xff
 800a0ca:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800a0ce:	782a      	ldrb	r2, [r5, #0]
 800a0d0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800a0d4:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800a0d8:	4a3e      	ldr	r2, [pc, #248]	; (800a1d4 <PrepareFrame+0x17c>)
 800a0da:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 800a0de:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800a0e2:	7832      	ldrb	r2, [r6, #0]
 800a0e4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800a0e8:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800a0ec:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a0f0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800a0f4:	a801      	add	r0, sp, #4
 800a0f6:	f003 f9a7 	bl	800d448 <LoRaMacCryptoGetFCntUp>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d15c      	bne.n	800a1b8 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800a0fe:	9a01      	ldr	r2, [sp, #4]
 800a100:	4b33      	ldr	r3, [pc, #204]	; (800a1d0 <PrepareFrame+0x178>)
 800a102:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800a106:	2100      	movs	r1, #0
 800a108:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
            MacCtx.McpsConfirm.AckReceived = false;
 800a10c:	f883 1448 	strb.w	r1, [r3, #1096]	; 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800a110:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a114:	4668      	mov	r0, sp
 800a116:	f002 fe31 	bl	800cd7c <LoRaMacCommandsGetSizeSerializedCmds>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	d14e      	bne.n	800a1bc <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800a11e:	9b00      	ldr	r3, [sp, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d0c1      	beq.n	800a0a8 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800a124:	4b2b      	ldr	r3, [pc, #172]	; (800a1d4 <PrepareFrame+0x17c>)
 800a126:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800a12a:	f7fe f905 	bl	8008338 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800a12e:	4b28      	ldr	r3, [pc, #160]	; (800a1d0 <PrepareFrame+0x178>)
 800a130:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800a134:	b113      	cbz	r3, 800a13c <PrepareFrame+0xe4>
 800a136:	9a00      	ldr	r2, [sp, #0]
 800a138:	2a0f      	cmp	r2, #15
 800a13a:	d915      	bls.n	800a168 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800a13c:	b113      	cbz	r3, 800a144 <PrepareFrame+0xec>
 800a13e:	9b00      	ldr	r3, [sp, #0]
 800a140:	2b0f      	cmp	r3, #15
 800a142:	d821      	bhi.n	800a188 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a144:	4a24      	ldr	r2, [pc, #144]	; (800a1d8 <PrepareFrame+0x180>)
 800a146:	4669      	mov	r1, sp
 800a148:	f002 fe24 	bl	800cd94 <LoRaMacCommandsSerializeCmds>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	d13b      	bne.n	800a1c8 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800a150:	4b1f      	ldr	r3, [pc, #124]	; (800a1d0 <PrepareFrame+0x178>)
 800a152:	2200      	movs	r2, #0
 800a154:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800a158:	f503 6294 	add.w	r2, r3, #1184	; 0x4a0
 800a15c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800a160:	9a00      	ldr	r2, [sp, #0]
 800a162:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800a166:	e79f      	b.n	800a0a8 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800a168:	4a1c      	ldr	r2, [pc, #112]	; (800a1dc <PrepareFrame+0x184>)
 800a16a:	4669      	mov	r1, sp
 800a16c:	200f      	movs	r0, #15
 800a16e:	f002 fe11 	bl	800cd94 <LoRaMacCommandsSerializeCmds>
 800a172:	bb28      	cbnz	r0, 800a1c0 <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800a174:	7833      	ldrb	r3, [r6, #0]
 800a176:	9a00      	ldr	r2, [sp, #0]
 800a178:	f362 0303 	bfi	r3, r2, #0, #4
 800a17c:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800a17e:	b2da      	uxtb	r2, r3
 800a180:	4b13      	ldr	r3, [pc, #76]	; (800a1d0 <PrepareFrame+0x178>)
 800a182:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800a186:	e78f      	b.n	800a0a8 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a188:	4a13      	ldr	r2, [pc, #76]	; (800a1d8 <PrepareFrame+0x180>)
 800a18a:	4669      	mov	r1, sp
 800a18c:	f002 fe02 	bl	800cd94 <LoRaMacCommandsSerializeCmds>
 800a190:	b1c0      	cbz	r0, 800a1c4 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a192:	2013      	movs	r0, #19
 800a194:	e788      	b.n	800a0a8 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800a196:	f1b8 0f00 	cmp.w	r8, #0
 800a19a:	d017      	beq.n	800a1cc <PrepareFrame+0x174>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d083      	beq.n	800a0a8 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800a1a0:	4c0b      	ldr	r4, [pc, #44]	; (800a1d0 <PrepareFrame+0x178>)
 800a1a2:	b282      	uxth	r2, r0
 800a1a4:	4641      	mov	r1, r8
 800a1a6:	1ce0      	adds	r0, r4, #3
 800a1a8:	f005 fe65 	bl	800fe76 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800a1ac:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	e777      	b.n	800a0a8 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800a1b8:	2012      	movs	r0, #18
 800a1ba:	e775      	b.n	800a0a8 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a1bc:	2013      	movs	r0, #19
 800a1be:	e773      	b.n	800a0a8 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a1c0:	2013      	movs	r0, #19
 800a1c2:	e771      	b.n	800a0a8 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800a1c4:	200a      	movs	r0, #10
 800a1c6:	e76f      	b.n	800a0a8 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a1c8:	2013      	movs	r0, #19
 800a1ca:	e76d      	b.n	800a0a8 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	e76b      	b.n	800a0a8 <PrepareFrame+0x50>
 800a1d0:	200006bc 	.word	0x200006bc
 800a1d4:	20008000 	.word	0x20008000
 800a1d8:	20000b5c 	.word	0x20000b5c
 800a1dc:	200007d4 	.word	0x200007d4

0800a1e0 <Send>:
{
 800a1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e4:	b08a      	sub	sp, #40	; 0x28
 800a1e6:	4617      	mov	r7, r2
 800a1e8:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a1ea:	4c45      	ldr	r4, [pc, #276]	; (800a300 <Send+0x120>)
 800a1ec:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800a1f0:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a1f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a1f6:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a1f8:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d07c      	beq.n	800a2fa <Send+0x11a>
 800a200:	4605      	mov	r5, r0
 800a202:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800a204:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
 800a208:	b90b      	cbnz	r3, 800a20e <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a20a:	2100      	movs	r1, #0
 800a20c:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800a20e:	2300      	movs	r3, #0
 800a210:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800a214:	483a      	ldr	r0, [pc, #232]	; (800a300 <Send+0x120>)
 800a216:	f890 1106 	ldrb.w	r1, [r0, #262]	; 0x106
 800a21a:	f361 13c7 	bfi	r3, r1, #7, #1
 800a21e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a222:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 800a226:	2b01      	cmp	r3, #1
 800a228:	d054      	beq.n	800a2d4 <Send+0xf4>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800a22a:	4b35      	ldr	r3, [pc, #212]	; (800a300 <Send+0x120>)
 800a22c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a230:	b12b      	cbz	r3, 800a23e <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800a232:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a236:	f043 0320 	orr.w	r3, r3, #32
 800a23a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 800a23e:	2301      	movs	r3, #1
 800a240:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800a244:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a248:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a24a:	4b2e      	ldr	r3, [pc, #184]	; (800a304 <Send+0x124>)
 800a24c:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 800a250:	f8ad 2014 	strh.w	r2, [sp, #20]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800a254:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800a258:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a25c:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a260:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800a264:	4926      	ldr	r1, [pc, #152]	; (800a300 <Send+0x120>)
 800a266:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
 800a26a:	f88d 301a 	strb.w	r3, [sp, #26]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a26e:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 800a272:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800a276:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800a27a:	f88d 301c 	strb.w	r3, [sp, #28]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800a27e:	ab08      	add	r3, sp, #32
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	f101 0360 	add.w	r3, r1, #96	; 0x60
 800a286:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800a28a:	3139      	adds	r1, #57	; 0x39
 800a28c:	a803      	add	r0, sp, #12
 800a28e:	f001 f92d 	bl	800b4ec <LoRaMacAdrCalcNext>
 800a292:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a296:	f360 1386 	bfi	r3, r0, #6, #1
 800a29a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800a29e:	f8cd 8000 	str.w	r8, [sp]
 800a2a2:	463b      	mov	r3, r7
 800a2a4:	4632      	mov	r2, r6
 800a2a6:	a909      	add	r1, sp, #36	; 0x24
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	f7ff fed5 	bl	800a058 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	b108      	cbz	r0, 800a2b6 <Send+0xd6>
 800a2b2:	280a      	cmp	r0, #10
 800a2b4:	d104      	bne.n	800a2c0 <Send+0xe0>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800a2b6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800a2ba:	f7ff fa0b 	bl	80096d4 <ScheduleTx>
 800a2be:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800a2c0:	b17c      	cbz	r4, 800a2e2 <Send+0x102>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800a2c2:	4b0f      	ldr	r3, [pc, #60]	; (800a300 <Send+0x120>)
 800a2c4:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800a2c8:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	b00a      	add	sp, #40	; 0x28
 800a2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800a2d4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a2d8:	f043 0310 	orr.w	r3, r3, #16
 800a2dc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800a2e0:	e7a3      	b.n	800a22a <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800a2e2:	4b07      	ldr	r3, [pc, #28]	; (800a300 <Send+0x120>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800a2ea:	9a08      	ldr	r2, [sp, #32]
 800a2ec:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800a2ee:	f002 fd19 	bl	800cd24 <LoRaMacCommandsRemoveNoneStickyCmds>
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	d0ea      	beq.n	800a2cc <Send+0xec>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a2f6:	2413      	movs	r4, #19
 800a2f8:	e7e8      	b.n	800a2cc <Send+0xec>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800a2fa:	2407      	movs	r4, #7
 800a2fc:	e7e6      	b.n	800a2cc <Send+0xec>
 800a2fe:	bf00      	nop
 800a300:	20008000 	.word	0x20008000
 800a304:	200006bc 	.word	0x200006bc

0800a308 <LoRaMacIsBusy>:
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800a308:	4b0a      	ldr	r3, [pc, #40]	; (800a334 <LoRaMacIsBusy+0x2c>)
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	f013 0f01 	tst.w	r3, #1
 800a310:	d10a      	bne.n	800a328 <LoRaMacIsBusy+0x20>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a312:	4b09      	ldr	r3, [pc, #36]	; (800a338 <LoRaMacIsBusy+0x30>)
 800a314:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a318:	b943      	cbnz	r3, 800a32c <LoRaMacIsBusy+0x24>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800a31a:	4b07      	ldr	r3, [pc, #28]	; (800a338 <LoRaMacIsBusy+0x30>)
 800a31c:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a320:	2b01      	cmp	r3, #1
 800a322:	d005      	beq.n	800a330 <LoRaMacIsBusy+0x28>
    return true;
 800a324:	2001      	movs	r0, #1
 800a326:	4770      	bx	lr
        return true;
 800a328:	2001      	movs	r0, #1
 800a32a:	4770      	bx	lr
    return true;
 800a32c:	2001      	movs	r0, #1
 800a32e:	4770      	bx	lr
        return false;
 800a330:	2000      	movs	r0, #0
}
 800a332:	4770      	bx	lr
 800a334:	200006b8 	.word	0x200006b8
 800a338:	200006bc 	.word	0x200006bc

0800a33c <LoRaMacProcess>:
{
 800a33c:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800a33e:	f7ff f81d 	bl	800937c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800a342:	f002 fbf1 	bl	800cb28 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800a346:	4b20      	ldr	r3, [pc, #128]	; (800a3c8 <LoRaMacProcess+0x8c>)
 800a348:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800a34c:	f013 0f20 	tst.w	r3, #32
 800a350:	d10d      	bne.n	800a36e <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800a352:	f7fd fed3 	bl	80080fc <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800a356:	4b1c      	ldr	r3, [pc, #112]	; (800a3c8 <LoRaMacProcess+0x8c>)
 800a358:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d024      	beq.n	800a3aa <LoRaMacProcess+0x6e>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800a360:	4b19      	ldr	r3, [pc, #100]	; (800a3c8 <LoRaMacProcess+0x8c>)
 800a362:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800a366:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a36a:	d121      	bne.n	800a3b0 <LoRaMacProcess+0x74>
}
 800a36c:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800a36e:	2000      	movs	r0, #0
 800a370:	f7fd febe 	bl	80080f0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800a374:	f7fd fefa 	bl	800816c <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800a378:	f7fd ffd2 	bl	8008320 <IsRequestPending>
 800a37c:	b110      	cbz	r0, 800a384 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800a37e:	f7fe f8b9 	bl	80084f4 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800a382:	b918      	cbnz	r0, 800a38c <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800a384:	f7ff f83c 	bl	8009400 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800a388:	f7ff fa5a 	bl	8009840 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800a38c:	f7ff fa94 	bl	80098b8 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800a390:	f7ff fadc 	bl	800994c <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a394:	2001      	movs	r0, #1
 800a396:	f7fd feab 	bl	80080f0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800a39a:	4a0b      	ldr	r2, [pc, #44]	; (800a3c8 <LoRaMacProcess+0x8c>)
 800a39c:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800a3a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3a4:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800a3a8:	e7d3      	b.n	800a352 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800a3aa:	f7ff fae1 	bl	8009970 <OpenContinuousRxCWindow>
 800a3ae:	e7d7      	b.n	800a360 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800a3b0:	4b05      	ldr	r3, [pc, #20]	; (800a3c8 <LoRaMacProcess+0x8c>)
 800a3b2:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800a3b6:	f36f 1286 	bfc	r2, #6, #1
 800a3ba:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacHandleNvm( &Nvm );
 800a3be:	4803      	ldr	r0, [pc, #12]	; (800a3cc <LoRaMacProcess+0x90>)
 800a3c0:	f7ff fb86 	bl	8009ad0 <LoRaMacHandleNvm>
}
 800a3c4:	e7d2      	b.n	800a36c <LoRaMacProcess+0x30>
 800a3c6:	bf00      	nop
 800a3c8:	200006bc 	.word	0x200006bc
 800a3cc:	20008000 	.word	0x20008000

0800a3d0 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800a3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d4:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	f000 81a4 	beq.w	800a724 <LoRaMacInitialization+0x354>
 800a3dc:	460f      	mov	r7, r1
 800a3de:	4691      	mov	r9, r2
 800a3e0:	4680      	mov	r8, r0
 800a3e2:	2900      	cmp	r1, #0
 800a3e4:	f000 81a0 	beq.w	800a728 <LoRaMacInitialization+0x358>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a3e8:	6803      	ldr	r3, [r0, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f000 819e 	beq.w	800a72c <LoRaMacInitialization+0x35c>
        ( primitives->MacMcpsIndication == NULL ) ||
 800a3f0:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	f000 819c 	beq.w	800a730 <LoRaMacInitialization+0x360>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a3f8:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f000 819a 	beq.w	800a734 <LoRaMacInitialization+0x364>
        ( primitives->MacMlmeIndication == NULL ) )
 800a400:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a402:	2b00      	cmp	r3, #0
 800a404:	f000 8198 	beq.w	800a738 <LoRaMacInitialization+0x368>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800a408:	4610      	mov	r0, r2
 800a40a:	f003 fb69 	bl	800dae0 <RegionIsActive>
 800a40e:	2800      	cmp	r0, #0
 800a410:	f000 8194 	beq.w	800a73c <LoRaMacInitialization+0x36c>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800a414:	4640      	mov	r0, r8
 800a416:	f002 fd67 	bl	800cee8 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800a41a:	4ccc      	ldr	r4, [pc, #816]	; (800a74c <LoRaMacInitialization+0x37c>)
 800a41c:	f240 527c 	movw	r2, #1404	; 0x57c
 800a420:	2100      	movs	r1, #0
 800a422:	4620      	mov	r0, r4
 800a424:	f005 fd3f 	bl	800fea6 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800a428:	4dc9      	ldr	r5, [pc, #804]	; (800a750 <LoRaMacInitialization+0x380>)
 800a42a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800a42e:	2100      	movs	r1, #0
 800a430:	4628      	mov	r0, r5
 800a432:	f005 fd38 	bl	800fea6 <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800a436:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800a43a:	2600      	movs	r6, #0
 800a43c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800a440:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800a444:	4bc3      	ldr	r3, [pc, #780]	; (800a754 <LoRaMacInitialization+0x384>)
 800a446:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800a44a:	f88d 6020 	strb.w	r6, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800a44e:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 800a452:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800a454:	f504 73f4 	add.w	r3, r4, #488	; 0x1e8
 800a458:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800a45a:	4bbf      	ldr	r3, [pc, #764]	; (800a758 <LoRaMacInitialization+0x388>)
 800a45c:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a45e:	a905      	add	r1, sp, #20
 800a460:	4648      	mov	r0, r9
 800a462:	f003 fb59 	bl	800db18 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a466:	230f      	movs	r3, #15
 800a468:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a46c:	a90a      	add	r1, sp, #40	; 0x28
 800a46e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a472:	f003 fb3a 	bl	800daea <RegionGetPhyParam>
 800a476:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800a478:	1b80      	subs	r0, r0, r6
 800a47a:	bf18      	it	ne
 800a47c:	2001      	movne	r0, #1
 800a47e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800a482:	f04f 0a0a 	mov.w	sl, #10
 800a486:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a48a:	a90a      	add	r1, sp, #40	; 0x28
 800a48c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a490:	f003 fb2b 	bl	800daea <RegionGetPhyParam>
 800a494:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800a496:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800a49a:	f04f 0906 	mov.w	r9, #6
 800a49e:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a4a2:	a90a      	add	r1, sp, #40	; 0x28
 800a4a4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a4a8:	f003 fb1f 	bl	800daea <RegionGetPhyParam>
 800a4ac:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800a4ae:	f884 00cd 	strb.w	r0, [r4, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800a4b2:	2310      	movs	r3, #16
 800a4b4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a4b8:	a90a      	add	r1, sp, #40	; 0x28
 800a4ba:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a4be:	f003 fb14 	bl	800daea <RegionGetPhyParam>
 800a4c2:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800a4c4:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800a4c8:	2311      	movs	r3, #17
 800a4ca:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a4ce:	a90a      	add	r1, sp, #40	; 0x28
 800a4d0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a4d4:	f003 fb09 	bl	800daea <RegionGetPhyParam>
 800a4d8:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800a4da:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800a4de:	2312      	movs	r3, #18
 800a4e0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a4e4:	a90a      	add	r1, sp, #40	; 0x28
 800a4e6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a4ea:	f003 fafe 	bl	800daea <RegionGetPhyParam>
 800a4ee:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800a4f0:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800a4f4:	2313      	movs	r3, #19
 800a4f6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a4fa:	a90a      	add	r1, sp, #40	; 0x28
 800a4fc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a500:	f003 faf3 	bl	800daea <RegionGetPhyParam>
 800a504:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800a506:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800a50a:	2314      	movs	r3, #20
 800a50c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a510:	a90a      	add	r1, sp, #40	; 0x28
 800a512:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a516:	f003 fae8 	bl	800daea <RegionGetPhyParam>
 800a51a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800a51c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800a520:	2316      	movs	r3, #22
 800a522:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a526:	a90a      	add	r1, sp, #40	; 0x28
 800a528:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a52c:	f003 fadd 	bl	800daea <RegionGetPhyParam>
 800a530:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800a532:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800a536:	2317      	movs	r3, #23
 800a538:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a53c:	a90a      	add	r1, sp, #40	; 0x28
 800a53e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a542:	f003 fad2 	bl	800daea <RegionGetPhyParam>
 800a546:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800a548:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800a54c:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800a550:	2318      	movs	r3, #24
 800a552:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a556:	a90a      	add	r1, sp, #40	; 0x28
 800a558:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a55c:	f003 fac5 	bl	800daea <RegionGetPhyParam>
 800a560:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800a562:	b2c0      	uxtb	r0, r0
 800a564:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800a568:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800a56c:	231d      	movs	r3, #29
 800a56e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a572:	a90a      	add	r1, sp, #40	; 0x28
 800a574:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a578:	f003 fab7 	bl	800daea <RegionGetPhyParam>
 800a57c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800a57e:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800a582:	231e      	movs	r3, #30
 800a584:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a588:	a90a      	add	r1, sp, #40	; 0x28
 800a58a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a58e:	f003 faac 	bl	800daea <RegionGetPhyParam>
 800a592:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800a594:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800a598:	231f      	movs	r3, #31
 800a59a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a59e:	a90a      	add	r1, sp, #40	; 0x28
 800a5a0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a5a4:	f003 faa1 	bl	800daea <RegionGetPhyParam>
 800a5a8:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800a5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ac:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800a5b0:	2320      	movs	r3, #32
 800a5b2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a5b6:	a90a      	add	r1, sp, #40	; 0x28
 800a5b8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a5bc:	f003 fa95 	bl	800daea <RegionGetPhyParam>
 800a5c0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800a5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c4:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800a5c8:	230b      	movs	r3, #11
 800a5ca:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a5ce:	a90a      	add	r1, sp, #40	; 0x28
 800a5d0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a5d4:	f003 fa89 	bl	800daea <RegionGetPhyParam>
 800a5d8:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 800a5da:	f8a5 0400 	strh.w	r0, [r5, #1024]	; 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800a5de:	230c      	movs	r3, #12
 800a5e0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a5e4:	a90a      	add	r1, sp, #40	; 0x28
 800a5e6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a5ea:	f003 fa7e 	bl	800daea <RegionGetPhyParam>
 800a5ee:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 800a5f0:	f8a5 0402 	strh.w	r0, [r5, #1026]	; 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800a5f4:	f04f 0b01 	mov.w	fp, #1
 800a5f8:	f884 b0a4 	strb.w	fp, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800a5fc:	f8c4 a088 	str.w	sl, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800a600:	f884 908c 	strb.w	r9, [r4, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800a604:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800a608:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800a60c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a610:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800a612:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a616:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800a618:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a61c:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800a61e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a622:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800a624:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800a628:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800a62a:	f884 b060 	strb.w	fp, [r4, #96]	; 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800a62e:	f884 b10b 	strb.w	fp, [r4, #267]	; 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800a632:	f8c5 7348 	str.w	r7, [r5, #840]	; 0x348
    ResetMacParameters( );
 800a636:	f7ff fbaf 	bl	8009d98 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800a63a:	f884 b105 	strb.w	fp, [r4, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 800a63e:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800a642:	f885 6495 	strb.w	r6, [r5, #1173]	; 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 800a646:	f8c5 b340 	str.w	fp, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800a64a:	62e6      	str	r6, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a64c:	6326      	str	r6, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a64e:	9600      	str	r6, [sp, #0]
 800a650:	4b42      	ldr	r3, [pc, #264]	; (800a75c <LoRaMacInitialization+0x38c>)
 800a652:	4632      	mov	r2, r6
 800a654:	f04f 31ff 	mov.w	r1, #4294967295
 800a658:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800a65c:	f007 fdaa 	bl	80121b4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800a660:	9600      	str	r6, [sp, #0]
 800a662:	4b3f      	ldr	r3, [pc, #252]	; (800a760 <LoRaMacInitialization+0x390>)
 800a664:	4632      	mov	r2, r6
 800a666:	f04f 31ff 	mov.w	r1, #4294967295
 800a66a:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800a66e:	f007 fda1 	bl	80121b4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800a672:	9600      	str	r6, [sp, #0]
 800a674:	4b3b      	ldr	r3, [pc, #236]	; (800a764 <LoRaMacInitialization+0x394>)
 800a676:	4632      	mov	r2, r6
 800a678:	f04f 31ff 	mov.w	r1, #4294967295
 800a67c:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800a680:	f007 fd98 	bl	80121b4 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800a684:	9600      	str	r6, [sp, #0]
 800a686:	4b38      	ldr	r3, [pc, #224]	; (800a768 <LoRaMacInitialization+0x398>)
 800a688:	4632      	mov	r2, r6
 800a68a:	f04f 31ff 	mov.w	r1, #4294967295
 800a68e:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800a692:	f007 fd8f 	bl	80121b4 <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800a696:	f10d 0808 	add.w	r8, sp, #8
 800a69a:	4640      	mov	r0, r8
 800a69c:	f007 fd1c 	bl	80120d8 <SysTimeGetMcuTime>
 800a6a0:	f504 7388 	add.w	r3, r4, #272	; 0x110
 800a6a4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a6a8:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800a6ac:	4b2f      	ldr	r3, [pc, #188]	; (800a76c <LoRaMacInitialization+0x39c>)
 800a6ae:	601e      	str	r6, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800a6b0:	4b2f      	ldr	r3, [pc, #188]	; (800a770 <LoRaMacInitialization+0x3a0>)
 800a6b2:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800a6b6:	4b2f      	ldr	r3, [pc, #188]	; (800a774 <LoRaMacInitialization+0x3a4>)
 800a6b8:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800a6bc:	4b2e      	ldr	r3, [pc, #184]	; (800a778 <LoRaMacInitialization+0x3a8>)
 800a6be:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800a6c2:	4b2e      	ldr	r3, [pc, #184]	; (800a77c <LoRaMacInitialization+0x3ac>)
 800a6c4:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800a6c8:	4b2d      	ldr	r3, [pc, #180]	; (800a780 <LoRaMacInitialization+0x3b0>)
 800a6ca:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800a6ce:	4b2d      	ldr	r3, [pc, #180]	; (800a784 <LoRaMacInitialization+0x3b4>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800a6d6:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800a6d8:	68b9      	ldr	r1, [r7, #8]
 800a6da:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800a6de:	f005 f92d 	bl	800f93c <SecureElementInit>
 800a6e2:	bb80      	cbnz	r0, 800a746 <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f002 fe8f 	bl	800d408 <LoRaMacCryptoInit>
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	d14c      	bne.n	800a788 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800a6ee:	f002 fac1 	bl	800cc74 <LoRaMacCommandsInit>
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	d14a      	bne.n	800a78c <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800a6f6:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 800a6fa:	f002 fed7 	bl	800d4ac <LoRaMacCryptoSetMulticastReference>
 800a6fe:	4604      	mov	r4, r0
 800a700:	2800      	cmp	r0, #0
 800a702:	d145      	bne.n	800a790 <LoRaMacInitialization+0x3c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800a704:	4d1f      	ldr	r5, [pc, #124]	; (800a784 <LoRaMacInitialization+0x3b4>)
 800a706:	696b      	ldr	r3, [r5, #20]
 800a708:	4798      	blx	r3
 800a70a:	f005 fba1 	bl	800fe50 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a70e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a710:	4a0e      	ldr	r2, [pc, #56]	; (800a74c <LoRaMacInitialization+0x37c>)
 800a712:	f892 0105 	ldrb.w	r0, [r2, #261]	; 0x105
 800a716:	4798      	blx	r3
    Radio.Sleep( );
 800a718:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a71a:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a71c:	4658      	mov	r0, fp
 800a71e:	f7fd fce7 	bl	80080f0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800a722:	e00c      	b.n	800a73e <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a724:	2403      	movs	r4, #3
 800a726:	e00a      	b.n	800a73e <LoRaMacInitialization+0x36e>
 800a728:	2403      	movs	r4, #3
 800a72a:	e008      	b.n	800a73e <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a72c:	2403      	movs	r4, #3
 800a72e:	e006      	b.n	800a73e <LoRaMacInitialization+0x36e>
 800a730:	2403      	movs	r4, #3
 800a732:	e004      	b.n	800a73e <LoRaMacInitialization+0x36e>
 800a734:	2403      	movs	r4, #3
 800a736:	e002      	b.n	800a73e <LoRaMacInitialization+0x36e>
 800a738:	2403      	movs	r4, #3
 800a73a:	e000      	b.n	800a73e <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800a73c:	2409      	movs	r4, #9
}
 800a73e:	4620      	mov	r0, r4
 800a740:	b00d      	add	sp, #52	; 0x34
 800a742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a746:	2411      	movs	r4, #17
 800a748:	e7f9      	b.n	800a73e <LoRaMacInitialization+0x36e>
 800a74a:	bf00      	nop
 800a74c:	20008000 	.word	0x20008000
 800a750:	200006bc 	.word	0x200006bc
 800a754:	01000400 	.word	0x01000400
 800a758:	20000bdc 	.word	0x20000bdc
 800a75c:	080097dd 	.word	0x080097dd
 800a760:	08009a81 	.word	0x08009a81
 800a764:	08009a29 	.word	0x08009a29
 800a768:	08008489 	.word	0x08008489
 800a76c:	200006b8 	.word	0x200006b8
 800a770:	08009d41 	.word	0x08009d41
 800a774:	08009ce1 	.word	0x08009ce1
 800a778:	080080a5 	.word	0x080080a5
 800a77c:	08009cad 	.word	0x08009cad
 800a780:	08009c79 	.word	0x08009c79
 800a784:	080145a0 	.word	0x080145a0
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a788:	2411      	movs	r4, #17
 800a78a:	e7d8      	b.n	800a73e <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a78c:	2413      	movs	r4, #19
 800a78e:	e7d6      	b.n	800a73e <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a790:	2411      	movs	r4, #17
 800a792:	e7d4      	b.n	800a73e <LoRaMacInitialization+0x36e>

0800a794 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800a794:	2000      	movs	r0, #0
 800a796:	4b02      	ldr	r3, [pc, #8]	; (800a7a0 <LoRaMacStart+0xc>)
 800a798:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	200006bc 	.word	0x200006bc

0800a7a4 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800a7a4:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800a7a6:	f7ff fdaf 	bl	800a308 <LoRaMacIsBusy>
 800a7aa:	b130      	cbz	r0, 800a7ba <LoRaMacStop+0x16>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800a7ac:	4b06      	ldr	r3, [pc, #24]	; (800a7c8 <LoRaMacStop+0x24>)
 800a7ae:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d006      	beq.n	800a7c4 <LoRaMacStop+0x20>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800a7b6:	2001      	movs	r0, #1
}
 800a7b8:	bd08      	pop	{r3, pc}
        MacCtx.MacState = LORAMAC_STOPPED;
 800a7ba:	4b03      	ldr	r3, [pc, #12]	; (800a7c8 <LoRaMacStop+0x24>)
 800a7bc:	2201      	movs	r2, #1
 800a7be:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800a7c2:	e7f9      	b.n	800a7b8 <LoRaMacStop+0x14>
        return LORAMAC_STATUS_OK;
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	e7f7      	b.n	800a7b8 <LoRaMacStop+0x14>
 800a7c8:	200006bc 	.word	0x200006bc

0800a7cc <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800a7cc:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800a7ce:	4c14      	ldr	r4, [pc, #80]	; (800a820 <LoRaMacHalt+0x54>)
 800a7d0:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800a7d4:	f007 fd4c 	bl	8012270 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800a7d8:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800a7dc:	f007 fd48 	bl	8012270 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a7e0:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a7e4:	f007 fd44 	bl	8012270 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800a7e8:	f204 4004 	addw	r0, r4, #1028	; 0x404
 800a7ec:	f007 fd40 	bl	8012270 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800a7f0:	f001 ff50 	bl	800c694 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800a7f4:	4b0b      	ldr	r3, [pc, #44]	; (800a824 <LoRaMacHalt+0x58>)
 800a7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f8:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800a7fa:	2500      	movs	r5, #0
 800a7fc:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 800a800:	4e09      	ldr	r6, [pc, #36]	; (800a828 <LoRaMacHalt+0x5c>)
 800a802:	4630      	mov	r0, r6
 800a804:	f7ff f964 	bl	8009ad0 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800a808:	f240 527c 	movw	r2, #1404	; 0x57c
 800a80c:	4631      	mov	r1, r6
 800a80e:	4807      	ldr	r0, [pc, #28]	; (800a82c <LoRaMacHalt+0x60>)
 800a810:	f005 fb31 	bl	800fe76 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 800a814:	2301      	movs	r3, #1
 800a816:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800a81a:	4628      	mov	r0, r5
 800a81c:	bd70      	pop	{r4, r5, r6, pc}
 800a81e:	bf00      	nop
 800a820:	200006bc 	.word	0x200006bc
 800a824:	080145a0 	.word	0x080145a0
 800a828:	20008000 	.word	0x20008000
 800a82c:	2000857c 	.word	0x2000857c

0800a830 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800a830:	b530      	push	{r4, r5, lr}
 800a832:	b08b      	sub	sp, #44	; 0x2c
 800a834:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a836:	4b32      	ldr	r3, [pc, #200]	; (800a900 <LoRaMacQueryTxPossible+0xd0>)
 800a838:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a83a:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a83c:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 800a840:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a844:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800a848:	f88d 300e 	strb.w	r3, [sp, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800a84c:	4b2d      	ldr	r3, [pc, #180]	; (800a904 <LoRaMacQueryTxPossible+0xd4>)
 800a84e:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800a852:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800a856:	2300      	movs	r3, #0
 800a858:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800a85a:	2900      	cmp	r1, #0
 800a85c:	d049      	beq.n	800a8f2 <LoRaMacQueryTxPossible+0xc2>
 800a85e:	460d      	mov	r5, r1

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800a860:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800a864:	4b26      	ldr	r3, [pc, #152]	; (800a900 <LoRaMacQueryTxPossible+0xd0>)
 800a866:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
 800a86a:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a86e:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a870:	4924      	ldr	r1, [pc, #144]	; (800a904 <LoRaMacQueryTxPossible+0xd4>)
 800a872:	f8b1 0400 	ldrh.w	r0, [r1, #1024]	; 0x400
 800a876:	f8ad 001c 	strh.w	r0, [sp, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800a87a:	f8b1 1402 	ldrh.w	r1, [r1, #1026]	; 0x402
 800a87e:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a882:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800a886:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a88a:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800a88e:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800a892:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a896:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800a89a:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800a89e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a8a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800a8a6:	ab04      	add	r3, sp, #16
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	f10d 030d 	add.w	r3, sp, #13
 800a8ae:	f10d 020e 	add.w	r2, sp, #14
 800a8b2:	f10d 010f 	add.w	r1, sp, #15
 800a8b6:	a805      	add	r0, sp, #20
 800a8b8:	f000 fe18 	bl	800b4ec <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a8bc:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800a8c0:	f7fd fd3a 	bl	8008338 <GetMaxAppPayloadWithoutFOptsLength>
 800a8c4:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a8c6:	a802      	add	r0, sp, #8
 800a8c8:	f002 fa58 	bl	800cd7c <LoRaMacCommandsGetSizeSerializedCmds>
 800a8cc:	b998      	cbnz	r0, 800a8f6 <LoRaMacQueryTxPossible+0xc6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800a8ce:	9b02      	ldr	r3, [sp, #8]
 800a8d0:	2b0f      	cmp	r3, #15
 800a8d2:	d80a      	bhi.n	800a8ea <LoRaMacQueryTxPossible+0xba>
 800a8d4:	786a      	ldrb	r2, [r5, #1]
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d807      	bhi.n	800a8ea <LoRaMacQueryTxPossible+0xba>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800a8de:	9b02      	ldr	r3, [sp, #8]
 800a8e0:	441c      	add	r4, r3
 800a8e2:	42a2      	cmp	r2, r4
 800a8e4:	d309      	bcc.n	800a8fa <LoRaMacQueryTxPossible+0xca>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800a8e6:	b00b      	add	sp, #44	; 0x2c
 800a8e8:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800a8ee:	2008      	movs	r0, #8
 800a8f0:	e7f9      	b.n	800a8e6 <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a8f2:	2003      	movs	r0, #3
 800a8f4:	e7f7      	b.n	800a8e6 <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a8f6:	2013      	movs	r0, #19
 800a8f8:	e7f5      	b.n	800a8e6 <LoRaMacQueryTxPossible+0xb6>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800a8fa:	2008      	movs	r0, #8
 800a8fc:	e7f3      	b.n	800a8e6 <LoRaMacQueryTxPossible+0xb6>
 800a8fe:	bf00      	nop
 800a900:	20008000 	.word	0x20008000
 800a904:	200006bc 	.word	0x200006bc

0800a908 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800a908:	2800      	cmp	r0, #0
 800a90a:	f000 813d 	beq.w	800ab88 <LoRaMacMibGetRequestConfirm+0x280>
{
 800a90e:	b510      	push	{r4, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800a914:	7800      	ldrb	r0, [r0, #0]
 800a916:	2839      	cmp	r0, #57	; 0x39
 800a918:	f200 8132 	bhi.w	800ab80 <LoRaMacMibGetRequestConfirm+0x278>
 800a91c:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a920:	0040003a 	.word	0x0040003a
 800a924:	004b0046 	.word	0x004b0046
 800a928:	00560050 	.word	0x00560050
 800a92c:	0130005c 	.word	0x0130005c
 800a930:	01300130 	.word	0x01300130
 800a934:	01300130 	.word	0x01300130
 800a938:	01300130 	.word	0x01300130
 800a93c:	00620130 	.word	0x00620130
 800a940:	006e0068 	.word	0x006e0068
 800a944:	0083007b 	.word	0x0083007b
 800a948:	0093008b 	.word	0x0093008b
 800a94c:	009b00a8 	.word	0x009b00a8
 800a950:	00bb00b5 	.word	0x00bb00b5
 800a954:	00c500c0 	.word	0x00c500c0
 800a958:	00cf00ca 	.word	0x00cf00ca
 800a95c:	00e500d4 	.word	0x00e500d4
 800a960:	00f700eb 	.word	0x00f700eb
 800a964:	00fd00f1 	.word	0x00fd00f1
 800a968:	01080102 	.word	0x01080102
 800a96c:	010d0115 	.word	0x010d0115
 800a970:	01300111 	.word	0x01300111
 800a974:	0130011b 	.word	0x0130011b
 800a978:	01300130 	.word	0x01300130
 800a97c:	01300130 	.word	0x01300130
 800a980:	01300130 	.word	0x01300130
 800a984:	01300130 	.word	0x01300130
 800a988:	01300130 	.word	0x01300130
 800a98c:	01300130 	.word	0x01300130
 800a990:	012a0124 	.word	0x012a0124
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800a994:	4b7d      	ldr	r3, [pc, #500]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800a996:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a99a:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800a99c:	b004      	add	sp, #16
 800a99e:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a9a0:	4b7a      	ldr	r3, [pc, #488]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800a9a2:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800a9a6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9a8:	2000      	movs	r0, #0
            break;
 800a9aa:	e7f7      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800a9ac:	f005 fa1c 	bl	800fde8 <SecureElementGetDevEui>
 800a9b0:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9b2:	2000      	movs	r0, #0
            break;
 800a9b4:	e7f2      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800a9b6:	f005 fa2d 	bl	800fe14 <SecureElementGetJoinEui>
 800a9ba:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9bc:	2000      	movs	r0, #0
            break;
 800a9be:	e7ed      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800a9c0:	4b72      	ldr	r3, [pc, #456]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800a9c2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800a9c6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9c8:	2000      	movs	r0, #0
            break;
 800a9ca:	e7e7      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800a9cc:	4b6f      	ldr	r3, [pc, #444]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800a9ce:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800a9d2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9d4:	2000      	movs	r0, #0
            break;
 800a9d6:	e7e1      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800a9d8:	4b6c      	ldr	r3, [pc, #432]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800a9da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a9de:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9e0:	2000      	movs	r0, #0
            break;
 800a9e2:	e7db      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800a9e4:	4b69      	ldr	r3, [pc, #420]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800a9e6:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800a9ea:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9ec:	2000      	movs	r0, #0
            break;
 800a9ee:	e7d5      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a9f0:	4b66      	ldr	r3, [pc, #408]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800a9f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9f6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9f8:	2000      	movs	r0, #0
            break;
 800a9fa:	e7cf      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS;
 800a9fc:	231c      	movs	r3, #28
 800a9fe:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800aa02:	a902      	add	r1, sp, #8
 800aa04:	4b61      	ldr	r3, [pc, #388]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800aa06:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aa0a:	f003 f86e 	bl	800daea <RegionGetPhyParam>
 800aa0e:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 800aa10:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa12:	2000      	movs	r0, #0
            break;
 800aa14:	e7c2      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800aa16:	3404      	adds	r4, #4
 800aa18:	4b5d      	ldr	r3, [pc, #372]	; (800ab90 <LoRaMacMibGetRequestConfirm+0x288>)
 800aa1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aa1e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa22:	2000      	movs	r0, #0
            break;
 800aa24:	e7ba      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800aa26:	3404      	adds	r4, #4
 800aa28:	4b5a      	ldr	r3, [pc, #360]	; (800ab94 <LoRaMacMibGetRequestConfirm+0x28c>)
 800aa2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aa2e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa32:	2000      	movs	r0, #0
            break;
 800aa34:	e7b2      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800aa36:	3404      	adds	r4, #4
 800aa38:	4b57      	ldr	r3, [pc, #348]	; (800ab98 <LoRaMacMibGetRequestConfirm+0x290>)
 800aa3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aa3e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa42:	2000      	movs	r0, #0
            break;
 800aa44:	e7aa      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800aa46:	3404      	adds	r4, #4
 800aa48:	4b54      	ldr	r3, [pc, #336]	; (800ab9c <LoRaMacMibGetRequestConfirm+0x294>)
 800aa4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aa4e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa52:	2000      	movs	r0, #0
            break;
 800aa54:	e7a2      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800aa56:	231a      	movs	r3, #26
 800aa58:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800aa5c:	a902      	add	r1, sp, #8
 800aa5e:	4b4b      	ldr	r3, [pc, #300]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800aa60:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aa64:	f003 f841 	bl	800daea <RegionGetPhyParam>
 800aa68:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800aa6a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa6c:	2000      	movs	r0, #0
            break;
 800aa6e:	e795      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800aa70:	2319      	movs	r3, #25
 800aa72:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800aa76:	a902      	add	r1, sp, #8
 800aa78:	4b44      	ldr	r3, [pc, #272]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800aa7a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aa7e:	f003 f834 	bl	800daea <RegionGetPhyParam>
 800aa82:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800aa84:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa86:	2000      	movs	r0, #0
            break;
 800aa88:	e788      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800aa8a:	4b40      	ldr	r3, [pc, #256]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800aa8c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800aa90:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa92:	2000      	movs	r0, #0
            break;
 800aa94:	e782      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800aa96:	4b3d      	ldr	r3, [pc, #244]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800aa98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa9a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa9c:	2000      	movs	r0, #0
            break;
 800aa9e:	e77d      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800aaa0:	4b3a      	ldr	r3, [pc, #232]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800aaa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaa4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aaa6:	2000      	movs	r0, #0
            break;
 800aaa8:	e778      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800aaaa:	4b38      	ldr	r3, [pc, #224]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800aaac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaae:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aab0:	2000      	movs	r0, #0
            break;
 800aab2:	e773      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800aab4:	4b35      	ldr	r3, [pc, #212]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800aab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aab8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aaba:	2000      	movs	r0, #0
            break;
 800aabc:	e76e      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800aabe:	4b33      	ldr	r3, [pc, #204]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800aac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aac2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aac4:	2000      	movs	r0, #0
            break;
 800aac6:	e769      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_MIN_TX_DR;
 800aac8:	2302      	movs	r3, #2
 800aaca:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800aace:	4b2f      	ldr	r3, [pc, #188]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800aad0:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800aad4:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800aad8:	a902      	add	r1, sp, #8
 800aada:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aade:	f003 f804 	bl	800daea <RegionGetPhyParam>
 800aae2:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800aae4:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aae6:	2000      	movs	r0, #0
            break;
 800aae8:	e758      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800aaea:	4b28      	ldr	r3, [pc, #160]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800aaec:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 800aaf0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aaf2:	2000      	movs	r0, #0
            break;
 800aaf4:	e752      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800aaf6:	4b25      	ldr	r3, [pc, #148]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800aaf8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800aafc:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aafe:	2000      	movs	r0, #0
            break;
 800ab00:	e74c      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800ab02:	4b22      	ldr	r3, [pc, #136]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800ab04:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800ab08:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab0a:	2000      	movs	r0, #0
            break;
 800ab0c:	e746      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ab0e:	4b1f      	ldr	r3, [pc, #124]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800ab10:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800ab14:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab16:	2000      	movs	r0, #0
            break;
 800ab18:	e740      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800ab1a:	4b1c      	ldr	r3, [pc, #112]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800ab1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab1e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab20:	2000      	movs	r0, #0
            break;
 800ab22:	e73b      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800ab24:	4b19      	ldr	r3, [pc, #100]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800ab26:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ab2a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab2c:	2000      	movs	r0, #0
            break;
 800ab2e:	e735      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800ab30:	4b16      	ldr	r3, [pc, #88]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800ab32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab34:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab36:	2000      	movs	r0, #0
            break;
 800ab38:	e730      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Contexts = &Nvm;
 800ab3a:	4b14      	ldr	r3, [pc, #80]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800ab3c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab3e:	2000      	movs	r0, #0
            break;
 800ab40:	e72c      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.BackupContexts = &NvmBackup;
 800ab42:	4b17      	ldr	r3, [pc, #92]	; (800aba0 <LoRaMacMibGetRequestConfirm+0x298>)
 800ab44:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab46:	2000      	movs	r0, #0
            break;
 800ab48:	e728      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800ab4a:	4b10      	ldr	r3, [pc, #64]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800ab4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ab50:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab52:	2000      	movs	r0, #0
            break;
 800ab54:	e722      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800ab56:	4b0d      	ldr	r3, [pc, #52]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800ab58:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ab5c:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800ab5e:	f003 f877 	bl	800dc50 <RegionGetVersion>
 800ab62:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab64:	2000      	movs	r0, #0
            break;
 800ab66:	e719      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800ab68:	4b08      	ldr	r3, [pc, #32]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800ab6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab6e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab70:	2000      	movs	r0, #0
            break;
 800ab72:	e713      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800ab74:	4b05      	ldr	r3, [pc, #20]	; (800ab8c <LoRaMacMibGetRequestConfirm+0x284>)
 800ab76:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800ab7a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab7c:	2000      	movs	r0, #0
            break;
 800ab7e:	e70d      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800ab80:	4620      	mov	r0, r4
 800ab82:	f001 fbf9 	bl	800c378 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800ab86:	e709      	b.n	800a99c <LoRaMacMibGetRequestConfirm+0x94>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ab88:	2003      	movs	r0, #3
}
 800ab8a:	4770      	bx	lr
 800ab8c:	20008000 	.word	0x20008000
 800ab90:	20008064 	.word	0x20008064
 800ab94:	200080a8 	.word	0x200080a8
 800ab98:	2000806c 	.word	0x2000806c
 800ab9c:	200080b0 	.word	0x200080b0
 800aba0:	2000857c 	.word	0x2000857c

0800aba4 <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800aba4:	2800      	cmp	r0, #0
 800aba6:	f000 8254 	beq.w	800b052 <LoRaMacMibSetRequestConfirm+0x4ae>
{
 800abaa:	b530      	push	{r4, r5, lr}
 800abac:	b085      	sub	sp, #20
 800abae:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800abb0:	4ba3      	ldr	r3, [pc, #652]	; (800ae40 <LoRaMacMibSetRequestConfirm+0x29c>)
 800abb2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800abb6:	f013 0f02 	tst.w	r3, #2
 800abba:	f040 824c 	bne.w	800b056 <LoRaMacMibSetRequestConfirm+0x4b2>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800abbe:	7805      	ldrb	r5, [r0, #0]
 800abc0:	2d39      	cmp	r5, #57	; 0x39
 800abc2:	f200 8243 	bhi.w	800b04c <LoRaMacMibSetRequestConfirm+0x4a8>
 800abc6:	e8df f015 	tbh	[pc, r5, lsl #1]
 800abca:	003a      	.short	0x003a
 800abcc:	00500047 	.word	0x00500047
 800abd0:	005e0057 	.word	0x005e0057
 800abd4:	006a0064 	.word	0x006a0064
 800abd8:	007b0070 	.word	0x007b0070
 800abdc:	00910086 	.word	0x00910086
 800abe0:	00a7009c 	.word	0x00a7009c
 800abe4:	00bd00b2 	.word	0x00bd00b2
 800abe8:	00d400c9 	.word	0x00d400c9
 800abec:	00da0241 	.word	0x00da0241
 800abf0:	011a0100 	.word	0x011a0100
 800abf4:	017d0153 	.word	0x017d0153
 800abf8:	018d016d 	.word	0x018d016d
 800abfc:	019d0198 	.word	0x019d0198
 800ac00:	01a701a2 	.word	0x01a701a2
 800ac04:	024101ac 	.word	0x024101ac
 800ac08:	01c601b1 	.word	0x01c601b1
 800ac0c:	01df01f3 	.word	0x01df01f3
 800ac10:	020e0207 	.word	0x020e0207
 800ac14:	021b0216 	.word	0x021b0216
 800ac18:	02410221 	.word	0x02410221
 800ac1c:	02410224 	.word	0x02410224
 800ac20:	02410241 	.word	0x02410241
 800ac24:	02410241 	.word	0x02410241
 800ac28:	02410241 	.word	0x02410241
 800ac2c:	02410241 	.word	0x02410241
 800ac30:	02410241 	.word	0x02410241
 800ac34:	02410241 	.word	0x02410241
 800ac38:	02350241 	.word	0x02350241
 800ac3c:	023b      	.short	0x023b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800ac3e:	7900      	ldrb	r0, [r0, #4]
 800ac40:	f7ff f95a 	bl	8009ef8 <SwitchClass>
            break;
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 800ac44:	b930      	cbnz	r0, 800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800ac46:	4a7e      	ldr	r2, [pc, #504]	; (800ae40 <LoRaMacMibSetRequestConfirm+0x29c>)
 800ac48:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ac4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac50:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800ac54:	b005      	add	sp, #20
 800ac56:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800ac58:	7903      	ldrb	r3, [r0, #4]
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	f000 81fd 	beq.w	800b05a <LoRaMacMibSetRequestConfirm+0x4b6>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800ac60:	4a78      	ldr	r2, [pc, #480]	; (800ae44 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ac62:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac66:	2000      	movs	r0, #0
 800ac68:	e7ed      	b.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800ac6a:	6840      	ldr	r0, [r0, #4]
 800ac6c:	f005 f8ae 	bl	800fdcc <SecureElementSetDevEui>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d0e8      	beq.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac74:	2003      	movs	r0, #3
 800ac76:	e7ed      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800ac78:	6840      	ldr	r0, [r0, #4]
 800ac7a:	f005 f8bb 	bl	800fdf4 <SecureElementSetJoinEui>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d0e1      	beq.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac82:	4628      	mov	r0, r5
 800ac84:	e7e6      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800ac86:	7902      	ldrb	r2, [r0, #4]
 800ac88:	4b6e      	ldr	r3, [pc, #440]	; (800ae44 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ac8a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac8e:	2000      	movs	r0, #0
 800ac90:	e7d9      	b.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800ac92:	6842      	ldr	r2, [r0, #4]
 800ac94:	4b6b      	ldr	r3, [pc, #428]	; (800ae44 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ac96:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac9a:	2000      	movs	r0, #0
 800ac9c:	e7d3      	b.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800ac9e:	6842      	ldr	r2, [r0, #4]
 800aca0:	4b68      	ldr	r3, [pc, #416]	; (800ae44 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800aca2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aca6:	2000      	movs	r0, #0
 800aca8:	e7cd      	b.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
            if( mibSet->Param.AppKey != NULL )
 800acaa:	6841      	ldr	r1, [r0, #4]
 800acac:	2900      	cmp	r1, #0
 800acae:	f000 81d6 	beq.w	800b05e <LoRaMacMibSetRequestConfirm+0x4ba>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800acb2:	2000      	movs	r0, #0
 800acb4:	f002 fd0c 	bl	800d6d0 <LoRaMacCryptoSetKey>
 800acb8:	2800      	cmp	r0, #0
 800acba:	d0c4      	beq.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800acbc:	2011      	movs	r0, #17
 800acbe:	e7c9      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkKey != NULL )
 800acc0:	6841      	ldr	r1, [r0, #4]
 800acc2:	2900      	cmp	r1, #0
 800acc4:	f000 81cd 	beq.w	800b062 <LoRaMacMibSetRequestConfirm+0x4be>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800acc8:	2001      	movs	r0, #1
 800acca:	f002 fd01 	bl	800d6d0 <LoRaMacCryptoSetKey>
 800acce:	2800      	cmp	r0, #0
 800acd0:	d0b9      	beq.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800acd2:	2011      	movs	r0, #17
 800acd4:	e7be      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkSKey != NULL )
 800acd6:	6841      	ldr	r1, [r0, #4]
 800acd8:	2900      	cmp	r1, #0
 800acda:	f000 81c4 	beq.w	800b066 <LoRaMacMibSetRequestConfirm+0x4c2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800acde:	2002      	movs	r0, #2
 800ace0:	f002 fcf6 	bl	800d6d0 <LoRaMacCryptoSetKey>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d0ae      	beq.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ace8:	2011      	movs	r0, #17
 800acea:	e7b3      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AppSKey != NULL )
 800acec:	6841      	ldr	r1, [r0, #4]
 800acee:	2900      	cmp	r1, #0
 800acf0:	f000 81bb 	beq.w	800b06a <LoRaMacMibSetRequestConfirm+0x4c6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800acf4:	2003      	movs	r0, #3
 800acf6:	f002 fceb 	bl	800d6d0 <LoRaMacCryptoSetKey>
 800acfa:	2800      	cmp	r0, #0
 800acfc:	d0a3      	beq.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800acfe:	2011      	movs	r0, #17
 800ad00:	e7a8      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKEKey != NULL )
 800ad02:	6841      	ldr	r1, [r0, #4]
 800ad04:	2900      	cmp	r1, #0
 800ad06:	f000 81b2 	beq.w	800b06e <LoRaMacMibSetRequestConfirm+0x4ca>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800ad0a:	207f      	movs	r0, #127	; 0x7f
 800ad0c:	f002 fce0 	bl	800d6d0 <LoRaMacCryptoSetKey>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	d098      	beq.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ad14:	2011      	movs	r0, #17
 800ad16:	e79d      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKey0 != NULL )
 800ad18:	6841      	ldr	r1, [r0, #4]
 800ad1a:	2900      	cmp	r1, #0
 800ad1c:	f000 81a9 	beq.w	800b072 <LoRaMacMibSetRequestConfirm+0x4ce>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800ad20:	2080      	movs	r0, #128	; 0x80
 800ad22:	f002 fcd5 	bl	800d6d0 <LoRaMacCryptoSetKey>
 800ad26:	2800      	cmp	r0, #0
 800ad28:	d08d      	beq.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ad2a:	2011      	movs	r0, #17
 800ad2c:	e792      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800ad2e:	6841      	ldr	r1, [r0, #4]
 800ad30:	2900      	cmp	r1, #0
 800ad32:	f000 81a0 	beq.w	800b076 <LoRaMacMibSetRequestConfirm+0x4d2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800ad36:	2081      	movs	r0, #129	; 0x81
 800ad38:	f002 fcca 	bl	800d6d0 <LoRaMacCryptoSetKey>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	d082      	beq.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ad40:	2011      	movs	r0, #17
 800ad42:	e787      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800ad44:	6841      	ldr	r1, [r0, #4]
 800ad46:	2900      	cmp	r1, #0
 800ad48:	f000 8197 	beq.w	800b07a <LoRaMacMibSetRequestConfirm+0x4d6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800ad4c:	2082      	movs	r0, #130	; 0x82
 800ad4e:	f002 fcbf 	bl	800d6d0 <LoRaMacCryptoSetKey>
 800ad52:	2800      	cmp	r0, #0
 800ad54:	f43f af77 	beq.w	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ad58:	2011      	movs	r0, #17
 800ad5a:	e77b      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800ad5c:	7900      	ldrb	r0, [r0, #4]
 800ad5e:	4b39      	ldr	r3, [pc, #228]	; (800ae44 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ad60:	f883 0105 	strb.w	r0, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800ad64:	4c38      	ldr	r4, [pc, #224]	; (800ae48 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800ad66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad68:	4798      	blx	r3
            Radio.Sleep( );
 800ad6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ad6c:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad6e:	2000      	movs	r0, #0
 800ad70:	e769      	b.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800ad72:	7902      	ldrb	r2, [r0, #4]
 800ad74:	4b33      	ldr	r3, [pc, #204]	; (800ae44 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ad76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad7a:	2000      	movs	r0, #0
 800ad7c:	e763      	b.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ad7e:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ad82:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ad86:	4b2f      	ldr	r3, [pc, #188]	; (800ae44 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ad88:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ad8c:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800ad90:	2207      	movs	r2, #7
 800ad92:	a901      	add	r1, sp, #4
 800ad94:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ad98:	f002 fec5 	bl	800db26 <RegionVerify>
 800ad9c:	b908      	cbnz	r0, 800ada2 <LoRaMacMibSetRequestConfirm+0x1fe>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ad9e:	2003      	movs	r0, #3
 800ada0:	e750      	b.n	800ac44 <LoRaMacMibSetRequestConfirm+0xa0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800ada2:	6863      	ldr	r3, [r4, #4]
 800ada4:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800ada6:	2200      	movs	r2, #0
 800ada8:	a901      	add	r1, sp, #4
 800adaa:	4b26      	ldr	r3, [pc, #152]	; (800ae44 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800adac:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800adb0:	f002 feb9 	bl	800db26 <RegionVerify>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	f000 8162 	beq.w	800b07e <LoRaMacMibSetRequestConfirm+0x4da>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800adba:	4b24      	ldr	r3, [pc, #144]	; (800ae4c <LoRaMacMibSetRequestConfirm+0x2a8>)
 800adbc:	3404      	adds	r4, #4
 800adbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 800adc2:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800adc6:	2000      	movs	r0, #0
 800adc8:	e73c      	b.n	800ac44 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800adca:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800adce:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800add2:	4b1c      	ldr	r3, [pc, #112]	; (800ae44 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800add4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800add8:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800addc:	2207      	movs	r2, #7
 800adde:	a901      	add	r1, sp, #4
 800ade0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ade4:	f002 fe9f 	bl	800db26 <RegionVerify>
 800ade8:	2800      	cmp	r0, #0
 800adea:	f000 814a 	beq.w	800b082 <LoRaMacMibSetRequestConfirm+0x4de>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800adee:	4b18      	ldr	r3, [pc, #96]	; (800ae50 <LoRaMacMibSetRequestConfirm+0x2ac>)
 800adf0:	3404      	adds	r4, #4
 800adf2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800adf6:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800adfa:	2000      	movs	r0, #0
 800adfc:	e722      	b.n	800ac44 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800adfe:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ae02:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ae06:	4b0f      	ldr	r3, [pc, #60]	; (800ae44 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ae08:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ae0c:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ae10:	2207      	movs	r2, #7
 800ae12:	a901      	add	r1, sp, #4
 800ae14:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ae18:	f002 fe85 	bl	800db26 <RegionVerify>
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	f000 8132 	beq.w	800b086 <LoRaMacMibSetRequestConfirm+0x4e2>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800ae22:	4b08      	ldr	r3, [pc, #32]	; (800ae44 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ae24:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800ae28:	3404      	adds	r4, #4
 800ae2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ae2e:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800ae32:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d00c      	beq.n	800ae54 <LoRaMacMibSetRequestConfirm+0x2b0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	e702      	b.n	800ac44 <LoRaMacMibSetRequestConfirm+0xa0>
 800ae3e:	bf00      	nop
 800ae40:	200006bc 	.word	0x200006bc
 800ae44:	20008000 	.word	0x20008000
 800ae48:	080145a0 	.word	0x080145a0
 800ae4c:	20008064 	.word	0x20008064
 800ae50:	200080a8 	.word	0x200080a8
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800ae54:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 800ae58:	f893 011c 	ldrb.w	r0, [r3, #284]	; 0x11c
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	f43f aef1 	beq.w	800ac44 <LoRaMacMibSetRequestConfirm+0xa0>
                    Radio.Sleep( );
 800ae62:	4b90      	ldr	r3, [pc, #576]	; (800b0a4 <LoRaMacMibSetRequestConfirm+0x500>)
 800ae64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae66:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800ae68:	f7fe fd82 	bl	8009970 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	e6e9      	b.n	800ac44 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ae70:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ae74:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ae78:	4b8b      	ldr	r3, [pc, #556]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ae7a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ae7e:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ae82:	2207      	movs	r2, #7
 800ae84:	a901      	add	r1, sp, #4
 800ae86:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ae8a:	f002 fe4c 	bl	800db26 <RegionVerify>
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	f000 80fb 	beq.w	800b08a <LoRaMacMibSetRequestConfirm+0x4e6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800ae94:	4b85      	ldr	r3, [pc, #532]	; (800b0ac <LoRaMacMibSetRequestConfirm+0x508>)
 800ae96:	3404      	adds	r4, #4
 800ae98:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ae9c:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aea0:	2000      	movs	r0, #0
 800aea2:	e6cf      	b.n	800ac44 <LoRaMacMibSetRequestConfirm+0xa0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800aea4:	6843      	ldr	r3, [r0, #4]
 800aea6:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800aeae:	a902      	add	r1, sp, #8
 800aeb0:	4b7d      	ldr	r3, [pc, #500]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800aeb2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aeb6:	f002 fe47 	bl	800db48 <RegionChanMaskSet>
 800aeba:	b108      	cbz	r0, 800aec0 <LoRaMacMibSetRequestConfirm+0x31c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aebc:	2000      	movs	r0, #0
 800aebe:	e6c1      	b.n	800ac44 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aec0:	2003      	movs	r0, #3
 800aec2:	e6c7      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800aec4:	6843      	ldr	r3, [r0, #4]
 800aec6:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800aec8:	2300      	movs	r3, #0
 800aeca:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800aece:	a902      	add	r1, sp, #8
 800aed0:	4b75      	ldr	r3, [pc, #468]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800aed2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aed6:	f002 fe37 	bl	800db48 <RegionChanMaskSet>
 800aeda:	b108      	cbz	r0, 800aee0 <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aedc:	2000      	movs	r0, #0
 800aede:	e6b1      	b.n	800ac44 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aee0:	2003      	movs	r0, #3
 800aee2:	e6b7      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800aee4:	7902      	ldrb	r2, [r0, #4]
 800aee6:	1e53      	subs	r3, r2, #1
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	2b0e      	cmp	r3, #14
 800aeec:	f200 80cf 	bhi.w	800b08e <LoRaMacMibSetRequestConfirm+0x4ea>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800aef0:	4b6d      	ldr	r3, [pc, #436]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800aef2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aef6:	2000      	movs	r0, #0
 800aef8:	e6a4      	b.n	800ac44 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800aefa:	6842      	ldr	r2, [r0, #4]
 800aefc:	4b6a      	ldr	r3, [pc, #424]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800aefe:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af00:	2000      	movs	r0, #0
 800af02:	e6a0      	b.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800af04:	6842      	ldr	r2, [r0, #4]
 800af06:	4b68      	ldr	r3, [pc, #416]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800af08:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af0a:	2000      	movs	r0, #0
 800af0c:	e69b      	b.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800af0e:	6842      	ldr	r2, [r0, #4]
 800af10:	4b65      	ldr	r3, [pc, #404]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800af12:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af14:	2000      	movs	r0, #0
 800af16:	e696      	b.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800af18:	6842      	ldr	r2, [r0, #4]
 800af1a:	4b63      	ldr	r3, [pc, #396]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800af1c:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af1e:	2000      	movs	r0, #0
 800af20:	e691      	b.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800af22:	6842      	ldr	r2, [r0, #4]
 800af24:	4b60      	ldr	r3, [pc, #384]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800af26:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af28:	2000      	movs	r0, #0
 800af2a:	e68c      	b.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800af2c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800af30:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800af34:	2206      	movs	r2, #6
 800af36:	a901      	add	r1, sp, #4
 800af38:	4b5b      	ldr	r3, [pc, #364]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800af3a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800af3e:	f002 fdf2 	bl	800db26 <RegionVerify>
 800af42:	2800      	cmp	r0, #0
 800af44:	f000 80a5 	beq.w	800b092 <LoRaMacMibSetRequestConfirm+0x4ee>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800af48:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800af4c:	4b56      	ldr	r3, [pc, #344]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800af4e:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af52:	2000      	movs	r0, #0
 800af54:	e676      	b.n	800ac44 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800af56:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800af5a:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800af5e:	4b52      	ldr	r3, [pc, #328]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800af60:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800af64:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800af68:	2205      	movs	r2, #5
 800af6a:	a901      	add	r1, sp, #4
 800af6c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800af70:	f002 fdd9 	bl	800db26 <RegionVerify>
 800af74:	2800      	cmp	r0, #0
 800af76:	f000 808e 	beq.w	800b096 <LoRaMacMibSetRequestConfirm+0x4f2>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800af7a:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800af7e:	4b4a      	ldr	r3, [pc, #296]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800af80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af84:	2000      	movs	r0, #0
 800af86:	e65d      	b.n	800ac44 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800af88:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800af8c:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800af90:	220a      	movs	r2, #10
 800af92:	a901      	add	r1, sp, #4
 800af94:	4b44      	ldr	r3, [pc, #272]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800af96:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800af9a:	f002 fdc4 	bl	800db26 <RegionVerify>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	d07b      	beq.n	800b09a <LoRaMacMibSetRequestConfirm+0x4f6>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800afa2:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800afa6:	4b40      	ldr	r3, [pc, #256]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800afa8:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800afac:	2000      	movs	r0, #0
 800afae:	e649      	b.n	800ac44 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800afb0:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800afb4:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800afb8:	2209      	movs	r2, #9
 800afba:	a901      	add	r1, sp, #4
 800afbc:	4b3a      	ldr	r3, [pc, #232]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800afbe:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800afc2:	f002 fdb0 	bl	800db26 <RegionVerify>
 800afc6:	2800      	cmp	r0, #0
 800afc8:	d069      	beq.n	800b09e <LoRaMacMibSetRequestConfirm+0x4fa>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800afca:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800afce:	4b36      	ldr	r3, [pc, #216]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800afd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800afd4:	2000      	movs	r0, #0
 800afd6:	e635      	b.n	800ac44 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800afd8:	6842      	ldr	r2, [r0, #4]
 800afda:	4b33      	ldr	r3, [pc, #204]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800afdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800afe0:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800afe2:	2000      	movs	r0, #0
 800afe4:	e62f      	b.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800afe6:	7902      	ldrb	r2, [r0, #4]
 800afe8:	4b2f      	ldr	r3, [pc, #188]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800afea:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800afee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aff2:	2000      	movs	r0, #0
 800aff4:	e627      	b.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800aff6:	6842      	ldr	r2, [r0, #4]
 800aff8:	4b2b      	ldr	r3, [pc, #172]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800affa:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800affc:	2000      	movs	r0, #0
 800affe:	e622      	b.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800b000:	6842      	ldr	r2, [r0, #4]
 800b002:	4b29      	ldr	r3, [pc, #164]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800b004:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b008:	2000      	movs	r0, #0
 800b00a:	e61c      	b.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
            status = RestoreNvmData( );
 800b00c:	f7fe fdc4 	bl	8009b98 <RestoreNvmData>
            break;
 800b010:	e618      	b.n	800ac44 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800b012:	7983      	ldrb	r3, [r0, #6]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d901      	bls.n	800b01c <LoRaMacMibSetRequestConfirm+0x478>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b018:	2003      	movs	r0, #3
 800b01a:	e61b      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800b01c:	6842      	ldr	r2, [r0, #4]
 800b01e:	4b22      	ldr	r3, [pc, #136]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800b020:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800b024:	6840      	ldr	r0, [r0, #4]
 800b026:	f002 fa07 	bl	800d438 <LoRaMacCryptoSetLrWanVersion>
 800b02a:	2800      	cmp	r0, #0
 800b02c:	f43f ae0a 	beq.w	800ac44 <LoRaMacMibSetRequestConfirm+0xa0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b030:	2011      	movs	r0, #17
 800b032:	e60f      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800b034:	6842      	ldr	r2, [r0, #4]
 800b036:	4b1c      	ldr	r3, [pc, #112]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800b038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b03c:	2000      	movs	r0, #0
 800b03e:	e602      	b.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800b040:	7902      	ldrb	r2, [r0, #4]
 800b042:	4b19      	ldr	r3, [pc, #100]	; (800b0a8 <LoRaMacMibSetRequestConfirm+0x504>)
 800b044:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b048:	2000      	movs	r0, #0
 800b04a:	e5fc      	b.n	800ac46 <LoRaMacMibSetRequestConfirm+0xa2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800b04c:	f001 f9ac 	bl	800c3a8 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800b050:	e5f8      	b.n	800ac44 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b052:	2003      	movs	r0, #3
}
 800b054:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800b056:	2001      	movs	r0, #1
 800b058:	e5fc      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b05a:	2003      	movs	r0, #3
 800b05c:	e5fa      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b05e:	2003      	movs	r0, #3
 800b060:	e5f8      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b062:	2003      	movs	r0, #3
 800b064:	e5f6      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b066:	2003      	movs	r0, #3
 800b068:	e5f4      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b06a:	2003      	movs	r0, #3
 800b06c:	e5f2      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b06e:	2003      	movs	r0, #3
 800b070:	e5f0      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b072:	2003      	movs	r0, #3
 800b074:	e5ee      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b076:	2003      	movs	r0, #3
 800b078:	e5ec      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b07a:	2003      	movs	r0, #3
 800b07c:	e5ea      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b07e:	2003      	movs	r0, #3
 800b080:	e5e8      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b082:	2003      	movs	r0, #3
 800b084:	e5e6      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b086:	2003      	movs	r0, #3
 800b088:	e5e4      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b08a:	2003      	movs	r0, #3
 800b08c:	e5e2      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b08e:	2003      	movs	r0, #3
 800b090:	e5e0      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b092:	2003      	movs	r0, #3
 800b094:	e5de      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b096:	2003      	movs	r0, #3
 800b098:	e5dc      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b09a:	2003      	movs	r0, #3
 800b09c:	e5da      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b09e:	2003      	movs	r0, #3
 800b0a0:	e5d8      	b.n	800ac54 <LoRaMacMibSetRequestConfirm+0xb0>
 800b0a2:	bf00      	nop
 800b0a4:	080145a0 	.word	0x080145a0
 800b0a8:	20008000 	.word	0x20008000
 800b0ac:	200080b0 	.word	0x200080b0

0800b0b0 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800b0b0:	b570      	push	{r4, r5, r6, lr}
 800b0b2:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	f000 80ea 	beq.w	800b294 <LoRaMacMlmeRequest+0x1e4>
 800b0c0:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800b0c2:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800b0c4:	f7ff f920 	bl	800a308 <LoRaMacIsBusy>
 800b0c8:	b118      	cbz	r0, 800b0d2 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800b0ca:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	b006      	add	sp, #24
 800b0d0:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800b0d2:	f001 ffe7 	bl	800d0a4 <LoRaMacConfirmQueueIsFull>
 800b0d6:	b108      	cbz	r0, 800b0dc <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800b0d8:	2401      	movs	r4, #1
 800b0da:	e7f7      	b.n	800b0cc <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b0dc:	f001 ffdc 	bl	800d098 <LoRaMacConfirmQueueGetCnt>
 800b0e0:	b308      	cbz	r0, 800b126 <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b0e2:	4b6d      	ldr	r3, [pc, #436]	; (800b298 <LoRaMacMlmeRequest+0x1e8>)
 800b0e4:	2101      	movs	r1, #1
 800b0e6:	f883 1459 	strb.w	r1, [r3, #1113]	; 0x459
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b0ea:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800b0ee:	f042 0204 	orr.w	r2, r2, #4
 800b0f2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    queueElement.Request = mlmeRequest->Type;
 800b0f6:	782b      	ldrb	r3, [r5, #0]
 800b0f8:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b0fc:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800b100:	2200      	movs	r2, #0
 800b102:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800b106:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800b10a:	461c      	mov	r4, r3
 800b10c:	3b01      	subs	r3, #1
 800b10e:	2b0c      	cmp	r3, #12
 800b110:	f200 80a6 	bhi.w	800b260 <LoRaMacMlmeRequest+0x1b0>
 800b114:	e8df f003 	tbb	[pc, r3]
 800b118:	5aa4a40d 	.word	0x5aa4a40d
 800b11c:	a4a4a464 	.word	0xa4a4a464
 800b120:	7695a46d 	.word	0x7695a46d
 800b124:	8c          	.byte	0x8c
 800b125:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800b126:	2214      	movs	r2, #20
 800b128:	2100      	movs	r1, #0
 800b12a:	485c      	ldr	r0, [pc, #368]	; (800b29c <LoRaMacMlmeRequest+0x1ec>)
 800b12c:	f004 febb 	bl	800fea6 <memset1>
 800b130:	e7d7      	b.n	800b0e2 <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800b132:	4b59      	ldr	r3, [pc, #356]	; (800b298 <LoRaMacMlmeRequest+0x1e8>)
 800b134:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b138:	f013 0f20 	tst.w	r3, #32
 800b13c:	d1c6      	bne.n	800b0cc <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800b13e:	792b      	ldrb	r3, [r5, #4]
 800b140:	2b02      	cmp	r3, #2
 800b142:	d003      	beq.n	800b14c <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800b144:	2b01      	cmp	r3, #1
 800b146:	d021      	beq.n	800b18c <LoRaMacMlmeRequest+0xdc>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b148:	2402      	movs	r4, #2
 800b14a:	e08a      	b.n	800b262 <LoRaMacMlmeRequest+0x1b2>
                ResetMacParameters( );
 800b14c:	f7fe fe24 	bl	8009d98 <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b150:	4c53      	ldr	r4, [pc, #332]	; (800b2a0 <LoRaMacMlmeRequest+0x1f0>)
 800b152:	2200      	movs	r2, #0
 800b154:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800b158:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b15c:	f002 fd4d 	bl	800dbfa <RegionAlternateDr>
 800b160:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b164:	2307      	movs	r3, #7
 800b166:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800b16a:	20ff      	movs	r0, #255	; 0xff
 800b16c:	f7fe ff4a 	bl	800a004 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800b170:	4604      	mov	r4, r0
 800b172:	2800      	cmp	r0, #0
 800b174:	d075      	beq.n	800b262 <LoRaMacMlmeRequest+0x1b2>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800b176:	4e4a      	ldr	r6, [pc, #296]	; (800b2a0 <LoRaMacMlmeRequest+0x1f0>)
 800b178:	2201      	movs	r2, #1
 800b17a:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800b17e:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800b182:	f002 fd3a 	bl	800dbfa <RegionAlternateDr>
 800b186:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800b18a:	e06a      	b.n	800b262 <LoRaMacMlmeRequest+0x1b2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800b18c:	4e44      	ldr	r6, [pc, #272]	; (800b2a0 <LoRaMacMlmeRequest+0x1f0>)
 800b18e:	2400      	movs	r4, #0
 800b190:	f886 4109 	strb.w	r4, [r6, #265]	; 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b194:	2302      	movs	r3, #2
 800b196:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b19a:	4669      	mov	r1, sp
 800b19c:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800b1a0:	f002 fcba 	bl	800db18 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800b1a4:	792b      	ldrb	r3, [r5, #4]
 800b1a6:	f886 311c 	strb.w	r3, [r6, #284]	; 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b1aa:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	f88d 3016 	strb.w	r3, [sp, #22]
                MacCtx.MacCallbacks->MacProcessNotify( );
 800b1b4:	4e38      	ldr	r6, [pc, #224]	; (800b298 <LoRaMacMlmeRequest+0x1e8>)
 800b1b6:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 800b1be:	f896 3495 	ldrb.w	r3, [r6, #1173]	; 0x495
 800b1c2:	f043 0320 	orr.w	r3, r3, #32
 800b1c6:	f886 3495 	strb.w	r3, [r6, #1173]	; 0x495
                status = LORAMAC_STATUS_OK;
 800b1ca:	e04a      	b.n	800b262 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	a904      	add	r1, sp, #16
 800b1d0:	2002      	movs	r0, #2
 800b1d2:	f001 fd5f 	bl	800cc94 <LoRaMacCommandsAddCmd>
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	d042      	beq.n	800b262 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b1dc:	2413      	movs	r4, #19
 800b1de:	e040      	b.n	800b262 <LoRaMacMlmeRequest+0x1b2>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800b1e0:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800b1e4:	b2d2      	uxtb	r2, r2
 800b1e6:	68a9      	ldr	r1, [r5, #8]
 800b1e8:	88a8      	ldrh	r0, [r5, #4]
 800b1ea:	f7fc ffe3 	bl	80081b4 <SetTxContinuousWave>
 800b1ee:	4604      	mov	r4, r0
            break;
 800b1f0:	e037      	b.n	800b262 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	a904      	add	r1, sp, #16
 800b1f6:	200d      	movs	r0, #13
 800b1f8:	f001 fd4c 	bl	800cc94 <LoRaMacCommandsAddCmd>
 800b1fc:	4604      	mov	r4, r0
 800b1fe:	b380      	cbz	r0, 800b262 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b200:	2413      	movs	r4, #19
 800b202:	e02e      	b.n	800b262 <LoRaMacMlmeRequest+0x1b2>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800b204:	4b26      	ldr	r3, [pc, #152]	; (800b2a0 <LoRaMacMlmeRequest+0x1f0>)
 800b206:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800b20a:	b10b      	cbz	r3, 800b210 <LoRaMacMlmeRequest+0x160>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b20c:	2402      	movs	r4, #2
 800b20e:	e028      	b.n	800b262 <LoRaMacMlmeRequest+0x1b2>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800b210:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800b212:	f004 0007 	and.w	r0, r4, #7
 800b216:	f001 f885 	bl	800c324 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800b21a:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800b21e:	2201      	movs	r2, #1
 800b220:	a904      	add	r1, sp, #16
 800b222:	2010      	movs	r0, #16
 800b224:	f001 fd36 	bl	800cc94 <LoRaMacCommandsAddCmd>
 800b228:	4604      	mov	r4, r0
 800b22a:	b1d0      	cbz	r0, 800b262 <LoRaMacMlmeRequest+0x1b2>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b22c:	2413      	movs	r4, #19
 800b22e:	e018      	b.n	800b262 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b230:	2200      	movs	r2, #0
 800b232:	a904      	add	r1, sp, #16
 800b234:	2012      	movs	r0, #18
 800b236:	f001 fd2d 	bl	800cc94 <LoRaMacCommandsAddCmd>
 800b23a:	4604      	mov	r4, r0
 800b23c:	b188      	cbz	r0, 800b262 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b23e:	2413      	movs	r4, #19
 800b240:	e00f      	b.n	800b262 <LoRaMacMlmeRequest+0x1b2>
            queueElement.RestrictCommonReadyToHandle = true;
 800b242:	2301      	movs	r3, #1
 800b244:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800b248:	f001 f84c 	bl	800c2e4 <LoRaMacClassBIsAcquisitionInProgress>
 800b24c:	b108      	cbz	r0, 800b252 <LoRaMacMlmeRequest+0x1a2>
                status = LORAMAC_STATUS_BUSY;
 800b24e:	2401      	movs	r4, #1
 800b250:	e007      	b.n	800b262 <LoRaMacMlmeRequest+0x1b2>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800b252:	f001 f827 	bl	800c2a4 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800b256:	2000      	movs	r0, #0
 800b258:	f000 fb5a 	bl	800b910 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800b25c:	2400      	movs	r4, #0
 800b25e:	e000      	b.n	800b262 <LoRaMacMlmeRequest+0x1b2>
    switch( mlmeRequest->Type )
 800b260:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b262:	4b0d      	ldr	r3, [pc, #52]	; (800b298 <LoRaMacMlmeRequest+0x1e8>)
 800b264:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800b268:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800b26a:	b17c      	cbz	r4, 800b28c <LoRaMacMlmeRequest+0x1dc>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b26c:	f001 ff14 	bl	800d098 <LoRaMacConfirmQueueGetCnt>
 800b270:	2800      	cmp	r0, #0
 800b272:	f47f af2b 	bne.w	800b0cc <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800b276:	4b08      	ldr	r3, [pc, #32]	; (800b298 <LoRaMacMlmeRequest+0x1e8>)
 800b278:	2100      	movs	r1, #0
 800b27a:	f883 141e 	strb.w	r1, [r3, #1054]	; 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b27e:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800b282:	f361 0282 	bfi	r2, r1, #2, #1
 800b286:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800b28a:	e71f      	b.n	800b0cc <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800b28c:	a805      	add	r0, sp, #20
 800b28e:	f001 fe3f 	bl	800cf10 <LoRaMacConfirmQueueAdd>
 800b292:	e71b      	b.n	800b0cc <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b294:	2403      	movs	r4, #3
 800b296:	e719      	b.n	800b0cc <LoRaMacMlmeRequest+0x1c>
 800b298:	200006bc 	.word	0x200006bc
 800b29c:	20000b14 	.word	0x20000b14
 800b2a0:	20008000 	.word	0x20008000

0800b2a4 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800b2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a8:	b091      	sub	sp, #68	; 0x44
 800b2aa:	9103      	str	r1, [sp, #12]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	f000 80de 	beq.w	800b46e <LoRaMacMcpsRequest+0x1ca>
 800b2b2:	f04f 0a00 	mov.w	sl, #0
 800b2b6:	4605      	mov	r5, r0
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800b2b8:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800b2bc:	f7ff f824 	bl	800a308 <LoRaMacIsBusy>
 800b2c0:	4680      	mov	r8, r0
 800b2c2:	b118      	cbz	r0, 800b2cc <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800b2c4:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800b2c6:	b011      	add	sp, #68	; 0x44
 800b2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800b2cc:	ac06      	add	r4, sp, #24
 800b2ce:	462e      	mov	r6, r5
 800b2d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b2d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b2d4:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800b2d8:	4651      	mov	r1, sl
 800b2da:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b2de:	4c66      	ldr	r4, [pc, #408]	; (800b478 <LoRaMacMcpsRequest+0x1d4>)
 800b2e0:	2214      	movs	r2, #20
 800b2e2:	f204 4044 	addw	r0, r4, #1092	; 0x444
 800b2e6:	f004 fdde 	bl	800fea6 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800b2f0:	4b62      	ldr	r3, [pc, #392]	; (800b47c <LoRaMacMcpsRequest+0x1d8>)
 800b2f2:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	d065      	beq.n	800b3c6 <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 800b2fa:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800b2fe:	2f01      	cmp	r7, #1
 800b300:	f000 8086 	beq.w	800b410 <LoRaMacMcpsRequest+0x16c>
 800b304:	2f03      	cmp	r7, #3
 800b306:	f000 8096 	beq.w	800b436 <LoRaMacMcpsRequest+0x192>
 800b30a:	2f00      	cmp	r7, #0
 800b30c:	d06d      	beq.n	800b3ea <LoRaMacMcpsRequest+0x146>
 800b30e:	f04f 0b00 	mov.w	fp, #0
 800b312:	f8cd b014 	str.w	fp, [sp, #20]
 800b316:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b31a:	2302      	movs	r3, #2
 800b31c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b320:	4e56      	ldr	r6, [pc, #344]	; (800b47c <LoRaMacMcpsRequest+0x1d8>)
 800b322:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
 800b326:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b32a:	a90e      	add	r1, sp, #56	; 0x38
 800b32c:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800b330:	f002 fbdb 	bl	800daea <RegionGetPhyParam>
 800b334:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b336:	b244      	sxtb	r4, r0
 800b338:	45a3      	cmp	fp, r4
 800b33a:	bfb8      	it	lt
 800b33c:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800b33e:	f896 9106 	ldrb.w	r9, [r6, #262]	; 0x106
 800b342:	f896 2109 	ldrb.w	r2, [r6, #265]	; 0x109
 800b346:	f896 111c 	ldrb.w	r1, [r6, #284]	; 0x11c
 800b34a:	4648      	mov	r0, r9
 800b34c:	f7fc ff04 	bl	8008158 <CheckForMinimumAbpDatarate>
 800b350:	4603      	mov	r3, r0
 800b352:	b900      	cbnz	r0, 800b356 <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b354:	465c      	mov	r4, fp
    if( readyToSend == true )
 800b356:	f1b8 0f00 	cmp.w	r8, #0
 800b35a:	f000 8082 	beq.w	800b462 <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800b35e:	f1b9 0f00 	cmp.w	r9, #0
 800b362:	d000      	beq.n	800b366 <LoRaMacMcpsRequest+0xc2>
 800b364:	b19b      	cbz	r3, 800b38e <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 800b366:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b36a:	4b44      	ldr	r3, [pc, #272]	; (800b47c <LoRaMacMcpsRequest+0x1d8>)
 800b36c:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800b370:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800b374:	2205      	movs	r2, #5
 800b376:	a90b      	add	r1, sp, #44	; 0x2c
 800b378:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b37c:	f002 fbd3 	bl	800db26 <RegionVerify>
 800b380:	2800      	cmp	r0, #0
 800b382:	d076      	beq.n	800b472 <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b384:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 800b388:	4b3c      	ldr	r3, [pc, #240]	; (800b47c <LoRaMacMcpsRequest+0x1d8>)
 800b38a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800b38e:	4b3a      	ldr	r3, [pc, #232]	; (800b478 <LoRaMacMcpsRequest+0x1d4>)
 800b390:	f8d3 149c 	ldr.w	r1, [r3, #1180]	; 0x49c
 800b394:	4b39      	ldr	r3, [pc, #228]	; (800b47c <LoRaMacMcpsRequest+0x1d8>)
 800b396:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800b39a:	f7fe f81d 	bl	80093d8 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800b39e:	9b03      	ldr	r3, [sp, #12]
 800b3a0:	9300      	str	r3, [sp, #0]
 800b3a2:	4653      	mov	r3, sl
 800b3a4:	9a05      	ldr	r2, [sp, #20]
 800b3a6:	9904      	ldr	r1, [sp, #16]
 800b3a8:	a80c      	add	r0, sp, #48	; 0x30
 800b3aa:	f7fe ff19 	bl	800a1e0 <Send>
        if( status == LORAMAC_STATUS_OK )
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d152      	bne.n	800b458 <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800b3b2:	4b31      	ldr	r3, [pc, #196]	; (800b478 <LoRaMacMcpsRequest+0x1d4>)
 800b3b4:	f883 7444 	strb.w	r7, [r3, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800b3b8:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800b3bc:	f042 0201 	orr.w	r2, r2, #1
 800b3c0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800b3c4:	e04e      	b.n	800b464 <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800b3c6:	4b2d      	ldr	r3, [pc, #180]	; (800b47c <LoRaMacMcpsRequest+0x1d8>)
 800b3c8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800b3cc:	2b02      	cmp	r3, #2
 800b3ce:	d194      	bne.n	800b2fa <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800b3d0:	4b2a      	ldr	r3, [pc, #168]	; (800b47c <LoRaMacMcpsRequest+0x1d8>)
 800b3d2:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d18f      	bne.n	800b2fa <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800b3da:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d18b      	bne.n	800b2fa <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	f88d 3018 	strb.w	r3, [sp, #24]
 800b3e8:	e787      	b.n	800b2fa <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800b3ea:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	f362 1347 	bfi	r3, r2, #5, #3
 800b3f4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800b3f8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b3fc:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800b3fe:	9b08      	ldr	r3, [sp, #32]
 800b400:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800b402:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800b406:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800b40a:	f04f 0801 	mov.w	r8, #1
            break;
 800b40e:	e784      	b.n	800b31a <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b410:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b414:	2204      	movs	r2, #4
 800b416:	f362 1347 	bfi	r3, r2, #5, #3
 800b41a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 800b41e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b422:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800b424:	9b08      	ldr	r3, [sp, #32]
 800b426:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800b428:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 800b42c:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800b430:	f04f 0801 	mov.w	r8, #1
            break;
 800b434:	e771      	b.n	800b31a <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b436:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b43a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800b43e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800b442:	9b07      	ldr	r3, [sp, #28]
 800b444:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800b446:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800b44a:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 800b44e:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800b452:	2300      	movs	r3, #0
 800b454:	9304      	str	r3, [sp, #16]
            break;
 800b456:	e760      	b.n	800b31a <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 800b458:	4b07      	ldr	r3, [pc, #28]	; (800b478 <LoRaMacMcpsRequest+0x1d4>)
 800b45a:	2200      	movs	r2, #0
 800b45c:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 800b460:	e000      	b.n	800b464 <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b462:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b464:	4b04      	ldr	r3, [pc, #16]	; (800b478 <LoRaMacMcpsRequest+0x1d4>)
 800b466:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800b46a:	612b      	str	r3, [r5, #16]
    return status;
 800b46c:	e72b      	b.n	800b2c6 <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b46e:	2003      	movs	r0, #3
 800b470:	e729      	b.n	800b2c6 <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800b472:	2003      	movs	r0, #3
 800b474:	e727      	b.n	800b2c6 <LoRaMacMcpsRequest+0x22>
 800b476:	bf00      	nop
 800b478:	200006bc 	.word	0x200006bc
 800b47c:	20008000 	.word	0x20008000

0800b480 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800b480:	b510      	push	{r4, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800b486:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b48a:	220f      	movs	r2, #15
 800b48c:	a901      	add	r1, sp, #4
 800b48e:	4b05      	ldr	r3, [pc, #20]	; (800b4a4 <LoRaMacTestSetDutyCycleOn+0x24>)
 800b490:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b494:	f002 fb47 	bl	800db26 <RegionVerify>
 800b498:	b110      	cbz	r0, 800b4a0 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800b49a:	4b02      	ldr	r3, [pc, #8]	; (800b4a4 <LoRaMacTestSetDutyCycleOn+0x24>)
 800b49c:	f883 4108 	strb.w	r4, [r3, #264]	; 0x108
    }
}
 800b4a0:	b002      	add	sp, #8
 800b4a2:	bd10      	pop	{r4, pc}
 800b4a4:	20008000 	.word	0x20008000

0800b4a8 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800b4a8:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800b4aa:	f7ff f97b 	bl	800a7a4 <LoRaMacStop>
 800b4ae:	b110      	cbz	r0, 800b4b6 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800b4b0:	2401      	movs	r4, #1
    }
}
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	bd38      	pop	{r3, r4, r5, pc}
 800b4b6:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800b4b8:	4d0a      	ldr	r5, [pc, #40]	; (800b4e4 <LoRaMacDeInitialization+0x3c>)
 800b4ba:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800b4be:	f006 fed7 	bl	8012270 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800b4c2:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800b4c6:	f006 fed3 	bl	8012270 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800b4ca:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800b4ce:	f006 fecf 	bl	8012270 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800b4d2:	f001 f8df 	bl	800c694 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( );
 800b4d6:	f7fe fc5f 	bl	8009d98 <ResetMacParameters>
        Radio.Sleep( );
 800b4da:	4b03      	ldr	r3, [pc, #12]	; (800b4e8 <LoRaMacDeInitialization+0x40>)
 800b4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4de:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800b4e0:	e7e7      	b.n	800b4b2 <LoRaMacDeInitialization+0xa>
 800b4e2:	bf00      	nop
 800b4e4:	200006bc 	.word	0x200006bc
 800b4e8:	080145a0 	.word	0x080145a0

0800b4ec <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800b4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f0:	b08b      	sub	sp, #44	; 0x2c
 800b4f2:	460f      	mov	r7, r1
 800b4f4:	4616      	mov	r6, r2
 800b4f6:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800b4f8:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800b4fc:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800b500:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800b504:	6842      	ldr	r2, [r0, #4]
 800b506:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b508:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800b50a:	f890 8001 	ldrb.w	r8, [r0, #1]
 800b50e:	f1b8 0f00 	cmp.w	r8, #0
 800b512:	d109      	bne.n	800b528 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800b514:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800b518:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800b51c:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800b520:	4640      	mov	r0, r8
 800b522:	b00b      	add	sp, #44	; 0x2c
 800b524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b528:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800b52a:	2302      	movs	r3, #2
 800b52c:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b530:	7bc3      	ldrb	r3, [r0, #15]
 800b532:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b536:	a908      	add	r1, sp, #32
 800b538:	7c00      	ldrb	r0, [r0, #16]
 800b53a:	f002 fad6 	bl	800daea <RegionGetPhyParam>
 800b53e:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800b540:	b243      	sxtb	r3, r0
 800b542:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800b544:	454b      	cmp	r3, r9
 800b546:	bfb8      	it	lt
 800b548:	464b      	movlt	r3, r9
 800b54a:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800b54c:	6862      	ldr	r2, [r4, #4]
 800b54e:	8923      	ldrh	r3, [r4, #8]
 800b550:	429a      	cmp	r2, r3
 800b552:	d201      	bcs.n	800b558 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800b554:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b558:	8961      	ldrh	r1, [r4, #10]
 800b55a:	440b      	add	r3, r1
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d224      	bcs.n	800b5aa <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800b560:	6863      	ldr	r3, [r4, #4]
 800b562:	8921      	ldrh	r1, [r4, #8]
 800b564:	8962      	ldrh	r2, [r4, #10]
 800b566:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800b56a:	4283      	cmp	r3, r0
 800b56c:	d332      	bcc.n	800b5d4 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800b56e:	1a5b      	subs	r3, r3, r1
 800b570:	fbb3 f1f2 	udiv	r1, r3, r2
 800b574:	fb02 3311 	mls	r3, r2, r1, r3
 800b578:	bb7b      	cbnz	r3, 800b5da <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800b57a:	9b01      	ldr	r3, [sp, #4]
 800b57c:	4599      	cmp	r9, r3
 800b57e:	dc03      	bgt.n	800b588 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800b580:	7823      	ldrb	r3, [r4, #0]
 800b582:	b9eb      	cbnz	r3, 800b5c0 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800b584:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b588:	2321      	movs	r3, #33	; 0x21
 800b58a:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800b58e:	9b00      	ldr	r3, [sp, #0]
 800b590:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b594:	7be3      	ldrb	r3, [r4, #15]
 800b596:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b59a:	a908      	add	r1, sp, #32
 800b59c:	7c20      	ldrb	r0, [r4, #16]
 800b59e:	f002 faa4 	bl	800daea <RegionGetPhyParam>
 800b5a2:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800b5a4:	fa4f f980 	sxtb.w	r9, r0
 800b5a8:	e7b4      	b.n	800b514 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800b5aa:	230a      	movs	r3, #10
 800b5ac:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b5b0:	a908      	add	r1, sp, #32
 800b5b2:	7c20      	ldrb	r0, [r4, #16]
 800b5b4:	f002 fa99 	bl	800daea <RegionGetPhyParam>
 800b5b8:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800b5ba:	fa4f fa80 	sxtb.w	sl, r0
 800b5be:	e7cf      	b.n	800b560 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b5c0:	2302      	movs	r3, #2
 800b5c2:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800b5c6:	a903      	add	r1, sp, #12
 800b5c8:	7c20      	ldrb	r0, [r4, #16]
 800b5ca:	f002 faa5 	bl	800db18 <RegionInitDefaults>
                    nbTrans = 1;
 800b5ce:	f04f 0b01 	mov.w	fp, #1
 800b5d2:	e7d9      	b.n	800b588 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800b5d4:	f8dd 9000 	ldr.w	r9, [sp]
 800b5d8:	e79c      	b.n	800b514 <LoRaMacAdrCalcNext+0x28>
 800b5da:	f8dd 9000 	ldr.w	r9, [sp]
 800b5de:	e799      	b.n	800b514 <LoRaMacAdrCalcNext+0x28>

0800b5e0 <BeaconCrc>:
static uint16_t BeaconCrc( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint16_t crc = 0x0000;

    if( buffer == NULL )
 800b5e0:	b300      	cbz	r0, 800b624 <BeaconCrc+0x44>
{
 800b5e2:	b500      	push	{lr}
 800b5e4:	4686      	mov	lr, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800b5e6:	f04f 0c00 	mov.w	ip, #0
    uint16_t crc = 0x0000;
 800b5ea:	4660      	mov	r0, ip
 800b5ec:	e012      	b.n	800b614 <BeaconCrc+0x34>
    {
        crc ^= ( uint16_t ) buffer[i] << 8;
        for( uint16_t j = 0; j < 8; ++j )
        {
            crc = ( crc & 0x8000 ) ? ( crc << 1 ) ^ polynom : ( crc << 1 );
 800b5ee:	f241 0221 	movw	r2, #4129	; 0x1021
 800b5f2:	ea82 0040 	eor.w	r0, r2, r0, lsl #1
 800b5f6:	b280      	uxth	r0, r0
        for( uint16_t j = 0; j < 8; ++j )
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	2b07      	cmp	r3, #7
 800b5fe:	d805      	bhi.n	800b60c <BeaconCrc+0x2c>
            crc = ( crc & 0x8000 ) ? ( crc << 1 ) ^ polynom : ( crc << 1 );
 800b600:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800b604:	d1f3      	bne.n	800b5ee <BeaconCrc+0xe>
 800b606:	0040      	lsls	r0, r0, #1
 800b608:	b280      	uxth	r0, r0
 800b60a:	e7f5      	b.n	800b5f8 <BeaconCrc+0x18>
    for( uint16_t i = 0; i < length; ++i )
 800b60c:	f10c 0c01 	add.w	ip, ip, #1
 800b610:	fa1f fc8c 	uxth.w	ip, ip
 800b614:	458c      	cmp	ip, r1
 800b616:	d207      	bcs.n	800b628 <BeaconCrc+0x48>
        crc ^= ( uint16_t ) buffer[i] << 8;
 800b618:	f81e 300c 	ldrb.w	r3, [lr, ip]
 800b61c:	ea80 2003 	eor.w	r0, r0, r3, lsl #8
        for( uint16_t j = 0; j < 8; ++j )
 800b620:	2300      	movs	r3, #0
 800b622:	e7eb      	b.n	800b5fc <BeaconCrc+0x1c>
        return 0;
 800b624:	2000      	movs	r0, #0
        }
    }

    return crc;
}
 800b626:	4770      	bx	lr
 800b628:	f85d fb04 	ldr.w	pc, [sp], #4

0800b62c <GetTemperature>:

static void GetTemperature( LoRaMacClassBCallback_t *callbacks, BeaconContext_t *beaconCtx )
{
    // Measure temperature, if available
    if( ( callbacks != NULL ) && ( callbacks->GetTemperatureLevel != NULL ) )
 800b62c:	b130      	cbz	r0, 800b63c <GetTemperature+0x10>
{
 800b62e:	b510      	push	{r4, lr}
 800b630:	460c      	mov	r4, r1
    if( ( callbacks != NULL ) && ( callbacks->GetTemperatureLevel != NULL ) )
 800b632:	6803      	ldr	r3, [r0, #0]
 800b634:	b10b      	cbz	r3, 800b63a <GetTemperature+0xe>
    {
        beaconCtx->Temperature = callbacks->GetTemperatureLevel( );
 800b636:	4798      	blx	r3
 800b638:	8060      	strh	r0, [r4, #2]
    }
}
 800b63a:	bd10      	pop	{r4, pc}
 800b63c:	4770      	bx	lr
	...

0800b640 <EnlargeWindowTimeout>:
}

static void EnlargeWindowTimeout( void )
{
    // Update beacon movement
    Ctx.BeaconCtx.BeaconWindowMovement *= CLASSB_WINDOW_MOVE_EXPANSION_FACTOR;
 800b640:	4a0f      	ldr	r2, [pc, #60]	; (800b680 <EnlargeWindowTimeout+0x40>)
 800b642:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b644:	005b      	lsls	r3, r3, #1
 800b646:	6313      	str	r3, [r2, #48]	; 0x30
    if( Ctx.BeaconCtx.BeaconWindowMovement > CLASSB_WINDOW_MOVE_EXPANSION_MAX )
 800b648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b64c:	d903      	bls.n	800b656 <EnlargeWindowTimeout+0x16>
    {
        Ctx.BeaconCtx.BeaconWindowMovement = CLASSB_WINDOW_MOVE_EXPANSION_MAX;
 800b64e:	4613      	mov	r3, r2
 800b650:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b654:	631a      	str	r2, [r3, #48]	; 0x30
    }
    // Update symbol timeout
    Ctx.BeaconCtx.SymbolTimeout *= CLASSB_BEACON_SYMBOL_TO_EXPANSION_FACTOR;
 800b656:	4a0a      	ldr	r2, [pc, #40]	; (800b680 <EnlargeWindowTimeout+0x40>)
 800b658:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 800b65a:	005b      	lsls	r3, r3, #1
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	8593      	strh	r3, [r2, #44]	; 0x2c
    if( Ctx.BeaconCtx.SymbolTimeout > CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX )
 800b660:	2bff      	cmp	r3, #255	; 0xff
 800b662:	d902      	bls.n	800b66a <EnlargeWindowTimeout+0x2a>
    {
        Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX;
 800b664:	4613      	mov	r3, r2
 800b666:	22ff      	movs	r2, #255	; 0xff
 800b668:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
    Ctx.PingSlotCtx.SymbolTimeout *= CLASSB_BEACON_SYMBOL_TO_EXPANSION_FACTOR;
 800b66a:	4a05      	ldr	r2, [pc, #20]	; (800b680 <EnlargeWindowTimeout+0x40>)
 800b66c:	88d3      	ldrh	r3, [r2, #6]
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	b29b      	uxth	r3, r3
 800b672:	80d3      	strh	r3, [r2, #6]
    if( Ctx.PingSlotCtx.SymbolTimeout > CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX )
 800b674:	2b1e      	cmp	r3, #30
 800b676:	d902      	bls.n	800b67e <EnlargeWindowTimeout+0x3e>
    {
        Ctx.PingSlotCtx.SymbolTimeout = CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX;
 800b678:	4613      	mov	r3, r2
 800b67a:	221e      	movs	r2, #30
 800b67c:	80da      	strh	r2, [r3, #6]
    }
}
 800b67e:	4770      	bx	lr
 800b680:	20000c84 	.word	0x20000c84

0800b684 <ResetWindowTimeout>:

static void ResetWindowTimeout( void )
{
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 800b684:	4b03      	ldr	r3, [pc, #12]	; (800b694 <ResetWindowTimeout+0x10>)
 800b686:	2208      	movs	r2, #8
 800b688:	859a      	strh	r2, [r3, #44]	; 0x2c
    Ctx.PingSlotCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 800b68a:	80da      	strh	r2, [r3, #6]
    Ctx.BeaconCtx.BeaconWindowMovement  = CLASSB_WINDOW_MOVE_DEFAULT;
 800b68c:	2202      	movs	r2, #2
 800b68e:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	20000c84 	.word	0x20000c84

0800b698 <CalcDelayForNextBeacon>:
static TimerTime_t CalcDelayForNextBeacon( TimerTime_t currentTime, TimerTime_t lastBeaconRx )
{
    TimerTime_t nextBeaconRxTime = 0;

    // Calculate the point in time of the next beacon
    nextBeaconRxTime = ( ( currentTime - lastBeaconRx ) % CLASSB_BEACON_INTERVAL );
 800b698:	1a41      	subs	r1, r0, r1
 800b69a:	4805      	ldr	r0, [pc, #20]	; (800b6b0 <CalcDelayForNextBeacon+0x18>)
 800b69c:	fba0 3001 	umull	r3, r0, r0, r1
 800b6a0:	0b40      	lsrs	r0, r0, #13
 800b6a2:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 800b6a6:	fb03 1010 	mls	r0, r3, r0, r1
    return ( CLASSB_BEACON_INTERVAL - nextBeaconRxTime );
}
 800b6aa:	1a18      	subs	r0, r3, r0
 800b6ac:	4770      	bx	lr
 800b6ae:	bf00      	nop
 800b6b0:	10624dd3 	.word	0x10624dd3

0800b6b4 <IndicateBeaconStatus>:

static void IndicateBeaconStatus( LoRaMacEventInfoStatus_t status )
{
    if( Ctx.BeaconCtx.Ctrl.ResumeBeaconing == 0 )
 800b6b4:	4b0f      	ldr	r3, [pc, #60]	; (800b6f4 <IndicateBeaconStatus+0x40>)
 800b6b6:	7b1b      	ldrb	r3, [r3, #12]
 800b6b8:	f013 0f20 	tst.w	r3, #32
 800b6bc:	d113      	bne.n	800b6e6 <IndicateBeaconStatus+0x32>
    {
        Ctx.LoRaMacClassBParams.MlmeIndication->MlmeIndication = MLME_BEACON;
 800b6be:	4b0d      	ldr	r3, [pc, #52]	; (800b6f4 <IndicateBeaconStatus+0x40>)
 800b6c0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b6c4:	210a      	movs	r1, #10
 800b6c6:	7011      	strb	r1, [r2, #0]
        Ctx.LoRaMacClassBParams.MlmeIndication->Status = status;
 800b6c8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b6cc:	7050      	strb	r0, [r2, #1]
        Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeInd = 1;
 800b6ce:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800b6d2:	780a      	ldrb	r2, [r1, #0]
 800b6d4:	f042 0208 	orr.w	r2, r2, #8
 800b6d8:	700a      	strb	r2, [r1, #0]

        Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MacDone = 1;
 800b6da:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800b6de:	7813      	ldrb	r3, [r2, #0]
 800b6e0:	f043 0320 	orr.w	r3, r3, #32
 800b6e4:	7013      	strb	r3, [r2, #0]
    }
    Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 0;
 800b6e6:	4b03      	ldr	r3, [pc, #12]	; (800b6f4 <IndicateBeaconStatus+0x40>)
 800b6e8:	7b1a      	ldrb	r2, [r3, #12]
 800b6ea:	f36f 1245 	bfc	r2, #5, #1
 800b6ee:	731a      	strb	r2, [r3, #12]
}
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop
 800b6f4:	20000c84 	.word	0x20000c84

0800b6f8 <ApplyGuardTime>:

static TimerTime_t ApplyGuardTime( TimerTime_t beaconEventTime )
{
    TimerTime_t timeGuard = beaconEventTime;

    if( timeGuard > CLASSB_BEACON_GUARD )
 800b6f8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800b6fc:	4298      	cmp	r0, r3
 800b6fe:	d901      	bls.n	800b704 <ApplyGuardTime+0xc>
    {
        timeGuard -= CLASSB_BEACON_GUARD;
 800b700:	f6a0 30b8 	subw	r0, r0, #3000	; 0xbb8
    }
    return timeGuard;
}
 800b704:	4770      	bx	lr

0800b706 <CalcPingNb>:
    return ApplyGuardTime( beaconEventTime );
}

static uint8_t CalcPingNb( uint16_t periodicity )
{
    return 128 / ( 1 << periodicity );
 800b706:	2380      	movs	r3, #128	; 0x80
 800b708:	fa43 f000 	asr.w	r0, r3, r0
}
 800b70c:	b2c0      	uxtb	r0, r0
 800b70e:	4770      	bx	lr

0800b710 <CalcPingPeriod>:

static uint16_t CalcPingPeriod( uint8_t pingNb )
{
    return CLASSB_BEACON_WINDOW_SLOTS / pingNb;
}
 800b710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b714:	fb93 f0f0 	sdiv	r0, r3, r0
 800b718:	4770      	bx	lr

0800b71a <CheckSlotPriority>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckSlotPriority( uint32_t currentAddress, uint8_t currentFPendingSet, uint8_t currentIsMulticast,
                               uint32_t address, uint8_t fPendingSet, uint8_t isMulticast )
{
 800b71a:	b500      	push	{lr}
 800b71c:	f89d c004 	ldrb.w	ip, [sp, #4]
 800b720:	f89d e008 	ldrb.w	lr, [sp, #8]
    if( currentFPendingSet != fPendingSet )
 800b724:	4561      	cmp	r1, ip
 800b726:	d003      	beq.n	800b730 <CheckSlotPriority+0x16>
    {
        if( currentFPendingSet < fPendingSet )
 800b728:	d20b      	bcs.n	800b742 <CheckSlotPriority+0x28>
        {
            // New slot sequence has priority. It does not matter
            // which type it is
            return true;
 800b72a:	2001      	movs	r0, #1
                return true;
            }
        }
    }
    return false;
}
 800b72c:	f85d fb04 	ldr.w	pc, [sp], #4
        if( currentIsMulticast != isMulticast )
 800b730:	4572      	cmp	r2, lr
 800b732:	d002      	beq.n	800b73a <CheckSlotPriority+0x20>
            if( currentIsMulticast < isMulticast )
 800b734:	d207      	bcs.n	800b746 <CheckSlotPriority+0x2c>
                return true;
 800b736:	2001      	movs	r0, #1
 800b738:	e7f8      	b.n	800b72c <CheckSlotPriority+0x12>
            if( currentAddress < address )
 800b73a:	4298      	cmp	r0, r3
 800b73c:	d305      	bcc.n	800b74a <CheckSlotPriority+0x30>
    return false;
 800b73e:	2000      	movs	r0, #0
 800b740:	e7f4      	b.n	800b72c <CheckSlotPriority+0x12>
        return false;
 800b742:	2000      	movs	r0, #0
 800b744:	e7f2      	b.n	800b72c <CheckSlotPriority+0x12>
            return false;
 800b746:	2000      	movs	r0, #0
 800b748:	e7f0      	b.n	800b72c <CheckSlotPriority+0x12>
                return true;
 800b74a:	2001      	movs	r0, #1
 800b74c:	e7ee      	b.n	800b72c <CheckSlotPriority+0x12>
	...

0800b750 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 800b750:	b508      	push	{r3, lr}
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;
 800b752:	4a05      	ldr	r2, [pc, #20]	; (800b768 <LoRaMacClassBPingSlotTimerEvent+0x18>)
 800b754:	7813      	ldrb	r3, [r2, #0]
 800b756:	f043 0302 	orr.w	r3, r3, #2
 800b75a:	7013      	strb	r3, [r2, #0]

    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 800b75c:	4b03      	ldr	r3, [pc, #12]	; (800b76c <LoRaMacClassBPingSlotTimerEvent+0x1c>)
 800b75e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b762:	b103      	cbz	r3, 800b766 <LoRaMacClassBPingSlotTimerEvent+0x16>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 800b764:	4798      	blx	r3
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b766:	bd08      	pop	{r3, pc}
 800b768:	20000d44 	.word	0x20000d44
 800b76c:	20000c84 	.word	0x20000c84

0800b770 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 800b770:	b508      	push	{r3, lr}
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;
 800b772:	4a05      	ldr	r2, [pc, #20]	; (800b788 <LoRaMacClassBMulticastSlotTimerEvent+0x18>)
 800b774:	7813      	ldrb	r3, [r2, #0]
 800b776:	f043 0304 	orr.w	r3, r3, #4
 800b77a:	7013      	strb	r3, [r2, #0]

    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 800b77c:	4b03      	ldr	r3, [pc, #12]	; (800b78c <LoRaMacClassBMulticastSlotTimerEvent+0x1c>)
 800b77e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b782:	b103      	cbz	r3, 800b786 <LoRaMacClassBMulticastSlotTimerEvent+0x16>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 800b784:	4798      	blx	r3
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b786:	bd08      	pop	{r3, pc}
 800b788:	20000d44 	.word	0x20000d44
 800b78c:	20000c84 	.word	0x20000c84

0800b790 <InitClassB>:
{
 800b790:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b792:	b085      	sub	sp, #20
    LoRaMacClassBEvents.Value = 0;
 800b794:	2500      	movs	r5, #0
 800b796:	4b18      	ldr	r3, [pc, #96]	; (800b7f8 <InitClassB+0x68>)
 800b798:	601d      	str	r5, [r3, #0]
    memset1( ( uint8_t* ) ClassBNvm, 0, sizeof( LoRaMacClassBNvmData_t ) );
 800b79a:	4e18      	ldr	r6, [pc, #96]	; (800b7fc <InitClassB+0x6c>)
 800b79c:	2218      	movs	r2, #24
 800b79e:	4629      	mov	r1, r5
 800b7a0:	6830      	ldr	r0, [r6, #0]
 800b7a2:	f004 fb80 	bl	800fea6 <memset1>
    memset1( ( uint8_t* ) &Ctx.PingSlotCtx, 0, sizeof( PingSlotContext_t ) );
 800b7a6:	4c16      	ldr	r4, [pc, #88]	; (800b800 <InitClassB+0x70>)
 800b7a8:	220c      	movs	r2, #12
 800b7aa:	4629      	mov	r1, r5
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f004 fb7a 	bl	800fea6 <memset1>
    memset1( ( uint8_t* ) &Ctx.BeaconCtx, 0, sizeof( BeaconContext_t ) );
 800b7b2:	f104 070c 	add.w	r7, r4, #12
 800b7b6:	223c      	movs	r2, #60	; 0x3c
 800b7b8:	4629      	mov	r1, r5
 800b7ba:	4638      	mov	r0, r7
 800b7bc:	f004 fb73 	bl	800fea6 <memset1>
    Ctx.BeaconCtx.Temperature = 25.0;
 800b7c0:	2319      	movs	r3, #25
 800b7c2:	81e3      	strh	r3, [r4, #14]
    GetTemperature( &Ctx.LoRaMacClassBCallbacks, &Ctx.BeaconCtx );
 800b7c4:	4639      	mov	r1, r7
 800b7c6:	f104 0094 	add.w	r0, r4, #148	; 0x94
 800b7ca:	f7ff ff2f 	bl	800b62c <GetTemperature>
    getPhy.Attribute = PHY_PING_SLOT_CHANNEL_DR;
 800b7ce:	2335      	movs	r3, #53	; 0x35
 800b7d0:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800b7d4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800b7d8:	a902      	add	r1, sp, #8
 800b7da:	7818      	ldrb	r0, [r3, #0]
 800b7dc:	f002 f985 	bl	800daea <RegionGetPhyParam>
 800b7e0:	9001      	str	r0, [sp, #4]
    ClassBNvm->PingSlotCtx.Datarate = ( int8_t )( phyParam.Value );
 800b7e2:	6833      	ldr	r3, [r6, #0]
 800b7e4:	7218      	strb	r0, [r3, #8]
    ClassBNvm->PingSlotCtx.FPendingSet = 0;
 800b7e6:	725d      	strb	r5, [r3, #9]
    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 800b7e8:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
    Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800b7ec:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
    Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800b7f0:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
}
 800b7f4:	b005      	add	sp, #20
 800b7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7f8:	20000d44 	.word	0x20000d44
 800b7fc:	20000c80 	.word	0x20000c80
 800b800:	20000c84 	.word	0x20000c84

0800b804 <InitClassBDefaults>:
{
 800b804:	b510      	push	{r4, lr}
 800b806:	b086      	sub	sp, #24
    LoRaMacClassBBeaconNvmData_t beaconCtx = ClassBNvm->BeaconCtx;
 800b808:	4c14      	ldr	r4, [pc, #80]	; (800b85c <InitClassBDefaults+0x58>)
 800b80a:	6823      	ldr	r3, [r4, #0]
 800b80c:	f103 020c 	add.w	r2, r3, #12
 800b810:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b814:	aa06      	add	r2, sp, #24
 800b816:	e902 0003 	stmdb	r2, {r0, r1}
    LoRaMacClassBPingSlotNvmData_t pingSlotCtx = ClassBNvm->PingSlotCtx;
 800b81a:	f10d 0c04 	add.w	ip, sp, #4
 800b81e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b822:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    InitClassB( );
 800b826:	f7ff ffb3 	bl	800b790 <InitClassB>
    ClassBNvm->BeaconCtx.Frequency = beaconCtx.Frequency;
 800b82a:	6823      	ldr	r3, [r4, #0]
 800b82c:	9a05      	ldr	r2, [sp, #20]
 800b82e:	611a      	str	r2, [r3, #16]
    ClassBNvm->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 800b830:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800b834:	7b1a      	ldrb	r2, [r3, #12]
 800b836:	f361 0200 	bfi	r2, r1, #0, #1
 800b83a:	731a      	strb	r2, [r3, #12]
    ClassBNvm->PingSlotCtx.Ctrl.CustomFreq = pingSlotCtx.Ctrl.CustomFreq;
 800b83c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b840:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800b844:	7819      	ldrb	r1, [r3, #0]
 800b846:	f362 0141 	bfi	r1, r2, #1, #1
 800b84a:	7019      	strb	r1, [r3, #0]
    ClassBNvm->PingSlotCtx.Frequency = pingSlotCtx.Frequency;
 800b84c:	9a02      	ldr	r2, [sp, #8]
 800b84e:	605a      	str	r2, [r3, #4]
    ClassBNvm->PingSlotCtx.Datarate = pingSlotCtx.Datarate;
 800b850:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 800b854:	721a      	strb	r2, [r3, #8]
}
 800b856:	b006      	add	sp, #24
 800b858:	bd10      	pop	{r4, pc}
 800b85a:	bf00      	nop
 800b85c:	20000c80 	.word	0x20000c80

0800b860 <CalcDownlinkFrequency>:
{
 800b860:	b500      	push	{lr}
 800b862:	b085      	sub	sp, #20
    getPhy.Attribute = PHY_PING_SLOT_CHANNEL_FREQ;
 800b864:	2334      	movs	r3, #52	; 0x34
 800b866:	f88d 3008 	strb.w	r3, [sp, #8]
    if( isBeacon == true )
 800b86a:	b111      	cbz	r1, 800b872 <CalcDownlinkFrequency+0x12>
        getPhy.Attribute = PHY_BEACON_CHANNEL_FREQ;
 800b86c:	232f      	movs	r3, #47	; 0x2f
 800b86e:	f88d 3008 	strb.w	r3, [sp, #8]
    getPhy.Channel = channel;
 800b872:	f88d 000c 	strb.w	r0, [sp, #12]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800b876:	4b05      	ldr	r3, [pc, #20]	; (800b88c <CalcDownlinkFrequency+0x2c>)
 800b878:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b87c:	a902      	add	r1, sp, #8
 800b87e:	7818      	ldrb	r0, [r3, #0]
 800b880:	f002 f933 	bl	800daea <RegionGetPhyParam>
 800b884:	9001      	str	r0, [sp, #4]
}
 800b886:	b005      	add	sp, #20
 800b888:	f85d fb04 	ldr.w	pc, [sp], #4
 800b88c:	20000c84 	.word	0x20000c84

0800b890 <CalcDownlinkChannelAndFrequency>:
{
 800b890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b894:	b084      	sub	sp, #16
 800b896:	4680      	mov	r8, r0
 800b898:	460d      	mov	r5, r1
 800b89a:	4616      	mov	r6, r2
    getPhy.Attribute = PHY_PING_SLOT_NB_CHANNELS;
 800b89c:	2236      	movs	r2, #54	; 0x36
 800b89e:	f88d 2008 	strb.w	r2, [sp, #8]
    if( isBeacon == true )
 800b8a2:	461f      	mov	r7, r3
 800b8a4:	b113      	cbz	r3, 800b8ac <CalcDownlinkChannelAndFrequency+0x1c>
        getPhy.Attribute = PHY_BEACON_NB_CHANNELS;
 800b8a6:	2332      	movs	r3, #50	; 0x32
 800b8a8:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800b8ac:	4b16      	ldr	r3, [pc, #88]	; (800b908 <CalcDownlinkChannelAndFrequency+0x78>)
 800b8ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b8b2:	a902      	add	r1, sp, #8
 800b8b4:	7818      	ldrb	r0, [r3, #0]
 800b8b6:	f002 f918 	bl	800daea <RegionGetPhyParam>
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	9001      	str	r0, [sp, #4]
    nbChannels = ( uint8_t ) phyParam.Value;
 800b8be:	b2c3      	uxtb	r3, r0
    if( nbChannels > 1 )
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d807      	bhi.n	800b8d4 <CalcDownlinkChannelAndFrequency+0x44>
    uint32_t channel = 0;
 800b8c4:	2000      	movs	r0, #0
    return CalcDownlinkFrequency( channel, isBeacon );
 800b8c6:	4639      	mov	r1, r7
 800b8c8:	b2c0      	uxtb	r0, r0
 800b8ca:	f7ff ffc9 	bl	800b860 <CalcDownlinkFrequency>
}
 800b8ce:	b004      	add	sp, #16
 800b8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        getPhy.Attribute = PHY_BEACON_CHANNEL_OFFSET;
 800b8d4:	2333      	movs	r3, #51	; 0x33
 800b8d6:	f88d 3008 	strb.w	r3, [sp, #8]
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800b8da:	4b0b      	ldr	r3, [pc, #44]	; (800b908 <CalcDownlinkChannelAndFrequency+0x78>)
 800b8dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b8e0:	a902      	add	r1, sp, #8
 800b8e2:	7818      	ldrb	r0, [r3, #0]
 800b8e4:	f002 f901 	bl	800daea <RegionGetPhyParam>
 800b8e8:	9001      	str	r0, [sp, #4]
        channel = devAddr + ( beaconTime / ( beaconInterval / 1000 ) );
 800b8ea:	4a08      	ldr	r2, [pc, #32]	; (800b90c <CalcDownlinkChannelAndFrequency+0x7c>)
 800b8ec:	fba2 3606 	umull	r3, r6, r2, r6
 800b8f0:	09b6      	lsrs	r6, r6, #6
 800b8f2:	fbb5 f5f6 	udiv	r5, r5, r6
 800b8f6:	4445      	add	r5, r8
        channel = channel % nbChannels;
 800b8f8:	b2e4      	uxtb	r4, r4
 800b8fa:	fbb5 f3f4 	udiv	r3, r5, r4
 800b8fe:	fb04 5413 	mls	r4, r4, r3, r5
        channel += offset;
 800b902:	fa54 f080 	uxtab	r0, r4, r0
 800b906:	e7de      	b.n	800b8c6 <CalcDownlinkChannelAndFrequency+0x36>
 800b908:	20000c84 	.word	0x20000c84
 800b90c:	10624dd3 	.word	0x10624dd3

0800b910 <LoRaMacClassBBeaconTimerEvent>:
{
 800b910:	b510      	push	{r4, lr}
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
 800b912:	f006 fc6d 	bl	80121f0 <UTIL_TIMER_GetCurrentTime>
 800b916:	4c08      	ldr	r4, [pc, #32]	; (800b938 <LoRaMacClassBBeaconTimerEvent+0x28>)
 800b918:	63e0      	str	r0, [r4, #60]	; 0x3c
    TimerStop( &Ctx.BeaconTimer );
 800b91a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800b91e:	f006 fca7 	bl	8012270 <UTIL_TIMER_Stop>
    LoRaMacClassBEvents.Events.Beacon = 1;
 800b922:	4a06      	ldr	r2, [pc, #24]	; (800b93c <LoRaMacClassBBeaconTimerEvent+0x2c>)
 800b924:	7813      	ldrb	r3, [r2, #0]
 800b926:	f043 0301 	orr.w	r3, r3, #1
 800b92a:	7013      	strb	r3, [r2, #0]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 800b92c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800b930:	b103      	cbz	r3, 800b934 <LoRaMacClassBBeaconTimerEvent+0x24>
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 800b932:	4798      	blx	r3
}
 800b934:	bd10      	pop	{r4, pc}
 800b936:	bf00      	nop
 800b938:	20000c84 	.word	0x20000c84
 800b93c:	20000d44 	.word	0x20000d44

0800b940 <CalculateBeaconRxWindowConfig>:
    rxConfig->WindowTimeout = currentSymbolTimeout;
 800b940:	6081      	str	r1, [r0, #8]
    rxConfig->WindowOffset = 0;
 800b942:	2300      	movs	r3, #0
 800b944:	60c3      	str	r3, [r0, #12]
    if( ( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 800b946:	4b13      	ldr	r3, [pc, #76]	; (800b994 <CalculateBeaconRxWindowConfig+0x54>)
 800b948:	7b1b      	ldrb	r3, [r3, #12]
 800b94a:	f013 0f12 	tst.w	r3, #18
 800b94e:	d100      	bne.n	800b952 <CalculateBeaconRxWindowConfig+0x12>
 800b950:	4770      	bx	lr
{
 800b952:	b530      	push	{r4, r5, lr}
 800b954:	b087      	sub	sp, #28
 800b956:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 800b958:	2331      	movs	r3, #49	; 0x31
 800b95a:	f88d 3010 	strb.w	r3, [sp, #16]
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800b95e:	4d0d      	ldr	r5, [pc, #52]	; (800b994 <CalculateBeaconRxWindowConfig+0x54>)
 800b960:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 800b964:	a904      	add	r1, sp, #16
 800b966:	7818      	ldrb	r0, [r3, #0]
 800b968:	f002 f8bf 	bl	800daea <RegionGetPhyParam>
 800b96c:	4601      	mov	r1, r0
 800b96e:	9003      	str	r0, [sp, #12]
        maxRxError = MAX( Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError,
 800b970:	f9b5 c044 	ldrsh.w	ip, [r5, #68]	; 0x44
 800b974:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
 800b978:	6813      	ldr	r3, [r2, #0]
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800b97a:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 800b97e:	7912      	ldrb	r2, [r2, #4]
 800b980:	7800      	ldrb	r0, [r0, #0]
 800b982:	9400      	str	r4, [sp, #0]
 800b984:	4563      	cmp	r3, ip
 800b986:	bf38      	it	cc
 800b988:	4663      	movcc	r3, ip
 800b98a:	b249      	sxtb	r1, r1
 800b98c:	f002 f8e4 	bl	800db58 <RegionComputeRxWindowParameters>
}
 800b990:	b007      	add	sp, #28
 800b992:	bd30      	pop	{r4, r5, pc}
 800b994:	20000c84 	.word	0x20000c84

0800b998 <TimerTempCompensation>:
{
 800b998:	b538      	push	{r3, r4, r5, lr}
 800b99a:	4604      	mov	r4, r0
  interim = (float)temperature - (t - tDev);
 800b99c:	4608      	mov	r0, r1
 800b99e:	f7f4 ffbd 	bl	800091c <__aeabi_i2f>
 800b9a2:	4914      	ldr	r1, [pc, #80]	; (800b9f4 <TimerTempCompensation+0x5c>)
 800b9a4:	f7f4 ff04 	bl	80007b0 <__aeabi_fsub>
 800b9a8:	4601      	mov	r1, r0
  ppm *=  interim * interim;
 800b9aa:	f7f5 f80b 	bl	80009c4 <__aeabi_fmul>
 800b9ae:	4912      	ldr	r1, [pc, #72]	; (800b9f8 <TimerTempCompensation+0x60>)
 800b9b0:	f7f5 f808 	bl	80009c4 <__aeabi_fmul>
 800b9b4:	4605      	mov	r5, r0
  interim = ((float) period * ppm) / 1000000.0f;
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	f7f4 ffac 	bl	8000914 <__aeabi_ui2f>
 800b9bc:	4604      	mov	r4, r0
 800b9be:	4629      	mov	r1, r5
 800b9c0:	f7f5 f800 	bl	80009c4 <__aeabi_fmul>
 800b9c4:	490d      	ldr	r1, [pc, #52]	; (800b9fc <TimerTempCompensation+0x64>)
 800b9c6:	f7f5 f8b1 	bl	8000b2c <__aeabi_fdiv>
 800b9ca:	4601      	mov	r1, r0
  interim += period;
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f7f4 fef1 	bl	80007b4 <__addsf3>
  interim = floor(interim);
 800b9d2:	f7f4 fd91 	bl	80004f8 <__aeabi_f2d>
 800b9d6:	f007 fe83 	bl	80136e0 <floor>
 800b9da:	f7f4 fe95 	bl	8000708 <__aeabi_d2f>
 800b9de:	4605      	mov	r5, r0
  if (interim < 0.0f)
 800b9e0:	2100      	movs	r1, #0
 800b9e2:	f7f5 f98d 	bl	8000d00 <__aeabi_fcmplt>
 800b9e6:	b900      	cbnz	r0, 800b9ea <TimerTempCompensation+0x52>
  interim = floor(interim);
 800b9e8:	462c      	mov	r4, r5
  return ( TimerTime_t ) interim;
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f7f5 f9d6 	bl	8000d9c <__aeabi_f2uiz>
}
 800b9f0:	bd38      	pop	{r3, r4, r5, pc}
 800b9f2:	bf00      	nop
 800b9f4:	41a00000 	.word	0x41a00000
 800b9f8:	bd1db22d 	.word	0xbd1db22d
 800b9fc:	49742400 	.word	0x49742400

0800ba00 <CalcNextSlotTime>:
{
 800ba00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba04:	4604      	mov	r4, r0
 800ba06:	460d      	mov	r5, r1
 800ba08:	4617      	mov	r7, r2
 800ba0a:	4698      	mov	r8, r3
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800ba0c:	f006 fbf0 	bl	80121f0 <UTIL_TIMER_GetCurrentTime>
 800ba10:	4606      	mov	r6, r0
    slotTime = ( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) % CLASSB_BEACON_INTERVAL );
 800ba12:	4b24      	ldr	r3, [pc, #144]	; (800baa4 <CalcNextSlotTime+0xa4>)
 800ba14:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ba18:	f006 fb74 	bl	8012104 <SysTimeToMs>
 800ba1c:	1a30      	subs	r0, r6, r0
 800ba1e:	4b22      	ldr	r3, [pc, #136]	; (800baa8 <CalcNextSlotTime+0xa8>)
 800ba20:	fba3 3c00 	umull	r3, ip, r3, r0
 800ba24:	ea4f 3c5c 	mov.w	ip, ip, lsr #13
 800ba28:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 800ba2c:	fb03 0c1c 	mls	ip, r3, ip, r0
    slotTime = currentTime - slotTime;
 800ba30:	eba6 0c0c 	sub.w	ip, r6, ip
    slotTime += CLASSB_BEACON_RESERVED;
 800ba34:	f60c 0c48 	addw	ip, ip, #2120	; 0x848
    slotTime += slotOffset * CLASSB_PING_SLOT_WINDOW;
 800ba38:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800ba3c:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
    if( slotTime < currentTime )
 800ba40:	42a6      	cmp	r6, r4
 800ba42:	d914      	bls.n	800ba6e <CalcNextSlotTime+0x6e>
        currentPingSlot = ( ( currentTime - slotTime ) /
 800ba44:	1b33      	subs	r3, r6, r4
                          ( pingPeriod * CLASSB_PING_SLOT_WINDOW ) ) + 1;
 800ba46:	ebc5 1205 	rsb	r2, r5, r5, lsl #4
 800ba4a:	0052      	lsls	r2, r2, #1
        currentPingSlot = ( ( currentTime - slotTime ) /
 800ba4c:	fbb3 f3f2 	udiv	r3, r3, r2
                          ( pingPeriod * CLASSB_PING_SLOT_WINDOW ) ) + 1;
 800ba50:	b2db      	uxtb	r3, r3
        currentPingSlot = ( ( currentTime - slotTime ) /
 800ba52:	3301      	adds	r3, #1
 800ba54:	b2db      	uxtb	r3, r3
        slotTime += ( ( TimerTime_t )( currentPingSlot * pingPeriod ) *
 800ba56:	fb03 f505 	mul.w	r5, r3, r5
 800ba5a:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800ba5e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    if( currentPingSlot < pingNb )
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	42bb      	cmp	r3, r7
 800ba66:	d304      	bcc.n	800ba72 <CalcNextSlotTime+0x72>
    return false;
 800ba68:	2000      	movs	r0, #0
}
 800ba6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t currentPingSlot = 0;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	e7f7      	b.n	800ba62 <CalcNextSlotTime+0x62>
        if( slotTime <= ( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - CLASSB_BEACON_GUARD - CLASSB_PING_SLOT_WINDOW ) )
 800ba72:	4b0e      	ldr	r3, [pc, #56]	; (800baac <CalcNextSlotTime+0xac>)
 800ba74:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ba78:	f006 fb44 	bl	8012104 <SysTimeToMs>
 800ba7c:	f6a0 30d6 	subw	r0, r0, #3030	; 0xbd6
 800ba80:	42a0      	cmp	r0, r4
 800ba82:	d201      	bcs.n	800ba88 <CalcNextSlotTime+0x88>
    return false;
 800ba84:	2000      	movs	r0, #0
 800ba86:	e7f0      	b.n	800ba6a <CalcNextSlotTime+0x6a>
            slotTime -= currentTime;
 800ba88:	1ba4      	subs	r4, r4, r6
            slotTime -= Radio.GetWakeupTime( );
 800ba8a:	4b09      	ldr	r3, [pc, #36]	; (800bab0 <CalcNextSlotTime+0xb0>)
 800ba8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba8e:	4798      	blx	r3
            slotTime = TimerTempCompensation( slotTime, Ctx.BeaconCtx.Temperature );
 800ba90:	4b08      	ldr	r3, [pc, #32]	; (800bab4 <CalcNextSlotTime+0xb4>)
 800ba92:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800ba96:	1a20      	subs	r0, r4, r0
 800ba98:	f7ff ff7e 	bl	800b998 <TimerTempCompensation>
            *timeOffset = slotTime;
 800ba9c:	f8c8 0000 	str.w	r0, [r8]
            return true;
 800baa0:	2001      	movs	r0, #1
 800baa2:	e7e2      	b.n	800ba6a <CalcNextSlotTime+0x6a>
 800baa4:	20000c9c 	.word	0x20000c9c
 800baa8:	10624dd3 	.word	0x10624dd3
 800baac:	20000ca4 	.word	0x20000ca4
 800bab0:	080145a0 	.word	0x080145a0
 800bab4:	20000c84 	.word	0x20000c84

0800bab8 <RxBeaconSetup>:
{
 800bab8:	b570      	push	{r4, r5, r6, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	4605      	mov	r5, r0
 800babe:	4616      	mov	r6, r2
    if( activateDefaultChannel == true )
 800bac0:	b349      	cbz	r1, 800bb16 <RxBeaconSetup+0x5e>
        frequency = CalcDownlinkFrequency( 0, true );
 800bac2:	2101      	movs	r1, #1
 800bac4:	2000      	movs	r0, #0
 800bac6:	f7ff fecb 	bl	800b860 <CalcDownlinkFrequency>
 800baca:	4604      	mov	r4, r0
    if( ClassBNvm->BeaconCtx.Ctrl.CustomFreq == 1 )
 800bacc:	4b1d      	ldr	r3, [pc, #116]	; (800bb44 <RxBeaconSetup+0x8c>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	7b1a      	ldrb	r2, [r3, #12]
 800bad2:	f012 0f01 	tst.w	r2, #1
 800bad6:	d000      	beq.n	800bada <RxBeaconSetup+0x22>
        frequency = ClassBNvm->BeaconCtx.Frequency;
 800bad8:	691c      	ldr	r4, [r3, #16]
    if( Ctx.BeaconCtx.Ctrl.BeaconChannelSet == 1 )
 800bada:	4b1b      	ldr	r3, [pc, #108]	; (800bb48 <RxBeaconSetup+0x90>)
 800badc:	7b1b      	ldrb	r3, [r3, #12]
 800bade:	f013 0f08 	tst.w	r3, #8
 800bae2:	d123      	bne.n	800bb2c <RxBeaconSetup+0x74>
    rxBeaconSetup.SymbolTimeout = symbolTimeout;
 800bae4:	f8ad 6004 	strh.w	r6, [sp, #4]
    rxBeaconSetup.RxTime = rxTime;
 800bae8:	9502      	str	r5, [sp, #8]
    rxBeaconSetup.Frequency = frequency;
 800baea:	9403      	str	r4, [sp, #12]
    RegionRxBeaconSetup( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &rxBeaconSetup, &Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 800baec:	4d16      	ldr	r5, [pc, #88]	; (800bb48 <RxBeaconSetup+0x90>)
 800baee:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 800baf2:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
 800baf6:	3204      	adds	r2, #4
 800baf8:	a901      	add	r1, sp, #4
 800bafa:	7818      	ldrb	r0, [r3, #0]
 800bafc:	f002 f89e 	bl	800dc3c <RegionRxBeaconSetup>
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Frequency = frequency;
 800bb00:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800bb04:	611c      	str	r4, [r3, #16]
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Datarate = Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate;
 800bb06:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
 800bb0a:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800bb0e:	7912      	ldrb	r2, [r2, #4]
 800bb10:	751a      	strb	r2, [r3, #20]
}
 800bb12:	b004      	add	sp, #16
 800bb14:	bd70      	pop	{r4, r5, r6, pc}
        frequency = CalcDownlinkChannelAndFrequency( 0, Ctx.BeaconCtx.BeaconTime.Seconds + ( CLASSB_BEACON_INTERVAL / 1000 ),
 800bb16:	4b0c      	ldr	r3, [pc, #48]	; (800bb48 <RxBeaconSetup+0x90>)
 800bb18:	6919      	ldr	r1, [r3, #16]
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 800bb20:	3180      	adds	r1, #128	; 0x80
 800bb22:	2000      	movs	r0, #0
 800bb24:	f7ff feb4 	bl	800b890 <CalcDownlinkChannelAndFrequency>
 800bb28:	4604      	mov	r4, r0
 800bb2a:	e7cf      	b.n	800bacc <RxBeaconSetup+0x14>
        Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 0;
 800bb2c:	4b06      	ldr	r3, [pc, #24]	; (800bb48 <RxBeaconSetup+0x90>)
 800bb2e:	7b1a      	ldrb	r2, [r3, #12]
 800bb30:	f36f 02c3 	bfc	r2, #3, #1
 800bb34:	731a      	strb	r2, [r3, #12]
        frequency = CalcDownlinkFrequency( Ctx.BeaconCtx.BeaconTimingChannel, true );
 800bb36:	2101      	movs	r1, #1
 800bb38:	f893 0034 	ldrb.w	r0, [r3, #52]	; 0x34
 800bb3c:	f7ff fe90 	bl	800b860 <CalcDownlinkFrequency>
 800bb40:	4604      	mov	r4, r0
 800bb42:	e7cf      	b.n	800bae4 <RxBeaconSetup+0x2c>
 800bb44:	20000c80 	.word	0x20000c80
 800bb48:	20000c84 	.word	0x20000c84

0800bb4c <ComputePingOffset>:
{
 800bb4c:	b570      	push	{r4, r5, r6, lr}
 800bb4e:	b088      	sub	sp, #32
 800bb50:	4605      	mov	r5, r0
 800bb52:	4614      	mov	r4, r2
 800bb54:	461e      	mov	r6, r3
    memset1( buffer, 0, 16 );
 800bb56:	2210      	movs	r2, #16
 800bb58:	2100      	movs	r1, #0
 800bb5a:	eb0d 0002 	add.w	r0, sp, r2
 800bb5e:	f004 f9a2 	bl	800fea6 <memset1>
    memset1( cipher, 0, 16 );
 800bb62:	2210      	movs	r2, #16
 800bb64:	2100      	movs	r1, #0
 800bb66:	4668      	mov	r0, sp
 800bb68:	f004 f99d 	bl	800fea6 <memset1>
    buffer[0] = ( time ) & 0xFF;
 800bb6c:	f88d 5010 	strb.w	r5, [sp, #16]
    buffer[1] = ( time >> 8 ) & 0xFF;
 800bb70:	0a2b      	lsrs	r3, r5, #8
 800bb72:	f88d 3011 	strb.w	r3, [sp, #17]
    buffer[2] = ( time >> 16 ) & 0xFF;
 800bb76:	0c2b      	lsrs	r3, r5, #16
 800bb78:	f88d 3012 	strb.w	r3, [sp, #18]
    buffer[3] = ( time >> 24 ) & 0xFF;
 800bb7c:	0e2d      	lsrs	r5, r5, #24
 800bb7e:	f88d 5013 	strb.w	r5, [sp, #19]
    buffer[4] = ( address ) & 0xFF;
 800bb82:	f88d 4014 	strb.w	r4, [sp, #20]
    buffer[5] = ( address >> 8 ) & 0xFF;
 800bb86:	0a23      	lsrs	r3, r4, #8
 800bb88:	f88d 3015 	strb.w	r3, [sp, #21]
    buffer[6] = ( address >> 16 ) & 0xFF;
 800bb8c:	0c23      	lsrs	r3, r4, #16
 800bb8e:	f88d 3016 	strb.w	r3, [sp, #22]
    buffer[7] = ( address >> 24 ) & 0xFF;
 800bb92:	0e24      	lsrs	r4, r4, #24
 800bb94:	f88d 4017 	strb.w	r4, [sp, #23]
    SecureElementAesEncrypt( buffer, 16, SLOT_RAND_ZERO_KEY, cipher );
 800bb98:	466b      	mov	r3, sp
 800bb9a:	2283      	movs	r2, #131	; 0x83
 800bb9c:	2110      	movs	r1, #16
 800bb9e:	eb0d 0001 	add.w	r0, sp, r1
 800bba2:	f004 f835 	bl	800fc10 <SecureElementAesEncrypt>
    result = ( ( ( uint32_t ) cipher[0] ) + ( ( ( uint32_t ) cipher[1] ) * 256 ) );
 800bba6:	f89d 2000 	ldrb.w	r2, [sp]
 800bbaa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bbae:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    *pingOffset = ( uint16_t )( result % pingPeriod );
 800bbb2:	fbb2 f3f6 	udiv	r3, r2, r6
 800bbb6:	fb06 2213 	mls	r2, r6, r3, r2
 800bbba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbbc:	801a      	strh	r2, [r3, #0]
}
 800bbbe:	b008      	add	sp, #32
 800bbc0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bbc4 <LoRaMacClassBProcessPingSlot>:
{
 800bbc4:	b530      	push	{r4, r5, lr}
 800bbc6:	b085      	sub	sp, #20
    TimerTime_t pingSlotTime = 0;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	9303      	str	r3, [sp, #12]
    switch( Ctx.PingSlotState )
 800bbcc:	4b6c      	ldr	r3, [pc, #432]	; (800bd80 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bbce:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d017      	beq.n	800bc06 <LoRaMacClassBProcessPingSlot+0x42>
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d050      	beq.n	800bc7c <LoRaMacClassBProcessPingSlot+0xb8>
 800bbda:	b123      	cbz	r3, 800bbe6 <LoRaMacClassBProcessPingSlot+0x22>
            Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800bbdc:	4b68      	ldr	r3, [pc, #416]	; (800bd80 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 800bbe4:	e02a      	b.n	800bc3c <LoRaMacClassBProcessPingSlot+0x78>
            ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 800bbe6:	4c66      	ldr	r4, [pc, #408]	; (800bd80 <LoRaMacClassBProcessPingSlot+0x1bc>)
                               *Ctx.LoRaMacClassBParams.LoRaMacDevAddr,
 800bbe8:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
                               ClassBNvm->PingSlotCtx.PingPeriod,
 800bbec:	4b65      	ldr	r3, [pc, #404]	; (800bd84 <LoRaMacClassBProcessPingSlot+0x1c0>)
 800bbee:	681b      	ldr	r3, [r3, #0]
            ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 800bbf0:	885b      	ldrh	r3, [r3, #2]
 800bbf2:	6812      	ldr	r2, [r2, #0]
 800bbf4:	1d21      	adds	r1, r4, #4
 800bbf6:	9100      	str	r1, [sp, #0]
 800bbf8:	6920      	ldr	r0, [r4, #16]
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	f7ff ffa6 	bl	800bb4c <ComputePingOffset>
            Ctx.PingSlotState = PINGSLOT_STATE_SET_TIMER;
 800bc00:	2301      	movs	r3, #1
 800bc02:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
            if( CalcNextSlotTime( Ctx.PingSlotCtx.PingOffset, ClassBNvm->PingSlotCtx.PingPeriod, ClassBNvm->PingSlotCtx.PingNb, &pingSlotTime ) == true )
 800bc06:	4b5f      	ldr	r3, [pc, #380]	; (800bd84 <LoRaMacClassBProcessPingSlot+0x1c0>)
 800bc08:	6819      	ldr	r1, [r3, #0]
 800bc0a:	ab03      	add	r3, sp, #12
 800bc0c:	784a      	ldrb	r2, [r1, #1]
 800bc0e:	8849      	ldrh	r1, [r1, #2]
 800bc10:	485b      	ldr	r0, [pc, #364]	; (800bd80 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bc12:	8880      	ldrh	r0, [r0, #4]
 800bc14:	f7ff fef4 	bl	800ba00 <CalcNextSlotTime>
 800bc18:	b180      	cbz	r0, 800bc3c <LoRaMacClassBProcessPingSlot+0x78>
                if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 )
 800bc1a:	4b59      	ldr	r3, [pc, #356]	; (800bd80 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bc1c:	7b1b      	ldrb	r3, [r3, #12]
 800bc1e:	f013 0f02 	tst.w	r3, #2
 800bc22:	d10d      	bne.n	800bc40 <LoRaMacClassBProcessPingSlot+0x7c>
                Ctx.PingSlotState = PINGSLOT_STATE_IDLE;
 800bc24:	4c56      	ldr	r4, [pc, #344]	; (800bd80 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bc26:	2302      	movs	r3, #2
 800bc28:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
                TimerSetValue( &Ctx.PingSlotTimer, pingSlotTime );
 800bc2c:	3464      	adds	r4, #100	; 0x64
 800bc2e:	9903      	ldr	r1, [sp, #12]
 800bc30:	4620      	mov	r0, r4
 800bc32:	f006 fbbd 	bl	80123b0 <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.PingSlotTimer );
 800bc36:	4620      	mov	r0, r4
 800bc38:	f006 fb74 	bl	8012324 <UTIL_TIMER_Start>
}
 800bc3c:	b005      	add	sp, #20
 800bc3e:	bd30      	pop	{r4, r5, pc}
                    maxRxError = MAX( Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError ,
 800bc40:	4c4f      	ldr	r4, [pc, #316]	; (800bd80 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bc42:	f9b4 c044 	ldrsh.w	ip, [r4, #68]	; 0x44
 800bc46:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800bc4a:	6813      	ldr	r3, [r2, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800bc4c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
                                                     ClassBNvm->PingSlotCtx.Datarate,
 800bc50:	494c      	ldr	r1, [pc, #304]	; (800bd84 <LoRaMacClassBProcessPingSlot+0x1c0>)
 800bc52:	6809      	ldr	r1, [r1, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800bc54:	7912      	ldrb	r2, [r2, #4]
 800bc56:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800bc5a:	7800      	ldrb	r0, [r0, #0]
 800bc5c:	4d4a      	ldr	r5, [pc, #296]	; (800bd88 <LoRaMacClassBProcessPingSlot+0x1c4>)
 800bc5e:	9500      	str	r5, [sp, #0]
 800bc60:	4563      	cmp	r3, ip
 800bc62:	bf38      	it	cc
 800bc64:	4663      	movcc	r3, ip
 800bc66:	f001 ff77 	bl	800db58 <RegionComputeRxWindowParameters>
                    Ctx.PingSlotCtx.SymbolTimeout = pingSlotRxConfig.WindowTimeout;
 800bc6a:	68ab      	ldr	r3, [r5, #8]
 800bc6c:	80e3      	strh	r3, [r4, #6]
                    if( ( int32_t )pingSlotTime > pingSlotRxConfig.WindowOffset )
 800bc6e:	68ea      	ldr	r2, [r5, #12]
 800bc70:	9b03      	ldr	r3, [sp, #12]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	dad6      	bge.n	800bc24 <LoRaMacClassBProcessPingSlot+0x60>
                        pingSlotTime += pingSlotRxConfig.WindowOffset;
 800bc76:	4413      	add	r3, r2
 800bc78:	9303      	str	r3, [sp, #12]
 800bc7a:	e7d3      	b.n	800bc24 <LoRaMacClassBProcessPingSlot+0x60>
            uint32_t frequency = ClassBNvm->PingSlotCtx.Frequency;
 800bc7c:	4b41      	ldr	r3, [pc, #260]	; (800bd84 <LoRaMacClassBProcessPingSlot+0x1c0>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	685d      	ldr	r5, [r3, #4]
            if( ClassBNvm->PingSlotCtx.Ctrl.CustomFreq == 0 )
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	f013 0f02 	tst.w	r3, #2
 800bc88:	d048      	beq.n	800bd1c <LoRaMacClassBProcessPingSlot+0x158>
            if( Ctx.PingSlotCtx.NextMulticastChannel != NULL )
 800bc8a:	4b3d      	ldr	r3, [pc, #244]	; (800bd80 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bc8c:	689a      	ldr	r2, [r3, #8]
 800bc8e:	2a00      	cmp	r2, #0
 800bc90:	d050      	beq.n	800bd34 <LoRaMacClassBProcessPingSlot+0x170>
                slotHasPriority = CheckSlotPriority( *Ctx.LoRaMacClassBParams.LoRaMacDevAddr, ClassBNvm->PingSlotCtx.FPendingSet, 0,
 800bc92:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800bc96:	4b3b      	ldr	r3, [pc, #236]	; (800bd84 <LoRaMacClassBProcessPingSlot+0x1c0>)
 800bc98:	6819      	ldr	r1, [r3, #0]
 800bc9a:	6853      	ldr	r3, [r2, #4]
 800bc9c:	7a49      	ldrb	r1, [r1, #9]
 800bc9e:	6800      	ldr	r0, [r0, #0]
 800bca0:	2401      	movs	r4, #1
 800bca2:	9401      	str	r4, [sp, #4]
 800bca4:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800bca8:	9200      	str	r2, [sp, #0]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f7ff fd35 	bl	800b71a <CheckSlotPriority>
            if( ( Ctx.MulticastSlotState != PINGSLOT_STATE_RX ) || ( slotHasPriority == true ) )
 800bcb0:	4b33      	ldr	r3, [pc, #204]	; (800bd80 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bcb2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800bcb6:	2b03      	cmp	r3, #3
 800bcb8:	d03e      	beq.n	800bd38 <LoRaMacClassBProcessPingSlot+0x174>
                if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 800bcba:	2b03      	cmp	r3, #3
 800bcbc:	d04b      	beq.n	800bd56 <LoRaMacClassBProcessPingSlot+0x192>
                Ctx.PingSlotState = PINGSLOT_STATE_RX;
 800bcbe:	4b30      	ldr	r3, [pc, #192]	; (800bd80 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bcc0:	2203      	movs	r2, #3
 800bcc2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                pingSlotRxConfig.Datarate = ClassBNvm->PingSlotCtx.Datarate;
 800bcc6:	4a2f      	ldr	r2, [pc, #188]	; (800bd84 <LoRaMacClassBProcessPingSlot+0x1c0>)
 800bcc8:	6812      	ldr	r2, [r2, #0]
 800bcca:	f992 2008 	ldrsb.w	r2, [r2, #8]
 800bcce:	4c2e      	ldr	r4, [pc, #184]	; (800bd88 <LoRaMacClassBProcessPingSlot+0x1c4>)
 800bcd0:	7062      	strb	r2, [r4, #1]
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800bcd2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800bcd6:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 800bcda:	7421      	strb	r1, [r4, #16]
                pingSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport; /* ST_WORKAROUND: keep repeater feature */
 800bcdc:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 800bce0:	7462      	strb	r2, [r4, #17]
                pingSlotRxConfig.Frequency = frequency;
 800bce2:	6065      	str	r5, [r4, #4]
                pingSlotRxConfig.RxContinuous = false;
 800bce4:	2200      	movs	r2, #0
 800bce6:	74a2      	strb	r2, [r4, #18]
                pingSlotRxConfig.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800bce8:	2204      	movs	r2, #4
 800bcea:	74e2      	strb	r2, [r4, #19]
                pingSlotRxConfig.NetworkActivation = *Ctx.LoRaMacClassBParams.NetworkActivation;
 800bcec:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800bcf0:	7812      	ldrb	r2, [r2, #0]
 800bcf2:	7522      	strb	r2, [r4, #20]
                RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &pingSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 800bcf4:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 800bcf8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bcfc:	3204      	adds	r2, #4
 800bcfe:	4621      	mov	r1, r4
 800bd00:	7800      	ldrb	r0, [r0, #0]
 800bd02:	f001 ff34 	bl	800db6e <RegionRxConfig>
                if( pingSlotRxConfig.RxContinuous == false )
 800bd06:	7ca3      	ldrb	r3, [r4, #18]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d134      	bne.n	800bd76 <LoRaMacClassBProcessPingSlot+0x1b2>
                    Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 800bd0c:	4b1f      	ldr	r3, [pc, #124]	; (800bd8c <LoRaMacClassBProcessPingSlot+0x1c8>)
 800bd0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd10:	4a1b      	ldr	r2, [pc, #108]	; (800bd80 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bd12:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 800bd16:	6890      	ldr	r0, [r2, #8]
 800bd18:	4798      	blx	r3
 800bd1a:	e78f      	b.n	800bc3c <LoRaMacClassBProcessPingSlot+0x78>
                frequency = CalcDownlinkChannelAndFrequency( *Ctx.LoRaMacClassBParams.LoRaMacDevAddr, Ctx.BeaconCtx.BeaconTime.Seconds,
 800bd1c:	4918      	ldr	r1, [pc, #96]	; (800bd80 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bd1e:	f8d1 00ac 	ldr.w	r0, [r1, #172]	; 0xac
 800bd22:	2300      	movs	r3, #0
 800bd24:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 800bd28:	6909      	ldr	r1, [r1, #16]
 800bd2a:	6800      	ldr	r0, [r0, #0]
 800bd2c:	f7ff fdb0 	bl	800b890 <CalcDownlinkChannelAndFrequency>
 800bd30:	4605      	mov	r5, r0
 800bd32:	e7aa      	b.n	800bc8a <LoRaMacClassBProcessPingSlot+0xc6>
    bool slotHasPriority = false;
 800bd34:	2000      	movs	r0, #0
 800bd36:	e7bb      	b.n	800bcb0 <LoRaMacClassBProcessPingSlot+0xec>
            if( ( Ctx.MulticastSlotState != PINGSLOT_STATE_RX ) || ( slotHasPriority == true ) )
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	d1be      	bne.n	800bcba <LoRaMacClassBProcessPingSlot+0xf6>
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800bd3c:	4c10      	ldr	r4, [pc, #64]	; (800bd80 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bd3e:	2300      	movs	r3, #0
 800bd40:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 800bd44:	3464      	adds	r4, #100	; 0x64
 800bd46:	211e      	movs	r1, #30
 800bd48:	4620      	mov	r0, r4
 800bd4a:	f006 fb31 	bl	80123b0 <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.PingSlotTimer );
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f006 fae8 	bl	8012324 <UTIL_TIMER_Start>
 800bd54:	e772      	b.n	800bc3c <LoRaMacClassBProcessPingSlot+0x78>
                    Radio.Standby( );
 800bd56:	4b0d      	ldr	r3, [pc, #52]	; (800bd8c <LoRaMacClassBProcessPingSlot+0x1c8>)
 800bd58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd5a:	4798      	blx	r3
                    Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800bd5c:	4c08      	ldr	r4, [pc, #32]	; (800bd80 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bd5e:	2300      	movs	r3, #0
 800bd60:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
                    TimerSetValue( &Ctx.MulticastSlotTimer, CLASSB_PING_SLOT_WINDOW );
 800bd64:	347c      	adds	r4, #124	; 0x7c
 800bd66:	211e      	movs	r1, #30
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f006 fb21 	bl	80123b0 <UTIL_TIMER_SetPeriod>
                    TimerStart( &Ctx.MulticastSlotTimer );
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f006 fad8 	bl	8012324 <UTIL_TIMER_Start>
 800bd74:	e7a3      	b.n	800bcbe <LoRaMacClassBProcessPingSlot+0xfa>
                    Radio.Rx( 0 ); // Continuous mode
 800bd76:	4b05      	ldr	r3, [pc, #20]	; (800bd8c <LoRaMacClassBProcessPingSlot+0x1c8>)
 800bd78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd7a:	2000      	movs	r0, #0
 800bd7c:	4798      	blx	r3
 800bd7e:	e75d      	b.n	800bc3c <LoRaMacClassBProcessPingSlot+0x78>
 800bd80:	20000c84 	.word	0x20000c84
 800bd84:	20000c80 	.word	0x20000c80
 800bd88:	20000d60 	.word	0x20000d60
 800bd8c:	080145a0 	.word	0x080145a0

0800bd90 <LoRaMacClassBProcessMulticastSlot>:

#if ( LORAMAC_CLASSB_ENABLED == 1 )
static void LoRaMacClassBProcessMulticastSlot( void )
{
 800bd90:	b570      	push	{r4, r5, r6, lr}
 800bd92:	b084      	sub	sp, #16
    static RxConfigParams_t multicastSlotRxConfig;
    TimerTime_t multicastSlotTime = 0;
    TimerTime_t slotTime = 0;
 800bd94:	2300      	movs	r3, #0
 800bd96:	9303      	str	r3, [sp, #12]
    MulticastCtx_t *cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 800bd98:	4b7b      	ldr	r3, [pc, #492]	; (800bf88 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800bd9a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint32_t maxRxError = 0;
    bool slotHasPriority = false;
#endif /* LORAMAC_VERSION */

    if( cur == NULL )
 800bd9e:	2d00      	cmp	r5, #0
 800bda0:	d054      	beq.n	800be4c <LoRaMacClassBProcessMulticastSlot+0xbc>
    {
        return;
    }

    if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 800bda2:	f893 404a 	ldrb.w	r4, [r3, #74]	; 0x4a
 800bda6:	2c03      	cmp	r4, #3
 800bda8:	d050      	beq.n	800be4c <LoRaMacClassBProcessMulticastSlot+0xbc>
    {
        // A multicast slot is already open
        return;
    }

    switch( Ctx.MulticastSlotState )
 800bdaa:	2c01      	cmp	r4, #1
 800bdac:	d01a      	beq.n	800bde4 <LoRaMacClassBProcessMulticastSlot+0x54>
 800bdae:	2c02      	cmp	r4, #2
 800bdb0:	d066      	beq.n	800be80 <LoRaMacClassBProcessMulticastSlot+0xf0>
 800bdb2:	b18c      	cbz	r4, 800bdd8 <LoRaMacClassBProcessMulticastSlot+0x48>
#endif /* LORAMAC_VERSION */
            break;
        }
        default:
        {
            Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800bdb4:	4b74      	ldr	r3, [pc, #464]	; (800bf88 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            break;
 800bdbc:	e046      	b.n	800be4c <LoRaMacClassBProcessMulticastSlot+0xbc>
                ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 800bdbe:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800bdc0:	686a      	ldr	r2, [r5, #4]
 800bdc2:	f105 0128 	add.w	r1, r5, #40	; 0x28
 800bdc6:	9100      	str	r1, [sp, #0]
 800bdc8:	496f      	ldr	r1, [pc, #444]	; (800bf88 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800bdca:	6908      	ldr	r0, [r1, #16]
 800bdcc:	2100      	movs	r1, #0
 800bdce:	f7ff febd 	bl	800bb4c <ComputePingOffset>
                cur++;
 800bdd2:	352c      	adds	r5, #44	; 0x2c
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
 800bdd4:	3401      	adds	r4, #1
 800bdd6:	b2e4      	uxtb	r4, r4
 800bdd8:	2c00      	cmp	r4, #0
 800bdda:	d0f0      	beq.n	800bdbe <LoRaMacClassBProcessMulticastSlot+0x2e>
            Ctx.MulticastSlotState = PINGSLOT_STATE_SET_TIMER;
 800bddc:	4b6a      	ldr	r3, [pc, #424]	; (800bf88 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800bdde:	2201      	movs	r2, #1
 800bde0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 800bde4:	4b68      	ldr	r3, [pc, #416]	; (800bf88 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800bde6:	f8d3 60b8 	ldr.w	r6, [r3, #184]	; 0xb8
            Ctx.PingSlotCtx.NextMulticastChannel = NULL;
 800bdea:	2400      	movs	r4, #0
 800bdec:	609c      	str	r4, [r3, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bdee:	4625      	mov	r5, r4
 800bdf0:	e011      	b.n	800be16 <LoRaMacClassBProcessMulticastSlot+0x86>
                if( CalcNextSlotTime( cur->PingOffset, cur->PingPeriod, cur->PingNb, &slotTime ) == true )
 800bdf2:	ab03      	add	r3, sp, #12
 800bdf4:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
 800bdf8:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 800bdfa:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 800bdfc:	f7ff fe00 	bl	800ba00 <CalcNextSlotTime>
 800be00:	b130      	cbz	r0, 800be10 <LoRaMacClassBProcessMulticastSlot+0x80>
                    if( ( multicastSlotTime == 0 ) || ( multicastSlotTime > slotTime ) )
 800be02:	b114      	cbz	r4, 800be0a <LoRaMacClassBProcessMulticastSlot+0x7a>
 800be04:	9b03      	ldr	r3, [sp, #12]
 800be06:	42a3      	cmp	r3, r4
 800be08:	d202      	bcs.n	800be10 <LoRaMacClassBProcessMulticastSlot+0x80>
                        multicastSlotTime = slotTime;
 800be0a:	9c03      	ldr	r4, [sp, #12]
                        Ctx.PingSlotCtx.NextMulticastChannel = cur;
 800be0c:	4b5e      	ldr	r3, [pc, #376]	; (800bf88 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800be0e:	609e      	str	r6, [r3, #8]
                cur++;
 800be10:	362c      	adds	r6, #44	; 0x2c
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800be12:	3501      	adds	r5, #1
 800be14:	b2ed      	uxtb	r5, r5
 800be16:	2d00      	cmp	r5, #0
 800be18:	d0eb      	beq.n	800bdf2 <LoRaMacClassBProcessMulticastSlot+0x62>
            if( Ctx.PingSlotCtx.NextMulticastChannel != NULL )
 800be1a:	4b5b      	ldr	r3, [pc, #364]	; (800bf88 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	b1ab      	cbz	r3, 800be4c <LoRaMacClassBProcessMulticastSlot+0xbc>
                if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 )
 800be20:	4b59      	ldr	r3, [pc, #356]	; (800bf88 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800be22:	7b1b      	ldrb	r3, [r3, #12]
 800be24:	f013 0f02 	tst.w	r3, #2
 800be28:	d112      	bne.n	800be50 <LoRaMacClassBProcessMulticastSlot+0xc0>
                if( ( int32_t )multicastSlotTime > multicastSlotRxConfig.WindowOffset )
 800be2a:	4b58      	ldr	r3, [pc, #352]	; (800bf8c <LoRaMacClassBProcessMulticastSlot+0x1fc>)
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	42a3      	cmp	r3, r4
 800be30:	da00      	bge.n	800be34 <LoRaMacClassBProcessMulticastSlot+0xa4>
                    multicastSlotTime += multicastSlotRxConfig.WindowOffset;
 800be32:	441c      	add	r4, r3
                Ctx.MulticastSlotState = PINGSLOT_STATE_IDLE;
 800be34:	4d54      	ldr	r5, [pc, #336]	; (800bf88 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800be36:	2302      	movs	r3, #2
 800be38:	f885 304a 	strb.w	r3, [r5, #74]	; 0x4a
                TimerSetValue( &Ctx.MulticastSlotTimer, multicastSlotTime );
 800be3c:	357c      	adds	r5, #124	; 0x7c
 800be3e:	4621      	mov	r1, r4
 800be40:	4628      	mov	r0, r5
 800be42:	f006 fab5 	bl	80123b0 <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.MulticastSlotTimer );
 800be46:	4628      	mov	r0, r5
 800be48:	f006 fa6c 	bl	8012324 <UTIL_TIMER_Start>
        }
    }
}
 800be4c:	b004      	add	sp, #16
 800be4e:	bd70      	pop	{r4, r5, r6, pc}
                    maxRxError = MAX( Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError ,
 800be50:	4d4d      	ldr	r5, [pc, #308]	; (800bf88 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800be52:	f9b5 c044 	ldrsh.w	ip, [r5, #68]	; 0x44
 800be56:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
 800be5a:	6813      	ldr	r3, [r2, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800be5c:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
                                                    ClassBNvm->PingSlotCtx.Datarate,
 800be60:	494b      	ldr	r1, [pc, #300]	; (800bf90 <LoRaMacClassBProcessMulticastSlot+0x200>)
 800be62:	6809      	ldr	r1, [r1, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800be64:	7912      	ldrb	r2, [r2, #4]
 800be66:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800be6a:	7800      	ldrb	r0, [r0, #0]
 800be6c:	4e47      	ldr	r6, [pc, #284]	; (800bf8c <LoRaMacClassBProcessMulticastSlot+0x1fc>)
 800be6e:	9600      	str	r6, [sp, #0]
 800be70:	4563      	cmp	r3, ip
 800be72:	bf38      	it	cc
 800be74:	4663      	movcc	r3, ip
 800be76:	f001 fe6f 	bl	800db58 <RegionComputeRxWindowParameters>
                    Ctx.PingSlotCtx.SymbolTimeout = multicastSlotRxConfig.WindowTimeout;
 800be7a:	68b3      	ldr	r3, [r6, #8]
 800be7c:	80eb      	strh	r3, [r5, #6]
 800be7e:	e7d4      	b.n	800be2a <LoRaMacClassBProcessMulticastSlot+0x9a>
            if( Ctx.PingSlotCtx.NextMulticastChannel == NULL )
 800be80:	4b41      	ldr	r3, [pc, #260]	; (800bf88 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800be82:	6898      	ldr	r0, [r3, #8]
 800be84:	2800      	cmp	r0, #0
 800be86:	d044      	beq.n	800bf12 <LoRaMacClassBProcessMulticastSlot+0x182>
            frequency = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Frequency;
 800be88:	6985      	ldr	r5, [r0, #24]
            if( frequency == 0 )
 800be8a:	2d00      	cmp	r5, #0
 800be8c:	d04e      	beq.n	800bf2c <LoRaMacClassBProcessMulticastSlot+0x19c>
            slotHasPriority = CheckSlotPriority( Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.Address, Ctx.PingSlotCtx.NextMulticastChannel->FPendingSet, 1,
 800be8e:	4c3e      	ldr	r4, [pc, #248]	; (800bf88 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800be90:	68a2      	ldr	r2, [r4, #8]
                                                 *Ctx.LoRaMacClassBParams.LoRaMacDevAddr, ClassBNvm->PingSlotCtx.FPendingSet, 0 );
 800be92:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800be96:	493e      	ldr	r1, [pc, #248]	; (800bf90 <LoRaMacClassBProcessMulticastSlot+0x200>)
 800be98:	680e      	ldr	r6, [r1, #0]
            slotHasPriority = CheckSlotPriority( Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.Address, Ctx.PingSlotCtx.NextMulticastChannel->FPendingSet, 1,
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800bea0:	6850      	ldr	r0, [r2, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	9201      	str	r2, [sp, #4]
 800bea6:	7a72      	ldrb	r2, [r6, #9]
 800bea8:	9200      	str	r2, [sp, #0]
 800beaa:	2201      	movs	r2, #1
 800beac:	f7ff fc35 	bl	800b71a <CheckSlotPriority>
            if( ( Ctx.PingSlotState != PINGSLOT_STATE_RX ) || ( slotHasPriority == true ) )
 800beb0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 800beb4:	2b03      	cmp	r3, #3
 800beb6:	d043      	beq.n	800bf40 <LoRaMacClassBProcessMulticastSlot+0x1b0>
                if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 800beb8:	2b03      	cmp	r3, #3
 800beba:	d050      	beq.n	800bf5e <LoRaMacClassBProcessMulticastSlot+0x1ce>
                Ctx.MulticastSlotState = PINGSLOT_STATE_RX;
 800bebc:	4b32      	ldr	r3, [pc, #200]	; (800bf88 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800bebe:	2203      	movs	r2, #3
 800bec0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                multicastSlotRxConfig.Datarate = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Datarate;
 800bec4:	689a      	ldr	r2, [r3, #8]
 800bec6:	f992 201c 	ldrsb.w	r2, [r2, #28]
 800beca:	4c30      	ldr	r4, [pc, #192]	; (800bf8c <LoRaMacClassBProcessMulticastSlot+0x1fc>)
 800becc:	7062      	strb	r2, [r4, #1]
                multicastSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800bece:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800bed2:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 800bed6:	7422      	strb	r2, [r4, #16]
                multicastSlotRxConfig.Frequency = frequency;
 800bed8:	6065      	str	r5, [r4, #4]
                multicastSlotRxConfig.RxContinuous = false;
 800beda:	2200      	movs	r2, #0
 800bedc:	74a2      	strb	r2, [r4, #18]
                multicastSlotRxConfig.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800bede:	2205      	movs	r2, #5
 800bee0:	74e2      	strb	r2, [r4, #19]
                multicastSlotRxConfig.NetworkActivation = *Ctx.LoRaMacClassBParams.NetworkActivation;
 800bee2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800bee6:	7812      	ldrb	r2, [r2, #0]
 800bee8:	7522      	strb	r2, [r4, #20]
                RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &multicastSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 800beea:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 800beee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bef2:	3204      	adds	r2, #4
 800bef4:	4621      	mov	r1, r4
 800bef6:	7800      	ldrb	r0, [r0, #0]
 800bef8:	f001 fe39 	bl	800db6e <RegionRxConfig>
                if( multicastSlotRxConfig.RxContinuous == false )
 800befc:	7ca3      	ldrb	r3, [r4, #18]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d13d      	bne.n	800bf7e <LoRaMacClassBProcessMulticastSlot+0x1ee>
                    Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 800bf02:	4b24      	ldr	r3, [pc, #144]	; (800bf94 <LoRaMacClassBProcessMulticastSlot+0x204>)
 800bf04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf06:	4a20      	ldr	r2, [pc, #128]	; (800bf88 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800bf08:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 800bf0c:	6890      	ldr	r0, [r2, #8]
 800bf0e:	4798      	blx	r3
 800bf10:	e79c      	b.n	800be4c <LoRaMacClassBProcessMulticastSlot+0xbc>
                Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800bf12:	461c      	mov	r4, r3
 800bf14:	2300      	movs	r3, #0
 800bf16:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
                TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 800bf1a:	347c      	adds	r4, #124	; 0x7c
 800bf1c:	2101      	movs	r1, #1
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f006 fa46 	bl	80123b0 <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.MulticastSlotTimer );
 800bf24:	4620      	mov	r0, r4
 800bf26:	f006 f9fd 	bl	8012324 <UTIL_TIMER_Start>
                break;
 800bf2a:	e78f      	b.n	800be4c <LoRaMacClassBProcessMulticastSlot+0xbc>
                frequency = CalcDownlinkChannelAndFrequency( Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.Address,
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 800bf32:	4915      	ldr	r1, [pc, #84]	; (800bf88 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800bf34:	6909      	ldr	r1, [r1, #16]
 800bf36:	6840      	ldr	r0, [r0, #4]
 800bf38:	f7ff fcaa 	bl	800b890 <CalcDownlinkChannelAndFrequency>
 800bf3c:	4605      	mov	r5, r0
 800bf3e:	e7a6      	b.n	800be8e <LoRaMacClassBProcessMulticastSlot+0xfe>
            if( ( Ctx.PingSlotState != PINGSLOT_STATE_RX ) || ( slotHasPriority == true ) )
 800bf40:	2800      	cmp	r0, #0
 800bf42:	d1b9      	bne.n	800beb8 <LoRaMacClassBProcessMulticastSlot+0x128>
                Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800bf44:	4c10      	ldr	r4, [pc, #64]	; (800bf88 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800bf46:	2300      	movs	r3, #0
 800bf48:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
                TimerSetValue( &Ctx.MulticastSlotTimer, CLASSB_PING_SLOT_WINDOW );
 800bf4c:	347c      	adds	r4, #124	; 0x7c
 800bf4e:	211e      	movs	r1, #30
 800bf50:	4620      	mov	r0, r4
 800bf52:	f006 fa2d 	bl	80123b0 <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.MulticastSlotTimer );
 800bf56:	4620      	mov	r0, r4
 800bf58:	f006 f9e4 	bl	8012324 <UTIL_TIMER_Start>
 800bf5c:	e776      	b.n	800be4c <LoRaMacClassBProcessMulticastSlot+0xbc>
                    Radio.Standby( );
 800bf5e:	4b0d      	ldr	r3, [pc, #52]	; (800bf94 <LoRaMacClassBProcessMulticastSlot+0x204>)
 800bf60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf62:	4798      	blx	r3
                    Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800bf64:	4c08      	ldr	r4, [pc, #32]	; (800bf88 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800bf66:	2300      	movs	r3, #0
 800bf68:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
                    TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 800bf6c:	3464      	adds	r4, #100	; 0x64
 800bf6e:	211e      	movs	r1, #30
 800bf70:	4620      	mov	r0, r4
 800bf72:	f006 fa1d 	bl	80123b0 <UTIL_TIMER_SetPeriod>
                    TimerStart( &Ctx.PingSlotTimer );
 800bf76:	4620      	mov	r0, r4
 800bf78:	f006 f9d4 	bl	8012324 <UTIL_TIMER_Start>
 800bf7c:	e79e      	b.n	800bebc <LoRaMacClassBProcessMulticastSlot+0x12c>
                    Radio.Rx( 0 ); // Continuous mode
 800bf7e:	4b05      	ldr	r3, [pc, #20]	; (800bf94 <LoRaMacClassBProcessMulticastSlot+0x204>)
 800bf80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf82:	2000      	movs	r0, #0
 800bf84:	4798      	blx	r3
 800bf86:	e761      	b.n	800be4c <LoRaMacClassBProcessMulticastSlot+0xbc>
 800bf88:	20000c84 	.word	0x20000c84
 800bf8c:	20000d48 	.word	0x20000d48
 800bf90:	20000c80 	.word	0x20000c80
 800bf94:	080145a0 	.word	0x080145a0

0800bf98 <LoRaMacClassBInit>:
    if( nvm == NULL )
 800bf98:	2a00      	cmp	r2, #0
 800bf9a:	d039      	beq.n	800c010 <LoRaMacClassBInit+0x78>
{
 800bf9c:	b530      	push	{r4, r5, lr}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	4684      	mov	ip, r0
 800bfa2:	4613      	mov	r3, r2
    ClassBNvm = nvm;
 800bfa4:	4a1b      	ldr	r2, [pc, #108]	; (800c014 <LoRaMacClassBInit+0x7c>)
 800bfa6:	6013      	str	r3, [r2, #0]
    Ctx.LoRaMacClassBCallbacks = *callbacks;
 800bfa8:	4d1b      	ldr	r5, [pc, #108]	; (800c018 <LoRaMacClassBInit+0x80>)
 800bfaa:	f105 0394 	add.w	r3, r5, #148	; 0x94
 800bfae:	c903      	ldmia	r1, {r0, r1}
 800bfb0:	e883 0003 	stmia.w	r3, {r0, r1}
    Ctx.LoRaMacClassBParams = *classBParams;
 800bfb4:	f105 0e9c 	add.w	lr, r5, #156	; 0x9c
 800bfb8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bfbc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bfc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bfc4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bfc8:	f8dc 3000 	ldr.w	r3, [ip]
 800bfcc:	f8ce 3000 	str.w	r3, [lr]
    TimerInit( &Ctx.BeaconTimer, LoRaMacClassBBeaconTimerEvent );
 800bfd0:	2400      	movs	r4, #0
 800bfd2:	9400      	str	r4, [sp, #0]
 800bfd4:	4b11      	ldr	r3, [pc, #68]	; (800c01c <LoRaMacClassBInit+0x84>)
 800bfd6:	4622      	mov	r2, r4
 800bfd8:	f04f 31ff 	mov.w	r1, #4294967295
 800bfdc:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 800bfe0:	f006 f8e8 	bl	80121b4 <UTIL_TIMER_Create>
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
 800bfe4:	9400      	str	r4, [sp, #0]
 800bfe6:	4b0e      	ldr	r3, [pc, #56]	; (800c020 <LoRaMacClassBInit+0x88>)
 800bfe8:	4622      	mov	r2, r4
 800bfea:	f04f 31ff 	mov.w	r1, #4294967295
 800bfee:	f105 0064 	add.w	r0, r5, #100	; 0x64
 800bff2:	f006 f8df 	bl	80121b4 <UTIL_TIMER_Create>
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );
 800bff6:	9400      	str	r4, [sp, #0]
 800bff8:	4b0a      	ldr	r3, [pc, #40]	; (800c024 <LoRaMacClassBInit+0x8c>)
 800bffa:	4622      	mov	r2, r4
 800bffc:	f04f 31ff 	mov.w	r1, #4294967295
 800c000:	f105 007c 	add.w	r0, r5, #124	; 0x7c
 800c004:	f006 f8d6 	bl	80121b4 <UTIL_TIMER_Create>
    InitClassB( );
 800c008:	f7ff fbc2 	bl	800b790 <InitClassB>
}
 800c00c:	b003      	add	sp, #12
 800c00e:	bd30      	pop	{r4, r5, pc}
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop
 800c014:	20000c80 	.word	0x20000c80
 800c018:	20000c84 	.word	0x20000c84
 800c01c:	0800b911 	.word	0x0800b911
 800c020:	0800b751 	.word	0x0800b751
 800c024:	0800b771 	.word	0x0800b771

0800c028 <LoRaMacClassBSetPingSlotState>:
    Ctx.PingSlotState = pingSlotState;
 800c028:	4b01      	ldr	r3, [pc, #4]	; (800c030 <LoRaMacClassBSetPingSlotState+0x8>)
 800c02a:	f883 0049 	strb.w	r0, [r3, #73]	; 0x49
}
 800c02e:	4770      	bx	lr
 800c030:	20000c84 	.word	0x20000c84

0800c034 <LoRaMacClassBSetMulticastSlotState>:
    Ctx.MulticastSlotState = multicastSlotState;
 800c034:	4b01      	ldr	r3, [pc, #4]	; (800c03c <LoRaMacClassBSetMulticastSlotState+0x8>)
 800c036:	f883 004a 	strb.w	r0, [r3, #74]	; 0x4a
}
 800c03a:	4770      	bx	lr
 800c03c:	20000c84 	.word	0x20000c84

0800c040 <LoRaMacClassBRxBeacon>:
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 800c040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c044:	b08d      	sub	sp, #52	; 0x34
 800c046:	4604      	mov	r4, r0
 800c048:	460d      	mov	r5, r1
    uint16_t crc0 = 0;
    uint16_t crc1 = 0;
    uint16_t beaconCrc0 = 0;
    uint16_t beaconCrc1 = 0;

    getPhy.Attribute = PHY_BEACON_FORMAT;
 800c04a:	2330      	movs	r3, #48	; 0x30
 800c04c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c050:	4e74      	ldr	r6, [pc, #464]	; (800c224 <LoRaMacClassBRxBeacon+0x1e4>)
 800c052:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
 800c056:	a908      	add	r1, sp, #32
 800c058:	7818      	ldrb	r0, [r3, #0]
 800c05a:	f001 fd46 	bl	800daea <RegionGetPhyParam>
 800c05e:	9007      	str	r0, [sp, #28]

    // Verify if we are in the state where we expect a beacon
    if( ( Ctx.BeaconState == BEACON_STATE_RX ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 800c060:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 800c064:	2b09      	cmp	r3, #9
 800c066:	d004      	beq.n	800c072 <LoRaMacClassBRxBeacon+0x32>
 800c068:	7b33      	ldrb	r3, [r6, #12]
 800c06a:	f013 0f10 	tst.w	r3, #16
 800c06e:	f000 80d6 	beq.w	800c21e <LoRaMacClassBRxBeacon+0x1de>
    {
        if( size == phyParam.BeaconFormat.BeaconSize )
 800c072:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800c076:	42ab      	cmp	r3, r5
 800c078:	d009      	beq.n	800c08e <LoRaMacClassBRxBeacon+0x4e>

                LoRaMacClassBBeaconTimerEvent( NULL );
            }
        }

        if( Ctx.BeaconState == BEACON_STATE_RX )
 800c07a:	4b6a      	ldr	r3, [pc, #424]	; (800c224 <LoRaMacClassBRxBeacon+0x1e4>)
 800c07c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c080:	2b09      	cmp	r3, #9
 800c082:	f000 80c3 	beq.w	800c20c <LoRaMacClassBRxBeacon+0x1cc>
        // If it receives a frame which is
        // 1. not a beacon or
        // 2. a beacon with a crc fail
        // the MAC shall ignore the frame completely. Thus, the function must always return true, even if no
        // valid beacon has been received.
        beaconProcessed = true;
 800c086:	2001      	movs	r0, #1
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c088:	b00d      	add	sp, #52	; 0x34
 800c08a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            beaconCrc0 = ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4] ) & 0x00FF;
 800c08e:	f89d 601d 	ldrb.w	r6, [sp, #29]
 800c092:	19a3      	adds	r3, r4, r6
 800c094:	795f      	ldrb	r7, [r3, #5]
            beaconCrc0 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 1] << 8 ) & 0xFF00;
 800c096:	799b      	ldrb	r3, [r3, #6]
 800c098:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
            crc0 = BeaconCrc( payload, phyParam.BeaconFormat.Rfu1Size + 1 + 4 );
 800c09c:	1d71      	adds	r1, r6, #5
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f7ff fa9e 	bl	800b5e0 <BeaconCrc>
            if( crc0 == beaconCrc0 )
 800c0a4:	4287      	cmp	r7, r0
 800c0a6:	d07b      	beq.n	800c1a0 <LoRaMacClassBRxBeacon+0x160>
    bool beaconProcessed = false;
 800c0a8:	2700      	movs	r7, #0
            beaconCrc1 = ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size] ) & 0x00FF;
 800c0aa:	f106 030e 	add.w	r3, r6, #14
 800c0ae:	f89d 101e 	ldrb.w	r1, [sp, #30]
 800c0b2:	440b      	add	r3, r1
 800c0b4:	f814 8003 	ldrb.w	r8, [r4, r3]
            beaconCrc1 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size + 1] << 8 ) & 0xFF00;
 800c0b8:	4423      	add	r3, r4
 800c0ba:	785b      	ldrb	r3, [r3, #1]
 800c0bc:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
            crc1 = BeaconCrc( &payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 2], 7 + phyParam.BeaconFormat.Rfu2Size );
 800c0c0:	f106 0907 	add.w	r9, r6, #7
 800c0c4:	3107      	adds	r1, #7
 800c0c6:	eb04 0009 	add.w	r0, r4, r9
 800c0ca:	f7ff fa89 	bl	800b5e0 <BeaconCrc>
            if( crc1 == beaconCrc1 )
 800c0ce:	4580      	cmp	r8, r0
 800c0d0:	f000 808c 	beq.w	800c1ec <LoRaMacClassBRxBeacon+0x1ac>
            if( beaconProcessed == true )
 800c0d4:	2f00      	cmp	r7, #0
 800c0d6:	d0d0      	beq.n	800c07a <LoRaMacClassBRxBeacon+0x3a>
                getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 800c0d8:	2331      	movs	r3, #49	; 0x31
 800c0da:	f88d 3020 	strb.w	r3, [sp, #32]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c0de:	4c51      	ldr	r4, [pc, #324]	; (800c224 <LoRaMacClassBRxBeacon+0x1e4>)
 800c0e0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800c0e4:	a908      	add	r1, sp, #32
 800c0e6:	7818      	ldrb	r0, [r3, #0]
 800c0e8:	f001 fcff 	bl	800daea <RegionGetPhyParam>
 800c0ec:	9007      	str	r0, [sp, #28]
                getPhy.Attribute = PHY_SF_FROM_DR;
 800c0ee:	2337      	movs	r3, #55	; 0x37
 800c0f0:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = phyParam.Value;
 800c0f4:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c0f8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800c0fc:	a908      	add	r1, sp, #32
 800c0fe:	7818      	ldrb	r0, [r3, #0]
 800c100:	f001 fcf3 	bl	800daea <RegionGetPhyParam>
 800c104:	4607      	mov	r7, r0
 800c106:	9007      	str	r0, [sp, #28]
                getPhy.Attribute = PHY_BW_FROM_DR;
 800c108:	2338      	movs	r3, #56	; 0x38
 800c10a:	f88d 3020 	strb.w	r3, [sp, #32]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c10e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800c112:	a908      	add	r1, sp, #32
 800c114:	7818      	ldrb	r0, [r3, #0]
 800c116:	f001 fce8 	bl	800daea <RegionGetPhyParam>
 800c11a:	4601      	mov	r1, r0
 800c11c:	9007      	str	r0, [sp, #28]
                TimerTime_t time = Radio.TimeOnAir( MODEM_LORA, bandwidth, spreadingFactor, 1, 10, true, size, false );
 800c11e:	4b42      	ldr	r3, [pc, #264]	; (800c228 <LoRaMacClassBRxBeacon+0x1e8>)
 800c120:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800c124:	2600      	movs	r6, #0
 800c126:	9603      	str	r6, [sp, #12]
 800c128:	b2ed      	uxtb	r5, r5
 800c12a:	9502      	str	r5, [sp, #8]
 800c12c:	2001      	movs	r0, #1
 800c12e:	9001      	str	r0, [sp, #4]
 800c130:	230a      	movs	r3, #10
 800c132:	9300      	str	r3, [sp, #0]
 800c134:	4603      	mov	r3, r0
 800c136:	463a      	mov	r2, r7
 800c138:	47c0      	blx	r8
                timeOnAir.Seconds = time / 1000;
 800c13a:	4b3c      	ldr	r3, [pc, #240]	; (800c22c <LoRaMacClassBRxBeacon+0x1ec>)
 800c13c:	fba3 2300 	umull	r2, r3, r3, r0
 800c140:	099b      	lsrs	r3, r3, #6
 800c142:	9305      	str	r3, [sp, #20]
                timeOnAir.SubSeconds = time - timeOnAir.Seconds * 1000;
 800c144:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800c148:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c14c:	eba0 00c2 	sub.w	r0, r0, r2, lsl #3
 800c150:	f8ad 0018 	strh.w	r0, [sp, #24]
                Ctx.BeaconCtx.LastBeaconRx = Ctx.BeaconCtx.BeaconTime;
 800c154:	f104 0218 	add.w	r2, r4, #24
 800c158:	f104 0110 	add.w	r1, r4, #16
 800c15c:	c903      	ldmia	r1, {r0, r1}
 800c15e:	e882 0003 	stmia.w	r2, {r0, r1}
                Ctx.BeaconCtx.LastBeaconRx.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800c162:	4933      	ldr	r1, [pc, #204]	; (800c230 <LoRaMacClassBRxBeacon+0x1f0>)
 800c164:	4401      	add	r1, r0
 800c166:	61a1      	str	r1, [r4, #24]
                SysTimeSet( SysTimeAdd( Ctx.BeaconCtx.LastBeaconRx, timeOnAir ) );
 800c168:	ad0a      	add	r5, sp, #40	; 0x28
 800c16a:	9906      	ldr	r1, [sp, #24]
 800c16c:	9100      	str	r1, [sp, #0]
 800c16e:	ca06      	ldmia	r2, {r1, r2}
 800c170:	4628      	mov	r0, r5
 800c172:	f005 ff2f 	bl	8011fd4 <SysTimeAdd>
 800c176:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c17a:	f005 ff69 	bl	8012050 <SysTimeSet>
                Ctx.BeaconCtx.Ctrl.BeaconAcquired = 1;
 800c17e:	7b23      	ldrb	r3, [r4, #12]
 800c180:	f043 0302 	orr.w	r3, r3, #2
 800c184:	7323      	strb	r3, [r4, #12]
                Ctx.BeaconCtx.Ctrl.BeaconMode = 1;
 800c186:	b2db      	uxtb	r3, r3
 800c188:	f043 0301 	orr.w	r3, r3, #1
 800c18c:	7323      	strb	r3, [r4, #12]
                ResetWindowTimeout( );
 800c18e:	f7ff fa79 	bl	800b684 <ResetWindowTimeout>
                Ctx.BeaconState = BEACON_STATE_LOCKED;
 800c192:	2305      	movs	r3, #5
 800c194:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
                LoRaMacClassBBeaconTimerEvent( NULL );
 800c198:	4630      	mov	r0, r6
 800c19a:	f7ff fbb9 	bl	800b910 <LoRaMacClassBBeaconTimerEvent>
 800c19e:	e76c      	b.n	800c07a <LoRaMacClassBRxBeacon+0x3a>
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Param = ( payload[phyParam.BeaconFormat.Rfu1Size] );
 800c1a0:	4b20      	ldr	r3, [pc, #128]	; (800c224 <LoRaMacClassBRxBeacon+0x1e4>)
 800c1a2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800c1a6:	5da1      	ldrb	r1, [r4, r6]
 800c1a8:	7651      	strb	r1, [r2, #25]
                Ctx.BeaconCtx.BeaconTimePrecision.SubSeconds = BeaconPrecTimeValue[Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Param];
 800c1aa:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 800c1ae:	7e42      	ldrb	r2, [r0, #25]
 800c1b0:	4920      	ldr	r1, [pc, #128]	; (800c234 <LoRaMacClassBRxBeacon+0x1f4>)
 800c1b2:	5c8a      	ldrb	r2, [r1, r2]
 800c1b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                Ctx.BeaconCtx.BeaconTime.Seconds  = ( ( uint32_t )payload[phyParam.BeaconFormat.Rfu1Size + 1] ) & 0x000000FF;
 800c1b8:	19a1      	adds	r1, r4, r6
 800c1ba:	784a      	ldrb	r2, [r1, #1]
 800c1bc:	611a      	str	r2, [r3, #16]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 2] << 8 ) ) & 0x0000FF00;
 800c1be:	788f      	ldrb	r7, [r1, #2]
 800c1c0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800c1c4:	611a      	str	r2, [r3, #16]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 3] << 16 ) ) & 0x00FF0000;
 800c1c6:	78cf      	ldrb	r7, [r1, #3]
 800c1c8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800c1cc:	611a      	str	r2, [r3, #16]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 4] << 24 ) ) & 0xFF000000;
 800c1ce:	7909      	ldrb	r1, [r1, #4]
 800c1d0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c1d4:	611a      	str	r2, [r3, #16]
                Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	829a      	strh	r2, [r3, #20]
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Time = Ctx.BeaconCtx.BeaconTime;
 800c1da:	f100 0208 	add.w	r2, r0, #8
 800c1de:	3310      	adds	r3, #16
 800c1e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c1e4:	e882 0003 	stmia.w	r2, {r0, r1}
                beaconProcessed = true;
 800c1e8:	2701      	movs	r7, #1
 800c1ea:	e75e      	b.n	800c0aa <LoRaMacClassBRxBeacon+0x6a>
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.InfoDesc = payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 2];
 800c1ec:	4b0d      	ldr	r3, [pc, #52]	; (800c224 <LoRaMacClassBRxBeacon+0x1e4>)
 800c1ee:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800c1f2:	f814 1009 	ldrb.w	r1, [r4, r9]
 800c1f6:	7691      	strb	r1, [r2, #26]
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 2 + 1], 6 );
 800c1f8:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 800c1fc:	f106 0108 	add.w	r1, r6, #8
 800c200:	2206      	movs	r2, #6
 800c202:	4421      	add	r1, r4
 800c204:	301b      	adds	r0, #27
 800c206:	f003 fe36 	bl	800fe76 <memcpy1>
 800c20a:	e763      	b.n	800c0d4 <LoRaMacClassBRxBeacon+0x94>
            Ctx.BeaconState = BEACON_STATE_TIMEOUT;
 800c20c:	4b05      	ldr	r3, [pc, #20]	; (800c224 <LoRaMacClassBRxBeacon+0x1e4>)
 800c20e:	2202      	movs	r2, #2
 800c210:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            LoRaMacClassBBeaconTimerEvent( NULL );
 800c214:	2000      	movs	r0, #0
 800c216:	f7ff fb7b 	bl	800b910 <LoRaMacClassBBeaconTimerEvent>
        beaconProcessed = true;
 800c21a:	2001      	movs	r0, #1
 800c21c:	e734      	b.n	800c088 <LoRaMacClassBRxBeacon+0x48>
    bool beaconProcessed = false;
 800c21e:	2000      	movs	r0, #0
 800c220:	e732      	b.n	800c088 <LoRaMacClassBRxBeacon+0x48>
 800c222:	bf00      	nop
 800c224:	20000c84 	.word	0x20000c84
 800c228:	080145a0 	.word	0x080145a0
 800c22c:	10624dd3 	.word	0x10624dd3
 800c230:	12d53d80 	.word	0x12d53d80
 800c234:	08013ec4 	.word	0x08013ec4

0800c238 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 800c238:	4b07      	ldr	r3, [pc, #28]	; (800c258 <LoRaMacClassBIsBeaconExpected+0x20>)
 800c23a:	7b1b      	ldrb	r3, [r3, #12]
 800c23c:	f013 0f10 	tst.w	r3, #16
 800c240:	d106      	bne.n	800c250 <LoRaMacClassBIsBeaconExpected+0x18>
        ( Ctx.BeaconState == BEACON_STATE_RX ) )
 800c242:	4b05      	ldr	r3, [pc, #20]	; (800c258 <LoRaMacClassBIsBeaconExpected+0x20>)
 800c244:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 800c248:	2b09      	cmp	r3, #9
 800c24a:	d003      	beq.n	800c254 <LoRaMacClassBIsBeaconExpected+0x1c>
    {
        return true;
    }
    return false;
 800c24c:	2000      	movs	r0, #0
 800c24e:	4770      	bx	lr
        return true;
 800c250:	2001      	movs	r0, #1
 800c252:	4770      	bx	lr
 800c254:	2001      	movs	r0, #1
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c256:	4770      	bx	lr
 800c258:	20000c84 	.word	0x20000c84

0800c25c <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 800c25c:	4b04      	ldr	r3, [pc, #16]	; (800c270 <LoRaMacClassBIsPingExpected+0x14>)
 800c25e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c262:	2b03      	cmp	r3, #3
 800c264:	d001      	beq.n	800c26a <LoRaMacClassBIsPingExpected+0xe>
    {
        return true;
    }
    return false;
 800c266:	2000      	movs	r0, #0
 800c268:	4770      	bx	lr
        return true;
 800c26a:	2001      	movs	r0, #1
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	20000c84 	.word	0x20000c84

0800c274 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 800c274:	4b04      	ldr	r3, [pc, #16]	; (800c288 <LoRaMacClassBIsMulticastExpected+0x14>)
 800c276:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800c27a:	2b03      	cmp	r3, #3
 800c27c:	d001      	beq.n	800c282 <LoRaMacClassBIsMulticastExpected+0xe>
    {
        return true;
    }
    return false;
 800c27e:	2000      	movs	r0, #0
 800c280:	4770      	bx	lr
        return true;
 800c282:	2001      	movs	r0, #1
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	20000c84 	.word	0x20000c84

0800c28c <LoRaMacClassBIsAcquisitionPending>:

bool LoRaMacClassBIsAcquisitionPending( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 800c28c:	4b04      	ldr	r3, [pc, #16]	; (800c2a0 <LoRaMacClassBIsAcquisitionPending+0x14>)
 800c28e:	7b1b      	ldrb	r3, [r3, #12]
 800c290:	f013 0f10 	tst.w	r3, #16
 800c294:	d101      	bne.n	800c29a <LoRaMacClassBIsAcquisitionPending+0xe>
    {
        return true;
    }
    return false;
 800c296:	2000      	movs	r0, #0
 800c298:	4770      	bx	lr
        return true;
 800c29a:	2001      	movs	r0, #1
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	20000c84 	.word	0x20000c84

0800c2a4 <LoRaMacClassBSetBeaconState>:
{
 800c2a4:	b510      	push	{r4, lr}
    if( beaconState == BEACON_STATE_ACQUISITION )
 800c2a6:	4604      	mov	r4, r0
 800c2a8:	b980      	cbnz	r0, 800c2cc <LoRaMacClassBSetBeaconState+0x28>
        if( ( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 ) &&
 800c2aa:	4b0d      	ldr	r3, [pc, #52]	; (800c2e0 <LoRaMacClassBSetBeaconState+0x3c>)
 800c2ac:	7b1b      	ldrb	r3, [r3, #12]
 800c2ae:	f013 0f04 	tst.w	r3, #4
 800c2b2:	d007      	beq.n	800c2c4 <LoRaMacClassBSetBeaconState+0x20>
            ( LoRaMacClassBIsAcquisitionPending( ) == false ) )
 800c2b4:	f7ff ffea 	bl	800c28c <LoRaMacClassBIsAcquisitionPending>
        if( ( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 ) &&
 800c2b8:	b920      	cbnz	r0, 800c2c4 <LoRaMacClassBSetBeaconState+0x20>
            Ctx.BeaconState = BEACON_STATE_ACQUISITION_BY_TIME;
 800c2ba:	4b09      	ldr	r3, [pc, #36]	; (800c2e0 <LoRaMacClassBSetBeaconState+0x3c>)
 800c2bc:	2201      	movs	r2, #1
 800c2be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800c2c2:	e002      	b.n	800c2ca <LoRaMacClassBSetBeaconState+0x26>
           Ctx.BeaconState = beaconState;
 800c2c4:	4b06      	ldr	r3, [pc, #24]	; (800c2e0 <LoRaMacClassBSetBeaconState+0x3c>)
 800c2c6:	f883 4048 	strb.w	r4, [r3, #72]	; 0x48
}
 800c2ca:	bd10      	pop	{r4, pc}
        if( ( Ctx.BeaconState != BEACON_STATE_ACQUISITION ) &&
 800c2cc:	4b04      	ldr	r3, [pc, #16]	; (800c2e0 <LoRaMacClassBSetBeaconState+0x3c>)
 800c2ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	d9f9      	bls.n	800c2ca <LoRaMacClassBSetBeaconState+0x26>
            Ctx.BeaconState = beaconState;
 800c2d6:	4b02      	ldr	r3, [pc, #8]	; (800c2e0 <LoRaMacClassBSetBeaconState+0x3c>)
 800c2d8:	f883 0048 	strb.w	r0, [r3, #72]	; 0x48
}
 800c2dc:	e7f5      	b.n	800c2ca <LoRaMacClassBSetBeaconState+0x26>
 800c2de:	bf00      	nop
 800c2e0:	20000c84 	.word	0x20000c84

0800c2e4 <LoRaMacClassBIsAcquisitionInProgress>:
{
 800c2e4:	b508      	push	{r3, lr}
    if( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME )
 800c2e6:	4b05      	ldr	r3, [pc, #20]	; (800c2fc <LoRaMacClassBIsAcquisitionInProgress+0x18>)
 800c2e8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d002      	beq.n	800c2f6 <LoRaMacClassBIsAcquisitionInProgress+0x12>
    if( LoRaMacClassBIsAcquisitionPending( ) == true )
 800c2f0:	f7ff ffcc 	bl	800c28c <LoRaMacClassBIsAcquisitionPending>
}
 800c2f4:	bd08      	pop	{r3, pc}
        return true;
 800c2f6:	2001      	movs	r0, #1
 800c2f8:	e7fc      	b.n	800c2f4 <LoRaMacClassBIsAcquisitionInProgress+0x10>
 800c2fa:	bf00      	nop
 800c2fc:	20000c84 	.word	0x20000c84

0800c300 <LoRaMacClassBIsBeaconModeActive>:

bool LoRaMacClassBIsBeaconModeActive( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 800c300:	4b07      	ldr	r3, [pc, #28]	; (800c320 <LoRaMacClassBIsBeaconModeActive+0x20>)
 800c302:	7b1b      	ldrb	r3, [r3, #12]
 800c304:	f013 0f01 	tst.w	r3, #1
 800c308:	d106      	bne.n	800c318 <LoRaMacClassBIsBeaconModeActive+0x18>
        ( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME ) )
 800c30a:	4b05      	ldr	r3, [pc, #20]	; (800c320 <LoRaMacClassBIsBeaconModeActive+0x20>)
 800c30c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 800c310:	2b01      	cmp	r3, #1
 800c312:	d003      	beq.n	800c31c <LoRaMacClassBIsBeaconModeActive+0x1c>
    {
        return true;
    }
    return false;
 800c314:	2000      	movs	r0, #0
 800c316:	4770      	bx	lr
        return true;
 800c318:	2001      	movs	r0, #1
 800c31a:	4770      	bx	lr
 800c31c:	2001      	movs	r0, #1
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c31e:	4770      	bx	lr
 800c320:	20000c84 	.word	0x20000c84

0800c324 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 800c324:	b510      	push	{r4, lr}
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
 800c326:	4b04      	ldr	r3, [pc, #16]	; (800c338 <LoRaMacClassBSetPingSlotInfo+0x14>)
 800c328:	681c      	ldr	r4, [r3, #0]
 800c32a:	f7ff f9ec 	bl	800b706 <CalcPingNb>
 800c32e:	7060      	strb	r0, [r4, #1]
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
 800c330:	f7ff f9ee 	bl	800b710 <CalcPingPeriod>
 800c334:	8060      	strh	r0, [r4, #2]
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c336:	bd10      	pop	{r4, pc}
 800c338:	20000c80 	.word	0x20000c80

0800c33c <LoRaMacClassBResumeBeaconing>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBResumeBeaconing( void )
{
 800c33c:	b508      	push	{r3, lr}
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconState == BEACON_STATE_HALT )
 800c33e:	4b0d      	ldr	r3, [pc, #52]	; (800c374 <LoRaMacClassBResumeBeaconing+0x38>)
 800c340:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c344:	2b06      	cmp	r3, #6
 800c346:	d000      	beq.n	800c34a <LoRaMacClassBResumeBeaconing+0xe>
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c348:	bd08      	pop	{r3, pc}
        Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 1;
 800c34a:	4b0a      	ldr	r3, [pc, #40]	; (800c374 <LoRaMacClassBResumeBeaconing+0x38>)
 800c34c:	7b1a      	ldrb	r2, [r3, #12]
 800c34e:	f042 0220 	orr.w	r2, r2, #32
 800c352:	731a      	strb	r2, [r3, #12]
        Ctx.BeaconState = BEACON_STATE_LOCKED;
 800c354:	2205      	movs	r2, #5
 800c356:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 0 )
 800c35a:	7b1b      	ldrb	r3, [r3, #12]
 800c35c:	f013 0f02 	tst.w	r3, #2
 800c360:	d103      	bne.n	800c36a <LoRaMacClassBResumeBeaconing+0x2e>
            Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 800c362:	4b04      	ldr	r3, [pc, #16]	; (800c374 <LoRaMacClassBResumeBeaconing+0x38>)
 800c364:	2204      	movs	r2, #4
 800c366:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        LoRaMacClassBBeaconTimerEvent( NULL );
 800c36a:	2000      	movs	r0, #0
 800c36c:	f7ff fad0 	bl	800b910 <LoRaMacClassBBeaconTimerEvent>
}
 800c370:	e7ea      	b.n	800c348 <LoRaMacClassBResumeBeaconing+0xc>
 800c372:	bf00      	nop
 800c374:	20000c84 	.word	0x20000c84

0800c378 <LoRaMacClassBMibGetRequestConfirm>:
LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;

    switch( mibGet->Type )
 800c378:	7803      	ldrb	r3, [r0, #0]
 800c37a:	2b37      	cmp	r3, #55	; 0x37
 800c37c:	d003      	beq.n	800c386 <LoRaMacClassBMibGetRequestConfirm+0xe>
 800c37e:	2b3a      	cmp	r3, #58	; 0x3a
 800c380:	d008      	beq.n	800c394 <LoRaMacClassBMibGetRequestConfirm+0x1c>
 800c382:	2002      	movs	r0, #2
 800c384:	4770      	bx	lr
    {
        case MIB_PING_SLOT_DATARATE:
        {
            mibGet->Param.PingSlotDatarate = ClassBNvm->PingSlotCtx.Datarate;
 800c386:	4b06      	ldr	r3, [pc, #24]	; (800c3a0 <LoRaMacClassBMibGetRequestConfirm+0x28>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c38e:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c390:	2000      	movs	r0, #0
            break;
 800c392:	4770      	bx	lr
        }
        case MIB_BEACON_STATE:
        {
            mibGet->Param.BeaconState = Ctx.BeaconState;
 800c394:	4b03      	ldr	r3, [pc, #12]	; (800c3a4 <LoRaMacClassBMibGetRequestConfirm+0x2c>)
 800c396:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c39a:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c39c:	2000      	movs	r0, #0
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c39e:	4770      	bx	lr
 800c3a0:	20000c80 	.word	0x20000c80
 800c3a4:	20000c84 	.word	0x20000c84

0800c3a8 <LoRaMacMibClassBSetRequestConfirm>:
LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;

    switch( mibSet->Type )
 800c3a8:	7803      	ldrb	r3, [r0, #0]
 800c3aa:	2b37      	cmp	r3, #55	; 0x37
 800c3ac:	d001      	beq.n	800c3b2 <LoRaMacMibClassBSetRequestConfirm+0xa>
            ClassBNvm->PingSlotCtx.Datarate = mibSet->Param.PingSlotDatarate;
            break;
        }
        default:
        {
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c3ae:	2002      	movs	r0, #2
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c3b0:	4770      	bx	lr
            ClassBNvm->PingSlotCtx.Datarate = mibSet->Param.PingSlotDatarate;
 800c3b2:	4b03      	ldr	r3, [pc, #12]	; (800c3c0 <LoRaMacMibClassBSetRequestConfirm+0x18>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800c3ba:	721a      	strb	r2, [r3, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c3bc:	2000      	movs	r0, #0
            break;
 800c3be:	4770      	bx	lr
 800c3c0:	20000c80 	.word	0x20000c80

0800c3c4 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 800c3c4:	b508      	push	{r3, lr}
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800c3c6:	200c      	movs	r0, #12
 800c3c8:	f000 fe28 	bl	800d01c <LoRaMacConfirmQueueIsCmdActive>
 800c3cc:	b900      	cbnz	r0, 800c3d0 <LoRaMacClassBPingSlotInfoAns+0xc>
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c3ce:	bd08      	pop	{r3, pc}
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800c3d0:	210c      	movs	r1, #12
 800c3d2:	2000      	movs	r0, #0
 800c3d4:	f000 fdd6 	bl	800cf84 <LoRaMacConfirmQueueSetStatus>
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
 800c3d8:	4b03      	ldr	r3, [pc, #12]	; (800c3e8 <LoRaMacClassBPingSlotInfoAns+0x24>)
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	7813      	ldrb	r3, [r2, #0]
 800c3de:	f043 0301 	orr.w	r3, r3, #1
 800c3e2:	7013      	strb	r3, [r2, #0]
}
 800c3e4:	e7f3      	b.n	800c3ce <LoRaMacClassBPingSlotInfoAns+0xa>
 800c3e6:	bf00      	nop
 800c3e8:	20000c80 	.word	0x20000c80

0800c3ec <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 800c3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	4604      	mov	r4, r0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    uint8_t status = 0x03;
    VerifyParams_t verify;
    bool isCustomFreq = false;

    if( frequency != 0 )
 800c3f2:	460e      	mov	r6, r1
 800c3f4:	b9d1      	cbnz	r1, 800c42c <LoRaMacClassBPingSlotChannelReq+0x40>
    bool isCustomFreq = false;
 800c3f6:	2700      	movs	r7, #0
    uint8_t status = 0x03;
 800c3f8:	2503      	movs	r5, #3
        {
            status &= 0xFE; // Channel frequency KO
        }
    }

    verify.DatarateParams.Datarate = datarate;
 800c3fa:	b264      	sxtb	r4, r4
 800c3fc:	f88d 4004 	strb.w	r4, [sp, #4]
    verify.DatarateParams.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800c400:	4b1d      	ldr	r3, [pc, #116]	; (800c478 <LoRaMacClassBPingSlotChannelReq+0x8c>)
 800c402:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c406:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 800c40a:	f88d 2005 	strb.w	r2, [sp, #5]

    if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_RX_DR ) == false )
 800c40e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c412:	2207      	movs	r2, #7
 800c414:	a901      	add	r1, sp, #4
 800c416:	7818      	ldrb	r0, [r3, #0]
 800c418:	f001 fb85 	bl	800db26 <RegionVerify>
 800c41c:	b908      	cbnz	r0, 800c422 <LoRaMacClassBPingSlotChannelReq+0x36>
    {
        status &= 0xFD; // Datarate range KO
 800c41e:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    if( status == 0x03 )
 800c422:	2d03      	cmp	r5, #3
 800c424:	d012      	beq.n	800c44c <LoRaMacClassBPingSlotChannelReq+0x60>

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c426:	4628      	mov	r0, r5
 800c428:	b003      	add	sp, #12
 800c42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        verify.Frequency = frequency;
 800c42c:	9101      	str	r1, [sp, #4]
        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == false )
 800c42e:	4b12      	ldr	r3, [pc, #72]	; (800c478 <LoRaMacClassBPingSlotChannelReq+0x8c>)
 800c430:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c434:	2200      	movs	r2, #0
 800c436:	a901      	add	r1, sp, #4
 800c438:	7818      	ldrb	r0, [r3, #0]
 800c43a:	f001 fb74 	bl	800db26 <RegionVerify>
 800c43e:	4607      	mov	r7, r0
 800c440:	b108      	cbz	r0, 800c446 <LoRaMacClassBPingSlotChannelReq+0x5a>
    uint8_t status = 0x03;
 800c442:	2503      	movs	r5, #3
 800c444:	e7d9      	b.n	800c3fa <LoRaMacClassBPingSlotChannelReq+0xe>
        isCustomFreq = true;
 800c446:	2701      	movs	r7, #1
            status &= 0xFE; // Channel frequency KO
 800c448:	2502      	movs	r5, #2
 800c44a:	e7d6      	b.n	800c3fa <LoRaMacClassBPingSlotChannelReq+0xe>
        if( isCustomFreq == true )
 800c44c:	b157      	cbz	r7, 800c464 <LoRaMacClassBPingSlotChannelReq+0x78>
            ClassBNvm->PingSlotCtx.Ctrl.CustomFreq = 1;
 800c44e:	4b0b      	ldr	r3, [pc, #44]	; (800c47c <LoRaMacClassBPingSlotChannelReq+0x90>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	781a      	ldrb	r2, [r3, #0]
 800c454:	f042 0202 	orr.w	r2, r2, #2
 800c458:	701a      	strb	r2, [r3, #0]
            ClassBNvm->PingSlotCtx.Frequency = frequency;
 800c45a:	605e      	str	r6, [r3, #4]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
 800c45c:	4b07      	ldr	r3, [pc, #28]	; (800c47c <LoRaMacClassBPingSlotChannelReq+0x90>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	721c      	strb	r4, [r3, #8]
 800c462:	e7e0      	b.n	800c426 <LoRaMacClassBPingSlotChannelReq+0x3a>
            ClassBNvm->PingSlotCtx.Ctrl.CustomFreq = 0;
 800c464:	4b05      	ldr	r3, [pc, #20]	; (800c47c <LoRaMacClassBPingSlotChannelReq+0x90>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	781a      	ldrb	r2, [r3, #0]
 800c46a:	f36f 0241 	bfc	r2, #1, #1
 800c46e:	701a      	strb	r2, [r3, #0]
            ClassBNvm->PingSlotCtx.Frequency = 0;
 800c470:	2200      	movs	r2, #0
 800c472:	605a      	str	r2, [r3, #4]
 800c474:	e7f2      	b.n	800c45c <LoRaMacClassBPingSlotChannelReq+0x70>
 800c476:	bf00      	nop
 800c478:	20000c84 	.word	0x20000c84
 800c47c:	20000c80 	.word	0x20000c80

0800c480 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 800c480:	b570      	push	{r4, r5, r6, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	4615      	mov	r5, r2
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.BeaconCtx.BeaconTimingDelay = ( CLASSB_BEACON_DELAY_BEACON_TIMING_ANS * beaconTimingDelay );
 800c486:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800c48a:	0040      	lsls	r0, r0, #1
 800c48c:	4b1c      	ldr	r3, [pc, #112]	; (800c500 <LoRaMacClassBBeaconTimingAns+0x80>)
 800c48e:	6398      	str	r0, [r3, #56]	; 0x38
    Ctx.BeaconCtx.BeaconTimingChannel = beaconTimingChannel;
 800c490:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34

    if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800c494:	200d      	movs	r0, #13
 800c496:	f000 fdc1 	bl	800d01c <LoRaMacConfirmQueueIsCmdActive>
 800c49a:	b1b0      	cbz	r0, 800c4ca <LoRaMacClassBBeaconTimingAns+0x4a>
    {
        if( Ctx.BeaconCtx.BeaconTimingDelay > CLASSB_BEACON_INTERVAL )
 800c49c:	4b18      	ldr	r3, [pc, #96]	; (800c500 <LoRaMacClassBBeaconTimingAns+0x80>)
 800c49e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800c4a0:	f5b1 3ffa 	cmp.w	r1, #128000	; 0x1f400
 800c4a4:	d913      	bls.n	800c4ce <LoRaMacClassBBeaconTimingAns+0x4e>
        {
            // We missed the beacon already
            Ctx.BeaconCtx.BeaconTimingDelay = 0;
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	639a      	str	r2, [r3, #56]	; 0x38
            Ctx.BeaconCtx.BeaconTimingChannel = 0;
 800c4aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_BEACON_TIMING );
 800c4ae:	210d      	movs	r1, #13
 800c4b0:	200f      	movs	r0, #15
 800c4b2:	f000 fd67 	bl	800cf84 <LoRaMacConfirmQueueSetStatus>
            Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 1;
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
        }

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
 800c4b6:	4b12      	ldr	r3, [pc, #72]	; (800c500 <LoRaMacClassBBeaconTimingAns+0x80>)
 800c4b8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c4bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800c4be:	60d1      	str	r1, [r2, #12]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
 800c4c0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c4c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c4c8:	7413      	strb	r3, [r2, #16]
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c4ca:	b002      	add	sp, #8
 800c4cc:	bd70      	pop	{r4, r5, r6, pc}
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 800c4ce:	4c0c      	ldr	r4, [pc, #48]	; (800c500 <LoRaMacClassBBeaconTimingAns+0x80>)
 800c4d0:	7b23      	ldrb	r3, [r4, #12]
 800c4d2:	f043 0304 	orr.w	r3, r3, #4
 800c4d6:	7323      	strb	r3, [r4, #12]
            Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 1;
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	f043 0308 	orr.w	r3, r3, #8
 800c4de:	7323      	strb	r3, [r4, #12]
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
 800c4e0:	466e      	mov	r6, sp
 800c4e2:	4429      	add	r1, r5
 800c4e4:	4630      	mov	r0, r6
 800c4e6:	f005 fe2d 	bl	8012144 <SysTimeFromMs>
 800c4ea:	3420      	adds	r4, #32
 800c4ec:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c4f0:	e884 0003 	stmia.w	r4, {r0, r1}
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800c4f4:	210d      	movs	r1, #13
 800c4f6:	2000      	movs	r0, #0
 800c4f8:	f000 fd44 	bl	800cf84 <LoRaMacConfirmQueueSetStatus>
 800c4fc:	e7db      	b.n	800c4b6 <LoRaMacClassBBeaconTimingAns+0x36>
 800c4fe:	bf00      	nop
 800c500:	20000c84 	.word	0x20000c84

0800c504 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 800c504:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c506:	b089      	sub	sp, #36	; 0x24
#if ( LORAMAC_CLASSB_ENABLED == 1 )

    SysTime_t nextBeacon = SysTimeGet( );
 800c508:	ae04      	add	r6, sp, #16
 800c50a:	4630      	mov	r0, r6
 800c50c:	f005 fdc2 	bl	8012094 <SysTimeGet>
    uint32_t currentTimeMs = SysTimeToMs( nextBeacon );
 800c510:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c514:	f005 fdf6 	bl	8012104 <SysTimeToMs>
 800c518:	4607      	mov	r7, r0

    nextBeacon.Seconds = nextBeacon.Seconds + ( 128 - ( nextBeacon.Seconds % 128 ) );
 800c51a:	9c04      	ldr	r4, [sp, #16]
 800c51c:	f024 047f 	bic.w	r4, r4, #127	; 0x7f
 800c520:	3480      	adds	r4, #128	; 0x80
 800c522:	9404      	str	r4, [sp, #16]
    nextBeacon.SubSeconds = 0;
 800c524:	f04f 0c00 	mov.w	ip, #0
 800c528:	f8ad c014 	strh.w	ip, [sp, #20]

    Ctx.BeaconCtx.NextBeaconRx = nextBeacon;
 800c52c:	4d23      	ldr	r5, [pc, #140]	; (800c5bc <LoRaMacClassBDeviceTimeAns+0xb8>)
 800c52e:	f105 0220 	add.w	r2, r5, #32
 800c532:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c536:	e882 0003 	stmia.w	r2, {r0, r1}
    Ctx.BeaconCtx.LastBeaconRx = SysTimeSub( Ctx.BeaconCtx.NextBeaconRx, ( SysTime_t ){ .Seconds = CLASSB_BEACON_INTERVAL / 1000, .SubSeconds = 0 } );
 800c53a:	2380      	movs	r3, #128	; 0x80
 800c53c:	9306      	str	r3, [sp, #24]
 800c53e:	f8ad c01c 	strh.w	ip, [sp, #28]
 800c542:	ae02      	add	r6, sp, #8
 800c544:	9907      	ldr	r1, [sp, #28]
 800c546:	9100      	str	r1, [sp, #0]
 800c548:	ca06      	ldmia	r2, {r1, r2}
 800c54a:	4630      	mov	r0, r6
 800c54c:	f005 fd61 	bl	8012012 <SysTimeSub>
 800c550:	3518      	adds	r5, #24
 800c552:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c556:	e885 0003 	stmia.w	r5, {r0, r1}

    if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800c55a:	2009      	movs	r0, #9
 800c55c:	f000 fd5e 	bl	800d01c <LoRaMacConfirmQueueIsCmdActive>
 800c560:	b908      	cbnz	r0, 800c566 <LoRaMacClassBDeviceTimeAns+0x62>
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c562:	b009      	add	sp, #36	; 0x24
 800c564:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( currentTimeMs > SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) )
 800c566:	f105 0308 	add.w	r3, r5, #8
 800c56a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c56e:	f005 fdc9 	bl	8012104 <SysTimeToMs>
 800c572:	42b8      	cmp	r0, r7
 800c574:	d20b      	bcs.n	800c58e <LoRaMacClassBDeviceTimeAns+0x8a>
            Ctx.BeaconCtx.LastBeaconRx.Seconds = 0;
 800c576:	f1a5 0318 	sub.w	r3, r5, #24
 800c57a:	2200      	movs	r2, #0
 800c57c:	619a      	str	r2, [r3, #24]
            Ctx.BeaconCtx.LastBeaconRx.SubSeconds = 0;
 800c57e:	839a      	strh	r2, [r3, #28]
            Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
 800c580:	621a      	str	r2, [r3, #32]
            Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
 800c582:	849a      	strh	r2, [r3, #36]	; 0x24
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_DEVICE_TIME );
 800c584:	2109      	movs	r1, #9
 800c586:	200f      	movs	r0, #15
 800c588:	f000 fcfc 	bl	800cf84 <LoRaMacConfirmQueueSetStatus>
 800c58c:	e7e9      	b.n	800c562 <LoRaMacClassBDeviceTimeAns+0x5e>
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 800c58e:	4d0b      	ldr	r5, [pc, #44]	; (800c5bc <LoRaMacClassBDeviceTimeAns+0xb8>)
 800c590:	7b2b      	ldrb	r3, [r5, #12]
 800c592:	f043 0304 	orr.w	r3, r3, #4
 800c596:	732b      	strb	r3, [r5, #12]
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 800c598:	f105 0320 	add.w	r3, r5, #32
 800c59c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c5a0:	f005 fdb0 	bl	8012104 <SysTimeToMs>
 800c5a4:	1bc7      	subs	r7, r0, r7
 800c5a6:	63af      	str	r7, [r5, #56]	; 0x38
            Ctx.BeaconCtx.BeaconTime.Seconds = nextBeacon.Seconds - UNIX_GPS_EPOCH_OFFSET - 128;
 800c5a8:	4b05      	ldr	r3, [pc, #20]	; (800c5c0 <LoRaMacClassBDeviceTimeAns+0xbc>)
 800c5aa:	4423      	add	r3, r4
 800c5ac:	612b      	str	r3, [r5, #16]
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 800c5ae:	2000      	movs	r0, #0
 800c5b0:	82a8      	strh	r0, [r5, #20]
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800c5b2:	2109      	movs	r1, #9
 800c5b4:	f000 fce6 	bl	800cf84 <LoRaMacConfirmQueueSetStatus>
}
 800c5b8:	e7d3      	b.n	800c562 <LoRaMacClassBDeviceTimeAns+0x5e>
 800c5ba:	bf00      	nop
 800c5bc:	20000c84 	.word	0x20000c84
 800c5c0:	ed2ac200 	.word	0xed2ac200

0800c5c4 <LoRaMacClassBBeaconFreqReq>:
bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    VerifyParams_t verify;

    if( frequency != 0 )
 800c5c4:	b938      	cbnz	r0, 800c5d6 <LoRaMacClassBBeaconFreqReq+0x12>
            return true;
        }
    }
    else
    {
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
 800c5c6:	4b0f      	ldr	r3, [pc, #60]	; (800c604 <LoRaMacClassBBeaconFreqReq+0x40>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	7b1a      	ldrb	r2, [r3, #12]
 800c5cc:	f36f 0200 	bfc	r2, #0, #1
 800c5d0:	731a      	strb	r2, [r3, #12]
        return true;
 800c5d2:	2001      	movs	r0, #1
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c5d4:	4770      	bx	lr
{
 800c5d6:	b510      	push	{r4, lr}
 800c5d8:	b082      	sub	sp, #8
 800c5da:	4604      	mov	r4, r0
        verify.Frequency = frequency;
 800c5dc:	9001      	str	r0, [sp, #4]
        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == true )
 800c5de:	4b0a      	ldr	r3, [pc, #40]	; (800c608 <LoRaMacClassBBeaconFreqReq+0x44>)
 800c5e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	a901      	add	r1, sp, #4
 800c5e8:	7818      	ldrb	r0, [r3, #0]
 800c5ea:	f001 fa9c 	bl	800db26 <RegionVerify>
 800c5ee:	b908      	cbnz	r0, 800c5f4 <LoRaMacClassBBeaconFreqReq+0x30>
}
 800c5f0:	b002      	add	sp, #8
 800c5f2:	bd10      	pop	{r4, pc}
            ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 1;
 800c5f4:	4b03      	ldr	r3, [pc, #12]	; (800c604 <LoRaMacClassBBeaconFreqReq+0x40>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	7b1a      	ldrb	r2, [r3, #12]
 800c5fa:	f042 0201 	orr.w	r2, r2, #1
 800c5fe:	731a      	strb	r2, [r3, #12]
            ClassBNvm->BeaconCtx.Frequency = frequency;
 800c600:	611c      	str	r4, [r3, #16]
            return true;
 800c602:	e7f5      	b.n	800c5f0 <LoRaMacClassBBeaconFreqReq+0x2c>
 800c604:	20000c80 	.word	0x20000c80
 800c608:	20000c84 	.word	0x20000c84

0800c60c <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 800c60c:	b570      	push	{r4, r5, r6, lr}
 800c60e:	4605      	mov	r5, r0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800c610:	f005 fdee 	bl	80121f0 <UTIL_TIMER_GetCurrentTime>
 800c614:	4604      	mov	r4, r0
    TimerTime_t beaconReserved = 0;
    TimerTime_t nextBeacon = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx );
 800c616:	4e0f      	ldr	r6, [pc, #60]	; (800c654 <LoRaMacClassBIsUplinkCollision+0x48>)
 800c618:	f106 0320 	add.w	r3, r6, #32
 800c61c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c620:	f005 fd70 	bl	8012104 <SysTimeToMs>
 800c624:	4602      	mov	r2, r0

    beaconReserved = nextBeacon -
                     CLASSB_BEACON_GUARD -
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay1 -
 800c626:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
 800c62a:	68cb      	ldr	r3, [r1, #12]
                     CLASSB_BEACON_GUARD -
 800c62c:	1ac3      	subs	r3, r0, r3
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay2 -
 800c62e:	6908      	ldr	r0, [r1, #16]
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay1 -
 800c630:	1a1b      	subs	r3, r3, r0
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay2 -
 800c632:	1b5b      	subs	r3, r3, r5
    beaconReserved = nextBeacon -
 800c634:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
                     txTimeOnAir;

    // Check if the next beacon will be received during the next uplink.
    if( ( currentTime >= beaconReserved ) && ( currentTime < ( nextBeacon + CLASSB_BEACON_RESERVED ) ) )
 800c638:	429c      	cmp	r4, r3
 800c63a:	d305      	bcc.n	800c648 <LoRaMacClassBIsUplinkCollision+0x3c>
 800c63c:	f602 0248 	addw	r2, r2, #2120	; 0x848
 800c640:	42a2      	cmp	r2, r4
 800c642:	d803      	bhi.n	800c64c <LoRaMacClassBIsUplinkCollision+0x40>
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
 800c644:	2000      	movs	r0, #0
 800c646:	e000      	b.n	800c64a <LoRaMacClassBIsUplinkCollision+0x3e>
 800c648:	2000      	movs	r0, #0
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c64a:	bd70      	pop	{r4, r5, r6, pc}
        return CLASSB_BEACON_RESERVED;
 800c64c:	f640 0048 	movw	r0, #2120	; 0x848
 800c650:	e7fb      	b.n	800c64a <LoRaMacClassBIsUplinkCollision+0x3e>
 800c652:	bf00      	nop
 800c654:	20000c84 	.word	0x20000c84

0800c658 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 800c658:	b510      	push	{r4, lr}
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    TimerStop( &Ctx.PingSlotTimer );
 800c65a:	4c0c      	ldr	r4, [pc, #48]	; (800c68c <LoRaMacClassBStopRxSlots+0x34>)
 800c65c:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800c660:	f005 fe06 	bl	8012270 <UTIL_TIMER_Stop>
    TimerStop( &Ctx.MulticastSlotTimer );
 800c664:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 800c668:	f005 fe02 	bl	8012270 <UTIL_TIMER_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c66c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c670:	b672      	cpsid	i

    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
 800c672:	4b07      	ldr	r3, [pc, #28]	; (800c690 <LoRaMacClassBStopRxSlots+0x38>)
 800c674:	781a      	ldrb	r2, [r3, #0]
 800c676:	f36f 0241 	bfc	r2, #1, #1
 800c67a:	701a      	strb	r2, [r3, #0]
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
 800c67c:	b2d2      	uxtb	r2, r2
 800c67e:	f36f 0282 	bfc	r2, #2, #1
 800c682:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c684:	f381 8810 	msr	PRIMASK, r1
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c688:	bd10      	pop	{r4, pc}
 800c68a:	bf00      	nop
 800c68c:	20000c84 	.word	0x20000c84
 800c690:	20000d44 	.word	0x20000d44

0800c694 <LoRaMacClassBHaltBeaconing>:
    if( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 )
 800c694:	4b13      	ldr	r3, [pc, #76]	; (800c6e4 <LoRaMacClassBHaltBeaconing+0x50>)
 800c696:	7b1b      	ldrb	r3, [r3, #12]
 800c698:	f013 0f01 	tst.w	r3, #1
 800c69c:	d020      	beq.n	800c6e0 <LoRaMacClassBHaltBeaconing+0x4c>
{
 800c69e:	b510      	push	{r4, lr}
        if( ( Ctx.BeaconState == BEACON_STATE_TIMEOUT ) ||
 800c6a0:	4b10      	ldr	r3, [pc, #64]	; (800c6e4 <LoRaMacClassBHaltBeaconing+0x50>)
 800c6a2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c6a6:	2b02      	cmp	r3, #2
 800c6a8:	d016      	beq.n	800c6d8 <LoRaMacClassBHaltBeaconing+0x44>
 800c6aa:	2b0a      	cmp	r3, #10
 800c6ac:	d014      	beq.n	800c6d8 <LoRaMacClassBHaltBeaconing+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6ae:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c6b2:	b672      	cpsid	i
        LoRaMacClassBEvents.Events.Beacon = 0;
 800c6b4:	4b0c      	ldr	r3, [pc, #48]	; (800c6e8 <LoRaMacClassBHaltBeaconing+0x54>)
 800c6b6:	781a      	ldrb	r2, [r3, #0]
 800c6b8:	f36f 0200 	bfc	r2, #0, #1
 800c6bc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6be:	f381 8810 	msr	PRIMASK, r1
        TimerStop( &Ctx.BeaconTimer );
 800c6c2:	4c08      	ldr	r4, [pc, #32]	; (800c6e4 <LoRaMacClassBHaltBeaconing+0x50>)
 800c6c4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800c6c8:	f005 fdd2 	bl	8012270 <UTIL_TIMER_Stop>
        Ctx.BeaconState = BEACON_STATE_HALT;
 800c6cc:	2306      	movs	r3, #6
 800c6ce:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        LoRaMacClassBStopRxSlots( );
 800c6d2:	f7ff ffc1 	bl	800c658 <LoRaMacClassBStopRxSlots>
}
 800c6d6:	bd10      	pop	{r4, pc}
            LoRaMacClassBBeaconTimerEvent( NULL );
 800c6d8:	2000      	movs	r0, #0
 800c6da:	f7ff f919 	bl	800b910 <LoRaMacClassBBeaconTimerEvent>
 800c6de:	e7e6      	b.n	800c6ae <LoRaMacClassBHaltBeaconing+0x1a>
 800c6e0:	4770      	bx	lr
 800c6e2:	bf00      	nop
 800c6e4:	20000c84 	.word	0x20000c84
 800c6e8:	20000d44 	.word	0x20000d44

0800c6ec <LoRaMacClassBSwitchClass>:
{
 800c6ec:	b510      	push	{r4, lr}
 800c6ee:	4604      	mov	r4, r0
    if( nextClass == CLASS_B )
 800c6f0:	2801      	cmp	r0, #1
 800c6f2:	d002      	beq.n	800c6fa <LoRaMacClassBSwitchClass+0xe>
    if( nextClass == CLASS_A )
 800c6f4:	b174      	cbz	r4, 800c714 <LoRaMacClassBSwitchClass+0x28>
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c6f6:	2002      	movs	r0, #2
}
 800c6f8:	bd10      	pop	{r4, pc}
        if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) && ( ClassBNvm->PingSlotCtx.Ctrl.Assigned == 1 ) )
 800c6fa:	4b09      	ldr	r3, [pc, #36]	; (800c720 <LoRaMacClassBSwitchClass+0x34>)
 800c6fc:	7b1b      	ldrb	r3, [r3, #12]
 800c6fe:	f013 0f01 	tst.w	r3, #1
 800c702:	d0f7      	beq.n	800c6f4 <LoRaMacClassBSwitchClass+0x8>
 800c704:	4b07      	ldr	r3, [pc, #28]	; (800c724 <LoRaMacClassBSwitchClass+0x38>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	f013 0f01 	tst.w	r3, #1
 800c70e:	d0f1      	beq.n	800c6f4 <LoRaMacClassBSwitchClass+0x8>
            return LORAMAC_STATUS_OK;
 800c710:	2000      	movs	r0, #0
 800c712:	e7f1      	b.n	800c6f8 <LoRaMacClassBSwitchClass+0xc>
        LoRaMacClassBHaltBeaconing( );
 800c714:	f7ff ffbe 	bl	800c694 <LoRaMacClassBHaltBeaconing>
        InitClassBDefaults( );
 800c718:	f7ff f874 	bl	800b804 <InitClassBDefaults>
        return LORAMAC_STATUS_OK;
 800c71c:	4620      	mov	r0, r4
 800c71e:	e7eb      	b.n	800c6f8 <LoRaMacClassBSwitchClass+0xc>
 800c720:	20000c84 	.word	0x20000c84
 800c724:	20000c80 	.word	0x20000c80

0800c728 <LoRaMacClassBStartRxSlots>:

void LoRaMacClassBStartRxSlots( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ClassBNvm->PingSlotCtx.Ctrl.Assigned == 1 )
 800c728:	4b0f      	ldr	r3, [pc, #60]	; (800c768 <LoRaMacClassBStartRxSlots+0x40>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	f013 0f01 	tst.w	r3, #1
 800c732:	d100      	bne.n	800c736 <LoRaMacClassBStartRxSlots+0xe>
 800c734:	4770      	bx	lr
{
 800c736:	b570      	push	{r4, r5, r6, lr}
    {
        Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800c738:	4c0c      	ldr	r4, [pc, #48]	; (800c76c <LoRaMacClassBStartRxSlots+0x44>)
 800c73a:	2500      	movs	r5, #0
 800c73c:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
        TimerSetValue( &Ctx.PingSlotTimer, 1 );
 800c740:	f104 0664 	add.w	r6, r4, #100	; 0x64
 800c744:	2101      	movs	r1, #1
 800c746:	4630      	mov	r0, r6
 800c748:	f005 fe32 	bl	80123b0 <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.PingSlotTimer );
 800c74c:	4630      	mov	r0, r6
 800c74e:	f005 fde9 	bl	8012324 <UTIL_TIMER_Start>

        Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800c752:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
        TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 800c756:	347c      	adds	r4, #124	; 0x7c
 800c758:	2101      	movs	r1, #1
 800c75a:	4620      	mov	r0, r4
 800c75c:	f005 fe28 	bl	80123b0 <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.MulticastSlotTimer );
 800c760:	4620      	mov	r0, r4
 800c762:	f005 fddf 	bl	8012324 <UTIL_TIMER_Start>
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c766:	bd70      	pop	{r4, r5, r6, pc}
 800c768:	20000c80 	.word	0x20000c80
 800c76c:	20000c84 	.word	0x20000c84

0800c770 <UpdateBeaconState>:
{
 800c770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c774:	b083      	sub	sp, #12
 800c776:	4607      	mov	r7, r0
 800c778:	460e      	mov	r6, r1
 800c77a:	4614      	mov	r4, r2
    beaconEventTime = CalcDelayForNextBeacon( currentTime, SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) );
 800c77c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800c7dc <UpdateBeaconState+0x6c>
 800c780:	f108 0318 	add.w	r3, r8, #24
 800c784:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c788:	f005 fcbc 	bl	8012104 <SysTimeToMs>
 800c78c:	4601      	mov	r1, r0
 800c78e:	4620      	mov	r0, r4
 800c790:	f7fe ff82 	bl	800b698 <CalcDelayForNextBeacon>
 800c794:	4605      	mov	r5, r0
    Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( currentTime + beaconEventTime );
 800c796:	46e9      	mov	r9, sp
 800c798:	1821      	adds	r1, r4, r0
 800c79a:	4648      	mov	r0, r9
 800c79c:	f005 fcd2 	bl	8012144 <SysTimeFromMs>
 800c7a0:	f108 0320 	add.w	r3, r8, #32
 800c7a4:	e899 0003 	ldmia.w	r9, {r0, r1}
 800c7a8:	e883 0003 	stmia.w	r3, {r0, r1}
    beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 800c7ac:	f9b8 100e 	ldrsh.w	r1, [r8, #14]
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	f7ff f8f1 	bl	800b998 <TimerTempCompensation>
 800c7b6:	4605      	mov	r5, r0
    if( beaconEventTime > windowMovement )
 800c7b8:	42b0      	cmp	r0, r6
 800c7ba:	d900      	bls.n	800c7be <UpdateBeaconState+0x4e>
        beaconEventTime -= windowMovement;
 800c7bc:	1b85      	subs	r5, r0, r6
    Ctx.BeaconCtx.NextBeaconRxAdjusted = currentTime + beaconEventTime;
 800c7be:	442c      	add	r4, r5
 800c7c0:	4b06      	ldr	r3, [pc, #24]	; (800c7dc <UpdateBeaconState+0x6c>)
 800c7c2:	629c      	str	r4, [r3, #40]	; 0x28
    LoRaMacClassBStartRxSlots( );
 800c7c4:	f7ff ffb0 	bl	800c728 <LoRaMacClassBStartRxSlots>
    IndicateBeaconStatus( status );
 800c7c8:	4638      	mov	r0, r7
 800c7ca:	f7fe ff73 	bl	800b6b4 <IndicateBeaconStatus>
    return ApplyGuardTime( beaconEventTime );
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	f7fe ff92 	bl	800b6f8 <ApplyGuardTime>
}
 800c7d4:	b003      	add	sp, #12
 800c7d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7da:	bf00      	nop
 800c7dc:	20000c84 	.word	0x20000c84

0800c7e0 <LoRaMacClassBProcessBeacon>:
{
 800c7e0:	b570      	push	{r4, r5, r6, lr}
 800c7e2:	b088      	sub	sp, #32
    TimerTime_t currentTime = Ctx.BeaconCtx.TimeStamp;
 800c7e4:	4bb6      	ldr	r3, [pc, #728]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c7e6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    switch( Ctx.BeaconState )
 800c7e8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c7ec:	2b0a      	cmp	r3, #10
 800c7ee:	f200 815e 	bhi.w	800caae <LoRaMacClassBProcessBeacon+0x2ce>
 800c7f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c7f6:	0070      	.short	0x0070
 800c7f8:	0094000b 	.word	0x0094000b
 800c7fc:	009f015c 	.word	0x009f015c
 800c800:	015c00ce 	.word	0x015c00ce
 800c804:	011e00f3 	.word	0x011e00f3
 800c808:	012e015c 	.word	0x012e015c
            if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 800c80c:	4bac      	ldr	r3, [pc, #688]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c80e:	7b1b      	ldrb	r3, [r3, #12]
 800c810:	f013 0f10 	tst.w	r3, #16
 800c814:	d009      	beq.n	800c82a <LoRaMacClassBProcessBeacon+0x4a>
                Radio.Sleep();
 800c816:	4bab      	ldr	r3, [pc, #684]	; (800cac4 <LoRaMacClassBProcessBeacon+0x2e4>)
 800c818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81a:	4798      	blx	r3
                Ctx.BeaconState = BEACON_STATE_LOST;
 800c81c:	4ba8      	ldr	r3, [pc, #672]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c81e:	220a      	movs	r2, #10
 800c820:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    TimerTime_t beaconEventTime = 1;
 800c824:	2501      	movs	r5, #1
            activateTimer = true;
 800c826:	462c      	mov	r4, r5
 800c828:	e098      	b.n	800c95c <LoRaMacClassBProcessBeacon+0x17c>
                ResetWindowTimeout( );
 800c82a:	f7fe ff2b 	bl	800b684 <ResetWindowTimeout>
                if( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 )
 800c82e:	4ba4      	ldr	r3, [pc, #656]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c830:	7b1b      	ldrb	r3, [r3, #12]
 800c832:	f013 0f04 	tst.w	r3, #4
 800c836:	d109      	bne.n	800c84c <LoRaMacClassBProcessBeacon+0x6c>
                    Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
 800c838:	4ba1      	ldr	r3, [pc, #644]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c83a:	2200      	movs	r2, #0
 800c83c:	621a      	str	r2, [r3, #32]
                    Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
 800c83e:	849a      	strh	r2, [r3, #36]	; 0x24
                    Ctx.BeaconCtx.BeaconTimingDelay = 0;
 800c840:	639a      	str	r2, [r3, #56]	; 0x38
                    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 800c842:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    TimerTime_t beaconEventTime = 1;
 800c846:	2501      	movs	r5, #1
            activateTimer = true;
 800c848:	462c      	mov	r4, r5
 800c84a:	e087      	b.n	800c95c <LoRaMacClassBProcessBeacon+0x17c>
                    CalculateBeaconRxWindowConfig( &beaconRxConfig, Ctx.BeaconCtx.SymbolTimeout );
 800c84c:	4d9c      	ldr	r5, [pc, #624]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c84e:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
 800c850:	a802      	add	r0, sp, #8
 800c852:	f7ff f875 	bl	800b940 <CalculateBeaconRxWindowConfig>
                    if( Ctx.BeaconCtx.BeaconTimingDelay > 0 )
 800c856:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c858:	b353      	cbz	r3, 800c8b0 <LoRaMacClassBProcessBeacon+0xd0>
                        if( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) > currentTime )
 800c85a:	f105 0320 	add.w	r3, r5, #32
 800c85e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c862:	f005 fc4f 	bl	8012104 <SysTimeToMs>
 800c866:	42a0      	cmp	r0, r4
 800c868:	d811      	bhi.n	800c88e <LoRaMacClassBProcessBeacon+0xae>
                            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 800c86a:	4b95      	ldr	r3, [pc, #596]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c86c:	7b1a      	ldrb	r2, [r3, #12]
 800c86e:	f36f 0282 	bfc	r2, #2, #1
 800c872:	731a      	strb	r2, [r3, #12]
                            Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 0;
 800c874:	b2d2      	uxtb	r2, r2
 800c876:	f36f 02c3 	bfc	r2, #3, #1
 800c87a:	731a      	strb	r2, [r3, #12]
                            Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 800c87c:	2200      	movs	r2, #0
 800c87e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    TimerTime_t beaconEventTime = 1;
 800c882:	2501      	movs	r5, #1
                        Ctx.BeaconCtx.BeaconTimingDelay = 0;
 800c884:	4b8e      	ldr	r3, [pc, #568]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c886:	2200      	movs	r2, #0
 800c888:	639a      	str	r2, [r3, #56]	; 0x38
            activateTimer = true;
 800c88a:	2401      	movs	r4, #1
 800c88c:	e066      	b.n	800c95c <LoRaMacClassBProcessBeacon+0x17c>
                            beaconEventTime = TimerTempCompensation( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTime, Ctx.BeaconCtx.Temperature );
 800c88e:	f105 0320 	add.w	r3, r5, #32
 800c892:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c896:	f005 fc35 	bl	8012104 <SysTimeToMs>
 800c89a:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
 800c89e:	1b00      	subs	r0, r0, r4
 800c8a0:	f7ff f87a 	bl	800b998 <TimerTempCompensation>
 800c8a4:	4605      	mov	r5, r0
                            if( ( int32_t ) beaconEventTime > beaconRxConfig.WindowOffset )
 800c8a6:	9b05      	ldr	r3, [sp, #20]
 800c8a8:	4283      	cmp	r3, r0
 800c8aa:	daeb      	bge.n	800c884 <LoRaMacClassBProcessBeacon+0xa4>
                                beaconEventTime += beaconRxConfig.WindowOffset;
 800c8ac:	441d      	add	r5, r3
 800c8ae:	e7e9      	b.n	800c884 <LoRaMacClassBProcessBeacon+0xa4>
                        Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 800c8b0:	4b83      	ldr	r3, [pc, #524]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c8b2:	7b1a      	ldrb	r2, [r3, #12]
 800c8b4:	f36f 0282 	bfc	r2, #2, #1
 800c8b8:	731a      	strb	r2, [r3, #12]
                        Ctx.BeaconCtx.Ctrl.AcquisitionPending = 1;
 800c8ba:	b2d2      	uxtb	r2, r2
 800c8bc:	f042 0210 	orr.w	r2, r2, #16
 800c8c0:	731a      	strb	r2, [r3, #12]
                        RxBeaconSetup( CLASSB_BEACON_RESERVED, false, beaconRxConfig.WindowTimeout );
 800c8c2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	f640 0048 	movw	r0, #2120	; 0x848
 800c8cc:	f7ff f8f4 	bl	800bab8 <RxBeaconSetup>
    TimerTime_t beaconEventTime = 1;
 800c8d0:	2501      	movs	r5, #1
                        activateTimer = false;
 800c8d2:	2400      	movs	r4, #0
 800c8d4:	e042      	b.n	800c95c <LoRaMacClassBProcessBeacon+0x17c>
            if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 800c8d6:	4b7a      	ldr	r3, [pc, #488]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c8d8:	7b1b      	ldrb	r3, [r3, #12]
 800c8da:	f013 0f10 	tst.w	r3, #16
 800c8de:	d009      	beq.n	800c8f4 <LoRaMacClassBProcessBeacon+0x114>
                Radio.Sleep();
 800c8e0:	4b78      	ldr	r3, [pc, #480]	; (800cac4 <LoRaMacClassBProcessBeacon+0x2e4>)
 800c8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e4:	4798      	blx	r3
                Ctx.BeaconState = BEACON_STATE_LOST;
 800c8e6:	4b76      	ldr	r3, [pc, #472]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c8e8:	220a      	movs	r2, #10
 800c8ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    TimerTime_t beaconEventTime = 1;
 800c8ee:	2501      	movs	r5, #1
            activateTimer = true;
 800c8f0:	462c      	mov	r4, r5
 800c8f2:	e033      	b.n	800c95c <LoRaMacClassBProcessBeacon+0x17c>
                ResetWindowTimeout( );
 800c8f4:	f7fe fec6 	bl	800b684 <ResetWindowTimeout>
                Ctx.BeaconCtx.Ctrl.AcquisitionPending = 1;
 800c8f8:	4b71      	ldr	r3, [pc, #452]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c8fa:	7b1a      	ldrb	r2, [r3, #12]
 800c8fc:	f042 0210 	orr.w	r2, r2, #16
 800c900:	731a      	strb	r2, [r3, #12]
                CalculateBeaconRxWindowConfig( &beaconRxConfig, Ctx.BeaconCtx.SymbolTimeout );
 800c902:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 800c904:	a802      	add	r0, sp, #8
 800c906:	f7ff f81b 	bl	800b940 <CalculateBeaconRxWindowConfig>
                RxBeaconSetup( 0, true, beaconRxConfig.WindowTimeout );
 800c90a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800c90e:	2101      	movs	r1, #1
 800c910:	2000      	movs	r0, #0
 800c912:	f7ff f8d1 	bl	800bab8 <RxBeaconSetup>
                beaconEventTime = CLASSB_BEACON_INTERVAL;
 800c916:	f44f 35fa 	mov.w	r5, #128000	; 0x1f400
            activateTimer = true;
 800c91a:	2401      	movs	r4, #1
 800c91c:	e01e      	b.n	800c95c <LoRaMacClassBProcessBeacon+0x17c>
            Ctx.BeaconCtx.BeaconTime.Seconds += ( CLASSB_BEACON_INTERVAL / 1000 );
 800c91e:	4d68      	ldr	r5, [pc, #416]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c920:	692b      	ldr	r3, [r5, #16]
 800c922:	3380      	adds	r3, #128	; 0x80
 800c924:	612b      	str	r3, [r5, #16]
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 800c926:	2300      	movs	r3, #0
 800c928:	82ab      	strh	r3, [r5, #20]
            EnlargeWindowTimeout( );
 800c92a:	f7fe fe89 	bl	800b640 <EnlargeWindowTimeout>
            Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 800c92e:	2304      	movs	r3, #4
 800c930:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
            Ctx.BeaconCtx.Ctrl.BeaconAcquired = 0;
 800c934:	4b62      	ldr	r3, [pc, #392]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c936:	7b1a      	ldrb	r2, [r3, #12]
 800c938:	f36f 0241 	bfc	r2, #1, #1
 800c93c:	731a      	strb	r2, [r3, #12]
            if( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) > CLASSB_MAX_BEACON_LESS_PERIOD )
 800c93e:	3318      	adds	r3, #24
 800c940:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c944:	f005 fbde 	bl	8012104 <SysTimeToMs>
 800c948:	1a20      	subs	r0, r4, r0
 800c94a:	4b5f      	ldr	r3, [pc, #380]	; (800cac8 <LoRaMacClassBProcessBeacon+0x2e8>)
 800c94c:	4298      	cmp	r0, r3
 800c94e:	d914      	bls.n	800c97a <LoRaMacClassBProcessBeacon+0x19a>
                Ctx.BeaconState = BEACON_STATE_LOST;
 800c950:	4b5b      	ldr	r3, [pc, #364]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c952:	220a      	movs	r2, #10
 800c954:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    TimerTime_t beaconEventTime = 1;
 800c958:	2501      	movs	r5, #1
            activateTimer = true;
 800c95a:	462c      	mov	r4, r5
    MW_LOG(TS_ON, VLEVEL_H, "beacon state %d\r\n", Ctx.BeaconState);
 800c95c:	4b58      	ldr	r3, [pc, #352]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c95e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c962:	9300      	str	r3, [sp, #0]
 800c964:	4b59      	ldr	r3, [pc, #356]	; (800cacc <LoRaMacClassBProcessBeacon+0x2ec>)
 800c966:	2201      	movs	r2, #1
 800c968:	2100      	movs	r1, #0
 800c96a:	2003      	movs	r0, #3
 800c96c:	f005 f92c 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
    if( activateTimer == true )
 800c970:	2c00      	cmp	r4, #0
 800c972:	f040 80ad 	bne.w	800cad0 <LoRaMacClassBProcessBeacon+0x2f0>
}
 800c976:	b008      	add	sp, #32
 800c978:	bd70      	pop	{r4, r5, r6, pc}
                beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND,
 800c97a:	4e51      	ldr	r6, [pc, #324]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c97c:	4622      	mov	r2, r4
 800c97e:	6b31      	ldr	r1, [r6, #48]	; 0x30
 800c980:	200f      	movs	r0, #15
 800c982:	f7ff fef5 	bl	800c770 <UpdateBeaconState>
 800c986:	4605      	mov	r5, r0
                Ctx.BeaconState = BEACON_STATE_IDLE;
 800c988:	2307      	movs	r3, #7
 800c98a:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
            activateTimer = true;
 800c98e:	2401      	movs	r4, #1
 800c990:	e7e4      	b.n	800c95c <LoRaMacClassBProcessBeacon+0x17c>
            Ctx.BeaconCtx.Ctrl.AcquisitionPending = 0;
 800c992:	4e4b      	ldr	r6, [pc, #300]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c994:	7b33      	ldrb	r3, [r6, #12]
 800c996:	f36f 1304 	bfc	r3, #4, #1
 800c99a:	7333      	strb	r3, [r6, #12]
            beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED,
 800c99c:	4622      	mov	r2, r4
 800c99e:	2100      	movs	r1, #0
 800c9a0:	200d      	movs	r0, #13
 800c9a2:	f7ff fee5 	bl	800c770 <UpdateBeaconState>
 800c9a6:	4605      	mov	r5, r0
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 800c9a8:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	f013 0f04 	tst.w	r3, #4
 800c9b2:	d105      	bne.n	800c9c0 <LoRaMacClassBProcessBeacon+0x1e0>
            Ctx.BeaconState = BEACON_STATE_IDLE;
 800c9b4:	4b42      	ldr	r3, [pc, #264]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c9b6:	2207      	movs	r2, #7
 800c9b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            activateTimer = true;
 800c9bc:	2401      	movs	r4, #1
            break;
 800c9be:	e7cd      	b.n	800c95c <LoRaMacClassBProcessBeacon+0x17c>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true )
 800c9c0:	200b      	movs	r0, #11
 800c9c2:	f000 fb2b 	bl	800d01c <LoRaMacConfirmQueueIsCmdActive>
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d0f4      	beq.n	800c9b4 <LoRaMacClassBProcessBeacon+0x1d4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_ACQUISITION );
 800c9ca:	210b      	movs	r1, #11
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	f000 fad9 	bl	800cf84 <LoRaMacConfirmQueueSetStatus>
                    Ctx.LoRaMacClassBParams.MlmeConfirm->TxTimeOnAir = 0;
 800c9d2:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	605a      	str	r2, [r3, #4]
 800c9da:	e7eb      	b.n	800c9b4 <LoRaMacClassBProcessBeacon+0x1d4>
            GetTemperature( &Ctx.LoRaMacClassBCallbacks, &Ctx.BeaconCtx );
 800c9dc:	4c38      	ldr	r4, [pc, #224]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800c9de:	f104 010c 	add.w	r1, r4, #12
 800c9e2:	f104 0094 	add.w	r0, r4, #148	; 0x94
 800c9e6:	f7fe fe21 	bl	800b62c <GetTemperature>
            beaconEventTime = Ctx.BeaconCtx.NextBeaconRxAdjusted - Radio.GetWakeupTime( );
 800c9ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c9ec:	4b35      	ldr	r3, [pc, #212]	; (800cac4 <LoRaMacClassBProcessBeacon+0x2e4>)
 800c9ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9f0:	4798      	blx	r3
 800c9f2:	1a36      	subs	r6, r6, r0
            currentTime = TimerGetCurrentTime( );
 800c9f4:	f005 fbfc 	bl	80121f0 <UTIL_TIMER_GetCurrentTime>
 800c9f8:	4605      	mov	r5, r0
            CalculateBeaconRxWindowConfig( &beaconRxConfig, Ctx.BeaconCtx.SymbolTimeout );
 800c9fa:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800c9fc:	a802      	add	r0, sp, #8
 800c9fe:	f7fe ff9f 	bl	800b940 <CalculateBeaconRxWindowConfig>
            if( beaconEventTime > currentTime )
 800ca02:	42ae      	cmp	r6, r5
 800ca04:	d90e      	bls.n	800ca24 <LoRaMacClassBProcessBeacon+0x244>
                Ctx.BeaconState = BEACON_STATE_GUARD;
 800ca06:	2208      	movs	r2, #8
 800ca08:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
                beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 800ca0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca10:	1b70      	subs	r0, r6, r5
 800ca12:	f7fe ffc1 	bl	800b998 <TimerTempCompensation>
 800ca16:	4605      	mov	r5, r0
                if( ( int32_t ) beaconEventTime > beaconRxConfig.WindowOffset )
 800ca18:	9b05      	ldr	r3, [sp, #20]
 800ca1a:	4283      	cmp	r3, r0
 800ca1c:	da4d      	bge.n	800caba <LoRaMacClassBProcessBeacon+0x2da>
                    beaconEventTime += beaconRxConfig.WindowOffset;
 800ca1e:	441d      	add	r5, r3
            activateTimer = true;
 800ca20:	2401      	movs	r4, #1
 800ca22:	e79b      	b.n	800c95c <LoRaMacClassBProcessBeacon+0x17c>
                Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 800ca24:	4b26      	ldr	r3, [pc, #152]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800ca26:	2204      	movs	r2, #4
 800ca28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                beaconEventTime = 1;
 800ca2c:	2501      	movs	r5, #1
            activateTimer = true;
 800ca2e:	462c      	mov	r4, r5
 800ca30:	e794      	b.n	800c95c <LoRaMacClassBProcessBeacon+0x17c>
            Ctx.BeaconState = BEACON_STATE_RX;
 800ca32:	4b23      	ldr	r3, [pc, #140]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800ca34:	2209      	movs	r2, #9
 800ca36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            LoRaMacClassBStopRxSlots( );
 800ca3a:	f7ff fe0d 	bl	800c658 <LoRaMacClassBStopRxSlots>
            RxBeaconSetup( CLASSB_BEACON_RESERVED, false, beaconRxConfig.WindowTimeout );
 800ca3e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800ca42:	2100      	movs	r1, #0
 800ca44:	f640 0048 	movw	r0, #2120	; 0x848
 800ca48:	f7ff f836 	bl	800bab8 <RxBeaconSetup>
    TimerTime_t beaconEventTime = 1;
 800ca4c:	2501      	movs	r5, #1
    bool activateTimer = false;
 800ca4e:	2400      	movs	r4, #0
            break;
 800ca50:	e784      	b.n	800c95c <LoRaMacClassBProcessBeacon+0x17c>
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 800ca52:	4b1b      	ldr	r3, [pc, #108]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800ca54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	f013 0f04 	tst.w	r3, #4
 800ca5e:	d11c      	bne.n	800ca9a <LoRaMacClassBProcessBeacon+0x2ba>
                Ctx.LoRaMacClassBParams.MlmeIndication->MlmeIndication = MLME_BEACON_LOST;
 800ca60:	4b17      	ldr	r3, [pc, #92]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800ca62:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800ca66:	210e      	movs	r1, #14
 800ca68:	7011      	strb	r1, [r2, #0]
                Ctx.LoRaMacClassBParams.MlmeIndication->Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ca6a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800ca6e:	2100      	movs	r1, #0
 800ca70:	7051      	strb	r1, [r2, #1]
                Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeInd = 1;
 800ca72:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800ca76:	7813      	ldrb	r3, [r2, #0]
 800ca78:	f043 0308 	orr.w	r3, r3, #8
 800ca7c:	7013      	strb	r3, [r2, #0]
            LoRaMacClassBStopRxSlots( );
 800ca7e:	f7ff fdeb 	bl	800c658 <LoRaMacClassBStopRxSlots>
            InitClassBDefaults( );
 800ca82:	f7fe febf 	bl	800b804 <InitClassBDefaults>
            Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MacDone = 1;
 800ca86:	4b0e      	ldr	r3, [pc, #56]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800ca88:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800ca8c:	7813      	ldrb	r3, [r2, #0]
 800ca8e:	f043 0320 	orr.w	r3, r3, #32
 800ca92:	7013      	strb	r3, [r2, #0]
    TimerTime_t beaconEventTime = 1;
 800ca94:	2501      	movs	r5, #1
    bool activateTimer = false;
 800ca96:	2400      	movs	r4, #0
            break;
 800ca98:	e760      	b.n	800c95c <LoRaMacClassBProcessBeacon+0x17c>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true )
 800ca9a:	200b      	movs	r0, #11
 800ca9c:	f000 fabe 	bl	800d01c <LoRaMacConfirmQueueIsCmdActive>
 800caa0:	2800      	cmp	r0, #0
 800caa2:	d0ec      	beq.n	800ca7e <LoRaMacClassBProcessBeacon+0x29e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_BEACON_ACQUISITION );
 800caa4:	210b      	movs	r1, #11
 800caa6:	200f      	movs	r0, #15
 800caa8:	f000 fa6c 	bl	800cf84 <LoRaMacConfirmQueueSetStatus>
 800caac:	e7e7      	b.n	800ca7e <LoRaMacClassBProcessBeacon+0x29e>
            Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 800caae:	2400      	movs	r4, #0
 800cab0:	4b03      	ldr	r3, [pc, #12]	; (800cac0 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cab2:	f883 4048 	strb.w	r4, [r3, #72]	; 0x48
    TimerTime_t beaconEventTime = 1;
 800cab6:	2501      	movs	r5, #1
            break;
 800cab8:	e750      	b.n	800c95c <LoRaMacClassBProcessBeacon+0x17c>
            activateTimer = true;
 800caba:	2401      	movs	r4, #1
 800cabc:	e74e      	b.n	800c95c <LoRaMacClassBProcessBeacon+0x17c>
 800cabe:	bf00      	nop
 800cac0:	20000c84 	.word	0x20000c84
 800cac4:	080145a0 	.word	0x080145a0
 800cac8:	006ddd00 	.word	0x006ddd00
 800cacc:	08013eb0 	.word	0x08013eb0
        TimerSetValue( &Ctx.BeaconTimer, beaconEventTime );
 800cad0:	4c04      	ldr	r4, [pc, #16]	; (800cae4 <LoRaMacClassBProcessBeacon+0x304>)
 800cad2:	4629      	mov	r1, r5
 800cad4:	4620      	mov	r0, r4
 800cad6:	f005 fc6b 	bl	80123b0 <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.BeaconTimer );
 800cada:	4620      	mov	r0, r4
 800cadc:	f005 fc22 	bl	8012324 <UTIL_TIMER_Start>
}
 800cae0:	e749      	b.n	800c976 <LoRaMacClassBProcessBeacon+0x196>
 800cae2:	bf00      	nop
 800cae4:	20000cd0 	.word	0x20000cd0

0800cae8 <LoRaMacClassBSetFPendingBit>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    MulticastCtx_t *cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 800cae8:	4b0d      	ldr	r3, [pc, #52]	; (800cb20 <LoRaMacClassBSetFPendingBit+0x38>)
 800caea:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8

    if( address == *Ctx.LoRaMacClassBParams.LoRaMacDevAddr )
 800caee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4283      	cmp	r3, r0
 800caf6:	d001      	beq.n	800cafc <LoRaMacClassBSetFPendingBit+0x14>
        // Unicast
        ClassBNvm->PingSlotCtx.FPendingSet = fPendingSet;
    }
    else
    {
        for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800caf8:	2300      	movs	r3, #0
 800cafa:	e00b      	b.n	800cb14 <LoRaMacClassBSetFPendingBit+0x2c>
        ClassBNvm->PingSlotCtx.FPendingSet = fPendingSet;
 800cafc:	4b09      	ldr	r3, [pc, #36]	; (800cb24 <LoRaMacClassBSetFPendingBit+0x3c>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	7259      	strb	r1, [r3, #9]
 800cb02:	4770      	bx	lr
        {
            if( cur != NULL )
 800cb04:	b11a      	cbz	r2, 800cb0e <LoRaMacClassBSetFPendingBit+0x26>
            {
                // Set the fPending bit, if its a multicast
                if( address == cur->ChannelParams.Address )
 800cb06:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800cb0a:	4584      	cmp	ip, r0
 800cb0c:	d005      	beq.n	800cb1a <LoRaMacClassBSetFPendingBit+0x32>
                {
                    cur->FPendingSet = fPendingSet;
                }
            }
            cur++;
 800cb0e:	322c      	adds	r2, #44	; 0x2c
        for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cb10:	3301      	adds	r3, #1
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d0f5      	beq.n	800cb04 <LoRaMacClassBSetFPendingBit+0x1c>
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cb18:	4770      	bx	lr
                    cur->FPendingSet = fPendingSet;
 800cb1a:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
 800cb1e:	e7f6      	b.n	800cb0e <LoRaMacClassBSetFPendingBit+0x26>
 800cb20:	20000c84 	.word	0x20000c84
 800cb24:	20000c80 	.word	0x20000c80

0800cb28 <LoRaMacClassBProcess>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb28:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cb2c:	b672      	cpsid	i
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents_t events;

    CRITICAL_SECTION_BEGIN( );
    events = LoRaMacClassBEvents;
 800cb2e:	4a0e      	ldr	r2, [pc, #56]	; (800cb68 <LoRaMacClassBProcess+0x40>)
 800cb30:	6813      	ldr	r3, [r2, #0]
    LoRaMacClassBEvents.Value = 0;
 800cb32:	2000      	movs	r0, #0
 800cb34:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb36:	f381 8810 	msr	PRIMASK, r1
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800cb3a:	b1a3      	cbz	r3, 800cb66 <LoRaMacClassBProcess+0x3e>
{
 800cb3c:	b510      	push	{r4, lr}
    {
        if( events.Events.Beacon == 1 )
 800cb3e:	b2dc      	uxtb	r4, r3
 800cb40:	f013 0f01 	tst.w	r3, #1
 800cb44:	d106      	bne.n	800cb54 <LoRaMacClassBProcess+0x2c>
        {
            LoRaMacClassBProcessBeacon( );
        }
        if( events.Events.PingSlot == 1 )
 800cb46:	f014 0f02 	tst.w	r4, #2
 800cb4a:	d106      	bne.n	800cb5a <LoRaMacClassBProcess+0x32>
        {
            LoRaMacClassBProcessPingSlot( );
        }
        if( events.Events.MulticastSlot == 1 )
 800cb4c:	f014 0f04 	tst.w	r4, #4
 800cb50:	d106      	bne.n	800cb60 <LoRaMacClassBProcess+0x38>
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cb52:	bd10      	pop	{r4, pc}
            LoRaMacClassBProcessBeacon( );
 800cb54:	f7ff fe44 	bl	800c7e0 <LoRaMacClassBProcessBeacon>
 800cb58:	e7f5      	b.n	800cb46 <LoRaMacClassBProcess+0x1e>
            LoRaMacClassBProcessPingSlot( );
 800cb5a:	f7ff f833 	bl	800bbc4 <LoRaMacClassBProcessPingSlot>
 800cb5e:	e7f5      	b.n	800cb4c <LoRaMacClassBProcess+0x24>
            LoRaMacClassBProcessMulticastSlot( );
 800cb60:	f7ff f916 	bl	800bd90 <LoRaMacClassBProcessMulticastSlot>
}
 800cb64:	e7f5      	b.n	800cb52 <LoRaMacClassBProcess+0x2a>
 800cb66:	4770      	bx	lr
 800cb68:	20000d44 	.word	0x20000d44

0800cb6c <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	2b0f      	cmp	r3, #15
 800cb70:	d804      	bhi.n	800cb7c <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800cb72:	5cc2      	ldrb	r2, [r0, r3]
 800cb74:	b922      	cbnz	r2, 800cb80 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800cb76:	3301      	adds	r3, #1
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	e7f8      	b.n	800cb6e <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800cb7c:	2001      	movs	r0, #1
 800cb7e:	4770      	bx	lr
            return false;
 800cb80:	2000      	movs	r0, #0
}
 800cb82:	4770      	bx	lr

0800cb84 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800cb84:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800cb86:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800cb88:	0125      	lsls	r5, r4, #4
 800cb8a:	f105 0308 	add.w	r3, r5, #8
 800cb8e:	4d06      	ldr	r5, [pc, #24]	; (800cba8 <MallocNewMacCommandSlot+0x24>)
 800cb90:	441d      	add	r5, r3
 800cb92:	4628      	mov	r0, r5
 800cb94:	f7ff ffea 	bl	800cb6c <IsSlotFree>
 800cb98:	b920      	cbnz	r0, 800cba4 <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800cb9a:	3401      	adds	r4, #1
 800cb9c:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800cb9e:	2c20      	cmp	r4, #32
 800cba0:	d1f2      	bne.n	800cb88 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800cba2:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800cba4:	4628      	mov	r0, r5
 800cba6:	bd38      	pop	{r3, r4, r5, pc}
 800cba8:	20000d78 	.word	0x20000d78

0800cbac <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800cbac:	b120      	cbz	r0, 800cbb8 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800cbae:	2200      	movs	r2, #0
 800cbb0:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800cbb2:	6042      	str	r2, [r0, #4]

    return true;
 800cbb4:	2001      	movs	r0, #1
 800cbb6:	4770      	bx	lr
        return false;
 800cbb8:	2000      	movs	r0, #0
}
 800cbba:	4770      	bx	lr

0800cbbc <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	b160      	cbz	r0, 800cbda <LinkedListAdd+0x1e>
 800cbc0:	b169      	cbz	r1, 800cbde <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800cbc2:	6802      	ldr	r2, [r0, #0]
 800cbc4:	b13a      	cbz	r2, 800cbd6 <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800cbc6:	685a      	ldr	r2, [r3, #4]
 800cbc8:	b102      	cbz	r2, 800cbcc <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800cbca:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800cbcc:	2200      	movs	r2, #0
 800cbce:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800cbd0:	6059      	str	r1, [r3, #4]

    return true;
 800cbd2:	2001      	movs	r0, #1
 800cbd4:	4770      	bx	lr
        list->First = element;
 800cbd6:	6001      	str	r1, [r0, #0]
 800cbd8:	e7f5      	b.n	800cbc6 <LinkedListAdd+0xa>
        return false;
 800cbda:	2000      	movs	r0, #0
 800cbdc:	4770      	bx	lr
 800cbde:	2000      	movs	r0, #0
}
 800cbe0:	4770      	bx	lr

0800cbe2 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800cbe2:	b160      	cbz	r0, 800cbfe <LinkedListGetPrevious+0x1c>
 800cbe4:	b161      	cbz	r1, 800cc00 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800cbe6:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800cbe8:	4281      	cmp	r1, r0
 800cbea:	d102      	bne.n	800cbf2 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800cbec:	2000      	movs	r0, #0
    }

    return curElement;
}
 800cbee:	4770      	bx	lr
            curElement = curElement->Next;
 800cbf0:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800cbf2:	2800      	cmp	r0, #0
 800cbf4:	d0fb      	beq.n	800cbee <LinkedListGetPrevious+0xc>
 800cbf6:	6803      	ldr	r3, [r0, #0]
 800cbf8:	428b      	cmp	r3, r1
 800cbfa:	d1f9      	bne.n	800cbf0 <LinkedListGetPrevious+0xe>
 800cbfc:	4770      	bx	lr
 800cbfe:	4770      	bx	lr
        return NULL;
 800cc00:	4608      	mov	r0, r1
 800cc02:	4770      	bx	lr

0800cc04 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800cc04:	b1b8      	cbz	r0, 800cc36 <LinkedListRemove+0x32>
{
 800cc06:	b538      	push	{r3, r4, r5, lr}
 800cc08:	460c      	mov	r4, r1
 800cc0a:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800cc0c:	b1a9      	cbz	r1, 800cc3a <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800cc0e:	f7ff ffe8 	bl	800cbe2 <LinkedListGetPrevious>

    if( list->First == element )
 800cc12:	682b      	ldr	r3, [r5, #0]
 800cc14:	42a3      	cmp	r3, r4
 800cc16:	d009      	beq.n	800cc2c <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800cc18:	686b      	ldr	r3, [r5, #4]
 800cc1a:	42a3      	cmp	r3, r4
 800cc1c:	d009      	beq.n	800cc32 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800cc1e:	b108      	cbz	r0, 800cc24 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800cc20:	6823      	ldr	r3, [r4, #0]
 800cc22:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800cc24:	2300      	movs	r3, #0
 800cc26:	6023      	str	r3, [r4, #0]

    return true;
 800cc28:	2001      	movs	r0, #1
}
 800cc2a:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800cc2c:	6823      	ldr	r3, [r4, #0]
 800cc2e:	602b      	str	r3, [r5, #0]
 800cc30:	e7f2      	b.n	800cc18 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800cc32:	6068      	str	r0, [r5, #4]
 800cc34:	e7f3      	b.n	800cc1e <LinkedListRemove+0x1a>
        return false;
 800cc36:	2000      	movs	r0, #0
}
 800cc38:	4770      	bx	lr
        return false;
 800cc3a:	2000      	movs	r0, #0
 800cc3c:	e7f5      	b.n	800cc2a <LinkedListRemove+0x26>
	...

0800cc40 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800cc40:	2811      	cmp	r0, #17
 800cc42:	d808      	bhi.n	800cc56 <IsSticky+0x16>
 800cc44:	2301      	movs	r3, #1
 800cc46:	fa03 f000 	lsl.w	r0, r3, r0
 800cc4a:	4b04      	ldr	r3, [pc, #16]	; (800cc5c <IsSticky+0x1c>)
 800cc4c:	4218      	tst	r0, r3
 800cc4e:	bf14      	ite	ne
 800cc50:	2001      	movne	r0, #1
 800cc52:	2000      	moveq	r0, #0
 800cc54:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800cc56:	2000      	movs	r0, #0
    }
}
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop
 800cc5c:	00020720 	.word	0x00020720

0800cc60 <FreeMacCommandSlot>:
    if( slot == NULL )
 800cc60:	b130      	cbz	r0, 800cc70 <FreeMacCommandSlot+0x10>
{
 800cc62:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800cc64:	2210      	movs	r2, #16
 800cc66:	2100      	movs	r1, #0
 800cc68:	f003 f91d 	bl	800fea6 <memset1>
    return true;
 800cc6c:	2001      	movs	r0, #1
}
 800cc6e:	bd08      	pop	{r3, pc}
        return false;
 800cc70:	2000      	movs	r0, #0
}
 800cc72:	4770      	bx	lr

0800cc74 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800cc74:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800cc76:	4c06      	ldr	r4, [pc, #24]	; (800cc90 <LoRaMacCommandsInit+0x1c>)
 800cc78:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	4620      	mov	r0, r4
 800cc80:	f003 f911 	bl	800fea6 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800cc84:	4620      	mov	r0, r4
 800cc86:	f7ff ff91 	bl	800cbac <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800cc8a:	2000      	movs	r0, #0
 800cc8c:	bd10      	pop	{r4, pc}
 800cc8e:	bf00      	nop
 800cc90:	20000d78 	.word	0x20000d78

0800cc94 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800cc94:	b301      	cbz	r1, 800ccd8 <LoRaMacCommandsAddCmd+0x44>
{
 800cc96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc98:	4605      	mov	r5, r0
 800cc9a:	4614      	mov	r4, r2
 800cc9c:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800cc9e:	f7ff ff71 	bl	800cb84 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800cca2:	4606      	mov	r6, r0
 800cca4:	b1d0      	cbz	r0, 800ccdc <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800cca6:	4601      	mov	r1, r0
 800cca8:	480e      	ldr	r0, [pc, #56]	; (800cce4 <LoRaMacCommandsAddCmd+0x50>)
 800ccaa:	f7ff ff87 	bl	800cbbc <LinkedListAdd>
 800ccae:	b1b8      	cbz	r0, 800cce0 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800ccb0:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800ccb2:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800ccb4:	b2a2      	uxth	r2, r4
 800ccb6:	4639      	mov	r1, r7
 800ccb8:	1d70      	adds	r0, r6, #5
 800ccba:	f003 f8dc 	bl	800fe76 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	f7ff ffbe 	bl	800cc40 <IsSticky>
 800ccc4:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800ccc6:	4b07      	ldr	r3, [pc, #28]	; (800cce4 <LoRaMacCommandsAddCmd+0x50>)
 800ccc8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800cccc:	4414      	add	r4, r2
 800ccce:	3401      	adds	r4, #1
 800ccd0:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800ccd4:	2000      	movs	r0, #0
}
 800ccd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ccd8:	2001      	movs	r0, #1
}
 800ccda:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800ccdc:	2002      	movs	r0, #2
 800ccde:	e7fa      	b.n	800ccd6 <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800cce0:	2005      	movs	r0, #5
 800cce2:	e7f8      	b.n	800ccd6 <LoRaMacCommandsAddCmd+0x42>
 800cce4:	20000d78 	.word	0x20000d78

0800cce8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800cce8:	b1a0      	cbz	r0, 800cd14 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800ccea:	b510      	push	{r4, lr}
 800ccec:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800ccee:	4601      	mov	r1, r0
 800ccf0:	480b      	ldr	r0, [pc, #44]	; (800cd20 <LoRaMacCommandsRemoveCmd+0x38>)
 800ccf2:	f7ff ff87 	bl	800cc04 <LinkedListRemove>
 800ccf6:	b178      	cbz	r0, 800cd18 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800ccf8:	68a1      	ldr	r1, [r4, #8]
 800ccfa:	4a09      	ldr	r2, [pc, #36]	; (800cd20 <LoRaMacCommandsRemoveCmd+0x38>)
 800ccfc:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800cd00:	1a5b      	subs	r3, r3, r1
 800cd02:	3b01      	subs	r3, #1
 800cd04:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f7ff ffa9 	bl	800cc60 <FreeMacCommandSlot>
 800cd0e:	b128      	cbz	r0, 800cd1c <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800cd10:	2000      	movs	r0, #0
}
 800cd12:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cd14:	2001      	movs	r0, #1
}
 800cd16:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800cd18:	2003      	movs	r0, #3
 800cd1a:	e7fa      	b.n	800cd12 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800cd1c:	2005      	movs	r0, #5
 800cd1e:	e7f8      	b.n	800cd12 <LoRaMacCommandsRemoveCmd+0x2a>
 800cd20:	20000d78 	.word	0x20000d78

0800cd24 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800cd24:	4b0a      	ldr	r3, [pc, #40]	; (800cd50 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800cd26:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800cd28:	b120      	cbz	r0, 800cd34 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800cd2a:	7b03      	ldrb	r3, [r0, #12]
 800cd2c:	b11b      	cbz	r3, 800cd36 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800cd2e:	6800      	ldr	r0, [r0, #0]
 800cd30:	e7fa      	b.n	800cd28 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800cd32:	bd10      	pop	{r4, pc}
 800cd34:	4770      	bx	lr
{
 800cd36:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800cd38:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800cd3a:	f7ff ffd5 	bl	800cce8 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800cd3e:	4620      	mov	r0, r4
    while( curElement != NULL )
 800cd40:	2800      	cmp	r0, #0
 800cd42:	d0f6      	beq.n	800cd32 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800cd44:	7b03      	ldrb	r3, [r0, #12]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d0f6      	beq.n	800cd38 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800cd4a:	6800      	ldr	r0, [r0, #0]
 800cd4c:	e7f8      	b.n	800cd40 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800cd4e:	bf00      	nop
 800cd50:	20000d78 	.word	0x20000d78

0800cd54 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800cd54:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800cd56:	4b08      	ldr	r3, [pc, #32]	; (800cd78 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800cd58:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800cd5a:	e000      	b.n	800cd5e <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800cd5c:	462c      	mov	r4, r5
    while( curElement != NULL )
 800cd5e:	b14c      	cbz	r4, 800cd74 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
    {
        nexElement = curElement->Next;
 800cd60:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800cd62:	7920      	ldrb	r0, [r4, #4]
 800cd64:	f7ff ff6c 	bl	800cc40 <IsSticky>
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d0f7      	beq.n	800cd5c <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f7ff ffbb 	bl	800cce8 <LoRaMacCommandsRemoveCmd>
 800cd72:	e7f3      	b.n	800cd5c <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800cd74:	2000      	movs	r0, #0
 800cd76:	bd38      	pop	{r3, r4, r5, pc}
 800cd78:	20000d78 	.word	0x20000d78

0800cd7c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800cd7c:	b128      	cbz	r0, 800cd8a <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800cd7e:	4a04      	ldr	r2, [pc, #16]	; (800cd90 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800cd80:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800cd84:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800cd86:	2000      	movs	r0, #0
 800cd88:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cd8a:	2001      	movs	r0, #1
}
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop
 800cd90:	20000d78 	.word	0x20000d78

0800cd94 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800cd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800cd98:	4b16      	ldr	r3, [pc, #88]	; (800cdf4 <LoRaMacCommandsSerializeCmds+0x60>)
 800cd9a:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800cd9c:	b32a      	cbz	r2, 800cdea <LoRaMacCommandsSerializeCmds+0x56>
 800cd9e:	4607      	mov	r7, r0
 800cda0:	4688      	mov	r8, r1
 800cda2:	4616      	mov	r6, r2
 800cda4:	b319      	cbz	r1, 800cdee <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800cda6:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800cda8:	b194      	cbz	r4, 800cdd0 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800cdaa:	1a7a      	subs	r2, r7, r1
 800cdac:	68a3      	ldr	r3, [r4, #8]
 800cdae:	3301      	adds	r3, #1
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d30d      	bcc.n	800cdd0 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800cdb4:	1c4d      	adds	r5, r1, #1
 800cdb6:	b2ed      	uxtb	r5, r5
 800cdb8:	7923      	ldrb	r3, [r4, #4]
 800cdba:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800cdbc:	8922      	ldrh	r2, [r4, #8]
 800cdbe:	1d61      	adds	r1, r4, #5
 800cdc0:	1970      	adds	r0, r6, r5
 800cdc2:	f003 f858 	bl	800fe76 <memcpy1>
            itr += curElement->PayloadSize;
 800cdc6:	68a3      	ldr	r3, [r4, #8]
 800cdc8:	441d      	add	r5, r3
 800cdca:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800cdcc:	6824      	ldr	r4, [r4, #0]
 800cdce:	e7eb      	b.n	800cda8 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800cdd0:	b12c      	cbz	r4, 800cdde <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800cdd2:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	f7ff ff87 	bl	800cce8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800cdda:	462c      	mov	r4, r5
 800cddc:	e7f8      	b.n	800cdd0 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800cdde:	4640      	mov	r0, r8
 800cde0:	f7ff ffcc 	bl	800cd7c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800cde4:	2000      	movs	r0, #0
}
 800cde6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cdea:	2001      	movs	r0, #1
 800cdec:	e7fb      	b.n	800cde6 <LoRaMacCommandsSerializeCmds+0x52>
 800cdee:	2001      	movs	r0, #1
 800cdf0:	e7f9      	b.n	800cde6 <LoRaMacCommandsSerializeCmds+0x52>
 800cdf2:	bf00      	nop
 800cdf4:	20000d78 	.word	0x20000d78

0800cdf8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800cdf8:	4601      	mov	r1, r0
 800cdfa:	b170      	cbz	r0, 800ce1a <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800cdfc:	4b08      	ldr	r3, [pc, #32]	; (800ce20 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800cdfe:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800ce00:	2200      	movs	r2, #0
 800ce02:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800ce04:	b13b      	cbz	r3, 800ce16 <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800ce06:	7b1a      	ldrb	r2, [r3, #12]
 800ce08:	b90a      	cbnz	r2, 800ce0e <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	e7fa      	b.n	800ce04 <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800ce12:	2000      	movs	r0, #0
 800ce14:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800ce16:	2000      	movs	r0, #0
 800ce18:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ce1a:	2001      	movs	r0, #1
}
 800ce1c:	4770      	bx	lr
 800ce1e:	bf00      	nop
 800ce20:	20000d78 	.word	0x20000d78

0800ce24 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800ce24:	1e83      	subs	r3, r0, #2
 800ce26:	2b11      	cmp	r3, #17
 800ce28:	d80a      	bhi.n	800ce40 <LoRaMacCommandsGetCmdSize+0x1c>
 800ce2a:	e8df f003 	tbb	[pc, r3]
 800ce2e:	0b23      	.short	0x0b23
 800ce30:	110f240d 	.word	0x110f240d
 800ce34:	09171513 	.word	0x09171513
 800ce38:	09091909 	.word	0x09091909
 800ce3c:	211f1d1b 	.word	0x211f1d1b
 800ce40:	2000      	movs	r0, #0
 800ce42:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800ce44:	2005      	movs	r0, #5
            break;
 800ce46:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800ce48:	2002      	movs	r0, #2
            break;
 800ce4a:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800ce4c:	2001      	movs	r0, #1
            break;
 800ce4e:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800ce50:	2006      	movs	r0, #6
            break;
 800ce52:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800ce54:	2002      	movs	r0, #2
            break;
 800ce56:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800ce58:	2002      	movs	r0, #2
            break;
 800ce5a:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800ce5c:	2005      	movs	r0, #5
            break;
 800ce5e:	4770      	bx	lr
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800ce60:	2006      	movs	r0, #6
            break;
 800ce62:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800ce64:	2001      	movs	r0, #1
            break;
 800ce66:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800ce68:	2005      	movs	r0, #5
            break;
 800ce6a:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800ce6c:	2004      	movs	r0, #4
            break;
 800ce6e:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800ce70:	2004      	movs	r0, #4
            break;
 800ce72:	4770      	bx	lr
            cidSize = 3;
 800ce74:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800ce76:	4770      	bx	lr

0800ce78 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800ce78:	4b03      	ldr	r3, [pc, #12]	; (800ce88 <IncreaseBufferPointer+0x10>)
 800ce7a:	4298      	cmp	r0, r3
 800ce7c:	d001      	beq.n	800ce82 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800ce7e:	3004      	adds	r0, #4
 800ce80:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ce82:	4802      	ldr	r0, [pc, #8]	; (800ce8c <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800ce84:	4770      	bx	lr
 800ce86:	bf00      	nop
 800ce88:	20000fa0 	.word	0x20000fa0
 800ce8c:	20000f90 	.word	0x20000f90

0800ce90 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800ce90:	b108      	cbz	r0, 800ce96 <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800ce92:	2000      	movs	r0, #0
 800ce94:	4770      	bx	lr
        return true;
 800ce96:	2001      	movs	r0, #1
}
 800ce98:	4770      	bx	lr

0800ce9a <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800ce9a:	2804      	cmp	r0, #4
 800ce9c:	d801      	bhi.n	800cea2 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800ce9e:	2000      	movs	r0, #0
 800cea0:	4770      	bx	lr
        return true;
 800cea2:	2001      	movs	r0, #1
}
 800cea4:	4770      	bx	lr
	...

0800cea8 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800cea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceaa:	4606      	mov	r6, r0
 800ceac:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800ceae:	4b0d      	ldr	r3, [pc, #52]	; (800cee4 <GetElement+0x3c>)
 800ceb0:	f893 7020 	ldrb.w	r7, [r3, #32]
 800ceb4:	4638      	mov	r0, r7
 800ceb6:	f7ff ffeb 	bl	800ce90 <IsListEmpty>
 800ceba:	b970      	cbnz	r0, 800ceda <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800cebc:	2500      	movs	r5, #0
 800cebe:	42af      	cmp	r7, r5
 800cec0:	d909      	bls.n	800ced6 <GetElement+0x2e>
    {
        if( element->Request == request )
 800cec2:	7823      	ldrb	r3, [r4, #0]
 800cec4:	42b3      	cmp	r3, r6
 800cec6:	d00a      	beq.n	800cede <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800cec8:	4620      	mov	r0, r4
 800ceca:	f7ff ffd5 	bl	800ce78 <IncreaseBufferPointer>
 800cece:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800ced0:	3501      	adds	r5, #1
 800ced2:	b2ed      	uxtb	r5, r5
 800ced4:	e7f3      	b.n	800cebe <GetElement+0x16>
    }

    return NULL;
 800ced6:	2000      	movs	r0, #0
}
 800ced8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800ceda:	2000      	movs	r0, #0
 800cedc:	e7fc      	b.n	800ced8 <GetElement+0x30>
            return element;
 800cede:	4620      	mov	r0, r4
 800cee0:	e7fa      	b.n	800ced8 <GetElement+0x30>
 800cee2:	bf00      	nop
 800cee4:	20000f84 	.word	0x20000f84

0800cee8 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800cee8:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800ceea:	4c08      	ldr	r4, [pc, #32]	; (800cf0c <LoRaMacConfirmQueueInit+0x24>)
 800ceec:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800ceee:	2300      	movs	r3, #0
 800cef0:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800cef4:	f104 000c 	add.w	r0, r4, #12
 800cef8:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800cefa:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800cefc:	2214      	movs	r2, #20
 800cefe:	21ff      	movs	r1, #255	; 0xff
 800cf00:	f002 ffd1 	bl	800fea6 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cf04:	2301      	movs	r3, #1
 800cf06:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800cf0a:	bd10      	pop	{r4, pc}
 800cf0c:	20000f84 	.word	0x20000f84

0800cf10 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800cf10:	b538      	push	{r3, r4, r5, lr}
 800cf12:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800cf14:	4b0f      	ldr	r3, [pc, #60]	; (800cf54 <LoRaMacConfirmQueueAdd+0x44>)
 800cf16:	f893 0020 	ldrb.w	r0, [r3, #32]
 800cf1a:	f7ff ffbe 	bl	800ce9a <IsListFull>
 800cf1e:	b9b8      	cbnz	r0, 800cf50 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800cf20:	4c0c      	ldr	r4, [pc, #48]	; (800cf54 <LoRaMacConfirmQueueAdd+0x44>)
 800cf22:	68a3      	ldr	r3, [r4, #8]
 800cf24:	782a      	ldrb	r2, [r5, #0]
 800cf26:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800cf28:	68a3      	ldr	r3, [r4, #8]
 800cf2a:	786a      	ldrb	r2, [r5, #1]
 800cf2c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800cf2e:	68a3      	ldr	r3, [r4, #8]
 800cf30:	78ea      	ldrb	r2, [r5, #3]
 800cf32:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800cf34:	68a3      	ldr	r3, [r4, #8]
 800cf36:	78aa      	ldrb	r2, [r5, #2]
 800cf38:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800cf3a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800cf44:	68a0      	ldr	r0, [r4, #8]
 800cf46:	f7ff ff97 	bl	800ce78 <IncreaseBufferPointer>
 800cf4a:	60a0      	str	r0, [r4, #8]

    return true;
 800cf4c:	2001      	movs	r0, #1
}
 800cf4e:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800cf50:	2000      	movs	r0, #0
 800cf52:	e7fc      	b.n	800cf4e <LoRaMacConfirmQueueAdd+0x3e>
 800cf54:	20000f84 	.word	0x20000f84

0800cf58 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800cf58:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800cf5a:	4b09      	ldr	r3, [pc, #36]	; (800cf80 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800cf5c:	f893 4020 	ldrb.w	r4, [r3, #32]
 800cf60:	4620      	mov	r0, r4
 800cf62:	f7ff ff95 	bl	800ce90 <IsListEmpty>
 800cf66:	b948      	cbnz	r0, 800cf7c <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800cf68:	4d05      	ldr	r5, [pc, #20]	; (800cf80 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800cf6a:	3c01      	subs	r4, #1
 800cf6c:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800cf70:	6868      	ldr	r0, [r5, #4]
 800cf72:	f7ff ff81 	bl	800ce78 <IncreaseBufferPointer>
 800cf76:	6068      	str	r0, [r5, #4]

    return true;
 800cf78:	2001      	movs	r0, #1
}
 800cf7a:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800cf7c:	2000      	movs	r0, #0
 800cf7e:	e7fc      	b.n	800cf7a <LoRaMacConfirmQueueRemoveFirst+0x22>
 800cf80:	20000f84 	.word	0x20000f84

0800cf84 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800cf84:	b538      	push	{r3, r4, r5, lr}
 800cf86:	4605      	mov	r5, r0
 800cf88:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800cf8a:	4b08      	ldr	r3, [pc, #32]	; (800cfac <LoRaMacConfirmQueueSetStatus+0x28>)
 800cf8c:	f893 0020 	ldrb.w	r0, [r3, #32]
 800cf90:	f7ff ff7e 	bl	800ce90 <IsListEmpty>
 800cf94:	b948      	cbnz	r0, 800cfaa <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800cf96:	4b05      	ldr	r3, [pc, #20]	; (800cfac <LoRaMacConfirmQueueSetStatus+0x28>)
 800cf98:	689a      	ldr	r2, [r3, #8]
 800cf9a:	6859      	ldr	r1, [r3, #4]
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f7ff ff83 	bl	800cea8 <GetElement>
        if( element != NULL )
 800cfa2:	b110      	cbz	r0, 800cfaa <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800cfa4:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800cfaa:	bd38      	pop	{r3, r4, r5, pc}
 800cfac:	20000f84 	.word	0x20000f84

0800cfb0 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800cfb0:	b510      	push	{r4, lr}
 800cfb2:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800cfb4:	4b09      	ldr	r3, [pc, #36]	; (800cfdc <LoRaMacConfirmQueueGetStatus+0x2c>)
 800cfb6:	f893 0020 	ldrb.w	r0, [r3, #32]
 800cfba:	f7ff ff69 	bl	800ce90 <IsListEmpty>
 800cfbe:	b940      	cbnz	r0, 800cfd2 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800cfc0:	4b06      	ldr	r3, [pc, #24]	; (800cfdc <LoRaMacConfirmQueueGetStatus+0x2c>)
 800cfc2:	689a      	ldr	r2, [r3, #8]
 800cfc4:	6859      	ldr	r1, [r3, #4]
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f7ff ff6e 	bl	800cea8 <GetElement>
        if( element != NULL )
 800cfcc:	b118      	cbz	r0, 800cfd6 <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800cfce:	7840      	ldrb	r0, [r0, #1]
 800cfd0:	e000      	b.n	800cfd4 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cfd2:	2001      	movs	r0, #1
}
 800cfd4:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cfd6:	2001      	movs	r0, #1
 800cfd8:	e7fc      	b.n	800cfd4 <LoRaMacConfirmQueueGetStatus+0x24>
 800cfda:	bf00      	nop
 800cfdc:	20000f84 	.word	0x20000f84

0800cfe0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800cfe0:	b538      	push	{r3, r4, r5, lr}
 800cfe2:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800cfe4:	4b0c      	ldr	r3, [pc, #48]	; (800d018 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800cfe6:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800cfe8:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800cfec:	f893 0020 	ldrb.w	r0, [r3, #32]
 800cff0:	f7ff ff4e 	bl	800ce90 <IsListEmpty>
 800cff4:	b150      	cbz	r0, 800d00c <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800cff6:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800cff8:	2301      	movs	r3, #1
 800cffa:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800cffc:	4620      	mov	r0, r4
 800cffe:	f7ff ff3b 	bl	800ce78 <IncreaseBufferPointer>
 800d002:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800d004:	4b04      	ldr	r3, [pc, #16]	; (800d018 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	4283      	cmp	r3, r0
 800d00a:	d0f4      	beq.n	800cff6 <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800d00c:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800d00e:	78e3      	ldrb	r3, [r4, #3]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d1f3      	bne.n	800cffc <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800d014:	e7f0      	b.n	800cff8 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800d016:	bf00      	nop
 800d018:	20000f84 	.word	0x20000f84

0800d01c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800d01c:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800d01e:	4b04      	ldr	r3, [pc, #16]	; (800d030 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800d020:	689a      	ldr	r2, [r3, #8]
 800d022:	6859      	ldr	r1, [r3, #4]
 800d024:	f7ff ff40 	bl	800cea8 <GetElement>
 800d028:	b100      	cbz	r0, 800d02c <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800d02a:	2001      	movs	r0, #1
    }
    return false;
}
 800d02c:	bd08      	pop	{r3, pc}
 800d02e:	bf00      	nop
 800d030:	20000f84 	.word	0x20000f84

0800d034 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800d034:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d036:	b083      	sub	sp, #12
 800d038:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800d03a:	4b16      	ldr	r3, [pc, #88]	; (800d094 <LoRaMacConfirmQueueHandleCb+0x60>)
 800d03c:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800d040:	2400      	movs	r4, #0
 800d042:	e00d      	b.n	800d060 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800d044:	781a      	ldrb	r2, [r3, #0]
 800d046:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800d04a:	785a      	ldrb	r2, [r3, #1]
 800d04c:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800d050:	78db      	ldrb	r3, [r3, #3]
 800d052:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800d056:	f7ff ff7f 	bl	800cf58 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800d05a:	b1a5      	cbz	r5, 800d086 <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800d05c:	3401      	adds	r4, #1
 800d05e:	b2e4      	uxtb	r4, r4
 800d060:	42bc      	cmp	r4, r7
 800d062:	d214      	bcs.n	800d08e <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800d064:	4b0b      	ldr	r3, [pc, #44]	; (800d094 <LoRaMacConfirmQueueHandleCb+0x60>)
 800d066:	685a      	ldr	r2, [r3, #4]
 800d068:	7812      	ldrb	r2, [r2, #0]
 800d06a:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800d06c:	685a      	ldr	r2, [r3, #4]
 800d06e:	7852      	ldrb	r2, [r2, #1]
 800d070:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800d076:	2d00      	cmp	r5, #0
 800d078:	d0e4      	beq.n	800d044 <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800d07a:	4b06      	ldr	r3, [pc, #24]	; (800d094 <LoRaMacConfirmQueueHandleCb+0x60>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	689b      	ldr	r3, [r3, #8]
 800d080:	4630      	mov	r0, r6
 800d082:	4798      	blx	r3
 800d084:	e7e7      	b.n	800d056 <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800d086:	a801      	add	r0, sp, #4
 800d088:	f7ff ff42 	bl	800cf10 <LoRaMacConfirmQueueAdd>
 800d08c:	e7e6      	b.n	800d05c <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800d08e:	b003      	add	sp, #12
 800d090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d092:	bf00      	nop
 800d094:	20000f84 	.word	0x20000f84

0800d098 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800d098:	4b01      	ldr	r3, [pc, #4]	; (800d0a0 <LoRaMacConfirmQueueGetCnt+0x8>)
 800d09a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d09e:	4770      	bx	lr
 800d0a0:	20000f84 	.word	0x20000f84

0800d0a4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800d0a4:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d0a6:	4b03      	ldr	r3, [pc, #12]	; (800d0b4 <LoRaMacConfirmQueueIsFull+0x10>)
 800d0a8:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d0ac:	f7ff fef5 	bl	800ce9a <IsListFull>
    }
    else
    {
        return false;
    }
}
 800d0b0:	bd08      	pop	{r3, pc}
 800d0b2:	bf00      	nop
 800d0b4:	20000f84 	.word	0x20000f84

0800d0b8 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800d0b8:	b410      	push	{r4}
 800d0ba:	9c01      	ldr	r4, [sp, #4]
 800d0bc:	9902      	ldr	r1, [sp, #8]
 800d0be:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800d0c0:	b1da      	cbz	r2, 800d0fa <PrepareB0+0x42>
 800d0c2:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800d0c4:	2049      	movs	r0, #73	; 0x49
 800d0c6:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800d0c8:	2000      	movs	r0, #0
 800d0ca:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800d0cc:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800d0ce:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800d0d0:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800d0d2:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800d0d4:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800d0d6:	0a23      	lsrs	r3, r4, #8
 800d0d8:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800d0da:	0c23      	lsrs	r3, r4, #16
 800d0dc:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800d0de:	0e24      	lsrs	r4, r4, #24
 800d0e0:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800d0e2:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800d0e4:	0a0b      	lsrs	r3, r1, #8
 800d0e6:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800d0e8:	0c0b      	lsrs	r3, r1, #16
 800d0ea:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800d0ec:	0e09      	lsrs	r1, r1, #24
 800d0ee:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800d0f0:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800d0f2:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d0f6:	bc10      	pop	{r4}
 800d0f8:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d0fa:	2009      	movs	r0, #9
 800d0fc:	e7fb      	b.n	800d0f6 <PrepareB0+0x3e>
	...

0800d100 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d100:	2300      	movs	r3, #0
 800d102:	2b01      	cmp	r3, #1
 800d104:	d80e      	bhi.n	800d124 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800d106:	469c      	mov	ip, r3
 800d108:	4a07      	ldr	r2, [pc, #28]	; (800d128 <GetKeyAddrItem+0x28>)
 800d10a:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800d10e:	4282      	cmp	r2, r0
 800d110:	d002      	beq.n	800d118 <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d112:	3301      	adds	r3, #1
 800d114:	b2db      	uxtb	r3, r3
 800d116:	e7f4      	b.n	800d102 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800d118:	4b03      	ldr	r3, [pc, #12]	; (800d128 <GetKeyAddrItem+0x28>)
 800d11a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800d11e:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800d120:	2000      	movs	r0, #0
 800d122:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800d124:	200b      	movs	r0, #11
}
 800d126:	4770      	bx	lr
 800d128:	20000100 	.word	0x20000100

0800d12c <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800d12c:	460b      	mov	r3, r1
 800d12e:	2900      	cmp	r1, #0
 800d130:	d024      	beq.n	800d17c <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800d132:	3801      	subs	r0, #1
 800d134:	2803      	cmp	r0, #3
 800d136:	d823      	bhi.n	800d180 <GetLastFcntDown+0x54>
 800d138:	e8df f000 	tbb	[pc, r0]
 800d13c:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800d140:	4a10      	ldr	r2, [pc, #64]	; (800d184 <GetLastFcntDown+0x58>)
 800d142:	6812      	ldr	r2, [r2, #0]
 800d144:	6911      	ldr	r1, [r2, #16]
 800d146:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800d148:	6913      	ldr	r3, [r2, #16]
 800d14a:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800d14c:	2000      	movs	r0, #0
            break;
 800d14e:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800d150:	4a0c      	ldr	r2, [pc, #48]	; (800d184 <GetLastFcntDown+0x58>)
 800d152:	6812      	ldr	r2, [r2, #0]
 800d154:	6951      	ldr	r1, [r2, #20]
 800d156:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800d158:	6953      	ldr	r3, [r2, #20]
 800d15a:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800d15c:	2000      	movs	r0, #0
            break;
 800d15e:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800d160:	4a08      	ldr	r2, [pc, #32]	; (800d184 <GetLastFcntDown+0x58>)
 800d162:	6812      	ldr	r2, [r2, #0]
 800d164:	6991      	ldr	r1, [r2, #24]
 800d166:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800d168:	6993      	ldr	r3, [r2, #24]
 800d16a:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800d16c:	2000      	movs	r0, #0
            break;
 800d16e:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800d170:	4a04      	ldr	r2, [pc, #16]	; (800d184 <GetLastFcntDown+0x58>)
 800d172:	6812      	ldr	r2, [r2, #0]
 800d174:	69d2      	ldr	r2, [r2, #28]
 800d176:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800d178:	2000      	movs	r0, #0
            break;
 800d17a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d17c:	2009      	movs	r0, #9
 800d17e:	4770      	bx	lr
    switch( fCntID )
 800d180:	2005      	movs	r0, #5
}
 800d182:	4770      	bx	lr
 800d184:	20000fa8 	.word	0x20000fa8

0800d188 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800d188:	b510      	push	{r4, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800d18e:	2300      	movs	r3, #0
 800d190:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800d192:	a901      	add	r1, sp, #4
 800d194:	f7ff ffca 	bl	800d12c <GetLastFcntDown>
 800d198:	b948      	cbnz	r0, 800d1ae <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800d19a:	9b01      	ldr	r3, [sp, #4]
 800d19c:	42a3      	cmp	r3, r4
 800d19e:	d309      	bcc.n	800d1b4 <CheckFCntDown+0x2c>
 800d1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a4:	d001      	beq.n	800d1aa <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800d1a6:	2000      	movs	r0, #0
 800d1a8:	e002      	b.n	800d1b0 <CheckFCntDown+0x28>
        return true;
 800d1aa:	2001      	movs	r0, #1
 800d1ac:	e000      	b.n	800d1b0 <CheckFCntDown+0x28>
        return false;
 800d1ae:	2000      	movs	r0, #0
    }
}
 800d1b0:	b002      	add	sp, #8
 800d1b2:	bd10      	pop	{r4, pc}
        return true;
 800d1b4:	2001      	movs	r0, #1
 800d1b6:	e7fb      	b.n	800d1b0 <CheckFCntDown+0x28>

0800d1b8 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800d1b8:	3801      	subs	r0, #1
 800d1ba:	2803      	cmp	r0, #3
 800d1bc:	d812      	bhi.n	800d1e4 <UpdateFCntDown+0x2c>
 800d1be:	e8df f000 	tbb	[pc, r0]
 800d1c2:	0602      	.short	0x0602
 800d1c4:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800d1c6:	4b08      	ldr	r3, [pc, #32]	; (800d1e8 <UpdateFCntDown+0x30>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	6119      	str	r1, [r3, #16]
            break;
 800d1cc:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800d1ce:	4b06      	ldr	r3, [pc, #24]	; (800d1e8 <UpdateFCntDown+0x30>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	6159      	str	r1, [r3, #20]
            break;
 800d1d4:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800d1d6:	4b04      	ldr	r3, [pc, #16]	; (800d1e8 <UpdateFCntDown+0x30>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	6199      	str	r1, [r3, #24]
            break;
 800d1dc:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800d1de:	4b02      	ldr	r3, [pc, #8]	; (800d1e8 <UpdateFCntDown+0x30>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800d1e4:	4770      	bx	lr
 800d1e6:	bf00      	nop
 800d1e8:	20000fa8 	.word	0x20000fa8

0800d1ec <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800d1ec:	4b0a      	ldr	r3, [pc, #40]	; (800d218 <ResetFCnts+0x2c>)
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d1f4:	f04f 31ff 	mov.w	r1, #4294967295
 800d1f8:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d1fa:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800d1fc:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800d1fe:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d200:	2b00      	cmp	r3, #0
 800d202:	dd00      	ble.n	800d206 <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800d204:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800d206:	1d99      	adds	r1, r3, #6
 800d208:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800d20c:	f04f 30ff 	mov.w	r0, #4294967295
 800d210:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d212:	3301      	adds	r3, #1
 800d214:	e7f4      	b.n	800d200 <ResetFCnts+0x14>
 800d216:	bf00      	nop
 800d218:	20000fa8 	.word	0x20000fa8

0800d21c <ComputeCmacB0>:
{
 800d21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d220:	b088      	sub	sp, #32
 800d222:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800d224:	b1f0      	cbz	r0, 800d264 <ComputeCmacB0+0x48>
 800d226:	460c      	mov	r4, r1
 800d228:	4615      	mov	r5, r2
 800d22a:	461a      	mov	r2, r3
 800d22c:	4680      	mov	r8, r0
 800d22e:	b1de      	cbz	r6, 800d268 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d230:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d234:	d81a      	bhi.n	800d26c <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800d236:	af04      	add	r7, sp, #16
 800d238:	9702      	str	r7, [sp, #8]
 800d23a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d23c:	9301      	str	r3, [sp, #4]
 800d23e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d240:	9300      	str	r3, [sp, #0]
 800d242:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800d246:	4629      	mov	r1, r5
 800d248:	4620      	mov	r0, r4
 800d24a:	f7ff ff35 	bl	800d0b8 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800d24e:	9600      	str	r6, [sp, #0]
 800d250:	462b      	mov	r3, r5
 800d252:	4622      	mov	r2, r4
 800d254:	4641      	mov	r1, r8
 800d256:	4638      	mov	r0, r7
 800d258:	f002 fcb5 	bl	800fbc6 <SecureElementComputeAesCmac>
 800d25c:	b940      	cbnz	r0, 800d270 <ComputeCmacB0+0x54>
}
 800d25e:	b008      	add	sp, #32
 800d260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d264:	2009      	movs	r0, #9
 800d266:	e7fa      	b.n	800d25e <ComputeCmacB0+0x42>
 800d268:	2009      	movs	r0, #9
 800d26a:	e7f8      	b.n	800d25e <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d26c:	200d      	movs	r0, #13
 800d26e:	e7f6      	b.n	800d25e <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d270:	200e      	movs	r0, #14
 800d272:	e7f4      	b.n	800d25e <ComputeCmacB0+0x42>

0800d274 <DeriveSessionKey10x>:
{
 800d274:	b510      	push	{r4, lr}
 800d276:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800d278:	2400      	movs	r4, #0
 800d27a:	9400      	str	r4, [sp, #0]
 800d27c:	9401      	str	r4, [sp, #4]
 800d27e:	9402      	str	r4, [sp, #8]
 800d280:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800d282:	2802      	cmp	r0, #2
 800d284:	d003      	beq.n	800d28e <DeriveSessionKey10x+0x1a>
 800d286:	2803      	cmp	r0, #3
 800d288:	d025      	beq.n	800d2d6 <DeriveSessionKey10x+0x62>
 800d28a:	200a      	movs	r0, #10
 800d28c:	e021      	b.n	800d2d2 <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800d28e:	2401      	movs	r4, #1
 800d290:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800d294:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800d298:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d29c:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800d2a0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800d2a4:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800d2a8:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800d2ac:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d2b0:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800d2b4:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800d2b8:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800d2bc:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800d2c0:	0a1b      	lsrs	r3, r3, #8
 800d2c2:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	2101      	movs	r1, #1
 800d2ca:	4668      	mov	r0, sp
 800d2cc:	f002 fd1a 	bl	800fd04 <SecureElementDeriveAndStoreKey>
 800d2d0:	b928      	cbnz	r0, 800d2de <DeriveSessionKey10x+0x6a>
}
 800d2d2:	b004      	add	sp, #16
 800d2d4:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800d2d6:	2402      	movs	r4, #2
 800d2d8:	f88d 4000 	strb.w	r4, [sp]
            break;
 800d2dc:	e7da      	b.n	800d294 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d2de:	200e      	movs	r0, #14
 800d2e0:	e7f7      	b.n	800d2d2 <DeriveSessionKey10x+0x5e>

0800d2e2 <PayloadEncrypt>:
{
 800d2e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e6:	b088      	sub	sp, #32
 800d2e8:	4690      	mov	r8, r2
 800d2ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	d052      	beq.n	800d396 <PayloadEncrypt+0xb4>
 800d2f0:	460d      	mov	r5, r1
 800d2f2:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800d2f4:	2600      	movs	r6, #0
 800d2f6:	9604      	str	r6, [sp, #16]
 800d2f8:	9605      	str	r6, [sp, #20]
 800d2fa:	9606      	str	r6, [sp, #24]
 800d2fc:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800d2fe:	9600      	str	r6, [sp, #0]
 800d300:	9601      	str	r6, [sp, #4]
 800d302:	9602      	str	r6, [sp, #8]
 800d304:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800d306:	2701      	movs	r7, #1
 800d308:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800d30c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800d310:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800d314:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800d318:	0a19      	lsrs	r1, r3, #8
 800d31a:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800d31e:	0c19      	lsrs	r1, r3, #16
 800d320:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800d324:	0e1b      	lsrs	r3, r3, #24
 800d326:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800d32a:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800d32e:	0a13      	lsrs	r3, r2, #8
 800d330:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800d334:	0c13      	lsrs	r3, r2, #16
 800d336:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800d33a:	0e12      	lsrs	r2, r2, #24
 800d33c:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800d340:	e014      	b.n	800d36c <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800d342:	18f2      	adds	r2, r6, r3
 800d344:	5ca0      	ldrb	r0, [r4, r2]
 800d346:	f103 0120 	add.w	r1, r3, #32
 800d34a:	4469      	add	r1, sp
 800d34c:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800d350:	4048      	eors	r0, r1
 800d352:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800d354:	3301      	adds	r3, #1
 800d356:	b2db      	uxtb	r3, r3
 800d358:	462a      	mov	r2, r5
 800d35a:	2d10      	cmp	r5, #16
 800d35c:	bfa8      	it	ge
 800d35e:	2210      	movge	r2, #16
 800d360:	4293      	cmp	r3, r2
 800d362:	dbee      	blt.n	800d342 <PayloadEncrypt+0x60>
        size -= 16;
 800d364:	3d10      	subs	r5, #16
 800d366:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800d368:	3610      	adds	r6, #16
 800d36a:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800d36c:	2d00      	cmp	r5, #0
 800d36e:	dd0e      	ble.n	800d38e <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800d370:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800d374:	3701      	adds	r7, #1
 800d376:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800d378:	ab04      	add	r3, sp, #16
 800d37a:	4642      	mov	r2, r8
 800d37c:	2110      	movs	r1, #16
 800d37e:	4668      	mov	r0, sp
 800d380:	f002 fc46 	bl	800fc10 <SecureElementAesEncrypt>
 800d384:	4603      	mov	r3, r0
 800d386:	2800      	cmp	r0, #0
 800d388:	d0e6      	beq.n	800d358 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d38a:	200e      	movs	r0, #14
 800d38c:	e000      	b.n	800d390 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800d38e:	2000      	movs	r0, #0
}
 800d390:	b008      	add	sp, #32
 800d392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d396:	2009      	movs	r0, #9
 800d398:	e7fa      	b.n	800d390 <PayloadEncrypt+0xae>

0800d39a <VerifyCmacB0>:
    if( msg == 0 )
 800d39a:	b370      	cbz	r0, 800d3fa <VerifyCmacB0+0x60>
{
 800d39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a0:	b0c8      	sub	sp, #288	; 0x120
 800d3a2:	460c      	mov	r4, r1
 800d3a4:	4615      	mov	r5, r2
 800d3a6:	461e      	mov	r6, r3
 800d3a8:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d3aa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d3ae:	d826      	bhi.n	800d3fe <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800d3b0:	af04      	add	r7, sp, #16
 800d3b2:	f44f 7288 	mov.w	r2, #272	; 0x110
 800d3b6:	2100      	movs	r1, #0
 800d3b8:	4638      	mov	r0, r7
 800d3ba:	f002 fd74 	bl	800fea6 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800d3be:	9702      	str	r7, [sp, #8]
 800d3c0:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800d3c2:	9301      	str	r3, [sp, #4]
 800d3c4:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800d3c6:	9300      	str	r3, [sp, #0]
 800d3c8:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800d3cc:	4632      	mov	r2, r6
 800d3ce:	4629      	mov	r1, r5
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	f7ff fe71 	bl	800d0b8 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800d3d6:	4622      	mov	r2, r4
 800d3d8:	4641      	mov	r1, r8
 800d3da:	a808      	add	r0, sp, #32
 800d3dc:	f002 fd4b 	bl	800fe76 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800d3e0:	f104 0110 	add.w	r1, r4, #16
 800d3e4:	462b      	mov	r3, r5
 800d3e6:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800d3e8:	b289      	uxth	r1, r1
 800d3ea:	4638      	mov	r0, r7
 800d3ec:	f002 fbfa 	bl	800fbe4 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800d3f0:	b130      	cbz	r0, 800d400 <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800d3f2:	2801      	cmp	r0, #1
 800d3f4:	d004      	beq.n	800d400 <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d3f6:	200e      	movs	r0, #14
 800d3f8:	e002      	b.n	800d400 <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d3fa:	2009      	movs	r0, #9
}
 800d3fc:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d3fe:	200d      	movs	r0, #13
}
 800d400:	b048      	add	sp, #288	; 0x120
 800d402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d408 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800d408:	b188      	cbz	r0, 800d42e <LoRaMacCryptoInit+0x26>
{
 800d40a:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800d40c:	4c09      	ldr	r4, [pc, #36]	; (800d434 <LoRaMacCryptoInit+0x2c>)
 800d40e:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800d410:	2228      	movs	r2, #40	; 0x28
 800d412:	2100      	movs	r1, #0
 800d414:	f002 fd47 	bl	800fea6 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800d418:	6823      	ldr	r3, [r4, #0]
 800d41a:	2201      	movs	r2, #1
 800d41c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800d41e:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800d420:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800d422:	2400      	movs	r4, #0
 800d424:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800d426:	f7ff fee1 	bl	800d1ec <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800d42a:	4620      	mov	r0, r4
}
 800d42c:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800d42e:	2008      	movs	r0, #8
}
 800d430:	4770      	bx	lr
 800d432:	bf00      	nop
 800d434:	20000fa8 	.word	0x20000fa8

0800d438 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800d438:	4b02      	ldr	r3, [pc, #8]	; (800d444 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800d43e:	2000      	movs	r0, #0
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	20000fa8 	.word	0x20000fa8

0800d448 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800d448:	b130      	cbz	r0, 800d458 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800d44a:	4b04      	ldr	r3, [pc, #16]	; (800d45c <LoRaMacCryptoGetFCntUp+0x14>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	68db      	ldr	r3, [r3, #12]
 800d450:	3301      	adds	r3, #1
 800d452:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800d454:	2000      	movs	r0, #0
 800d456:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d458:	2009      	movs	r0, #9
}
 800d45a:	4770      	bx	lr
 800d45c:	20000fa8 	.word	0x20000fa8

0800d460 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800d460:	b530      	push	{r4, r5, lr}
 800d462:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800d464:	2300      	movs	r3, #0
 800d466:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800d468:	b1f2      	cbz	r2, 800d4a8 <LoRaMacCryptoGetFCntDown+0x48>
 800d46a:	460c      	mov	r4, r1
 800d46c:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800d46e:	a901      	add	r1, sp, #4
 800d470:	f7ff fe5c 	bl	800d12c <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d474:	b948      	cbnz	r0, 800d48a <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800d476:	9b01      	ldr	r3, [sp, #4]
 800d478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d47c:	d007      	beq.n	800d48e <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800d47e:	b29a      	uxth	r2, r3
 800d480:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800d482:	2a00      	cmp	r2, #0
 800d484:	dd05      	ble.n	800d492 <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800d486:	4413      	add	r3, r2
 800d488:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d48a:	b003      	add	sp, #12
 800d48c:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800d48e:	602c      	str	r4, [r5, #0]
 800d490:	e7fb      	b.n	800d48a <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800d492:	b132      	cbz	r2, 800d4a2 <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800d494:	0c1b      	lsrs	r3, r3, #16
 800d496:	041b      	lsls	r3, r3, #16
 800d498:	4423      	add	r3, r4
 800d49a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d49e:	602b      	str	r3, [r5, #0]
 800d4a0:	e7f3      	b.n	800d48a <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800d4a2:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800d4a4:	2007      	movs	r0, #7
 800d4a6:	e7f0      	b.n	800d48a <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d4a8:	2009      	movs	r0, #9
 800d4aa:	e7ee      	b.n	800d48a <LoRaMacCryptoGetFCntDown+0x2a>

0800d4ac <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800d4ac:	4601      	mov	r1, r0
 800d4ae:	b908      	cbnz	r0, 800d4b4 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d4b0:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d4b2:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	dd01      	ble.n	800d4be <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800d4ba:	2000      	movs	r0, #0
 800d4bc:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800d4be:	4a06      	ldr	r2, [pc, #24]	; (800d4d8 <LoRaMacCryptoSetMulticastReference+0x2c>)
 800d4c0:	6812      	ldr	r2, [r2, #0]
 800d4c2:	202c      	movs	r0, #44	; 0x2c
 800d4c4:	fb00 1003 	mla	r0, r0, r3, r1
 800d4c8:	f103 0c06 	add.w	ip, r3, #6
 800d4cc:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800d4d0:	3204      	adds	r2, #4
 800d4d2:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	e7ee      	b.n	800d4b6 <LoRaMacCryptoSetMulticastReference+0xa>
 800d4d8:	20000fa8 	.word	0x20000fa8

0800d4dc <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800d4dc:	b1d8      	cbz	r0, 800d516 <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800d4de:	b510      	push	{r4, lr}
 800d4e0:	b082      	sub	sp, #8
 800d4e2:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800d4e4:	4b0f      	ldr	r3, [pc, #60]	; (800d524 <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	8893      	ldrh	r3, [r2, #4]
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	b29b      	uxth	r3, r3
 800d4ee:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800d4f0:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d4f2:	f000 fa2e 	bl	800d952 <LoRaMacSerializerJoinRequest>
 800d4f6:	b980      	cbnz	r0, 800d51a <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800d4f8:	4623      	mov	r3, r4
 800d4fa:	f853 1b18 	ldr.w	r1, [r3], #24
 800d4fe:	9300      	str	r3, [sp, #0]
 800d500:	2301      	movs	r3, #1
 800d502:	2213      	movs	r2, #19
 800d504:	f002 fb5f 	bl	800fbc6 <SecureElementComputeAesCmac>
 800d508:	b950      	cbnz	r0, 800d520 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d50a:	4620      	mov	r0, r4
 800d50c:	f000 fa21 	bl	800d952 <LoRaMacSerializerJoinRequest>
 800d510:	b120      	cbz	r0, 800d51c <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d512:	2010      	movs	r0, #16
 800d514:	e002      	b.n	800d51c <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d516:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d518:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d51a:	2010      	movs	r0, #16
}
 800d51c:	b002      	add	sp, #8
 800d51e:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d520:	200e      	movs	r0, #14
 800d522:	e7fb      	b.n	800d51c <LoRaMacCryptoPrepareJoinRequest+0x40>
 800d524:	20000fa8 	.word	0x20000fa8

0800d528 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d036      	beq.n	800d59a <LoRaMacCryptoSecureMessage+0x72>
{
 800d52c:	b530      	push	{r4, r5, lr}
 800d52e:	b085      	sub	sp, #20
 800d530:	4604      	mov	r4, r0
 800d532:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800d534:	4b1d      	ldr	r3, [pc, #116]	; (800d5ac <LoRaMacCryptoSecureMessage+0x84>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	4283      	cmp	r3, r0
 800d53c:	d82f      	bhi.n	800d59e <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800d53e:	f895 2020 	ldrb.w	r2, [r5, #32]
 800d542:	b342      	cbz	r2, 800d596 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800d544:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800d546:	42a3      	cmp	r3, r4
 800d548:	d209      	bcs.n	800d55e <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800d54a:	9401      	str	r4, [sp, #4]
 800d54c:	2300      	movs	r3, #0
 800d54e:	9300      	str	r3, [sp, #0]
 800d550:	68ab      	ldr	r3, [r5, #8]
 800d552:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800d556:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d558:	f7ff fec3 	bl	800d2e2 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d55c:	bb10      	cbnz	r0, 800d5a4 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d55e:	4628      	mov	r0, r5
 800d560:	f000 fa2d 	bl	800d9be <LoRaMacSerializerData>
 800d564:	b9e8      	cbnz	r0, 800d5a2 <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800d566:	7929      	ldrb	r1, [r5, #4]
 800d568:	3904      	subs	r1, #4
 800d56a:	462b      	mov	r3, r5
 800d56c:	f853 0b2c 	ldr.w	r0, [r3], #44
 800d570:	9303      	str	r3, [sp, #12]
 800d572:	9402      	str	r4, [sp, #8]
 800d574:	68ab      	ldr	r3, [r5, #8]
 800d576:	9301      	str	r3, [sp, #4]
 800d578:	2300      	movs	r3, #0
 800d57a:	9300      	str	r3, [sp, #0]
 800d57c:	2202      	movs	r2, #2
 800d57e:	b289      	uxth	r1, r1
 800d580:	f7ff fe4c 	bl	800d21c <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d584:	b970      	cbnz	r0, 800d5a4 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d586:	4628      	mov	r0, r5
 800d588:	f000 fa19 	bl	800d9be <LoRaMacSerializerData>
 800d58c:	b960      	cbnz	r0, 800d5a8 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800d58e:	4b07      	ldr	r3, [pc, #28]	; (800d5ac <LoRaMacCryptoSecureMessage+0x84>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800d594:	e006      	b.n	800d5a4 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800d596:	2202      	movs	r2, #2
 800d598:	e7d5      	b.n	800d546 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d59a:	2009      	movs	r0, #9
}
 800d59c:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800d59e:	2006      	movs	r0, #6
 800d5a0:	e000      	b.n	800d5a4 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d5a2:	2010      	movs	r0, #16
}
 800d5a4:	b005      	add	sp, #20
 800d5a6:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d5a8:	2010      	movs	r0, #16
 800d5aa:	e7fb      	b.n	800d5a4 <LoRaMacCryptoSecureMessage+0x7c>
 800d5ac:	20000fa8 	.word	0x20000fa8

0800d5b0 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800d5b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5b4:	b087      	sub	sp, #28
 800d5b6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800d5b8:	2e00      	cmp	r6, #0
 800d5ba:	d049      	beq.n	800d650 <LoRaMacCryptoUnsecureMessage+0xa0>
 800d5bc:	4605      	mov	r5, r0
 800d5be:	4688      	mov	r8, r1
 800d5c0:	4617      	mov	r7, r2
 800d5c2:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	4610      	mov	r0, r2
 800d5c8:	f7ff fdde 	bl	800d188 <CheckFCntDown>
 800d5cc:	2800      	cmp	r0, #0
 800d5ce:	d041      	beq.n	800d654 <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d5d0:	4630      	mov	r0, r6
 800d5d2:	f000 f95f 	bl	800d894 <LoRaMacParserData>
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	d141      	bne.n	800d65e <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800d5da:	a905      	add	r1, sp, #20
 800d5dc:	4628      	mov	r0, r5
 800d5de:	f7ff fd8f 	bl	800d100 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d5e2:	4605      	mov	r5, r0
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	d136      	bne.n	800d656 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800d5e8:	9b05      	ldr	r3, [sp, #20]
 800d5ea:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800d5ee:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800d5f0:	68b3      	ldr	r3, [r6, #8]
 800d5f2:	4543      	cmp	r3, r8
 800d5f4:	d135      	bne.n	800d662 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800d5f6:	7b33      	ldrb	r3, [r6, #12]
 800d5f8:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800d5fc:	491a      	ldr	r1, [pc, #104]	; (800d668 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800d5fe:	6809      	ldr	r1, [r1, #0]
 800d600:	7889      	ldrb	r1, [r1, #2]
 800d602:	b901      	cbnz	r1, 800d606 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800d604:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800d606:	7931      	ldrb	r1, [r6, #4]
 800d608:	3904      	subs	r1, #4
 800d60a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800d60c:	9003      	str	r0, [sp, #12]
 800d60e:	9402      	str	r4, [sp, #8]
 800d610:	f8cd 8004 	str.w	r8, [sp, #4]
 800d614:	2001      	movs	r0, #1
 800d616:	9000      	str	r0, [sp, #0]
 800d618:	b289      	uxth	r1, r1
 800d61a:	6830      	ldr	r0, [r6, #0]
 800d61c:	f7ff febd 	bl	800d39a <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d620:	4605      	mov	r5, r0
 800d622:	b9c0      	cbnz	r0, 800d656 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800d624:	f896 3020 	ldrb.w	r3, [r6, #32]
 800d628:	b90b      	cbnz	r3, 800d62e <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800d62a:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800d62e:	9401      	str	r4, [sp, #4]
 800d630:	2301      	movs	r3, #1
 800d632:	9300      	str	r3, [sp, #0]
 800d634:	4643      	mov	r3, r8
 800d636:	464a      	mov	r2, r9
 800d638:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800d63c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800d63e:	f7ff fe50 	bl	800d2e2 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d642:	4605      	mov	r5, r0
 800d644:	b938      	cbnz	r0, 800d656 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800d646:	4621      	mov	r1, r4
 800d648:	4638      	mov	r0, r7
 800d64a:	f7ff fdb5 	bl	800d1b8 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800d64e:	e002      	b.n	800d656 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d650:	2509      	movs	r5, #9
 800d652:	e000      	b.n	800d656 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800d654:	2506      	movs	r5, #6
}
 800d656:	4628      	mov	r0, r5
 800d658:	b007      	add	sp, #28
 800d65a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800d65e:	250f      	movs	r5, #15
 800d660:	e7f9      	b.n	800d656 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800d662:	2502      	movs	r5, #2
 800d664:	e7f7      	b.n	800d656 <LoRaMacCryptoUnsecureMessage+0xa6>
 800d666:	bf00      	nop
 800d668:	20000fa8 	.word	0x20000fa8

0800d66c <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800d66c:	b9b1      	cbnz	r1, 800d69c <LoRaMacCryptoDeriveMcRootKey+0x30>
{
 800d66e:	b500      	push	{lr}
 800d670:	b085      	sub	sp, #20
 800d672:	468c      	mov	ip, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800d674:	2300      	movs	r3, #0
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	9301      	str	r3, [sp, #4]
 800d67a:	9302      	str	r3, [sp, #8]
 800d67c:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800d67e:	2801      	cmp	r0, #1
 800d680:	d008      	beq.n	800d694 <LoRaMacCryptoDeriveMcRootKey+0x28>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800d682:	2204      	movs	r2, #4
 800d684:	4661      	mov	r1, ip
 800d686:	4668      	mov	r0, sp
 800d688:	f002 fb3c 	bl	800fd04 <SecureElementDeriveAndStoreKey>
 800d68c:	b940      	cbnz	r0, 800d6a0 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d68e:	b005      	add	sp, #20
 800d690:	f85d fb04 	ldr.w	pc, [sp], #4
        compBase[0] = 0x20;
 800d694:	2320      	movs	r3, #32
 800d696:	f88d 3000 	strb.w	r3, [sp]
 800d69a:	e7f2      	b.n	800d682 <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800d69c:	200a      	movs	r0, #10
}
 800d69e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d6a0:	200e      	movs	r0, #14
 800d6a2:	e7f4      	b.n	800d68e <LoRaMacCryptoDeriveMcRootKey+0x22>

0800d6a4 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800d6a4:	2804      	cmp	r0, #4
 800d6a6:	d001      	beq.n	800d6ac <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800d6a8:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d6aa:	4770      	bx	lr
{
 800d6ac:	b500      	push	{lr}
 800d6ae:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	9300      	str	r3, [sp, #0]
 800d6b4:	9301      	str	r3, [sp, #4]
 800d6b6:	9302      	str	r3, [sp, #8]
 800d6b8:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800d6ba:	227f      	movs	r2, #127	; 0x7f
 800d6bc:	4601      	mov	r1, r0
 800d6be:	4668      	mov	r0, sp
 800d6c0:	f002 fb20 	bl	800fd04 <SecureElementDeriveAndStoreKey>
 800d6c4:	b910      	cbnz	r0, 800d6cc <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800d6c6:	b005      	add	sp, #20
 800d6c8:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d6cc:	200e      	movs	r0, #14
 800d6ce:	e7fa      	b.n	800d6c6 <LoRaMacCryptoDeriveMcKEKey+0x22>

0800d6d0 <LoRaMacCryptoSetKey>:
{
 800d6d0:	b510      	push	{r4, lr}
 800d6d2:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800d6d4:	f002 fad4 	bl	800fc80 <SecureElementSetKey>
 800d6d8:	b978      	cbnz	r0, 800d6fa <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800d6da:	b104      	cbz	r4, 800d6de <LoRaMacCryptoSetKey+0xe>
}
 800d6dc:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800d6de:	4b09      	ldr	r3, [pc, #36]	; (800d704 <LoRaMacCryptoSetKey+0x34>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	4621      	mov	r1, r4
 800d6e4:	7898      	ldrb	r0, [r3, #2]
 800d6e6:	f7ff ffc1 	bl	800d66c <LoRaMacCryptoDeriveMcRootKey>
 800d6ea:	b940      	cbnz	r0, 800d6fe <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800d6ec:	2004      	movs	r0, #4
 800d6ee:	f7ff ffd9 	bl	800d6a4 <LoRaMacCryptoDeriveMcKEKey>
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	d0f2      	beq.n	800d6dc <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d6f6:	200e      	movs	r0, #14
 800d6f8:	e7f0      	b.n	800d6dc <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d6fa:	200e      	movs	r0, #14
 800d6fc:	e7ee      	b.n	800d6dc <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d6fe:	200e      	movs	r0, #14
 800d700:	e7ec      	b.n	800d6dc <LoRaMacCryptoSetKey+0xc>
 800d702:	bf00      	nop
 800d704:	20000fa8 	.word	0x20000fa8

0800d708 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800d708:	2a00      	cmp	r2, #0
 800d70a:	d064      	beq.n	800d7d6 <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800d70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d70e:	b08f      	sub	sp, #60	; 0x3c
 800d710:	4607      	mov	r7, r0
 800d712:	460d      	mov	r5, r1
 800d714:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800d716:	2900      	cmp	r1, #0
 800d718:	d05f      	beq.n	800d7da <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800d71a:	2600      	movs	r6, #0
 800d71c:	9605      	str	r6, [sp, #20]
 800d71e:	221d      	movs	r2, #29
 800d720:	4631      	mov	r1, r6
 800d722:	a806      	add	r0, sp, #24
 800d724:	f005 f84a 	bl	80127bc <memset>
    uint8_t versionMinor         = 0;
 800d728:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800d72c:	4b2f      	ldr	r3, [pc, #188]	; (800d7ec <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800d732:	f10d 0313 	add.w	r3, sp, #19
 800d736:	9302      	str	r3, [sp, #8]
 800d738:	ab05      	add	r3, sp, #20
 800d73a:	9301      	str	r3, [sp, #4]
 800d73c:	7923      	ldrb	r3, [r4, #4]
 800d73e:	9300      	str	r3, [sp, #0]
 800d740:	6823      	ldr	r3, [r4, #0]
 800d742:	4632      	mov	r2, r6
 800d744:	4629      	mov	r1, r5
 800d746:	4638      	mov	r0, r7
 800d748:	f002 fafc 	bl	800fd44 <SecureElementProcessJoinAccept>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	d146      	bne.n	800d7de <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800d750:	7922      	ldrb	r2, [r4, #4]
 800d752:	a905      	add	r1, sp, #20
 800d754:	6820      	ldr	r0, [r4, #0]
 800d756:	f002 fb8e 	bl	800fe76 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d75a:	4620      	mov	r0, r4
 800d75c:	f000 f848 	bl	800d7f0 <LoRaMacParserJoinAccept>
 800d760:	2800      	cmp	r0, #0
 800d762:	d13f      	bne.n	800d7e4 <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800d764:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800d766:	79e3      	ldrb	r3, [r4, #7]
 800d768:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800d76c:	7a23      	ldrb	r3, [r4, #8]
 800d76e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800d772:	4b1e      	ldr	r3, [pc, #120]	; (800d7ec <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	689a      	ldr	r2, [r3, #8]
 800d778:	42aa      	cmp	r2, r5
 800d77a:	d035      	beq.n	800d7e8 <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800d77c:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800d77e:	2100      	movs	r1, #0
 800d780:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800d784:	f7ff ff72 	bl	800d66c <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d788:	bb50      	cbnz	r0, 800d7e0 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800d78a:	2004      	movs	r0, #4
 800d78c:	f7ff ff8a 	bl	800d6a4 <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d790:	bb30      	cbnz	r0, 800d7e0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800d792:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800d794:	7aa2      	ldrb	r2, [r4, #10]
 800d796:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800d79a:	7ae4      	ldrb	r4, [r4, #11]
 800d79c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800d7a0:	4633      	mov	r3, r6
 800d7a2:	4622      	mov	r2, r4
 800d7a4:	4629      	mov	r1, r5
 800d7a6:	2003      	movs	r0, #3
 800d7a8:	f7ff fd64 	bl	800d274 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d7ac:	b9c0      	cbnz	r0, 800d7e0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800d7ae:	4633      	mov	r3, r6
 800d7b0:	4622      	mov	r2, r4
 800d7b2:	4629      	mov	r1, r5
 800d7b4:	2002      	movs	r0, #2
 800d7b6:	f7ff fd5d 	bl	800d274 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d7ba:	b988      	cbnz	r0, 800d7e0 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800d7bc:	4b0b      	ldr	r3, [pc, #44]	; (800d7ec <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800d7c4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800d7ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ce:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d7d0:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d7d2:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800d7d4:	e004      	b.n	800d7e0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d7d6:	2009      	movs	r0, #9
}
 800d7d8:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d7da:	2009      	movs	r0, #9
 800d7dc:	e000      	b.n	800d7e0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d7de:	200e      	movs	r0, #14
}
 800d7e0:	b00f      	add	sp, #60	; 0x3c
 800d7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800d7e4:	200f      	movs	r0, #15
 800d7e6:	e7fb      	b.n	800d7e0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800d7e8:	2003      	movs	r0, #3
 800d7ea:	e7f9      	b.n	800d7e0 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800d7ec:	20000fa8 	.word	0x20000fa8

0800d7f0 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d7f0:	2800      	cmp	r0, #0
 800d7f2:	d049      	beq.n	800d888 <LoRaMacParserJoinAccept+0x98>
{
 800d7f4:	b510      	push	{r4, lr}
 800d7f6:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d7f8:	6801      	ldr	r1, [r0, #0]
 800d7fa:	2900      	cmp	r1, #0
 800d7fc:	d046      	beq.n	800d88c <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800d7fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d802:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800d804:	2203      	movs	r2, #3
 800d806:	3006      	adds	r0, #6
 800d808:	f002 fb35 	bl	800fe76 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800d80c:	4620      	mov	r0, r4
 800d80e:	f850 1b09 	ldr.w	r1, [r0], #9
 800d812:	2203      	movs	r2, #3
 800d814:	3104      	adds	r1, #4
 800d816:	f002 fb2e 	bl	800fe76 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800d81a:	6821      	ldr	r1, [r4, #0]
 800d81c:	79cb      	ldrb	r3, [r1, #7]
 800d81e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d820:	7a0a      	ldrb	r2, [r1, #8]
 800d822:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d826:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d828:	7a4a      	ldrb	r2, [r1, #9]
 800d82a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d82e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d830:	7a8a      	ldrb	r2, [r1, #10]
 800d832:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d836:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800d838:	7acb      	ldrb	r3, [r1, #11]
 800d83a:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800d83c:	7b0b      	ldrb	r3, [r1, #12]
 800d83e:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800d840:	7923      	ldrb	r3, [r4, #4]
 800d842:	2b21      	cmp	r3, #33	; 0x21
 800d844:	d018      	beq.n	800d878 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800d846:	2b11      	cmp	r3, #17
 800d848:	dc22      	bgt.n	800d890 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800d84a:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800d84c:	6821      	ldr	r1, [r4, #0]
 800d84e:	f102 0c01 	add.w	ip, r2, #1
 800d852:	5c8b      	ldrb	r3, [r1, r2]
 800d854:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d856:	1c90      	adds	r0, r2, #2
 800d858:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800d85c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800d860:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d862:	3203      	adds	r2, #3
 800d864:	5c08      	ldrb	r0, [r1, r0]
 800d866:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d86a:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d86c:	5c8a      	ldrb	r2, [r1, r2]
 800d86e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d872:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800d874:	2000      	movs	r0, #0
}
 800d876:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800d878:	2210      	movs	r2, #16
 800d87a:	310d      	adds	r1, #13
 800d87c:	f104 0012 	add.w	r0, r4, #18
 800d880:	f002 faf9 	bl	800fe76 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800d884:	221d      	movs	r2, #29
 800d886:	e7e1      	b.n	800d84c <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800d888:	2002      	movs	r0, #2
}
 800d88a:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800d88c:	2002      	movs	r0, #2
 800d88e:	e7f2      	b.n	800d876 <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800d890:	2001      	movs	r0, #1
 800d892:	e7f0      	b.n	800d876 <LoRaMacParserJoinAccept+0x86>

0800d894 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d894:	2800      	cmp	r0, #0
 800d896:	d058      	beq.n	800d94a <LoRaMacParserData+0xb6>
{
 800d898:	b510      	push	{r4, lr}
 800d89a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d89c:	6801      	ldr	r1, [r0, #0]
 800d89e:	2900      	cmp	r1, #0
 800d8a0:	d055      	beq.n	800d94e <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800d8a2:	780b      	ldrb	r3, [r1, #0]
 800d8a4:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800d8a6:	784b      	ldrb	r3, [r1, #1]
 800d8a8:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d8aa:	788a      	ldrb	r2, [r1, #2]
 800d8ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d8b0:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d8b2:	78ca      	ldrb	r2, [r1, #3]
 800d8b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d8b8:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d8ba:	790a      	ldrb	r2, [r1, #4]
 800d8bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d8c0:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800d8c2:	794b      	ldrb	r3, [r1, #5]
 800d8c4:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800d8c6:	798b      	ldrb	r3, [r1, #6]
 800d8c8:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800d8ca:	79ca      	ldrb	r2, [r1, #7]
 800d8cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d8d0:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800d8d2:	7b02      	ldrb	r2, [r0, #12]
 800d8d4:	f002 020f 	and.w	r2, r2, #15
 800d8d8:	3108      	adds	r1, #8
 800d8da:	3010      	adds	r0, #16
 800d8dc:	f002 facb 	bl	800fe76 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d8e0:	7b23      	ldrb	r3, [r4, #12]
 800d8e2:	f003 030f 	and.w	r3, r3, #15
 800d8e6:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800d8f0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800d8f4:	7922      	ldrb	r2, [r4, #4]
 800d8f6:	1a11      	subs	r1, r2, r0
 800d8f8:	2904      	cmp	r1, #4
 800d8fa:	dc16      	bgt.n	800d92a <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800d8fc:	6822      	ldr	r2, [r4, #0]
 800d8fe:	7923      	ldrb	r3, [r4, #4]
 800d900:	441a      	add	r2, r3
 800d902:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800d906:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800d908:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800d90c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d910:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800d912:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800d916:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d91a:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800d91c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800d920:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d924:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800d926:	2000      	movs	r0, #0
}
 800d928:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800d92a:	6821      	ldr	r1, [r4, #0]
 800d92c:	3309      	adds	r3, #9
 800d92e:	5c08      	ldrb	r0, [r1, r0]
 800d930:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800d934:	1ad2      	subs	r2, r2, r3
 800d936:	b2d2      	uxtb	r2, r2
 800d938:	3a04      	subs	r2, #4
 800d93a:	b2d2      	uxtb	r2, r2
 800d93c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800d940:	4419      	add	r1, r3
 800d942:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d944:	f002 fa97 	bl	800fe76 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800d948:	e7d8      	b.n	800d8fc <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800d94a:	2002      	movs	r0, #2
}
 800d94c:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800d94e:	2002      	movs	r0, #2
 800d950:	e7ea      	b.n	800d928 <LoRaMacParserData+0x94>

0800d952 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d952:	b370      	cbz	r0, 800d9b2 <LoRaMacSerializerJoinRequest+0x60>
{
 800d954:	b510      	push	{r4, lr}
 800d956:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d958:	6803      	ldr	r3, [r0, #0]
 800d95a:	b363      	cbz	r3, 800d9b6 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800d95c:	7902      	ldrb	r2, [r0, #4]
 800d95e:	2a16      	cmp	r2, #22
 800d960:	d92b      	bls.n	800d9ba <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800d962:	7942      	ldrb	r2, [r0, #5]
 800d964:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800d966:	4601      	mov	r1, r0
 800d968:	f851 0b06 	ldr.w	r0, [r1], #6
 800d96c:	2208      	movs	r2, #8
 800d96e:	3001      	adds	r0, #1
 800d970:	f002 fa8c 	bl	800fe8c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800d974:	4621      	mov	r1, r4
 800d976:	f851 0b0e 	ldr.w	r0, [r1], #14
 800d97a:	2208      	movs	r2, #8
 800d97c:	3009      	adds	r0, #9
 800d97e:	f002 fa85 	bl	800fe8c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800d982:	8ae2      	ldrh	r2, [r4, #22]
 800d984:	6823      	ldr	r3, [r4, #0]
 800d986:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800d988:	8ae3      	ldrh	r3, [r4, #22]
 800d98a:	6822      	ldr	r2, [r4, #0]
 800d98c:	0a1b      	lsrs	r3, r3, #8
 800d98e:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800d990:	69a2      	ldr	r2, [r4, #24]
 800d992:	6823      	ldr	r3, [r4, #0]
 800d994:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800d996:	69a3      	ldr	r3, [r4, #24]
 800d998:	0a1b      	lsrs	r3, r3, #8
 800d99a:	6822      	ldr	r2, [r4, #0]
 800d99c:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800d99e:	8b62      	ldrh	r2, [r4, #26]
 800d9a0:	6823      	ldr	r3, [r4, #0]
 800d9a2:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800d9a4:	7ee2      	ldrb	r2, [r4, #27]
 800d9a6:	6823      	ldr	r3, [r4, #0]
 800d9a8:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800d9aa:	2317      	movs	r3, #23
 800d9ac:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800d9ae:	2000      	movs	r0, #0
}
 800d9b0:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d9b2:	2001      	movs	r0, #1
}
 800d9b4:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d9b6:	2001      	movs	r0, #1
 800d9b8:	e7fa      	b.n	800d9b0 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800d9ba:	2002      	movs	r0, #2
 800d9bc:	e7f8      	b.n	800d9b0 <LoRaMacSerializerJoinRequest+0x5e>

0800d9be <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	d066      	beq.n	800da90 <LoRaMacSerializerData+0xd2>
{
 800d9c2:	b538      	push	{r3, r4, r5, lr}
 800d9c4:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d9c6:	6801      	ldr	r1, [r0, #0]
 800d9c8:	2900      	cmp	r1, #0
 800d9ca:	d063      	beq.n	800da94 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d9cc:	7b02      	ldrb	r2, [r0, #12]
 800d9ce:	f002 020f 	and.w	r2, r2, #15
 800d9d2:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800d9d6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d9da:	b10b      	cbz	r3, 800d9e0 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800d9dc:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800d9e0:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800d9e2:	3304      	adds	r3, #4
 800d9e4:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800d9e6:	7922      	ldrb	r2, [r4, #4]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d355      	bcc.n	800da98 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800d9ec:	7963      	ldrb	r3, [r4, #5]
 800d9ee:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800d9f0:	68a2      	ldr	r2, [r4, #8]
 800d9f2:	6823      	ldr	r3, [r4, #0]
 800d9f4:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800d9f6:	68a3      	ldr	r3, [r4, #8]
 800d9f8:	0a1b      	lsrs	r3, r3, #8
 800d9fa:	6822      	ldr	r2, [r4, #0]
 800d9fc:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800d9fe:	8962      	ldrh	r2, [r4, #10]
 800da00:	6823      	ldr	r3, [r4, #0]
 800da02:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800da04:	7ae2      	ldrb	r2, [r4, #11]
 800da06:	6823      	ldr	r3, [r4, #0]
 800da08:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800da0a:	6823      	ldr	r3, [r4, #0]
 800da0c:	7b22      	ldrb	r2, [r4, #12]
 800da0e:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800da10:	89e2      	ldrh	r2, [r4, #14]
 800da12:	6823      	ldr	r3, [r4, #0]
 800da14:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800da16:	89e3      	ldrh	r3, [r4, #14]
 800da18:	6822      	ldr	r2, [r4, #0]
 800da1a:	0a1b      	lsrs	r3, r3, #8
 800da1c:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800da1e:	4621      	mov	r1, r4
 800da20:	f851 0b10 	ldr.w	r0, [r1], #16
 800da24:	7b22      	ldrb	r2, [r4, #12]
 800da26:	f002 020f 	and.w	r2, r2, #15
 800da2a:	3008      	adds	r0, #8
 800da2c:	f002 fa23 	bl	800fe76 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800da30:	7b23      	ldrb	r3, [r4, #12]
 800da32:	f003 030f 	and.w	r3, r3, #15
 800da36:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800da3a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800da3e:	b12a      	cbz	r2, 800da4c <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800da40:	6822      	ldr	r2, [r4, #0]
 800da42:	f894 1020 	ldrb.w	r1, [r4, #32]
 800da46:	5551      	strb	r1, [r2, r5]
 800da48:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800da4c:	6820      	ldr	r0, [r4, #0]
 800da4e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800da52:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800da54:	4428      	add	r0, r5
 800da56:	f002 fa0e 	bl	800fe76 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800da5a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800da5e:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800da60:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800da62:	6821      	ldr	r1, [r4, #0]
 800da64:	1c5a      	adds	r2, r3, #1
 800da66:	b292      	uxth	r2, r2
 800da68:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800da6a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800da6c:	0a08      	lsrs	r0, r1, #8
 800da6e:	6825      	ldr	r5, [r4, #0]
 800da70:	1c99      	adds	r1, r3, #2
 800da72:	b289      	uxth	r1, r1
 800da74:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800da76:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800da78:	6820      	ldr	r0, [r4, #0]
 800da7a:	1cda      	adds	r2, r3, #3
 800da7c:	b292      	uxth	r2, r2
 800da7e:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800da80:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800da84:	6821      	ldr	r1, [r4, #0]
 800da86:	3304      	adds	r3, #4
 800da88:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800da8a:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800da8c:	2000      	movs	r0, #0
}
 800da8e:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800da90:	2001      	movs	r0, #1
}
 800da92:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800da94:	2001      	movs	r0, #1
 800da96:	e7fa      	b.n	800da8e <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800da98:	2002      	movs	r0, #2
 800da9a:	e7f8      	b.n	800da8e <LoRaMacSerializerData+0xd0>

0800da9c <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800da9c:	4b02      	ldr	r3, [pc, #8]	; (800daa8 <NvmDataMgmtEvent+0xc>)
 800da9e:	881a      	ldrh	r2, [r3, #0]
 800daa0:	4310      	orrs	r0, r2
 800daa2:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800daa4:	4770      	bx	lr
 800daa6:	bf00      	nop
 800daa8:	20000fac 	.word	0x20000fac

0800daac <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800daac:	b508      	push	{r3, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800daae:	4b06      	ldr	r3, [pc, #24]	; (800dac8 <NvmDataMgmtStoreBegin+0x1c>)
 800dab0:	881b      	ldrh	r3, [r3, #0]
 800dab2:	b11b      	cbz	r3, 800dabc <NvmDataMgmtStoreBegin+0x10>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800dab4:	f7fc fe76 	bl	800a7a4 <LoRaMacStop>
 800dab8:	b918      	cbnz	r0, 800dac2 <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800daba:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800dabc:	f06f 0001 	mvn.w	r0, #1
 800dac0:	e7fb      	b.n	800daba <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800dac2:	f06f 0002 	mvn.w	r0, #2
 800dac6:	e7f8      	b.n	800daba <NvmDataMgmtStoreBegin+0xe>
 800dac8:	20000fac 	.word	0x20000fac

0800dacc <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800dacc:	b510      	push	{r4, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800dace:	2400      	movs	r4, #0
 800dad0:	4b02      	ldr	r3, [pc, #8]	; (800dadc <NvmDataMgmtStoreEnd+0x10>)
 800dad2:	801c      	strh	r4, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800dad4:	f7fc fe5e 	bl	800a794 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800dad8:	4620      	mov	r0, r4
 800dada:	bd10      	pop	{r4, pc}
 800dadc:	20000fac 	.word	0x20000fac

0800dae0 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800dae0:	b908      	cbnz	r0, 800dae6 <RegionIsActive+0x6>
    {
        AS923_IS_ACTIVE( );
 800dae2:	2001      	movs	r0, #1
 800dae4:	4770      	bx	lr
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800dae6:	2000      	movs	r0, #0
        }
    }
}
 800dae8:	4770      	bx	lr

0800daea <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800daea:	b500      	push	{lr}
 800daec:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
 800daee:	2300      	movs	r3, #0
 800daf0:	9300      	str	r3, [sp, #0]
    switch( region )
 800daf2:	b128      	cbz	r0, 800db00 <RegionGetPhyParam+0x16>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800daf4:	9b00      	ldr	r3, [sp, #0]
 800daf6:	9301      	str	r3, [sp, #4]
        }
    }
}
 800daf8:	9801      	ldr	r0, [sp, #4]
 800dafa:	b003      	add	sp, #12
 800dafc:	f85d fb04 	ldr.w	pc, [sp], #4
        AS923_GET_PHY_PARAM( );
 800db00:	4608      	mov	r0, r1
 800db02:	f000 f8ef 	bl	800dce4 <RegionAS923GetPhyParam>
 800db06:	9001      	str	r0, [sp, #4]
 800db08:	e7f6      	b.n	800daf8 <RegionGetPhyParam+0xe>

0800db0a <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 800db0a:	b100      	cbz	r0, 800db0e <RegionSetBandTxDone+0x4>
 800db0c:	4770      	bx	lr
{
 800db0e:	b508      	push	{r3, lr}
    {
        AS923_SET_BAND_TX_DONE( );
 800db10:	4608      	mov	r0, r1
 800db12:	f000 f9c3 	bl	800de9c <RegionAS923SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800db16:	bd08      	pop	{r3, pc}

0800db18 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 800db18:	b100      	cbz	r0, 800db1c <RegionInitDefaults+0x4>
 800db1a:	4770      	bx	lr
{
 800db1c:	b508      	push	{r3, lr}
    {
        AS923_INIT_DEFAULTS( );
 800db1e:	4608      	mov	r0, r1
 800db20:	f000 f9da 	bl	800ded8 <RegionAS923InitDefaults>
        default:
        {
            break;
        }
    }
}
 800db24:	bd08      	pop	{r3, pc}

0800db26 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    switch( region )
 800db26:	b108      	cbz	r0, 800db2c <RegionVerify+0x6>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800db28:	2000      	movs	r0, #0
        }
    }
}
 800db2a:	4770      	bx	lr
{
 800db2c:	b508      	push	{r3, lr}
 800db2e:	460b      	mov	r3, r1
        AS923_VERIFY( );
 800db30:	4611      	mov	r1, r2
 800db32:	4618      	mov	r0, r3
 800db34:	f000 fa32 	bl	800df9c <RegionAS923Verify>
}
 800db38:	bd08      	pop	{r3, pc}

0800db3a <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 800db3a:	b100      	cbz	r0, 800db3e <RegionApplyCFList+0x4>
 800db3c:	4770      	bx	lr
{
 800db3e:	b508      	push	{r3, lr}
    {
        AS923_APPLY_CF_LIST( );
 800db40:	4608      	mov	r0, r1
 800db42:	f000 fdeb 	bl	800e71c <RegionAS923ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800db46:	bd08      	pop	{r3, pc}

0800db48 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 800db48:	b108      	cbz	r0, 800db4e <RegionChanMaskSet+0x6>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800db4a:	2000      	movs	r0, #0
        }
    }
}
 800db4c:	4770      	bx	lr
{
 800db4e:	b508      	push	{r3, lr}
        AS923_CHAN_MASK_SET( );
 800db50:	4608      	mov	r0, r1
 800db52:	f000 fa75 	bl	800e040 <RegionAS923ChanMaskSet>
}
 800db56:	bd08      	pop	{r3, pc}

0800db58 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    switch( region )
 800db58:	b100      	cbz	r0, 800db5c <RegionComputeRxWindowParameters+0x4>
 800db5a:	4770      	bx	lr
{
 800db5c:	b508      	push	{r3, lr}
 800db5e:	468c      	mov	ip, r1
 800db60:	4611      	mov	r1, r2
 800db62:	461a      	mov	r2, r3
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 800db64:	9b02      	ldr	r3, [sp, #8]
 800db66:	4660      	mov	r0, ip
 800db68:	f000 fa88 	bl	800e07c <RegionAS923ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800db6c:	bd08      	pop	{r3, pc}

0800db6e <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 800db6e:	b108      	cbz	r0, 800db74 <RegionRxConfig+0x6>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800db70:	2000      	movs	r0, #0
        }
    }
}
 800db72:	4770      	bx	lr
{
 800db74:	b508      	push	{r3, lr}
 800db76:	460b      	mov	r3, r1
        AS923_RX_CONFIG( );
 800db78:	4611      	mov	r1, r2
 800db7a:	4618      	mov	r0, r3
 800db7c:	f000 fab4 	bl	800e0e8 <RegionAS923RxConfig>
}
 800db80:	bd08      	pop	{r3, pc}

0800db82 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 800db82:	b108      	cbz	r0, 800db88 <RegionTxConfig+0x6>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800db84:	2000      	movs	r0, #0
        }
    }
}
 800db86:	4770      	bx	lr
{
 800db88:	b508      	push	{r3, lr}
 800db8a:	468c      	mov	ip, r1
 800db8c:	4611      	mov	r1, r2
        AS923_TX_CONFIG( );
 800db8e:	461a      	mov	r2, r3
 800db90:	4660      	mov	r0, ip
 800db92:	f000 fb2d 	bl	800e1f0 <RegionAS923TxConfig>
}
 800db96:	bd08      	pop	{r3, pc}

0800db98 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
    switch( region )
 800db98:	b108      	cbz	r0, 800db9e <RegionLinkAdrReq+0x6>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800db9a:	2000      	movs	r0, #0
        }
    }
}
 800db9c:	4770      	bx	lr
{
 800db9e:	b500      	push	{lr}
 800dba0:	b083      	sub	sp, #12
 800dba2:	468c      	mov	ip, r1
 800dba4:	4611      	mov	r1, r2
 800dba6:	461a      	mov	r2, r3
        AS923_LINK_ADR_REQ( );
 800dba8:	9b05      	ldr	r3, [sp, #20]
 800dbaa:	9300      	str	r3, [sp, #0]
 800dbac:	9b04      	ldr	r3, [sp, #16]
 800dbae:	4660      	mov	r0, ip
 800dbb0:	f000 fbb6 	bl	800e320 <RegionAS923LinkAdrReq>
}
 800dbb4:	b003      	add	sp, #12
 800dbb6:	f85d fb04 	ldr.w	pc, [sp], #4

0800dbba <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 800dbba:	b108      	cbz	r0, 800dbc0 <RegionRxParamSetupReq+0x6>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800dbbc:	2000      	movs	r0, #0
        }
    }
}
 800dbbe:	4770      	bx	lr
{
 800dbc0:	b508      	push	{r3, lr}
        AS923_RX_PARAM_SETUP_REQ( );
 800dbc2:	4608      	mov	r0, r1
 800dbc4:	f000 fc70 	bl	800e4a8 <RegionAS923RxParamSetupReq>
}
 800dbc8:	bd08      	pop	{r3, pc}

0800dbca <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 800dbca:	b108      	cbz	r0, 800dbd0 <RegionNewChannelReq+0x6>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800dbcc:	2000      	movs	r0, #0
        }
    }
}
 800dbce:	4770      	bx	lr
{
 800dbd0:	b508      	push	{r3, lr}
        AS923_NEW_CHANNEL_REQ( );
 800dbd2:	4608      	mov	r0, r1
 800dbd4:	f000 fde3 	bl	800e79e <RegionAS923NewChannelReq>
}
 800dbd8:	bd08      	pop	{r3, pc}

0800dbda <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 800dbda:	b108      	cbz	r0, 800dbe0 <RegionTxParamSetupReq+0x6>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800dbdc:	2000      	movs	r0, #0
        }
    }
}
 800dbde:	4770      	bx	lr
{
 800dbe0:	b508      	push	{r3, lr}
        AS923_TX_PARAM_SETUP_REQ( );
 800dbe2:	4608      	mov	r0, r1
 800dbe4:	f000 fc7d 	bl	800e4e2 <RegionAS923TxParamSetupReq>
}
 800dbe8:	bd08      	pop	{r3, pc}

0800dbea <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 800dbea:	b108      	cbz	r0, 800dbf0 <RegionDlChannelReq+0x6>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800dbec:	2000      	movs	r0, #0
        }
    }
}
 800dbee:	4770      	bx	lr
{
 800dbf0:	b508      	push	{r3, lr}
        AS923_DL_CHANNEL_REQ( );
 800dbf2:	4608      	mov	r0, r1
 800dbf4:	f000 fc78 	bl	800e4e8 <RegionAS923DlChannelReq>
}
 800dbf8:	bd08      	pop	{r3, pc}

0800dbfa <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
    switch( region )
 800dbfa:	b108      	cbz	r0, 800dc00 <RegionAlternateDr+0x6>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800dbfc:	2000      	movs	r0, #0
        }
    }
}
 800dbfe:	4770      	bx	lr
{
 800dc00:	b508      	push	{r3, lr}
 800dc02:	460b      	mov	r3, r1
        AS923_ALTERNATE_DR( );
 800dc04:	4611      	mov	r1, r2
 800dc06:	4618      	mov	r0, r3
 800dc08:	f000 fc8e 	bl	800e528 <RegionAS923AlternateDr>
}
 800dc0c:	bd08      	pop	{r3, pc}

0800dc0e <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
    switch( region )
 800dc0e:	b108      	cbz	r0, 800dc14 <RegionNextChannel+0x6>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800dc10:	2009      	movs	r0, #9
        }
    }
}
 800dc12:	4770      	bx	lr
{
 800dc14:	b508      	push	{r3, lr}
 800dc16:	468c      	mov	ip, r1
 800dc18:	4611      	mov	r1, r2
 800dc1a:	461a      	mov	r2, r3
        AS923_NEXT_CHANNEL( );
 800dc1c:	9b02      	ldr	r3, [sp, #8]
 800dc1e:	4660      	mov	r0, ip
 800dc20:	f000 fc84 	bl	800e52c <RegionAS923NextChannel>
}
 800dc24:	bd08      	pop	{r3, pc}

0800dc26 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800dc26:	468c      	mov	ip, r1
 800dc28:	4611      	mov	r1, r2
    switch( region )
 800dc2a:	b108      	cbz	r0, 800dc30 <RegionApplyDrOffset+0xa>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800dc2c:	b2d0      	uxtb	r0, r2
        }
    }
}
 800dc2e:	4770      	bx	lr
{
 800dc30:	b508      	push	{r3, lr}
        AS923_APPLY_DR_OFFSET( );
 800dc32:	461a      	mov	r2, r3
 800dc34:	4660      	mov	r0, ip
 800dc36:	f000 fddd 	bl	800e7f4 <RegionAS923ApplyDrOffset>
}
 800dc3a:	bd08      	pop	{r3, pc}

0800dc3c <RegionRxBeaconSetup>:

void RegionRxBeaconSetup( LoRaMacRegion_t region, RxBeaconSetup_t* rxBeaconSetup, uint8_t* outDr )
{
    switch( region )
 800dc3c:	b100      	cbz	r0, 800dc40 <RegionRxBeaconSetup+0x4>
 800dc3e:	4770      	bx	lr
{
 800dc40:	b508      	push	{r3, lr}
 800dc42:	460b      	mov	r3, r1
    {
        AS923_RX_BEACON_SETUP( );
 800dc44:	4611      	mov	r1, r2
 800dc46:	4618      	mov	r0, r3
 800dc48:	f000 fde4 	bl	800e814 <RegionAS923RxBeaconSetup>
        default:
        {
            break;
        }
    }
}
 800dc4c:	bd08      	pop	{r3, pc}
	...

0800dc50 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800dc50:	4800      	ldr	r0, [pc, #0]	; (800dc54 <RegionGetVersion+0x4>)
 800dc52:	4770      	bx	lr
 800dc54:	02010001 	.word	0x02010001

0800dc58 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 800dc58:	b510      	push	{r4, lr}
 800dc5a:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800dc5c:	4b05      	ldr	r3, [pc, #20]	; (800dc74 <VerifyRfFreq+0x1c>)
 800dc5e:	6a1b      	ldr	r3, [r3, #32]
 800dc60:	4798      	blx	r3
 800dc62:	b120      	cbz	r0, 800dc6e <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 800dc64:	4b04      	ldr	r3, [pc, #16]	; (800dc78 <VerifyRfFreq+0x20>)
 800dc66:	4423      	add	r3, r4
 800dc68:	4a04      	ldr	r2, [pc, #16]	; (800dc7c <VerifyRfFreq+0x24>)
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d800      	bhi.n	800dc70 <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 800dc6e:	bd10      	pop	{r4, pc}
        return false;
 800dc70:	2000      	movs	r0, #0
 800dc72:	e7fc      	b.n	800dc6e <VerifyRfFreq+0x16>
 800dc74:	080145a0 	.word	0x080145a0
 800dc78:	c957b0c0 	.word	0xc957b0c0
 800dc7c:	005e9ac0 	.word	0x005e9ac0

0800dc80 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800dc80:	b570      	push	{r4, r5, r6, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	4605      	mov	r5, r0
 800dc86:	460c      	mov	r4, r1
    int8_t phyDr = DataratesAS923[datarate];
 800dc88:	4b13      	ldr	r3, [pc, #76]	; (800dcd8 <GetTimeOnAir+0x58>)
 800dc8a:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 800dc8c:	4913      	ldr	r1, [pc, #76]	; (800dcdc <GetTimeOnAir+0x5c>)
 800dc8e:	f001 f9b5 	bl	800effc <RegionCommonGetBandwidth>
 800dc92:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800dc94:	2d07      	cmp	r5, #7
 800dc96:	d00e      	beq.n	800dcb6 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800dc98:	4b11      	ldr	r3, [pc, #68]	; (800dce0 <GetTimeOnAir+0x60>)
 800dc9a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800dc9c:	2001      	movs	r0, #1
 800dc9e:	9003      	str	r0, [sp, #12]
 800dca0:	b2e4      	uxtb	r4, r4
 800dca2:	9402      	str	r4, [sp, #8]
 800dca4:	2300      	movs	r3, #0
 800dca6:	9301      	str	r3, [sp, #4]
 800dca8:	2308      	movs	r3, #8
 800dcaa:	9300      	str	r3, [sp, #0]
 800dcac:	4603      	mov	r3, r0
 800dcae:	4632      	mov	r2, r6
 800dcb0:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800dcb2:	b004      	add	sp, #16
 800dcb4:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800dcb6:	4b0a      	ldr	r3, [pc, #40]	; (800dce0 <GetTimeOnAir+0x60>)
 800dcb8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800dcba:	2301      	movs	r3, #1
 800dcbc:	9303      	str	r3, [sp, #12]
 800dcbe:	b2e4      	uxtb	r4, r4
 800dcc0:	9402      	str	r4, [sp, #8]
 800dcc2:	2000      	movs	r0, #0
 800dcc4:	9001      	str	r0, [sp, #4]
 800dcc6:	2305      	movs	r3, #5
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	4603      	mov	r3, r0
 800dccc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dcd0:	fb06 f202 	mul.w	r2, r6, r2
 800dcd4:	47a8      	blx	r5
 800dcd6:	e7ec      	b.n	800dcb2 <GetTimeOnAir+0x32>
 800dcd8:	08013efc 	.word	0x08013efc
 800dcdc:	08013edc 	.word	0x08013edc
 800dce0:	080145a0 	.word	0x080145a0

0800dce4 <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 800dce4:	b500      	push	{lr}
 800dce6:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800dce8:	2300      	movs	r3, #0
 800dcea:	9304      	str	r3, [sp, #16]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 800dcec:	7803      	ldrb	r3, [r0, #0]
 800dcee:	3b01      	subs	r3, #1
 800dcf0:	2b37      	cmp	r3, #55	; 0x37
 800dcf2:	d839      	bhi.n	800dd68 <RegionAS923GetPhyParam+0x84>
 800dcf4:	e8df f003 	tbb	[pc, r3]
 800dcf8:	3838381c 	.word	0x3838381c
 800dcfc:	38383838 	.word	0x38383838
 800dd00:	403d3838 	.word	0x403d3838
 800dd04:	5f385143 	.word	0x5f385143
 800dd08:	6f6b6763 	.word	0x6f6b6763
 800dd0c:	387c3873 	.word	0x387c3873
 800dd10:	8e8b857f 	.word	0x8e8b857f
 800dd14:	98953892 	.word	0x98953892
 800dd18:	38383821 	.word	0x38383821
 800dd1c:	38383838 	.word	0x38383838
 800dd20:	38383838 	.word	0x38383838
 800dd24:	9e9b3838 	.word	0x9e9b3838
 800dd28:	a83838a5 	.word	0xa83838a5
 800dd2c:	b4ae38ab 	.word	0xb4ae38ab
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 800dd30:	78c3      	ldrb	r3, [r0, #3]
 800dd32:	b9cb      	cbnz	r3, 800dd68 <RegionAS923GetPhyParam+0x84>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
 800dd34:	2302      	movs	r3, #2
 800dd36:	9304      	str	r3, [sp, #16]
 800dd38:	e016      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800dd3a:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800dd3e:	f88d 3004 	strb.w	r3, [sp, #4]
 800dd42:	2307      	movs	r3, #7
 800dd44:	f88d 3005 	strb.w	r3, [sp, #5]
 800dd48:	2300      	movs	r3, #0
 800dd4a:	f88d 3006 	strb.w	r3, [sp, #6]
 800dd4e:	2310      	movs	r3, #16
 800dd50:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )AS923_TX_MAX_DATARATE,
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
                .NbChannels = AS923_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800dd54:	4b46      	ldr	r3, [pc, #280]	; (800de70 <RegionAS923GetPhyParam+0x18c>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800dd5c:	9202      	str	r2, [sp, #8]
 800dd5e:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800dd60:	a801      	add	r0, sp, #4
 800dd62:	f001 f928 	bl	800efb6 <RegionCommonGetNextLowerTxDr>
 800dd66:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 800dd68:	9804      	ldr	r0, [sp, #16]
 800dd6a:	9005      	str	r0, [sp, #20]
}
 800dd6c:	b007      	add	sp, #28
 800dd6e:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800dd72:	2340      	movs	r3, #64	; 0x40
 800dd74:	9304      	str	r3, [sp, #16]
            break;
 800dd76:	e7f7      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800dd78:	2320      	movs	r3, #32
 800dd7a:	9304      	str	r3, [sp, #16]
            break;
 800dd7c:	e7f4      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            if( getPhy->UplinkDwellTime == 0 )
 800dd7e:	7883      	ldrb	r3, [r0, #2]
 800dd80:	b92b      	cbnz	r3, 800dd8e <RegionAS923GetPhyParam+0xaa>
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 800dd82:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800dd86:	4a3b      	ldr	r2, [pc, #236]	; (800de74 <RegionAS923GetPhyParam+0x190>)
 800dd88:	5cd3      	ldrb	r3, [r2, r3]
 800dd8a:	9304      	str	r3, [sp, #16]
 800dd8c:	e7ec      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 800dd8e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800dd92:	4a39      	ldr	r2, [pc, #228]	; (800de78 <RegionAS923GetPhyParam+0x194>)
 800dd94:	5cd3      	ldrb	r3, [r2, r3]
 800dd96:	9304      	str	r3, [sp, #16]
 800dd98:	e7e6      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            if( getPhy->UplinkDwellTime == 0 )
 800dd9a:	7883      	ldrb	r3, [r0, #2]
 800dd9c:	b92b      	cbnz	r3, 800ddaa <RegionAS923GetPhyParam+0xc6>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 800dd9e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800dda2:	4a36      	ldr	r2, [pc, #216]	; (800de7c <RegionAS923GetPhyParam+0x198>)
 800dda4:	5cd3      	ldrb	r3, [r2, r3]
 800dda6:	9304      	str	r3, [sp, #16]
 800dda8:	e7de      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 800ddaa:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ddae:	4a32      	ldr	r2, [pc, #200]	; (800de78 <RegionAS923GetPhyParam+0x194>)
 800ddb0:	5cd3      	ldrb	r3, [r2, r3]
 800ddb2:	9304      	str	r3, [sp, #16]
 800ddb4:	e7d8      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.Value = AS923_MAX_RX_WINDOW;
 800ddb6:	f247 5330 	movw	r3, #30000	; 0x7530
 800ddba:	9304      	str	r3, [sp, #16]
            break;
 800ddbc:	e7d4      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800ddbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ddc2:	9304      	str	r3, [sp, #16]
            break;
 800ddc4:	e7d0      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800ddc6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ddca:	9304      	str	r3, [sp, #16]
            break;
 800ddcc:	e7cc      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800ddce:	f241 3388 	movw	r3, #5000	; 0x1388
 800ddd2:	9304      	str	r3, [sp, #16]
            break;
 800ddd4:	e7c8      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800ddd6:	f241 7370 	movw	r3, #6000	; 0x1770
 800ddda:	9304      	str	r3, [sp, #16]
            break;
 800dddc:	e7c4      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800ddde:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800dde2:	4827      	ldr	r0, [pc, #156]	; (800de80 <RegionAS923GetPhyParam+0x19c>)
 800dde4:	f002 f83a 	bl	800fe5c <randr>
 800dde8:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800ddec:	9004      	str	r0, [sp, #16]
            break;
 800ddee:	e7bb      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 800ddf0:	4b24      	ldr	r3, [pc, #144]	; (800de84 <RegionAS923GetPhyParam+0x1a0>)
 800ddf2:	9304      	str	r3, [sp, #16]
            break;
 800ddf4:	e7b8      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800ddf6:	4b1e      	ldr	r3, [pc, #120]	; (800de70 <RegionAS923GetPhyParam+0x18c>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ddfe:	9304      	str	r3, [sp, #16]
            break;
 800de00:	e7b2      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800de02:	4b1b      	ldr	r3, [pc, #108]	; (800de70 <RegionAS923GetPhyParam+0x18c>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800de0a:	9304      	str	r3, [sp, #16]
            break;
 800de0c:	e7ac      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 800de0e:	2310      	movs	r3, #16
 800de10:	9304      	str	r3, [sp, #16]
            break;
 800de12:	e7a9      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800de14:	4b16      	ldr	r3, [pc, #88]	; (800de70 <RegionAS923GetPhyParam+0x18c>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	9304      	str	r3, [sp, #16]
            break;
 800de1a:	e7a5      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 800de1c:	2301      	movs	r3, #1
 800de1e:	9304      	str	r3, [sp, #16]
            break;
 800de20:	e7a2      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 800de22:	4b19      	ldr	r3, [pc, #100]	; (800de88 <RegionAS923GetPhyParam+0x1a4>)
 800de24:	9304      	str	r3, [sp, #16]
            break;
 800de26:	e79f      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 800de28:	4b18      	ldr	r3, [pc, #96]	; (800de8c <RegionAS923GetPhyParam+0x1a8>)
 800de2a:	9304      	str	r3, [sp, #16]
            break;
 800de2c:	e79c      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 800de2e:	4b18      	ldr	r3, [pc, #96]	; (800de90 <RegionAS923GetPhyParam+0x1ac>)
 800de30:	9304      	str	r3, [sp, #16]
            break;
 800de32:	e799      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 800de34:	2311      	movs	r3, #17
 800de36:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 800de3a:	2301      	movs	r3, #1
 800de3c:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800de40:	e792      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 800de42:	2303      	movs	r3, #3
 800de44:	9304      	str	r3, [sp, #16]
            break;
 800de46:	e78f      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 800de48:	4b0e      	ldr	r3, [pc, #56]	; (800de84 <RegionAS923GetPhyParam+0x1a0>)
 800de4a:	9304      	str	r3, [sp, #16]
            break;
 800de4c:	e78c      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 800de4e:	2303      	movs	r3, #3
 800de50:	9304      	str	r3, [sp, #16]
            break;
 800de52:	e789      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 800de54:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800de58:	4a0e      	ldr	r2, [pc, #56]	; (800de94 <RegionAS923GetPhyParam+0x1b0>)
 800de5a:	5cd3      	ldrb	r3, [r2, r3]
 800de5c:	9304      	str	r3, [sp, #16]
            break;
 800de5e:	e783      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 800de60:	490d      	ldr	r1, [pc, #52]	; (800de98 <RegionAS923GetPhyParam+0x1b4>)
 800de62:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800de66:	f001 f8c9 	bl	800effc <RegionCommonGetBandwidth>
 800de6a:	9004      	str	r0, [sp, #16]
            break;
 800de6c:	e77c      	b.n	800dd68 <RegionAS923GetPhyParam+0x84>
 800de6e:	bf00      	nop
 800de70:	20000fb4 	.word	0x20000fb4
 800de74:	08013f84 	.word	0x08013f84
 800de78:	08013f8c 	.word	0x08013f8c
 800de7c:	08013f94 	.word	0x08013f94
 800de80:	fffffc18 	.word	0xfffffc18
 800de84:	3706ea00 	.word	0x3706ea00
 800de88:	41a00000 	.word	0x41a00000
 800de8c:	4009999a 	.word	0x4009999a
 800de90:	36ace320 	.word	0x36ace320
 800de94:	08013efc 	.word	0x08013efc
 800de98:	08013edc 	.word	0x08013edc

0800de9c <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800de9c:	b510      	push	{r4, lr}
 800de9e:	b082      	sub	sp, #8
#if defined( REGION_AS923 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800dea0:	4b0b      	ldr	r3, [pc, #44]	; (800ded0 <RegionAS923SetBandTxDone+0x34>)
 800dea2:	681a      	ldr	r2, [r3, #0]
 800dea4:	7803      	ldrb	r3, [r0, #0]
 800dea6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800deaa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800deae:	7a5b      	ldrb	r3, [r3, #9]
 800deb0:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800deb4:	4b07      	ldr	r3, [pc, #28]	; (800ded4 <RegionAS923SetBandTxDone+0x38>)
 800deb6:	681c      	ldr	r4, [r3, #0]
 800deb8:	6903      	ldr	r3, [r0, #16]
 800deba:	9300      	str	r3, [sp, #0]
 800debc:	68c3      	ldr	r3, [r0, #12]
 800debe:	7842      	ldrb	r2, [r0, #1]
 800dec0:	6881      	ldr	r1, [r0, #8]
 800dec2:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800dec6:	f000 fe0e 	bl	800eae6 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}
 800deca:	b002      	add	sp, #8
 800decc:	bd10      	pop	{r4, pc}
 800dece:	bf00      	nop
 800ded0:	20000fb4 	.word	0x20000fb4
 800ded4:	20000fb0 	.word	0x20000fb0

0800ded8 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 800ded8:	b510      	push	{r4, lr}
 800deda:	b086      	sub	sp, #24
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 800dedc:	2364      	movs	r3, #100	; 0x64
 800dede:	f8ad 3000 	strh.w	r3, [sp]
 800dee2:	2300      	movs	r3, #0
 800dee4:	f88d 3002 	strb.w	r3, [sp, #2]
 800dee8:	9301      	str	r3, [sp, #4]
 800deea:	9302      	str	r3, [sp, #8]
 800deec:	9303      	str	r3, [sp, #12]
 800deee:	9304      	str	r3, [sp, #16]
 800def0:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        AS923_BAND0
    };

    switch( params->Type )
 800def4:	7b03      	ldrb	r3, [r0, #12]
 800def6:	2b01      	cmp	r3, #1
 800def8:	d02b      	beq.n	800df52 <RegionAS923InitDefaults+0x7a>
 800defa:	2b02      	cmp	r3, #2
 800defc:	d03c      	beq.n	800df78 <RegionAS923InitDefaults+0xa0>
 800defe:	b10b      	cbz	r3, 800df04 <RegionAS923InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_AS923 */
}
 800df00:	b006      	add	sp, #24
 800df02:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800df04:	6803      	ldr	r3, [r0, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d0fa      	beq.n	800df00 <RegionAS923InitDefaults+0x28>
 800df0a:	6843      	ldr	r3, [r0, #4]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d0f7      	beq.n	800df00 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800df10:	4c1e      	ldr	r4, [pc, #120]	; (800df8c <RegionAS923InitDefaults+0xb4>)
 800df12:	6023      	str	r3, [r4, #0]
            RegionBands = (Band_t*) params->Bands;
 800df14:	6880      	ldr	r0, [r0, #8]
 800df16:	4b1e      	ldr	r3, [pc, #120]	; (800df90 <RegionAS923InitDefaults+0xb8>)
 800df18:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 800df1a:	2218      	movs	r2, #24
 800df1c:	4669      	mov	r1, sp
 800df1e:	f001 ffaa 	bl	800fe76 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 800df22:	6824      	ldr	r4, [r4, #0]
 800df24:	4b1b      	ldr	r3, [pc, #108]	; (800df94 <RegionAS923InitDefaults+0xbc>)
 800df26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800df2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 800df2e:	f104 0c0c 	add.w	ip, r4, #12
 800df32:	330c      	adds	r3, #12
 800df34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800df38:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 800df3c:	2303      	movs	r3, #3
 800df3e:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800df42:	2201      	movs	r2, #1
 800df44:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 800df48:	f504 7058 	add.w	r0, r4, #864	; 0x360
 800df4c:	f000 fdbc 	bl	800eac8 <RegionCommonChanMaskCopy>
            break;
 800df50:	e7d6      	b.n	800df00 <RegionAS923InitDefaults+0x28>
            APP_LOG(TS_OFF, VLEVEL_M,  "init the channel\n\n\n" );
 800df52:	4b11      	ldr	r3, [pc, #68]	; (800df98 <RegionAS923InitDefaults+0xc0>)
 800df54:	2200      	movs	r2, #0
 800df56:	4611      	mov	r1, r2
 800df58:	2002      	movs	r0, #2
 800df5a:	f003 fe35 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800df5e:	4b0b      	ldr	r3, [pc, #44]	; (800df8c <RegionAS923InitDefaults+0xb4>)
 800df60:	6818      	ldr	r0, [r3, #0]
 800df62:	2300      	movs	r3, #0
 800df64:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800df66:	6103      	str	r3, [r0, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800df68:	2201      	movs	r2, #1
 800df6a:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800df6e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800df72:	f000 fda9 	bl	800eac8 <RegionCommonChanMaskCopy>
            break;
 800df76:	e7c3      	b.n	800df00 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800df78:	4b04      	ldr	r3, [pc, #16]	; (800df8c <RegionAS923InitDefaults+0xb4>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 800df80:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 800df84:	430a      	orrs	r2, r1
 800df86:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 800df8a:	e7b9      	b.n	800df00 <RegionAS923InitDefaults+0x28>
 800df8c:	20000fb4 	.word	0x20000fb4
 800df90:	20000fb0 	.word	0x20000fb0
 800df94:	08013840 	.word	0x08013840
 800df98:	08013ec8 	.word	0x08013ec8

0800df9c <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800df9c:	b508      	push	{r3, lr}
#if defined( REGION_AS923 )
    switch( phyAttribute )
 800df9e:	290a      	cmp	r1, #10
 800dfa0:	d84b      	bhi.n	800e03a <RegionAS923Verify+0x9e>
 800dfa2:	e8df f001 	tbb	[pc, r1]
 800dfa6:	4a06      	.short	0x4a06
 800dfa8:	0a4a4a4a 	.word	0x0a4a4a4a
 800dfac:	404a2a20 	.word	0x404a2a20
 800dfb0:	40          	.byte	0x40
 800dfb1:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800dfb2:	6800      	ldr	r0, [r0, #0]
 800dfb4:	f7ff fe50 	bl	800dc58 <VerifyRfFreq>
 800dfb8:	e040      	b.n	800e03c <RegionAS923Verify+0xa0>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800dfba:	7883      	ldrb	r3, [r0, #2]
 800dfbc:	b94b      	cbnz	r3, 800dfd2 <RegionAS923Verify+0x36>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 800dfbe:	2207      	movs	r2, #7
 800dfc0:	2100      	movs	r1, #0
 800dfc2:	f990 0000 	ldrsb.w	r0, [r0]
 800dfc6:	f000 fd0e 	bl	800e9e6 <RegionCommonValueInRange>
 800dfca:	3800      	subs	r0, #0
 800dfcc:	bf18      	it	ne
 800dfce:	2001      	movne	r0, #1
 800dfd0:	e034      	b.n	800e03c <RegionAS923Verify+0xa0>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 800dfd2:	2207      	movs	r2, #7
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	f990 0000 	ldrsb.w	r0, [r0]
 800dfda:	f000 fd04 	bl	800e9e6 <RegionCommonValueInRange>
 800dfde:	3800      	subs	r0, #0
 800dfe0:	bf18      	it	ne
 800dfe2:	2001      	movne	r0, #1
 800dfe4:	e02a      	b.n	800e03c <RegionAS923Verify+0xa0>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_2, DR_5 );
 800dfe6:	2205      	movs	r2, #5
 800dfe8:	2102      	movs	r1, #2
 800dfea:	f990 0000 	ldrsb.w	r0, [r0]
 800dfee:	f000 fcfa 	bl	800e9e6 <RegionCommonValueInRange>
 800dff2:	3800      	subs	r0, #0
 800dff4:	bf18      	it	ne
 800dff6:	2001      	movne	r0, #1
 800dff8:	e020      	b.n	800e03c <RegionAS923Verify+0xa0>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 800dffa:	7843      	ldrb	r3, [r0, #1]
 800dffc:	b94b      	cbnz	r3, 800e012 <RegionAS923Verify+0x76>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 800dffe:	2202      	movs	r2, #2
 800e000:	4611      	mov	r1, r2
 800e002:	f990 0000 	ldrsb.w	r0, [r0]
 800e006:	f000 fcee 	bl	800e9e6 <RegionCommonValueInRange>
 800e00a:	3800      	subs	r0, #0
 800e00c:	bf18      	it	ne
 800e00e:	2001      	movne	r0, #1
 800e010:	e014      	b.n	800e03c <RegionAS923Verify+0xa0>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 800e012:	2202      	movs	r2, #2
 800e014:	2100      	movs	r1, #0
 800e016:	f990 0000 	ldrsb.w	r0, [r0]
 800e01a:	f000 fce4 	bl	800e9e6 <RegionCommonValueInRange>
 800e01e:	3800      	subs	r0, #0
 800e020:	bf18      	it	ne
 800e022:	2001      	movne	r0, #1
 800e024:	e00a      	b.n	800e03c <RegionAS923Verify+0xa0>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 800e026:	2200      	movs	r2, #0
 800e028:	4611      	mov	r1, r2
 800e02a:	f990 0000 	ldrsb.w	r0, [r0]
 800e02e:	f000 fcda 	bl	800e9e6 <RegionCommonValueInRange>
 800e032:	3800      	subs	r0, #0
 800e034:	bf18      	it	ne
 800e036:	2001      	movne	r0, #1
 800e038:	e000      	b.n	800e03c <RegionAS923Verify+0xa0>
    switch( phyAttribute )
 800e03a:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 800e03c:	bd08      	pop	{r3, pc}
	...

0800e040 <RegionAS923ChanMaskSet>:
    }
#endif /* REGION_AS923 */
}

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800e040:	b508      	push	{r3, lr}
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 800e042:	7903      	ldrb	r3, [r0, #4]
 800e044:	b11b      	cbz	r3, 800e04e <RegionAS923ChanMaskSet+0xe>
 800e046:	2b01      	cmp	r3, #1
 800e048:	d00b      	beq.n	800e062 <RegionAS923ChanMaskSet+0x22>
 800e04a:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_AS923 */
}
 800e04c:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800e04e:	4b0a      	ldr	r3, [pc, #40]	; (800e078 <RegionAS923ChanMaskSet+0x38>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2201      	movs	r2, #1
 800e054:	6801      	ldr	r1, [r0, #0]
 800e056:	f503 7058 	add.w	r0, r3, #864	; 0x360
 800e05a:	f000 fd35 	bl	800eac8 <RegionCommonChanMaskCopy>
    return true;
 800e05e:	2001      	movs	r0, #1
            break;
 800e060:	e7f4      	b.n	800e04c <RegionAS923ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800e062:	4b05      	ldr	r3, [pc, #20]	; (800e078 <RegionAS923ChanMaskSet+0x38>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	2201      	movs	r2, #1
 800e068:	6801      	ldr	r1, [r0, #0]
 800e06a:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800e06e:	f000 fd2b 	bl	800eac8 <RegionCommonChanMaskCopy>
    return true;
 800e072:	2001      	movs	r0, #1
            break;
 800e074:	e7ea      	b.n	800e04c <RegionAS923ChanMaskSet+0xc>
 800e076:	bf00      	nop
 800e078:	20000fb4 	.word	0x20000fb4

0800e07c <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800e07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e07e:	b083      	sub	sp, #12
 800e080:	460e      	mov	r6, r1
 800e082:	4617      	mov	r7, r2
 800e084:	461c      	mov	r4, r3
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 800e086:	2802      	cmp	r0, #2
 800e088:	bfa8      	it	ge
 800e08a:	2002      	movge	r0, #2
 800e08c:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 800e08e:	4913      	ldr	r1, [pc, #76]	; (800e0dc <RegionAS923ComputeRxWindowParameters+0x60>)
 800e090:	f000 ffb4 	bl	800effc <RegionCommonGetBandwidth>
 800e094:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800e096:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e09a:	2b07      	cmp	r3, #7
 800e09c:	d017      	beq.n	800e0ce <RegionAS923ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 800e09e:	4a0f      	ldr	r2, [pc, #60]	; (800e0dc <RegionAS923ComputeRxWindowParameters+0x60>)
 800e0a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e0a4:	4a0e      	ldr	r2, [pc, #56]	; (800e0e0 <RegionAS923ComputeRxWindowParameters+0x64>)
 800e0a6:	5cd0      	ldrb	r0, [r2, r3]
 800e0a8:	f000 fe34 	bl	800ed14 <RegionCommonComputeSymbolTimeLoRa>
 800e0ac:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800e0ae:	4b0d      	ldr	r3, [pc, #52]	; (800e0e4 <RegionAS923ComputeRxWindowParameters+0x68>)
 800e0b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0b2:	4798      	blx	r3
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	f104 020c 	add.w	r2, r4, #12
 800e0ba:	9201      	str	r2, [sp, #4]
 800e0bc:	3408      	adds	r4, #8
 800e0be:	9400      	str	r4, [sp, #0]
 800e0c0:	463a      	mov	r2, r7
 800e0c2:	4631      	mov	r1, r6
 800e0c4:	4628      	mov	r0, r5
 800e0c6:	f000 fe33 	bl	800ed30 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 800e0ca:	b003      	add	sp, #12
 800e0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 800e0ce:	4a04      	ldr	r2, [pc, #16]	; (800e0e0 <RegionAS923ComputeRxWindowParameters+0x64>)
 800e0d0:	5cd0      	ldrb	r0, [r2, r3]
 800e0d2:	f000 fe27 	bl	800ed24 <RegionCommonComputeSymbolTimeFsk>
 800e0d6:	4605      	mov	r5, r0
 800e0d8:	e7e9      	b.n	800e0ae <RegionAS923ComputeRxWindowParameters+0x32>
 800e0da:	bf00      	nop
 800e0dc:	08013edc 	.word	0x08013edc
 800e0e0:	08013efc 	.word	0x08013efc
 800e0e4:	080145a0 	.word	0x080145a0

0800e0e8 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800e0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0ec:	b08a      	sub	sp, #40	; 0x28
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	460f      	mov	r7, r1
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800e0f2:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800e0f6:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800e0fa:	4b37      	ldr	r3, [pc, #220]	; (800e1d8 <RegionAS923RxConfig+0xf0>)
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	4798      	blx	r3
 800e100:	2800      	cmp	r0, #0
 800e102:	d167      	bne.n	800e1d4 <RegionAS923RxConfig+0xec>
 800e104:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800e106:	7ce3      	ldrb	r3, [r4, #19]
 800e108:	b983      	cbnz	r3, 800e12c <RegionAS923RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800e10a:	4b34      	ldr	r3, [pc, #208]	; (800e1dc <RegionAS923RxConfig+0xf4>)
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	7823      	ldrb	r3, [r4, #0]
 800e110:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e114:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800e118:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e11c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e120:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800e124:	f1b8 0f00 	cmp.w	r8, #0
 800e128:	d100      	bne.n	800e12c <RegionAS923RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800e12a:	4688      	mov	r8, r1

        }
    }
    // frequency = 923200000;
    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 800e12c:	4b2c      	ldr	r3, [pc, #176]	; (800e1e0 <RegionAS923RxConfig+0xf8>)
 800e12e:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800e132:	4b29      	ldr	r3, [pc, #164]	; (800e1d8 <RegionAS923RxConfig+0xf0>)
 800e134:	68db      	ldr	r3, [r3, #12]
 800e136:	4640      	mov	r0, r8
 800e138:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800e13a:	2d07      	cmp	r5, #7
 800e13c:	d02b      	beq.n	800e196 <RegionAS923RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800e13e:	4b26      	ldr	r3, [pc, #152]	; (800e1d8 <RegionAS923RxConfig+0xf0>)
 800e140:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800e144:	7ca3      	ldrb	r3, [r4, #18]
 800e146:	9309      	str	r3, [sp, #36]	; 0x24
 800e148:	2601      	movs	r6, #1
 800e14a:	9608      	str	r6, [sp, #32]
 800e14c:	2300      	movs	r3, #0
 800e14e:	9307      	str	r3, [sp, #28]
 800e150:	9306      	str	r3, [sp, #24]
 800e152:	9305      	str	r3, [sp, #20]
 800e154:	9304      	str	r3, [sp, #16]
 800e156:	9303      	str	r3, [sp, #12]
 800e158:	8922      	ldrh	r2, [r4, #8]
 800e15a:	9202      	str	r2, [sp, #8]
 800e15c:	2208      	movs	r2, #8
 800e15e:	9201      	str	r2, [sp, #4]
 800e160:	9300      	str	r3, [sp, #0]
 800e162:	4633      	mov	r3, r6
 800e164:	464a      	mov	r2, r9
 800e166:	78a1      	ldrb	r1, [r4, #2]
 800e168:	4630      	mov	r0, r6
 800e16a:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800e16c:	7c63      	ldrb	r3, [r4, #17]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d02d      	beq.n	800e1ce <RegionAS923RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 800e172:	4b1c      	ldr	r3, [pc, #112]	; (800e1e4 <RegionAS923RxConfig+0xfc>)
 800e174:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800e176:	4b18      	ldr	r3, [pc, #96]	; (800e1d8 <RegionAS923RxConfig+0xf0>)
 800e178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e17a:	310d      	adds	r1, #13
 800e17c:	b2c9      	uxtb	r1, r1
 800e17e:	4630      	mov	r0, r6
 800e180:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800e182:	462a      	mov	r2, r5
 800e184:	4641      	mov	r1, r8
 800e186:	7ce0      	ldrb	r0, [r4, #19]
 800e188:	f000 ff4a 	bl	800f020 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800e18c:	703d      	strb	r5, [r7, #0]
    return true;
 800e18e:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 800e190:	b00a      	add	sp, #40	; 0x28
 800e192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800e196:	4b10      	ldr	r3, [pc, #64]	; (800e1d8 <RegionAS923RxConfig+0xf0>)
 800e198:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800e19c:	7ca3      	ldrb	r3, [r4, #18]
 800e19e:	9309      	str	r3, [sp, #36]	; 0x24
 800e1a0:	2000      	movs	r0, #0
 800e1a2:	9008      	str	r0, [sp, #32]
 800e1a4:	9007      	str	r0, [sp, #28]
 800e1a6:	9006      	str	r0, [sp, #24]
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	9305      	str	r3, [sp, #20]
 800e1ac:	9004      	str	r0, [sp, #16]
 800e1ae:	9003      	str	r0, [sp, #12]
 800e1b0:	8923      	ldrh	r3, [r4, #8]
 800e1b2:	9302      	str	r3, [sp, #8]
 800e1b4:	2305      	movs	r3, #5
 800e1b6:	9301      	str	r3, [sp, #4]
 800e1b8:	4b0b      	ldr	r3, [pc, #44]	; (800e1e8 <RegionAS923RxConfig+0x100>)
 800e1ba:	9300      	str	r3, [sp, #0]
 800e1bc:	4603      	mov	r3, r0
 800e1be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e1c2:	fb02 f209 	mul.w	r2, r2, r9
 800e1c6:	f24c 3150 	movw	r1, #50000	; 0xc350
 800e1ca:	47d0      	blx	sl
 800e1cc:	e7ce      	b.n	800e16c <RegionAS923RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 800e1ce:	4b07      	ldr	r3, [pc, #28]	; (800e1ec <RegionAS923RxConfig+0x104>)
 800e1d0:	5d59      	ldrb	r1, [r3, r5]
 800e1d2:	e7d0      	b.n	800e176 <RegionAS923RxConfig+0x8e>
        return false;
 800e1d4:	2000      	movs	r0, #0
 800e1d6:	e7db      	b.n	800e190 <RegionAS923RxConfig+0xa8>
 800e1d8:	080145a0 	.word	0x080145a0
 800e1dc:	20000fb4 	.word	0x20000fb4
 800e1e0:	08013efc 	.word	0x08013efc
 800e1e4:	08013f94 	.word	0x08013f94
 800e1e8:	00014585 	.word	0x00014585
 800e1ec:	08013f84 	.word	0x08013f84

0800e1f0 <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800e1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f4:	b08d      	sub	sp, #52	; 0x34
 800e1f6:	4604      	mov	r4, r0
 800e1f8:	460f      	mov	r7, r1
 800e1fa:	4690      	mov	r8, r2
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800e1fc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e200:	4a42      	ldr	r2, [pc, #264]	; (800e30c <RegionAS923TxConfig+0x11c>)
 800e202:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800e206:	4d42      	ldr	r5, [pc, #264]	; (800e310 <RegionAS923TxConfig+0x120>)
 800e208:	682a      	ldr	r2, [r5, #0]
 800e20a:	7803      	ldrb	r3, [r0, #0]
 800e20c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e210:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e214:	7a5b      	ldrb	r3, [r3, #9]
 800e216:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e21a:	4a3e      	ldr	r2, [pc, #248]	; (800e314 <RegionAS923TxConfig+0x124>)
 800e21c:	6812      	ldr	r2, [r2, #0]
 800e21e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e222:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800e226:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800e22a:	f000 fee3 	bl	800eff4 <RegionCommonLimitTxPower>
 800e22e:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 800e230:	4939      	ldr	r1, [pc, #228]	; (800e318 <RegionAS923TxConfig+0x128>)
 800e232:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e236:	f000 fee1 	bl	800effc <RegionCommonGetBandwidth>
 800e23a:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800e23c:	68a2      	ldr	r2, [r4, #8]
 800e23e:	6861      	ldr	r1, [r4, #4]
 800e240:	4630      	mov	r0, r6
 800e242:	f000 fdb1 	bl	800eda8 <RegionCommonComputeTxPower>
 800e246:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800e248:	4b34      	ldr	r3, [pc, #208]	; (800e31c <RegionAS923TxConfig+0x12c>)
 800e24a:	68da      	ldr	r2, [r3, #12]
 800e24c:	6829      	ldr	r1, [r5, #0]
 800e24e:	7823      	ldrb	r3, [r4, #0]
 800e250:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e254:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800e258:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800e25a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e25e:	2b07      	cmp	r3, #7
 800e260:	d031      	beq.n	800e2c6 <RegionAS923TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800e262:	4b2e      	ldr	r3, [pc, #184]	; (800e31c <RegionAS923TxConfig+0x12c>)
 800e264:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800e268:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800e26c:	9308      	str	r3, [sp, #32]
 800e26e:	2200      	movs	r2, #0
 800e270:	9207      	str	r2, [sp, #28]
 800e272:	9206      	str	r2, [sp, #24]
 800e274:	9205      	str	r2, [sp, #20]
 800e276:	2501      	movs	r5, #1
 800e278:	9504      	str	r5, [sp, #16]
 800e27a:	9203      	str	r2, [sp, #12]
 800e27c:	2308      	movs	r3, #8
 800e27e:	9302      	str	r3, [sp, #8]
 800e280:	9501      	str	r5, [sp, #4]
 800e282:	f8cd a000 	str.w	sl, [sp]
 800e286:	464b      	mov	r3, r9
 800e288:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e28a:	4628      	mov	r0, r5
 800e28c:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800e28e:	4b20      	ldr	r3, [pc, #128]	; (800e310 <RegionAS923TxConfig+0x120>)
 800e290:	681a      	ldr	r2, [r3, #0]
 800e292:	7823      	ldrb	r3, [r4, #0]
 800e294:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e298:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800e29c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e2a0:	f000 fee0 	bl	800f064 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800e2a4:	89a1      	ldrh	r1, [r4, #12]
 800e2a6:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e2aa:	f7ff fce9 	bl	800dc80 <GetTimeOnAir>
 800e2ae:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800e2b2:	4b1a      	ldr	r3, [pc, #104]	; (800e31c <RegionAS923TxConfig+0x12c>)
 800e2b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2b6:	7b21      	ldrb	r1, [r4, #12]
 800e2b8:	4628      	mov	r0, r5
 800e2ba:	4798      	blx	r3

    *txPower = txPowerLimited;
 800e2bc:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_AS923 */
}
 800e2be:	2001      	movs	r0, #1
 800e2c0:	b00d      	add	sp, #52	; 0x34
 800e2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800e2c6:	4b15      	ldr	r3, [pc, #84]	; (800e31c <RegionAS923TxConfig+0x12c>)
 800e2c8:	69dd      	ldr	r5, [r3, #28]
 800e2ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e2ce:	fb03 f30a 	mul.w	r3, r3, sl
 800e2d2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800e2d6:	9208      	str	r2, [sp, #32]
 800e2d8:	f04f 0b00 	mov.w	fp, #0
 800e2dc:	f8cd b01c 	str.w	fp, [sp, #28]
 800e2e0:	f8cd b018 	str.w	fp, [sp, #24]
 800e2e4:	f8cd b014 	str.w	fp, [sp, #20]
 800e2e8:	2201      	movs	r2, #1
 800e2ea:	9204      	str	r2, [sp, #16]
 800e2ec:	f8cd b00c 	str.w	fp, [sp, #12]
 800e2f0:	2205      	movs	r2, #5
 800e2f2:	9202      	str	r2, [sp, #8]
 800e2f4:	f8cd b004 	str.w	fp, [sp, #4]
 800e2f8:	9300      	str	r3, [sp, #0]
 800e2fa:	464b      	mov	r3, r9
 800e2fc:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800e300:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e302:	4658      	mov	r0, fp
 800e304:	47a8      	blx	r5
        modem = MODEM_FSK;
 800e306:	465d      	mov	r5, fp
 800e308:	e7c1      	b.n	800e28e <RegionAS923TxConfig+0x9e>
 800e30a:	bf00      	nop
 800e30c:	08013efc 	.word	0x08013efc
 800e310:	20000fb4 	.word	0x20000fb4
 800e314:	20000fb0 	.word	0x20000fb0
 800e318:	08013edc 	.word	0x08013edc
 800e31c:	080145a0 	.word	0x080145a0

0800e320 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800e320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e324:	b08f      	sub	sp, #60	; 0x3c
 800e326:	4605      	mov	r5, r0
 800e328:	4689      	mov	r9, r1
 800e32a:	4690      	mov	r8, r2
 800e32c:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800e32e:	2400      	movs	r4, #0
 800e330:	940c      	str	r4, [sp, #48]	; 0x30
 800e332:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800e336:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800e33a:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e33c:	e030      	b.n	800e3a0 <RegionAS923LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 800e33e:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800e342:	2607      	movs	r6, #7
 800e344:	e012      	b.n	800e36c <RegionAS923LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800e346:	4a57      	ldr	r2, [pc, #348]	; (800e4a4 <RegionAS923LinkAdrReq+0x184>)
 800e348:	6812      	ldr	r2, [r2, #0]
 800e34a:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800e34e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e352:	b13a      	cbz	r2, 800e364 <RegionAS923LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800e354:	2201      	movs	r2, #1
 800e356:	fa02 f20c 	lsl.w	r2, r2, ip
 800e35a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800e35e:	430a      	orrs	r2, r1
 800e360:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 800e364:	f10c 0c01 	add.w	ip, ip, #1
 800e368:	fa5f fc8c 	uxtb.w	ip, ip
 800e36c:	f1bc 0f0f 	cmp.w	ip, #15
 800e370:	d816      	bhi.n	800e3a0 <RegionAS923LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800e372:	2b06      	cmp	r3, #6
 800e374:	d0e7      	beq.n	800e346 <RegionAS923LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800e376:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800e37a:	fa4e fe0c 	asr.w	lr, lr, ip
 800e37e:	f01e 0f01 	tst.w	lr, #1
 800e382:	d0ef      	beq.n	800e364 <RegionAS923LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800e384:	4a47      	ldr	r2, [pc, #284]	; (800e4a4 <RegionAS923LinkAdrReq+0x184>)
 800e386:	6812      	ldr	r2, [r2, #0]
 800e388:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800e38c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800e390:	2a00      	cmp	r2, #0
 800e392:	d1e7      	bne.n	800e364 <RegionAS923LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800e394:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800e398:	e7e4      	b.n	800e364 <RegionAS923LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800e39a:	2606      	movs	r6, #6
 800e39c:	e000      	b.n	800e3a0 <RegionAS923LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800e39e:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e3a0:	7a2b      	ldrb	r3, [r5, #8]
 800e3a2:	42a3      	cmp	r3, r4
 800e3a4:	d918      	bls.n	800e3d8 <RegionAS923LinkAdrReq+0xb8>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800e3a6:	6868      	ldr	r0, [r5, #4]
 800e3a8:	a90c      	add	r1, sp, #48	; 0x30
 800e3aa:	4420      	add	r0, r4
 800e3ac:	f000 fc3c 	bl	800ec28 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800e3b0:	b190      	cbz	r0, 800e3d8 <RegionAS923LinkAdrReq+0xb8>
        bytesProcessed += nextIndex;
 800e3b2:	4404      	add	r4, r0
 800e3b4:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
 800e3b6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800e3ba:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800e3be:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800e3c2:	b90b      	cbnz	r3, 800e3c8 <RegionAS923LinkAdrReq+0xa8>
 800e3c4:	2a00      	cmp	r2, #0
 800e3c6:	d0e8      	beq.n	800e39a <RegionAS923LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800e3c8:	1e5a      	subs	r2, r3, #1
 800e3ca:	b2d2      	uxtb	r2, r2
 800e3cc:	2a04      	cmp	r2, #4
 800e3ce:	d9e6      	bls.n	800e39e <RegionAS923LinkAdrReq+0x7e>
 800e3d0:	2b06      	cmp	r3, #6
 800e3d2:	d9b4      	bls.n	800e33e <RegionAS923LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800e3d4:	2606      	movs	r6, #6
 800e3d6:	e7e3      	b.n	800e3a0 <RegionAS923LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800e3d8:	2302      	movs	r3, #2
 800e3da:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800e3de:	7a6b      	ldrb	r3, [r5, #9]
 800e3e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionAS923GetPhyParam( &getPhy );
 800e3e4:	a80a      	add	r0, sp, #40	; 0x28
 800e3e6:	f7ff fc7d 	bl	800dce4 <RegionAS923GetPhyParam>
 800e3ea:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 800e3ec:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800e3f0:	7aab      	ldrb	r3, [r5, #10]
 800e3f2:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800e3f6:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800e3fa:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800e3fe:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800e402:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800e406:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800e40a:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800e40e:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800e412:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800e416:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800e41a:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800e41e:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800e422:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 800e426:	2310      	movs	r3, #16
 800e428:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800e42c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800e430:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800e432:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 800e436:	2307      	movs	r3, #7
 800e438:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800e43c:	4b19      	ldr	r3, [pc, #100]	; (800e4a4 <RegionAS923LinkAdrReq+0x184>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	9307      	str	r3, [sp, #28]
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 800e442:	2300      	movs	r3, #0
 800e444:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 800e448:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800e44c:	682b      	ldr	r3, [r5, #0]
 800e44e:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800e450:	ab0c      	add	r3, sp, #48	; 0x30
 800e452:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800e456:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800e45a:	a801      	add	r0, sp, #4
 800e45c:	f000 fc02 	bl	800ec64 <RegionCommonLinkAdrReqVerifyParams>
 800e460:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800e462:	2807      	cmp	r0, #7
 800e464:	d010      	beq.n	800e488 <RegionAS923LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800e466:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800e46a:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800e46e:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800e472:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800e476:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800e47a:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800e47c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e47e:	701c      	strb	r4, [r3, #0]

#endif /* REGION_AS923 */
    return status;
}
 800e480:	4628      	mov	r0, r5
 800e482:	b00f      	add	sp, #60	; 0x3c
 800e484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800e488:	4e06      	ldr	r6, [pc, #24]	; (800e4a4 <RegionAS923LinkAdrReq+0x184>)
 800e48a:	6830      	ldr	r0, [r6, #0]
 800e48c:	220c      	movs	r2, #12
 800e48e:	2100      	movs	r1, #0
 800e490:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800e494:	f001 fd07 	bl	800fea6 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800e498:	6833      	ldr	r3, [r6, #0]
 800e49a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800e49e:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 800e4a2:	e7e0      	b.n	800e466 <RegionAS923LinkAdrReq+0x146>
 800e4a4:	20000fb4 	.word	0x20000fb4

0800e4a8 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800e4a8:	b538      	push	{r3, r4, r5, lr}
 800e4aa:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800e4ac:	6840      	ldr	r0, [r0, #4]
 800e4ae:	f7ff fbd3 	bl	800dc58 <VerifyRfFreq>
 800e4b2:	b1a0      	cbz	r0, 800e4de <RegionAS923RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 800e4b4:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 800e4b6:	2202      	movs	r2, #2
 800e4b8:	4611      	mov	r1, r2
 800e4ba:	f994 0000 	ldrsb.w	r0, [r4]
 800e4be:	f000 fa92 	bl	800e9e6 <RegionCommonValueInRange>
 800e4c2:	b908      	cbnz	r0, 800e4c8 <RegionAS923RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800e4c4:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 800e4c8:	2207      	movs	r2, #7
 800e4ca:	2102      	movs	r1, #2
 800e4cc:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e4d0:	f000 fa89 	bl	800e9e6 <RegionCommonValueInRange>
 800e4d4:	b908      	cbnz	r0, 800e4da <RegionAS923RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800e4d6:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_AS923 */
    return status;
}
 800e4da:	4628      	mov	r0, r5
 800e4dc:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800e4de:	2506      	movs	r5, #6
 800e4e0:	e7e9      	b.n	800e4b6 <RegionAS923RxParamSetupReq+0xe>

0800e4e2 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 800e4e2:	2000      	movs	r0, #0
 800e4e4:	4770      	bx	lr
	...

0800e4e8 <RegionAS923DlChannelReq>:

int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800e4e8:	b510      	push	{r4, lr}
 800e4ea:	4604      	mov	r4, r0
    uint8_t status = 0x03;

#if defined( REGION_AS923 )
    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 800e4ec:	6840      	ldr	r0, [r0, #4]
 800e4ee:	f7ff fbb3 	bl	800dc58 <VerifyRfFreq>
 800e4f2:	b170      	cbz	r0, 800e512 <RegionAS923DlChannelReq+0x2a>
    uint8_t status = 0x03;
 800e4f4:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800e4f6:	4b0b      	ldr	r3, [pc, #44]	; (800e524 <RegionAS923DlChannelReq+0x3c>)
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	7823      	ldrb	r3, [r4, #0]
 800e4fc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e500:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800e504:	b909      	cbnz	r1, 800e50a <RegionAS923DlChannelReq+0x22>
    {
        status &= 0xFD;
 800e506:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800e50a:	2803      	cmp	r0, #3
 800e50c:	d003      	beq.n	800e516 <RegionAS923DlChannelReq+0x2e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_AS923 */
    return status;
}
 800e50e:	b240      	sxtb	r0, r0
 800e510:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800e512:	2002      	movs	r0, #2
 800e514:	e7ef      	b.n	800e4f6 <RegionAS923DlChannelReq+0xe>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800e516:	6861      	ldr	r1, [r4, #4]
 800e518:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e51c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e520:	6059      	str	r1, [r3, #4]
 800e522:	e7f4      	b.n	800e50e <RegionAS923DlChannelReq+0x26>
 800e524:	20000fb4 	.word	0x20000fb4

0800e528 <RegionAS923AlternateDr>:
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
#else
    return -1;
#endif /* REGION_AS923 */
}
 800e528:	2000      	movs	r0, #0
 800e52a:	4770      	bx	lr

0800e52c <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800e52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e52e:	b097      	sub	sp, #92	; 0x5c
 800e530:	4604      	mov	r4, r0
 800e532:	460f      	mov	r7, r1
 800e534:	4616      	mov	r6, r2
 800e536:	461d      	mov	r5, r3
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 800e538:	2100      	movs	r1, #0
 800e53a:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800e53e:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 800e542:	9111      	str	r1, [sp, #68]	; 0x44
 800e544:	9112      	str	r1, [sp, #72]	; 0x48
 800e546:	9113      	str	r1, [sp, #76]	; 0x4c
 800e548:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 800e54a:	2303      	movs	r3, #3
 800e54c:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800e550:	4b34      	ldr	r3, [pc, #208]	; (800e624 <RegionAS923NextChannel+0xf8>)
 800e552:	6818      	ldr	r0, [r3, #0]
 800e554:	2201      	movs	r2, #1
 800e556:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800e55a:	f000 fa9f 	bl	800ea9c <RegionCommonCountChannels>
 800e55e:	b938      	cbnz	r0, 800e570 <RegionAS923NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800e560:	4b30      	ldr	r3, [pc, #192]	; (800e624 <RegionAS923NextChannel+0xf8>)
 800e562:	681a      	ldr	r2, [r3, #0]
 800e564:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800e568:	f043 0303 	orr.w	r3, r3, #3
 800e56c:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800e570:	7a63      	ldrb	r3, [r4, #9]
 800e572:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800e576:	7a23      	ldrb	r3, [r4, #8]
 800e578:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800e57c:	4b29      	ldr	r3, [pc, #164]	; (800e624 <RegionAS923NextChannel+0xf8>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f503 7258 	add.w	r2, r3, #864	; 0x360
 800e584:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800e586:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800e588:	4b27      	ldr	r3, [pc, #156]	; (800e628 <RegionAS923NextChannel+0xfc>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 800e58e:	2310      	movs	r3, #16
 800e590:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800e594:	f10d 030a 	add.w	r3, sp, #10
 800e598:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800e59a:	6823      	ldr	r3, [r4, #0]
 800e59c:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800e59e:	6863      	ldr	r3, [r4, #4]
 800e5a0:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800e5a2:	7aa3      	ldrb	r3, [r4, #10]
 800e5a4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800e5ae:	ab0c      	add	r3, sp, #48	; 0x30
 800e5b0:	f104 020c 	add.w	r2, r4, #12
 800e5b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e5b8:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800e5bc:	7d23      	ldrb	r3, [r4, #20]
 800e5be:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800e5c2:	8ae1      	ldrh	r1, [r4, #22]
 800e5c4:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800e5c8:	f7ff fb5a 	bl	800dc80 <GetTimeOnAir>
 800e5cc:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800e5ce:	ab03      	add	r3, sp, #12
 800e5d0:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800e5d2:	9601      	str	r6, [sp, #4]
 800e5d4:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800e5d8:	9300      	str	r3, [sp, #0]
 800e5da:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800e5de:	aa11      	add	r2, sp, #68	; 0x44
 800e5e0:	4629      	mov	r1, r5
 800e5e2:	a809      	add	r0, sp, #36	; 0x24
 800e5e4:	f000 fc9d 	bl	800ef22 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800e5e8:	4604      	mov	r4, r0
 800e5ea:	b120      	cbz	r0, 800e5f6 <RegionAS923NextChannel+0xca>
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800e5ec:	280c      	cmp	r0, #12
 800e5ee:	d00f      	beq.n	800e610 <RegionAS923NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 800e5f0:	4620      	mov	r0, r4
 800e5f2:	b017      	add	sp, #92	; 0x5c
 800e5f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800e5f6:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800e5fa:	3901      	subs	r1, #1
 800e5fc:	f001 fc2e 	bl	800fe5c <randr>
 800e600:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800e604:	eb0d 0003 	add.w	r0, sp, r3
 800e608:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800e60c:	703b      	strb	r3, [r7, #0]
 800e60e:	e7ef      	b.n	800e5f0 <RegionAS923NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800e610:	4b04      	ldr	r3, [pc, #16]	; (800e624 <RegionAS923NextChannel+0xf8>)
 800e612:	681a      	ldr	r2, [r3, #0]
 800e614:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800e618:	f043 0303 	orr.w	r3, r3, #3
 800e61c:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 800e620:	e7e6      	b.n	800e5f0 <RegionAS923NextChannel+0xc4>
 800e622:	bf00      	nop
 800e624:	20000fb4 	.word	0x20000fb4
 800e628:	20000fb0 	.word	0x20000fb0

0800e62c <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800e62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_AS923 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800e62e:	7905      	ldrb	r5, [r0, #4]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 800e630:	2d01      	cmp	r5, #1
 800e632:	d94b      	bls.n	800e6cc <RegionAS923ChannelAdd+0xa0>
 800e634:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 800e636:	2d0f      	cmp	r5, #15
 800e638:	d84a      	bhi.n	800e6d0 <RegionAS923ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800e63a:	6803      	ldr	r3, [r0, #0]
 800e63c:	7a18      	ldrb	r0, [r3, #8]
 800e63e:	f340 0003 	sbfx	r0, r0, #0, #4
 800e642:	2207      	movs	r2, #7
 800e644:	2100      	movs	r1, #0
 800e646:	b240      	sxtb	r0, r0
 800e648:	f000 f9cd 	bl	800e9e6 <RegionCommonValueInRange>
 800e64c:	2800      	cmp	r0, #0
 800e64e:	d039      	beq.n	800e6c4 <RegionAS923ChannelAdd+0x98>
    bool drInvalid = false;
 800e650:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800e652:	6823      	ldr	r3, [r4, #0]
 800e654:	7a18      	ldrb	r0, [r3, #8]
 800e656:	f340 1003 	sbfx	r0, r0, #4, #4
 800e65a:	2207      	movs	r2, #7
 800e65c:	2100      	movs	r1, #0
 800e65e:	b240      	sxtb	r0, r0
 800e660:	f000 f9c1 	bl	800e9e6 <RegionCommonValueInRange>
 800e664:	b900      	cbnz	r0, 800e668 <RegionAS923ChannelAdd+0x3c>
    {
        drInvalid = true;
 800e666:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800e668:	6821      	ldr	r1, [r4, #0]
 800e66a:	7a0b      	ldrb	r3, [r1, #8]
 800e66c:	f343 0203 	sbfx	r2, r3, #0, #4
 800e670:	b252      	sxtb	r2, r2
 800e672:	f343 1303 	sbfx	r3, r3, #4, #4
 800e676:	b25b      	sxtb	r3, r3
 800e678:	429a      	cmp	r2, r3
 800e67a:	dd00      	ble.n	800e67e <RegionAS923ChannelAdd+0x52>
    {
        drInvalid = true;
 800e67c:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 800e67e:	6808      	ldr	r0, [r1, #0]
 800e680:	f7ff faea 	bl	800dc58 <VerifyRfFreq>
 800e684:	b300      	cbz	r0, 800e6c8 <RegionAS923ChannelAdd+0x9c>
    bool freqInvalid = false;
 800e686:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800e688:	b106      	cbz	r6, 800e68c <RegionAS923ChannelAdd+0x60>
 800e68a:	bb1b      	cbnz	r3, 800e6d4 <RegionAS923ChannelAdd+0xa8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800e68c:	bb26      	cbnz	r6, 800e6d8 <RegionAS923ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800e68e:	bb2b      	cbnz	r3, 800e6dc <RegionAS923ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800e690:	4f13      	ldr	r7, [pc, #76]	; (800e6e0 <RegionAS923ChannelAdd+0xb4>)
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	006e      	lsls	r6, r5, #1
 800e696:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800e69a:	220c      	movs	r2, #12
 800e69c:	6821      	ldr	r1, [r4, #0]
 800e69e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e6a2:	f001 fbe8 	bl	800fe76 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 800e6a6:	683a      	ldr	r2, [r7, #0]
 800e6a8:	442e      	add	r6, r5
 800e6aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e6ae:	2000      	movs	r0, #0
 800e6b0:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	fa03 f505 	lsl.w	r5, r3, r5
 800e6b8:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800e6bc:	431d      	orrs	r5, r3
 800e6be:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 800e6c2:	e006      	b.n	800e6d2 <RegionAS923ChannelAdd+0xa6>
        drInvalid = true;
 800e6c4:	2601      	movs	r6, #1
 800e6c6:	e7c4      	b.n	800e652 <RegionAS923ChannelAdd+0x26>
            freqInvalid = true;
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	e7dd      	b.n	800e688 <RegionAS923ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800e6cc:	2006      	movs	r0, #6
 800e6ce:	e000      	b.n	800e6d2 <RegionAS923ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e6d0:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 800e6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800e6d4:	2006      	movs	r0, #6
 800e6d6:	e7fc      	b.n	800e6d2 <RegionAS923ChannelAdd+0xa6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800e6d8:	2005      	movs	r0, #5
 800e6da:	e7fa      	b.n	800e6d2 <RegionAS923ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800e6dc:	2004      	movs	r0, #4
 800e6de:	e7f8      	b.n	800e6d2 <RegionAS923ChannelAdd+0xa6>
 800e6e0:	20000fb4 	.word	0x20000fb4

0800e6e4 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 800e6e4:	7801      	ldrb	r1, [r0, #0]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 800e6e6:	2901      	cmp	r1, #1
 800e6e8:	d913      	bls.n	800e712 <RegionAS923ChannelsRemove+0x2e>
{
 800e6ea:	b508      	push	{r3, lr}
    {
        return false;
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800e6ec:	4b0a      	ldr	r3, [pc, #40]	; (800e718 <RegionAS923ChannelsRemove+0x34>)
 800e6ee:	6818      	ldr	r0, [r3, #0]
 800e6f0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800e6f4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800e6f8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	f840 200c 	str.w	r2, [r0, ip]
 800e702:	605a      	str	r2, [r3, #4]
 800e704:	609a      	str	r2, [r3, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 800e706:	2210      	movs	r2, #16
 800e708:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800e70c:	f000 f9ad 	bl	800ea6a <RegionCommonChanDisable>
#else
    return false;
#endif /* REGION_AS923 */
}
 800e710:	bd08      	pop	{r3, pc}
        return false;
 800e712:	2000      	movs	r0, #0
}
 800e714:	4770      	bx	lr
 800e716:	bf00      	nop
 800e718:	20000fb4 	.word	0x20000fb4

0800e71c <RegionAS923ApplyCFList>:
{
 800e71c:	b570      	push	{r4, r5, r6, lr}
 800e71e:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800e720:	2350      	movs	r3, #80	; 0x50
 800e722:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800e726:	7a03      	ldrb	r3, [r0, #8]
 800e728:	2b10      	cmp	r3, #16
 800e72a:	d136      	bne.n	800e79a <RegionAS923ApplyCFList+0x7e>
 800e72c:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800e72e:	6843      	ldr	r3, [r0, #4]
 800e730:	7bdd      	ldrb	r5, [r3, #15]
 800e732:	2d00      	cmp	r5, #0
 800e734:	d131      	bne.n	800e79a <RegionAS923ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800e736:	2402      	movs	r4, #2
 800e738:	e01b      	b.n	800e772 <RegionAS923ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800e73a:	6872      	ldr	r2, [r6, #4]
 800e73c:	5d53      	ldrb	r3, [r2, r5]
 800e73e:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800e740:	442a      	add	r2, r5
 800e742:	7851      	ldrb	r1, [r2, #1]
 800e744:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e748:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800e74a:	7892      	ldrb	r2, [r2, #2]
 800e74c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e750:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800e752:	2264      	movs	r2, #100	; 0x64
 800e754:	fb02 f303 	mul.w	r3, r2, r3
 800e758:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800e75a:	2300      	movs	r3, #0
 800e75c:	9304      	str	r3, [sp, #16]
 800e75e:	e011      	b.n	800e784 <RegionAS923ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800e760:	f88d 4000 	strb.w	r4, [sp]
            RegionAS923ChannelsRemove( &channelRemove );
 800e764:	4668      	mov	r0, sp
 800e766:	f7ff ffbd 	bl	800e6e4 <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800e76a:	3503      	adds	r5, #3
 800e76c:	b2ed      	uxtb	r5, r5
 800e76e:	3401      	adds	r4, #1
 800e770:	b2e4      	uxtb	r4, r4
 800e772:	2c0f      	cmp	r4, #15
 800e774:	d811      	bhi.n	800e79a <RegionAS923ApplyCFList+0x7e>
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 800e776:	2c06      	cmp	r4, #6
 800e778:	d9df      	bls.n	800e73a <RegionAS923ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800e77a:	2300      	movs	r3, #0
 800e77c:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800e77e:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800e782:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800e784:	9b03      	ldr	r3, [sp, #12]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d0ea      	beq.n	800e760 <RegionAS923ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800e78a:	ab03      	add	r3, sp, #12
 800e78c:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800e78e:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionAS923ChannelAdd( &channelAdd );
 800e792:	a801      	add	r0, sp, #4
 800e794:	f7ff ff4a 	bl	800e62c <RegionAS923ChannelAdd>
 800e798:	e7e7      	b.n	800e76a <RegionAS923ApplyCFList+0x4e>
}
 800e79a:	b006      	add	sp, #24
 800e79c:	bd70      	pop	{r4, r5, r6, pc}

0800e79e <RegionAS923NewChannelReq>:
{
 800e79e:	b500      	push	{lr}
 800e7a0:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800e7a2:	6803      	ldr	r3, [r0, #0]
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	b952      	cbnz	r2, 800e7be <RegionAS923NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800e7a8:	7903      	ldrb	r3, [r0, #4]
 800e7aa:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 800e7ae:	a801      	add	r0, sp, #4
 800e7b0:	f7ff ff98 	bl	800e6e4 <RegionAS923ChannelsRemove>
 800e7b4:	b1d0      	cbz	r0, 800e7ec <RegionAS923NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800e7b6:	2003      	movs	r0, #3
}
 800e7b8:	b005      	add	sp, #20
 800e7ba:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800e7be:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800e7c0:	7903      	ldrb	r3, [r0, #4]
 800e7c2:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionAS923ChannelAdd( &channelAdd ) )
 800e7c6:	a802      	add	r0, sp, #8
 800e7c8:	f7ff ff30 	bl	800e62c <RegionAS923ChannelAdd>
 800e7cc:	2806      	cmp	r0, #6
 800e7ce:	d80b      	bhi.n	800e7e8 <RegionAS923NewChannelReq+0x4a>
 800e7d0:	e8df f000 	tbb	[pc, r0]
 800e7d4:	0a0a0a04 	.word	0x0a0a0a04
 800e7d8:	060e      	.short	0x060e
 800e7da:	08          	.byte	0x08
 800e7db:	00          	.byte	0x00
 800e7dc:	2003      	movs	r0, #3
 800e7de:	e7eb      	b.n	800e7b8 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFD;
 800e7e0:	2001      	movs	r0, #1
                break;
 800e7e2:	e7e9      	b.n	800e7b8 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFC;
 800e7e4:	2000      	movs	r0, #0
                break;
 800e7e6:	e7e7      	b.n	800e7b8 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFC;
 800e7e8:	2000      	movs	r0, #0
                break;
 800e7ea:	e7e5      	b.n	800e7b8 <RegionAS923NewChannelReq+0x1a>
            status &= 0xFC;
 800e7ec:	2000      	movs	r0, #0
 800e7ee:	e7e3      	b.n	800e7b8 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFE;
 800e7f0:	2002      	movs	r0, #2
 800e7f2:	e7e1      	b.n	800e7b8 <RegionAS923NewChannelReq+0x1a>

0800e7f4 <RegionAS923ApplyDrOffset>:
{
#if defined( REGION_AS923 )
    // Initialize minDr
    int8_t minDr;

    if( downlinkDwellTime == 0 )
 800e7f4:	b928      	cbnz	r0, 800e802 <RegionAS923ApplyDrOffset+0xe>
    {
        // Update the minDR for a downlink dwell time configuration of 0
        minDr = EffectiveRx1DrOffsetDownlinkDwell0AS923[dr][drOffset];
 800e7f6:	4b05      	ldr	r3, [pc, #20]	; (800e80c <RegionAS923ApplyDrOffset+0x18>)
 800e7f8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800e7fc:	5688      	ldrsb	r0, [r1, r2]
    return minDr;
#else
    return 0;
#endif /* REGION_AS923 */

}
 800e7fe:	b2c0      	uxtb	r0, r0
 800e800:	4770      	bx	lr
        minDr = EffectiveRx1DrOffsetDownlinkDwell1AS923[dr][drOffset];
 800e802:	4b03      	ldr	r3, [pc, #12]	; (800e810 <RegionAS923ApplyDrOffset+0x1c>)
 800e804:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800e808:	5688      	ldrsb	r0, [r1, r2]
 800e80a:	e7f8      	b.n	800e7fe <RegionAS923ApplyDrOffset+0xa>
 800e80c:	08013f04 	.word	0x08013f04
 800e810:	08013f44 	.word	0x08013f44

0800e814 <RegionAS923RxBeaconSetup>:
#endif /* REGION_VERSION */

void RegionAS923RxBeaconSetup( RxBeaconSetup_t* rxBeaconSetup, uint8_t* outDr )
{
 800e814:	b530      	push	{r4, r5, lr}
 800e816:	b087      	sub	sp, #28
 800e818:	460c      	mov	r4, r1
#if defined( REGION_AS923 )
    RegionCommonRxBeaconSetupParams_t regionCommonRxBeaconSetup;

    regionCommonRxBeaconSetup.Datarates = DataratesAS923;
 800e81a:	4b0c      	ldr	r3, [pc, #48]	; (800e84c <RegionAS923RxBeaconSetup+0x38>)
 800e81c:	9301      	str	r3, [sp, #4]
    regionCommonRxBeaconSetup.Frequency = rxBeaconSetup->Frequency;
 800e81e:	6883      	ldr	r3, [r0, #8]
 800e820:	9302      	str	r3, [sp, #8]
    regionCommonRxBeaconSetup.BeaconSize = AS923_BEACON_SIZE;
 800e822:	2311      	movs	r3, #17
 800e824:	f88d 300c 	strb.w	r3, [sp, #12]
    regionCommonRxBeaconSetup.BeaconDatarate = AS923_BEACON_CHANNEL_DR;
 800e828:	2503      	movs	r5, #3
 800e82a:	f88d 500d 	strb.w	r5, [sp, #13]
    regionCommonRxBeaconSetup.BeaconChannelBW = AS923_BEACON_CHANNEL_BW;
 800e82e:	2300      	movs	r3, #0
 800e830:	f88d 300e 	strb.w	r3, [sp, #14]
    regionCommonRxBeaconSetup.RxTime = rxBeaconSetup->RxTime;
 800e834:	6843      	ldr	r3, [r0, #4]
 800e836:	9304      	str	r3, [sp, #16]
    regionCommonRxBeaconSetup.SymbolTimeout = rxBeaconSetup->SymbolTimeout;
 800e838:	8803      	ldrh	r3, [r0, #0]
 800e83a:	f8ad 3014 	strh.w	r3, [sp, #20]

    RegionCommonRxBeaconSetup( &regionCommonRxBeaconSetup );
 800e83e:	a801      	add	r0, sp, #4
 800e840:	f000 fac8 	bl	800edd4 <RegionCommonRxBeaconSetup>

    // Store downlink datarate
    *outDr = AS923_BEACON_CHANNEL_DR;
 800e844:	7025      	strb	r5, [r4, #0]
#endif /* REGION_AS923 */
}
 800e846:	b007      	add	sp, #28
 800e848:	bd30      	pop	{r4, r5, pc}
 800e84a:	bf00      	nop
 800e84c:	08013efc 	.word	0x08013efc

0800e850 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800e850:	b082      	sub	sp, #8
 800e852:	f10d 0c08 	add.w	ip, sp, #8
 800e856:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800e85a:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800e85c:	b971      	cbnz	r1, 800e87c <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800e85e:	4613      	mov	r3, r2
 800e860:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800e864:	d306      	bcc.n	800e874 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800e866:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800e86a:	4293      	cmp	r3, r2
 800e86c:	d80a      	bhi.n	800e884 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800e86e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e872:	e000      	b.n	800e876 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800e874:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800e876:	4298      	cmp	r0, r3
 800e878:	bf38      	it	cc
 800e87a:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800e87c:	b900      	cbnz	r0, 800e880 <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800e87e:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800e880:	b002      	add	sp, #8
 800e882:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800e884:	f242 7310 	movw	r3, #10000	; 0x2710
 800e888:	e7f5      	b.n	800e876 <GetDutyCycle+0x26>

0800e88a <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800e88a:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800e88c:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800e88e:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800e890:	e001      	b.n	800e896 <CountChannels+0xc>
 800e892:	3301      	adds	r3, #1
 800e894:	b2db      	uxtb	r3, r3
 800e896:	428b      	cmp	r3, r1
 800e898:	d207      	bcs.n	800e8aa <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800e89a:	2201      	movs	r2, #1
 800e89c:	409a      	lsls	r2, r3
 800e89e:	ea32 020c 	bics.w	r2, r2, ip
 800e8a2:	d1f6      	bne.n	800e892 <CountChannels+0x8>
        {
            nbActiveBits++;
 800e8a4:	3001      	adds	r0, #1
 800e8a6:	b2c0      	uxtb	r0, r0
 800e8a8:	e7f3      	b.n	800e892 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800e8aa:	4770      	bx	lr

0800e8ac <SetMaxTimeCredits>:
{
 800e8ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e8b0:	b089      	sub	sp, #36	; 0x24
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	460e      	mov	r6, r1
 800e8b6:	ad02      	add	r5, sp, #8
 800e8b8:	e885 000c 	stmia.w	r5, {r2, r3}
 800e8bc:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800e8c0:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800e8c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e8c8:	f003 fc1c 	bl	8012104 <SysTimeToMs>
 800e8cc:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	9304      	str	r3, [sp, #16]
 800e8d2:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800e8d4:	e895 000c 	ldmia.w	r5, {r2, r3}
 800e8d8:	4631      	mov	r1, r6
 800e8da:	4620      	mov	r0, r4
 800e8dc:	f7ff ffb8 	bl	800e850 <GetDutyCycle>
 800e8e0:	4605      	mov	r5, r0
    if( joined == false )
 800e8e2:	2e00      	cmp	r6, #0
 800e8e4:	d14c      	bne.n	800e980 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800e8e6:	2864      	cmp	r0, #100	; 0x64
 800e8e8:	d025      	beq.n	800e936 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800e8ea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e8ee:	d025      	beq.n	800e93c <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800e8f0:	4e27      	ldr	r6, [pc, #156]	; (800e990 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800e8f2:	68a1      	ldr	r1, [r4, #8]
 800e8f4:	a806      	add	r0, sp, #24
 800e8f6:	f003 fc25 	bl	8012144 <SysTimeFromMs>
 800e8fa:	9b07      	ldr	r3, [sp, #28]
 800e8fc:	9300      	str	r3, [sp, #0]
 800e8fe:	9b06      	ldr	r3, [sp, #24]
 800e900:	aa02      	add	r2, sp, #8
 800e902:	ca06      	ldmia	r2, {r1, r2}
 800e904:	a804      	add	r0, sp, #16
 800e906:	f003 fb84 	bl	8012012 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800e90a:	f1b8 0f00 	cmp.w	r8, #0
 800e90e:	d102      	bne.n	800e916 <SetMaxTimeCredits+0x6a>
 800e910:	f1b9 0f00 	cmp.w	r9, #0
 800e914:	d002      	beq.n	800e91c <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800e916:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800e918:	42b3      	cmp	r3, r6
 800e91a:	d012      	beq.n	800e942 <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800e91c:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800e91e:	9b02      	ldr	r3, [sp, #8]
 800e920:	4a1c      	ldr	r2, [pc, #112]	; (800e994 <SetMaxTimeCredits+0xe8>)
 800e922:	4293      	cmp	r3, r2
 800e924:	d812      	bhi.n	800e94c <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800e926:	6863      	ldr	r3, [r4, #4]
 800e928:	b903      	cbnz	r3, 800e92c <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800e92a:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800e92c:	6126      	str	r6, [r4, #16]
}
 800e92e:	4628      	mov	r0, r5
 800e930:	b009      	add	sp, #36	; 0x24
 800e932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800e936:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800e938:	4e17      	ldr	r6, [pc, #92]	; (800e998 <SetMaxTimeCredits+0xec>)
 800e93a:	e7da      	b.n	800e8f2 <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800e93c:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800e93e:	4e17      	ldr	r6, [pc, #92]	; (800e99c <SetMaxTimeCredits+0xf0>)
 800e940:	e7d7      	b.n	800e8f2 <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800e942:	9a04      	ldr	r2, [sp, #16]
 800e944:	4b16      	ldr	r3, [pc, #88]	; (800e9a0 <SetMaxTimeCredits+0xf4>)
 800e946:	429a      	cmp	r2, r3
 800e948:	d9ed      	bls.n	800e926 <SetMaxTimeCredits+0x7a>
 800e94a:	e7e7      	b.n	800e91c <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800e94c:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800e950:	3b30      	subs	r3, #48	; 0x30
 800e952:	4a14      	ldr	r2, [pc, #80]	; (800e9a4 <SetMaxTimeCredits+0xf8>)
 800e954:	fba2 2303 	umull	r2, r3, r2, r3
 800e958:	0c1b      	lsrs	r3, r3, #16
 800e95a:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800e95c:	4a12      	ldr	r2, [pc, #72]	; (800e9a8 <SetMaxTimeCredits+0xfc>)
 800e95e:	fb02 f303 	mul.w	r3, r2, r3
 800e962:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800e964:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800e968:	3330      	adds	r3, #48	; 0x30
 800e96a:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800e96c:	2300      	movs	r3, #0
 800e96e:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800e972:	ab04      	add	r3, sp, #16
 800e974:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e978:	f003 fbc4 	bl	8012104 <SysTimeToMs>
 800e97c:	60a0      	str	r0, [r4, #8]
 800e97e:	e7d2      	b.n	800e926 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800e980:	f1b8 0f00 	cmp.w	r8, #0
 800e984:	d102      	bne.n	800e98c <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800e986:	4e04      	ldr	r6, [pc, #16]	; (800e998 <SetMaxTimeCredits+0xec>)
 800e988:	60e6      	str	r6, [r4, #12]
 800e98a:	e7cc      	b.n	800e926 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800e98c:	4e02      	ldr	r6, [pc, #8]	; (800e998 <SetMaxTimeCredits+0xec>)
 800e98e:	e7ca      	b.n	800e926 <SetMaxTimeCredits+0x7a>
 800e990:	02932e00 	.word	0x02932e00
 800e994:	0001ec2f 	.word	0x0001ec2f
 800e998:	001b7740 	.word	0x001b7740
 800e99c:	0112a880 	.word	0x0112a880
 800e9a0:	0001517f 	.word	0x0001517f
 800e9a4:	c22e4507 	.word	0xc22e4507
 800e9a8:	00015180 	.word	0x00015180

0800e9ac <UpdateTimeCredits>:
{
 800e9ac:	b570      	push	{r4, r5, r6, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	4604      	mov	r4, r0
 800e9b2:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800e9b4:	9301      	str	r3, [sp, #4]
 800e9b6:	9200      	str	r2, [sp, #0]
 800e9b8:	ab06      	add	r3, sp, #24
 800e9ba:	cb0c      	ldmia	r3, {r2, r3}
 800e9bc:	f7ff ff76 	bl	800e8ac <SetMaxTimeCredits>
 800e9c0:	4605      	mov	r5, r0
    if( joined == true )
 800e9c2:	b94e      	cbnz	r6, 800e9d8 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800e9c4:	68e2      	ldr	r2, [r4, #12]
 800e9c6:	6923      	ldr	r3, [r4, #16]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d900      	bls.n	800e9ce <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800e9cc:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800e9ce:	9b08      	ldr	r3, [sp, #32]
 800e9d0:	6063      	str	r3, [r4, #4]
}
 800e9d2:	4628      	mov	r0, r5
 800e9d4:	b002      	add	sp, #8
 800e9d6:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800e9d8:	6860      	ldr	r0, [r4, #4]
 800e9da:	f003 fc13 	bl	8012204 <UTIL_TIMER_GetElapsedTime>
 800e9de:	68e3      	ldr	r3, [r4, #12]
 800e9e0:	4403      	add	r3, r0
 800e9e2:	60e3      	str	r3, [r4, #12]
 800e9e4:	e7ee      	b.n	800e9c4 <UpdateTimeCredits+0x18>

0800e9e6 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800e9e6:	4288      	cmp	r0, r1
 800e9e8:	db03      	blt.n	800e9f2 <RegionCommonValueInRange+0xc>
 800e9ea:	4290      	cmp	r0, r2
 800e9ec:	dd03      	ble.n	800e9f6 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800e9ee:	2000      	movs	r0, #0
 800e9f0:	4770      	bx	lr
 800e9f2:	2000      	movs	r0, #0
 800e9f4:	4770      	bx	lr
        return 1;
 800e9f6:	2001      	movs	r0, #1
}
 800e9f8:	4770      	bx	lr

0800e9fa <RegionCommonChanVerifyDr>:
{
 800e9fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9fe:	4682      	mov	sl, r0
 800ea00:	460e      	mov	r6, r1
 800ea02:	4690      	mov	r8, r2
 800ea04:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800ea08:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	4640      	mov	r0, r8
 800ea10:	f7ff ffe9 	bl	800e9e6 <RegionCommonValueInRange>
 800ea14:	b338      	cbz	r0, 800ea66 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800ea16:	2500      	movs	r5, #0
 800ea18:	462f      	mov	r7, r5
 800ea1a:	e01e      	b.n	800ea5a <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800ea1c:	3401      	adds	r4, #1
 800ea1e:	b2e4      	uxtb	r4, r4
 800ea20:	2c0f      	cmp	r4, #15
 800ea22:	d816      	bhi.n	800ea52 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800ea24:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800ea28:	4123      	asrs	r3, r4
 800ea2a:	f013 0f01 	tst.w	r3, #1
 800ea2e:	d0f5      	beq.n	800ea1c <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800ea30:	193b      	adds	r3, r7, r4
 800ea32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ea36:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800ea3a:	7a19      	ldrb	r1, [r3, #8]
 800ea3c:	090a      	lsrs	r2, r1, #4
 800ea3e:	f001 010f 	and.w	r1, r1, #15
 800ea42:	4640      	mov	r0, r8
 800ea44:	f7ff ffcf 	bl	800e9e6 <RegionCommonValueInRange>
 800ea48:	2801      	cmp	r0, #1
 800ea4a:	d1e7      	bne.n	800ea1c <RegionCommonChanVerifyDr+0x22>
                    return true;
 800ea4c:	2001      	movs	r0, #1
}
 800ea4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800ea52:	3710      	adds	r7, #16
 800ea54:	b2ff      	uxtb	r7, r7
 800ea56:	3501      	adds	r5, #1
 800ea58:	b2ed      	uxtb	r5, r5
 800ea5a:	4557      	cmp	r7, sl
 800ea5c:	d201      	bcs.n	800ea62 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800ea5e:	2400      	movs	r4, #0
 800ea60:	e7de      	b.n	800ea20 <RegionCommonChanVerifyDr+0x26>
    return false;
 800ea62:	2000      	movs	r0, #0
 800ea64:	e7f3      	b.n	800ea4e <RegionCommonChanVerifyDr+0x54>
        return false;
 800ea66:	2000      	movs	r0, #0
 800ea68:	e7f1      	b.n	800ea4e <RegionCommonChanVerifyDr+0x54>

0800ea6a <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 800ea6a:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800ea6e:	0913      	lsrs	r3, r2, #4
 800ea70:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800ea74:	d30e      	bcc.n	800ea94 <RegionCommonChanDisable+0x2a>
 800ea76:	4291      	cmp	r1, r2
 800ea78:	d20e      	bcs.n	800ea98 <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800ea7a:	f001 010f 	and.w	r1, r1, #15
 800ea7e:	2301      	movs	r3, #1
 800ea80:	fa03 f101 	lsl.w	r1, r3, r1
 800ea84:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 800ea88:	ea22 0101 	bic.w	r1, r2, r1
 800ea8c:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]

    return true;
 800ea90:	4618      	mov	r0, r3
 800ea92:	4770      	bx	lr
        return false;
 800ea94:	2000      	movs	r0, #0
 800ea96:	4770      	bx	lr
 800ea98:	2000      	movs	r0, #0
}
 800ea9a:	4770      	bx	lr

0800ea9c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800ea9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800ea9e:	b188      	cbz	r0, 800eac4 <RegionCommonCountChannels+0x28>
 800eaa0:	460c      	mov	r4, r1
 800eaa2:	4616      	mov	r6, r2
 800eaa4:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800eaa6:	2500      	movs	r5, #0
 800eaa8:	e008      	b.n	800eabc <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800eaaa:	2110      	movs	r1, #16
 800eaac:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800eab0:	f7ff feeb 	bl	800e88a <CountChannels>
 800eab4:	4405      	add	r5, r0
 800eab6:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800eab8:	3401      	adds	r4, #1
 800eaba:	b2e4      	uxtb	r4, r4
 800eabc:	42b4      	cmp	r4, r6
 800eabe:	d3f4      	bcc.n	800eaaa <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800eac0:	4628      	mov	r0, r5
 800eac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800eac4:	2500      	movs	r5, #0
 800eac6:	e7fb      	b.n	800eac0 <RegionCommonCountChannels+0x24>

0800eac8 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800eac8:	4684      	mov	ip, r0
 800eaca:	b158      	cbz	r0, 800eae4 <RegionCommonChanMaskCopy+0x1c>
 800eacc:	b109      	cbz	r1, 800ead2 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800eace:	2300      	movs	r3, #0
 800ead0:	e006      	b.n	800eae0 <RegionCommonChanMaskCopy+0x18>
 800ead2:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800ead4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ead8:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800eadc:	3301      	adds	r3, #1
 800eade:	b2db      	uxtb	r3, r3
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d3f7      	bcc.n	800ead4 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800eae4:	4770      	bx	lr

0800eae6 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800eae6:	b082      	sub	sp, #8
 800eae8:	b538      	push	{r3, r4, r5, lr}
 800eaea:	4604      	mov	r4, r0
 800eaec:	460d      	mov	r5, r1
 800eaee:	4611      	mov	r1, r2
 800eaf0:	aa04      	add	r2, sp, #16
 800eaf2:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800eaf6:	ca0c      	ldmia	r2, {r2, r3}
 800eaf8:	f7ff feaa 	bl	800e850 <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800eafc:	68e3      	ldr	r3, [r4, #12]
 800eafe:	fb05 f000 	mul.w	r0, r5, r0
 800eb02:	4283      	cmp	r3, r0
 800eb04:	d905      	bls.n	800eb12 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800eb06:	1a18      	subs	r0, r3, r0
 800eb08:	60e0      	str	r0, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800eb0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb0e:	b002      	add	sp, #8
 800eb10:	4770      	bx	lr
        band->TimeCredits = 0;
 800eb12:	2300      	movs	r3, #0
 800eb14:	60e3      	str	r3, [r4, #12]
}
 800eb16:	e7f8      	b.n	800eb0a <RegionCommonSetBandTxDone+0x24>

0800eb18 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800eb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb1c:	b089      	sub	sp, #36	; 0x24
 800eb1e:	4607      	mov	r7, r0
 800eb20:	468b      	mov	fp, r1
 800eb22:	4691      	mov	r9, r2
 800eb24:	4698      	mov	r8, r3
 800eb26:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800eb2a:	f003 fb61 	bl	80121f0 <UTIL_TIMER_GetCurrentTime>
 800eb2e:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800eb30:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800eb32:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800eb34:	f04f 33ff 	mov.w	r3, #4294967295
 800eb38:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800eb3a:	e005      	b.n	800eb48 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800eb40:	441e      	add	r6, r3
 800eb42:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800eb44:	3401      	adds	r4, #1
 800eb46:	b2e4      	uxtb	r4, r4
 800eb48:	454c      	cmp	r4, r9
 800eb4a:	d25d      	bcs.n	800ec08 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800eb4c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800eb50:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800eb54:	9b04      	ldr	r3, [sp, #16]
 800eb56:	9302      	str	r3, [sp, #8]
 800eb58:	ab13      	add	r3, sp, #76	; 0x4c
 800eb5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eb5e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eb62:	4653      	mov	r3, sl
 800eb64:	4642      	mov	r2, r8
 800eb66:	4639      	mov	r1, r7
 800eb68:	4628      	mov	r0, r5
 800eb6a:	f7ff ff1f 	bl	800e9ac <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800eb6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb70:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800eb74:	68ea      	ldr	r2, [r5, #12]
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d8e0      	bhi.n	800eb3c <RegionCommonUpdateBandTimeOff+0x24>
 800eb7a:	f1b8 0f00 	cmp.w	r8, #0
 800eb7e:	d101      	bne.n	800eb84 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800eb80:	2f00      	cmp	r7, #0
 800eb82:	d1db      	bne.n	800eb3c <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800eb84:	2100      	movs	r1, #0
 800eb86:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800eb88:	6929      	ldr	r1, [r5, #16]
 800eb8a:	4299      	cmp	r1, r3
 800eb8c:	d907      	bls.n	800eb9e <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800eb8e:	1a9b      	subs	r3, r3, r2
 800eb90:	9a05      	ldr	r2, [sp, #20]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	bf28      	it	cs
 800eb96:	461a      	movcs	r2, r3
 800eb98:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800eb9a:	3601      	adds	r6, #1
 800eb9c:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800eb9e:	2f00      	cmp	r7, #0
 800eba0:	d1d0      	bne.n	800eb44 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800eba2:	2300      	movs	r3, #0
 800eba4:	9306      	str	r3, [sp, #24]
 800eba6:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800ebaa:	2864      	cmp	r0, #100	; 0x64
 800ebac:	d024      	beq.n	800ebf8 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800ebae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ebb2:	d025      	beq.n	800ec00 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800ebb4:	4b19      	ldr	r3, [pc, #100]	; (800ec1c <RegionCommonUpdateBandTimeOff+0x104>)
 800ebb6:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800ebb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ebba:	4a18      	ldr	r2, [pc, #96]	; (800ec1c <RegionCommonUpdateBandTimeOff+0x104>)
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	d90c      	bls.n	800ebda <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800ebc0:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800ebc4:	3b30      	subs	r3, #48	; 0x30
 800ebc6:	4a16      	ldr	r2, [pc, #88]	; (800ec20 <RegionCommonUpdateBandTimeOff+0x108>)
 800ebc8:	fba2 2303 	umull	r2, r3, r2, r3
 800ebcc:	0c1b      	lsrs	r3, r3, #16
 800ebce:	4a15      	ldr	r2, [pc, #84]	; (800ec24 <RegionCommonUpdateBandTimeOff+0x10c>)
 800ebd0:	fb03 2202 	mla	r2, r3, r2, r2
 800ebd4:	9b06      	ldr	r3, [sp, #24]
 800ebd6:	4413      	add	r3, r2
 800ebd8:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800ebda:	ad06      	add	r5, sp, #24
 800ebdc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ebde:	9300      	str	r3, [sp, #0]
 800ebe0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ebe2:	e895 0006 	ldmia.w	r5, {r1, r2}
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	f003 fa13 	bl	8012012 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800ebec:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ebf0:	f003 fa88 	bl	8012104 <SysTimeToMs>
 800ebf4:	9005      	str	r0, [sp, #20]
 800ebf6:	e7a5      	b.n	800eb44 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800ebf8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800ebfc:	9306      	str	r3, [sp, #24]
 800ebfe:	e7db      	b.n	800ebb8 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800ec00:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800ec04:	9306      	str	r3, [sp, #24]
 800ec06:	e7d7      	b.n	800ebb8 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800ec08:	b11e      	cbz	r6, 800ec12 <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800ec0a:	9805      	ldr	r0, [sp, #20]
 800ec0c:	b009      	add	sp, #36	; 0x24
 800ec0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800ec12:	f04f 33ff 	mov.w	r3, #4294967295
 800ec16:	9305      	str	r3, [sp, #20]
 800ec18:	e7f7      	b.n	800ec0a <RegionCommonUpdateBandTimeOff+0xf2>
 800ec1a:	bf00      	nop
 800ec1c:	0001ec30 	.word	0x0001ec30
 800ec20:	c22e4507 	.word	0xc22e4507
 800ec24:	00015180 	.word	0x00015180

0800ec28 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800ec28:	7803      	ldrb	r3, [r0, #0]
 800ec2a:	2b03      	cmp	r3, #3
 800ec2c:	d001      	beq.n	800ec32 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800ec2e:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800ec30:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800ec32:	7842      	ldrb	r2, [r0, #1]
 800ec34:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ec38:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800ec3a:	f003 030f 	and.w	r3, r3, #15
 800ec3e:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800ec40:	0913      	lsrs	r3, r2, #4
 800ec42:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800ec44:	7883      	ldrb	r3, [r0, #2]
 800ec46:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800ec48:	78c2      	ldrb	r2, [r0, #3]
 800ec4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ec4e:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800ec50:	7903      	ldrb	r3, [r0, #4]
 800ec52:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800ec54:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800ec58:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800ec5a:	f003 030f 	and.w	r3, r3, #15
 800ec5e:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800ec60:	2005      	movs	r0, #5
 800ec62:	4770      	bx	lr

0800ec64 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800ec64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec68:	b085      	sub	sp, #20
 800ec6a:	4604      	mov	r4, r0
 800ec6c:	4688      	mov	r8, r1
 800ec6e:	4617      	mov	r7, r2
 800ec70:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800ec72:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800ec74:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800ec78:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800ec7c:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800ec80:	7943      	ldrb	r3, [r0, #5]
 800ec82:	b92b      	cbnz	r3, 800ec90 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800ec84:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800ec88:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800ec8c:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800ec90:	b355      	cbz	r5, 800ece8 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800ec92:	f1ba 0f0f 	cmp.w	sl, #15
 800ec96:	d114      	bne.n	800ecc2 <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800ec98:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800ec9c:	f1b9 0f0f 	cmp.w	r9, #15
 800eca0:	d020      	beq.n	800ece4 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800eca2:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800eca6:	9303      	str	r3, [sp, #12]
 800eca8:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800ecac:	461c      	mov	r4, r3
 800ecae:	4619      	mov	r1, r3
 800ecb0:	4648      	mov	r0, r9
 800ecb2:	f7ff fe98 	bl	800e9e6 <RegionCommonValueInRange>
 800ecb6:	b9b8      	cbnz	r0, 800ece8 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800ecb8:	454c      	cmp	r4, r9
 800ecba:	dc21      	bgt.n	800ed00 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800ecbc:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800ecc0:	e012      	b.n	800ece8 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800ecc2:	69a3      	ldr	r3, [r4, #24]
 800ecc4:	9301      	str	r3, [sp, #4]
 800ecc6:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800ecca:	9300      	str	r3, [sp, #0]
 800eccc:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800ecd0:	4652      	mov	r2, sl
 800ecd2:	6921      	ldr	r1, [r4, #16]
 800ecd4:	7b20      	ldrb	r0, [r4, #12]
 800ecd6:	f7ff fe90 	bl	800e9fa <RegionCommonChanVerifyDr>
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	d1de      	bne.n	800ec9c <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800ecde:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800ece2:	e7db      	b.n	800ec9c <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800ece4:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800ece8:	2d07      	cmp	r5, #7
 800ecea:	d00c      	beq.n	800ed06 <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800ecec:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800ecf0:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800ecf4:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	b005      	add	sp, #20
 800ecfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800ed00:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ed04:	e7f0      	b.n	800ece8 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800ed06:	f1bb 0f00 	cmp.w	fp, #0
 800ed0a:	d1ef      	bne.n	800ecec <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800ed0c:	f04f 0b01 	mov.w	fp, #1
 800ed10:	e7ec      	b.n	800ecec <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800ed14 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800ed14:	4b02      	ldr	r3, [pc, #8]	; (800ed20 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800ed16:	fa03 f000 	lsl.w	r0, r3, r0
}
 800ed1a:	fbb0 f0f1 	udiv	r0, r0, r1
 800ed1e:	4770      	bx	lr
 800ed20:	000f4240 	.word	0x000f4240

0800ed24 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800ed24:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800ed28:	fbb3 f0f0 	udiv	r0, r3, r0
 800ed2c:	4770      	bx	lr
	...

0800ed30 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800ed30:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800ed32:	f1a1 0c04 	sub.w	ip, r1, #4
 800ed36:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800ed3a:	fb0e f202 	mul.w	r2, lr, r2
 800ed3e:	fb00 220c 	mla	r2, r0, ip, r2
 800ed42:	0052      	lsls	r2, r2, #1
 800ed44:	d021      	beq.n	800ed8a <RegionCommonComputeRxWindowParameters+0x5a>
 800ed46:	4402      	add	r2, r0
 800ed48:	3a01      	subs	r2, #1
 800ed4a:	fbb2 f2f0 	udiv	r2, r2, r0
 800ed4e:	4291      	cmp	r1, r2
 800ed50:	bf38      	it	cc
 800ed52:	4611      	movcc	r1, r2
 800ed54:	9a01      	ldr	r2, [sp, #4]
 800ed56:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800ed58:	0082      	lsls	r2, r0, #2
 800ed5a:	fb00 f101 	mul.w	r1, r0, r1
 800ed5e:	b1b9      	cbz	r1, 800ed90 <RegionCommonComputeRxWindowParameters+0x60>
 800ed60:	3101      	adds	r1, #1
 800ed62:	0849      	lsrs	r1, r1, #1
 800ed64:	1a51      	subs	r1, r2, r1
 800ed66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ed6a:	fb02 1313 	mls	r3, r2, r3, r1
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	dd10      	ble.n	800ed94 <RegionCommonComputeRxWindowParameters+0x64>
 800ed72:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800ed76:	4a0b      	ldr	r2, [pc, #44]	; (800eda4 <RegionCommonComputeRxWindowParameters+0x74>)
 800ed78:	fb82 1203 	smull	r1, r2, r2, r3
 800ed7c:	17db      	asrs	r3, r3, #31
 800ed7e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800ed82:	9a02      	ldr	r2, [sp, #8]
 800ed84:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800ed86:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800ed8a:	fbb2 f2f0 	udiv	r2, r2, r0
 800ed8e:	e7de      	b.n	800ed4e <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800ed90:	0849      	lsrs	r1, r1, #1
 800ed92:	e7e7      	b.n	800ed64 <RegionCommonComputeRxWindowParameters+0x34>
 800ed94:	4a03      	ldr	r2, [pc, #12]	; (800eda4 <RegionCommonComputeRxWindowParameters+0x74>)
 800ed96:	fb82 1203 	smull	r1, r2, r2, r3
 800ed9a:	17db      	asrs	r3, r3, #31
 800ed9c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800eda0:	e7ef      	b.n	800ed82 <RegionCommonComputeRxWindowParameters+0x52>
 800eda2:	bf00      	nop
 800eda4:	10624dd3 	.word	0x10624dd3

0800eda8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800eda8:	b538      	push	{r3, r4, r5, lr}
 800edaa:	460d      	mov	r5, r1
 800edac:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800edae:	0040      	lsls	r0, r0, #1
 800edb0:	f7f1 fdb0 	bl	8000914 <__aeabi_ui2f>
 800edb4:	4601      	mov	r1, r0
 800edb6:	4628      	mov	r0, r5
 800edb8:	f7f1 fcfa 	bl	80007b0 <__aeabi_fsub>
 800edbc:	4621      	mov	r1, r4
 800edbe:	f7f1 fcf7 	bl	80007b0 <__aeabi_fsub>
 800edc2:	f7f1 fb99 	bl	80004f8 <__aeabi_f2d>
 800edc6:	f004 fc8b 	bl	80136e0 <floor>
 800edca:	f7f1 fc75 	bl	80006b8 <__aeabi_d2iz>

    return phyTxPower;
}
 800edce:	b240      	sxtb	r0, r0
 800edd0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800edd4 <RegionCommonRxBeaconSetup>:

void RegionCommonRxBeaconSetup( RegionCommonRxBeaconSetupParams_t* rxBeaconSetupParams )
{
 800edd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edd6:	b08b      	sub	sp, #44	; 0x2c
 800edd8:	4604      	mov	r4, r0
    bool rxContinuous = true;
    uint8_t datarate;

    // Set the radio into sleep mode
    Radio.Sleep( );
 800edda:	4d1c      	ldr	r5, [pc, #112]	; (800ee4c <RegionCommonRxBeaconSetup+0x78>)
 800eddc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800edde:	4798      	blx	r3

    // Setup frequency and payload length
    Radio.SetChannel( rxBeaconSetupParams->Frequency );
 800ede0:	68eb      	ldr	r3, [r5, #12]
 800ede2:	6860      	ldr	r0, [r4, #4]
 800ede4:	4798      	blx	r3
    Radio.SetMaxPayloadLength( MODEM_LORA, rxBeaconSetupParams->BeaconSize );
 800ede6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800ede8:	7a21      	ldrb	r1, [r4, #8]
 800edea:	2001      	movs	r0, #1
 800edec:	4798      	blx	r3

    // Check the RX continuous mode
    if( rxBeaconSetupParams->RxTime != 0 )
 800edee:	68e3      	ldr	r3, [r4, #12]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d128      	bne.n	800ee46 <RegionCommonRxBeaconSetup+0x72>
    bool rxContinuous = true;
 800edf4:	2301      	movs	r3, #1
    {
        rxContinuous = false;
    }

    // Get region specific datarate
    datarate = rxBeaconSetupParams->Datarates[rxBeaconSetupParams->BeaconDatarate];
 800edf6:	6821      	ldr	r1, [r4, #0]
 800edf8:	7a62      	ldrb	r2, [r4, #9]
 800edfa:	5c8a      	ldrb	r2, [r1, r2]

    // Setup radio
    Radio.SetRxConfig( MODEM_LORA, rxBeaconSetupParams->BeaconChannelBW, datarate,
 800edfc:	4f13      	ldr	r7, [pc, #76]	; (800ee4c <RegionCommonRxBeaconSetup+0x78>)
 800edfe:	9309      	str	r3, [sp, #36]	; 0x24
 800ee00:	2500      	movs	r5, #0
 800ee02:	9508      	str	r5, [sp, #32]
 800ee04:	9507      	str	r5, [sp, #28]
 800ee06:	9506      	str	r5, [sp, #24]
 800ee08:	9505      	str	r5, [sp, #20]
 800ee0a:	7a23      	ldrb	r3, [r4, #8]
 800ee0c:	9304      	str	r3, [sp, #16]
 800ee0e:	2601      	movs	r6, #1
 800ee10:	9603      	str	r6, [sp, #12]
 800ee12:	8a23      	ldrh	r3, [r4, #16]
 800ee14:	9302      	str	r3, [sp, #8]
 800ee16:	230a      	movs	r3, #10
 800ee18:	9301      	str	r3, [sp, #4]
 800ee1a:	9500      	str	r5, [sp, #0]
 800ee1c:	4633      	mov	r3, r6
 800ee1e:	7aa1      	ldrb	r1, [r4, #10]
 800ee20:	4630      	mov	r0, r6
 800ee22:	f8d7 c018 	ldr.w	ip, [r7, #24]
 800ee26:	47e0      	blx	ip
                       1, 0, 10, rxBeaconSetupParams->SymbolTimeout, true, rxBeaconSetupParams->BeaconSize, false, 0, 0, false, rxContinuous );

    Radio.Rx( rxBeaconSetupParams->RxTime );
 800ee28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee2a:	68e0      	ldr	r0, [r4, #12]
 800ee2c:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Beacon parameters */
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
 800ee2e:	7a63      	ldrb	r3, [r4, #9]
 800ee30:	9301      	str	r3, [sp, #4]
 800ee32:	6863      	ldr	r3, [r4, #4]
 800ee34:	9300      	str	r3, [sp, #0]
 800ee36:	4b06      	ldr	r3, [pc, #24]	; (800ee50 <RegionCommonRxBeaconSetup+0x7c>)
 800ee38:	4632      	mov	r2, r6
 800ee3a:	4629      	mov	r1, r5
 800ee3c:	2002      	movs	r0, #2
 800ee3e:	f002 fec3 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
    /* ST_WORKAROUND_END */
}
 800ee42:	b00b      	add	sp, #44	; 0x2c
 800ee44:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rxContinuous = false;
 800ee46:	2300      	movs	r3, #0
 800ee48:	e7d5      	b.n	800edf6 <RegionCommonRxBeaconSetup+0x22>
 800ee4a:	bf00      	nop
 800ee4c:	080145a0 	.word	0x080145a0
 800ee50:	08013f9c 	.word	0x08013f9c

0800ee54 <RegionCommonCountNbOfEnabledChannels>:

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800ee54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee58:	b083      	sub	sp, #12
 800ee5a:	4605      	mov	r5, r0
 800ee5c:	468b      	mov	fp, r1
 800ee5e:	9200      	str	r2, [sp, #0]
 800ee60:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800ee62:	2600      	movs	r6, #0
 800ee64:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800ee66:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800ee68:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800ee6a:	e04a      	b.n	800ef02 <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800ee6c:	7a3a      	ldrb	r2, [r7, #8]
 800ee6e:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800ee72:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800ee76:	b252      	sxtb	r2, r2
 800ee78:	b249      	sxtb	r1, r1
 800ee7a:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800ee7e:	f7ff fdb2 	bl	800e9e6 <RegionCommonValueInRange>
 800ee82:	b178      	cbz	r0, 800eea4 <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800ee84:	68ea      	ldr	r2, [r5, #12]
 800ee86:	7a7b      	ldrb	r3, [r7, #9]
 800ee88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ee8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ee90:	7d1b      	ldrb	r3, [r3, #20]
 800ee92:	b35b      	cbz	r3, 800eeec <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800ee94:	f109 0301 	add.w	r3, r9, #1
 800ee98:	eb08 0204 	add.w	r2, r8, r4
 800ee9c:	f80b 2009 	strb.w	r2, [fp, r9]
 800eea0:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800eea4:	3401      	adds	r4, #1
 800eea6:	b2e4      	uxtb	r4, r4
 800eea8:	2c0f      	cmp	r4, #15
 800eeaa:	d824      	bhi.n	800eef6 <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800eeac:	686b      	ldr	r3, [r5, #4]
 800eeae:	0072      	lsls	r2, r6, #1
 800eeb0:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800eeb4:	4123      	asrs	r3, r4
 800eeb6:	f013 0f01 	tst.w	r3, #1
 800eeba:	d0f3      	beq.n	800eea4 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800eebc:	68a8      	ldr	r0, [r5, #8]
 800eebe:	eb08 0304 	add.w	r3, r8, r4
 800eec2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800eec6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800eeca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d0e8      	beq.n	800eea4 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800eed2:	782b      	ldrb	r3, [r5, #0]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d1c9      	bne.n	800ee6c <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800eed8:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d0c6      	beq.n	800ee6c <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800eede:	5a9b      	ldrh	r3, [r3, r2]
 800eee0:	fa43 f104 	asr.w	r1, r3, r4
 800eee4:	f011 0f01 	tst.w	r1, #1
 800eee8:	d1c0      	bne.n	800ee6c <RegionCommonCountNbOfEnabledChannels+0x18>
 800eeea:	e7db      	b.n	800eea4 <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800eeec:	f10a 0a01 	add.w	sl, sl, #1
 800eef0:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800eef4:	e7d6      	b.n	800eea4 <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800eef6:	f108 0810 	add.w	r8, r8, #16
 800eefa:	fa5f f888 	uxtb.w	r8, r8
 800eefe:	3601      	adds	r6, #1
 800ef00:	b2f6      	uxtb	r6, r6
 800ef02:	fa1f f388 	uxth.w	r3, r8
 800ef06:	8a2a      	ldrh	r2, [r5, #16]
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d201      	bcs.n	800ef10 <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800ef0c:	2400      	movs	r4, #0
 800ef0e:	e7cb      	b.n	800eea8 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800ef10:	9b00      	ldr	r3, [sp, #0]
 800ef12:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800ef16:	9b01      	ldr	r3, [sp, #4]
 800ef18:	f883 a000 	strb.w	sl, [r3]
}
 800ef1c:	b003      	add	sp, #12
 800ef1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ef22 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800ef22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef26:	b085      	sub	sp, #20
 800ef28:	4604      	mov	r4, r0
 800ef2a:	460f      	mov	r7, r1
 800ef2c:	4616      	mov	r6, r2
 800ef2e:	461d      	mov	r5, r3
 800ef30:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800ef34:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800ef38:	6840      	ldr	r0, [r0, #4]
 800ef3a:	f003 f963 	bl	8012204 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800ef3e:	6823      	ldr	r3, [r4, #0]
 800ef40:	1a1b      	subs	r3, r3, r0
 800ef42:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800ef46:	2301      	movs	r3, #1
 800ef48:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800ef50:	6863      	ldr	r3, [r4, #4]
 800ef52:	b113      	cbz	r3, 800ef5a <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800ef54:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800ef56:	4283      	cmp	r3, r0
 800ef58:	d81e      	bhi.n	800ef98 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800ef5e:	69e3      	ldr	r3, [r4, #28]
 800ef60:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800ef64:	781f      	ldrb	r7, [r3, #0]
 800ef66:	69a3      	ldr	r3, [r4, #24]
 800ef68:	9303      	str	r3, [sp, #12]
 800ef6a:	ab01      	add	r3, sp, #4
 800ef6c:	f104 020c 	add.w	r2, r4, #12
 800ef70:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef74:	e883 0003 	stmia.w	r3, {r0, r1}
 800ef78:	7d23      	ldrb	r3, [r4, #20]
 800ef7a:	9300      	str	r3, [sp, #0]
 800ef7c:	7a23      	ldrb	r3, [r4, #8]
 800ef7e:	7a62      	ldrb	r2, [r4, #9]
 800ef80:	4661      	mov	r1, ip
 800ef82:	4638      	mov	r0, r7
 800ef84:	f7ff fdc8 	bl	800eb18 <RegionCommonUpdateBandTimeOff>
 800ef88:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800ef8c:	4643      	mov	r3, r8
 800ef8e:	462a      	mov	r2, r5
 800ef90:	4631      	mov	r1, r6
 800ef92:	69e0      	ldr	r0, [r4, #28]
 800ef94:	f7ff ff5e 	bl	800ee54 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800ef98:	782b      	ldrb	r3, [r5, #0]
 800ef9a:	b923      	cbnz	r3, 800efa6 <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800ef9c:	f898 3000 	ldrb.w	r3, [r8]
 800efa0:	b13b      	cbz	r3, 800efb2 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800efa2:	200b      	movs	r0, #11
 800efa4:	e002      	b.n	800efac <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800efa6:	2000      	movs	r0, #0
 800efa8:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800efac:	b005      	add	sp, #20
 800efae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800efb2:	200c      	movs	r0, #12
 800efb4:	e7fa      	b.n	800efac <RegionCommonIdentifyChannels+0x8a>

0800efb6 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800efb6:	b570      	push	{r4, r5, r6, lr}
 800efb8:	b082      	sub	sp, #8
 800efba:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800efbc:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800efc0:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800efc4:	42a6      	cmp	r6, r4
 800efc6:	d011      	beq.n	800efec <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800efc8:	3c01      	subs	r4, #1
 800efca:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800efcc:	42a6      	cmp	r6, r4
 800efce:	d00e      	beq.n	800efee <RegionCommonGetNextLowerTxDr+0x38>
 800efd0:	68ab      	ldr	r3, [r5, #8]
 800efd2:	9301      	str	r3, [sp, #4]
 800efd4:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800efd8:	9300      	str	r3, [sp, #0]
 800efda:	4633      	mov	r3, r6
 800efdc:	4622      	mov	r2, r4
 800efde:	6869      	ldr	r1, [r5, #4]
 800efe0:	78e8      	ldrb	r0, [r5, #3]
 800efe2:	f7ff fd0a 	bl	800e9fa <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800efe6:	2800      	cmp	r0, #0
 800efe8:	d0ee      	beq.n	800efc8 <RegionCommonGetNextLowerTxDr+0x12>
 800efea:	e000      	b.n	800efee <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800efec:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800efee:	4620      	mov	r0, r4
 800eff0:	b002      	add	sp, #8
 800eff2:	bd70      	pop	{r4, r5, r6, pc}

0800eff4 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800eff4:	4288      	cmp	r0, r1
 800eff6:	bfb8      	it	lt
 800eff8:	4608      	movlt	r0, r1
 800effa:	4770      	bx	lr

0800effc <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800effc:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800f000:	4a05      	ldr	r2, [pc, #20]	; (800f018 <RegionCommonGetBandwidth+0x1c>)
 800f002:	4293      	cmp	r3, r2
 800f004:	d004      	beq.n	800f010 <RegionCommonGetBandwidth+0x14>
 800f006:	4a05      	ldr	r2, [pc, #20]	; (800f01c <RegionCommonGetBandwidth+0x20>)
 800f008:	4293      	cmp	r3, r2
 800f00a:	d103      	bne.n	800f014 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800f00c:	2002      	movs	r0, #2
 800f00e:	4770      	bx	lr
            return 1;
 800f010:	2001      	movs	r0, #1
 800f012:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800f014:	2000      	movs	r0, #0
    }
}
 800f016:	4770      	bx	lr
 800f018:	0003d090 	.word	0x0003d090
 800f01c:	0007a120 	.word	0x0007a120

0800f020 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800f020:	b500      	push	{lr}
 800f022:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800f024:	2805      	cmp	r0, #5
 800f026:	d80e      	bhi.n	800f046 <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800f028:	9202      	str	r2, [sp, #8]
 800f02a:	9101      	str	r1, [sp, #4]
 800f02c:	4b0a      	ldr	r3, [pc, #40]	; (800f058 <RegionCommonRxConfigPrint+0x38>)
 800f02e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f032:	9300      	str	r3, [sp, #0]
 800f034:	4b09      	ldr	r3, [pc, #36]	; (800f05c <RegionCommonRxConfigPrint+0x3c>)
 800f036:	2201      	movs	r2, #1
 800f038:	2100      	movs	r1, #0
 800f03a:	2002      	movs	r0, #2
 800f03c:	f002 fdc4 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800f040:	b005      	add	sp, #20
 800f042:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800f046:	9201      	str	r2, [sp, #4]
 800f048:	9100      	str	r1, [sp, #0]
 800f04a:	4b05      	ldr	r3, [pc, #20]	; (800f060 <RegionCommonRxConfigPrint+0x40>)
 800f04c:	2201      	movs	r2, #1
 800f04e:	2100      	movs	r1, #0
 800f050:	2002      	movs	r0, #2
 800f052:	f002 fdb9 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
}
 800f056:	e7f3      	b.n	800f040 <RegionCommonRxConfigPrint+0x20>
 800f058:	08014024 	.word	0x08014024
 800f05c:	08013fbc 	.word	0x08013fbc
 800f060:	08013fdc 	.word	0x08013fdc

0800f064 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800f064:	b500      	push	{lr}
 800f066:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800f068:	9101      	str	r1, [sp, #4]
 800f06a:	9000      	str	r0, [sp, #0]
 800f06c:	4b04      	ldr	r3, [pc, #16]	; (800f080 <RegionCommonTxConfigPrint+0x1c>)
 800f06e:	2201      	movs	r2, #1
 800f070:	2100      	movs	r1, #0
 800f072:	2002      	movs	r0, #2
 800f074:	f002 fda8 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
}
 800f078:	b003      	add	sp, #12
 800f07a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f07e:	bf00      	nop
 800f080:	08013ff8 	.word	0x08013ff8

0800f084 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800f084:	b510      	push	{r4, lr}
 800f086:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800f088:	2210      	movs	r2, #16
 800f08a:	2100      	movs	r1, #0
 800f08c:	30f1      	adds	r0, #241	; 0xf1
 800f08e:	f000 ff0a 	bl	800fea6 <memset1>
    ctx->M_n = 0;
 800f092:	2100      	movs	r1, #0
 800f094:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800f098:	22f0      	movs	r2, #240	; 0xf0
 800f09a:	4620      	mov	r0, r4
 800f09c:	f000 ff03 	bl	800fea6 <memset1>
}
 800f0a0:	bd10      	pop	{r4, pc}

0800f0a2 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800f0a2:	b508      	push	{r3, lr}
 800f0a4:	4602      	mov	r2, r0
 800f0a6:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800f0a8:	2110      	movs	r1, #16
 800f0aa:	f000 fb3b 	bl	800f724 <lorawan_aes_set_key>
}
 800f0ae:	bd08      	pop	{r3, pc}

0800f0b0 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800f0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0b4:	b084      	sub	sp, #16
 800f0b6:	4604      	mov	r4, r0
 800f0b8:	460d      	mov	r5, r1
 800f0ba:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800f0bc:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d054      	beq.n	800f16e <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800f0c4:	f1c3 0810 	rsb	r8, r3, #16
 800f0c8:	4647      	mov	r7, r8
 800f0ca:	4590      	cmp	r8, r2
 800f0cc:	bf28      	it	cs
 800f0ce:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800f0d0:	f200 1001 	addw	r0, r0, #257	; 0x101
 800f0d4:	b2ba      	uxth	r2, r7
 800f0d6:	4418      	add	r0, r3
 800f0d8:	f000 fecd 	bl	800fe76 <memcpy1>
        ctx->M_n += mlen;
 800f0dc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800f0e0:	443b      	add	r3, r7
 800f0e2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800f0e6:	2b0f      	cmp	r3, #15
 800f0e8:	d94d      	bls.n	800f186 <AES_CMAC_Update+0xd6>
 800f0ea:	45b0      	cmp	r8, r6
 800f0ec:	d24b      	bcs.n	800f186 <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	e008      	b.n	800f104 <AES_CMAC_Update+0x54>
 800f0f2:	18e2      	adds	r2, r4, r3
 800f0f4:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 800f0f8:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 800f0fc:	4041      	eors	r1, r0
 800f0fe:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 800f102:	3301      	adds	r3, #1
 800f104:	2b0f      	cmp	r3, #15
 800f106:	ddf4      	ble.n	800f0f2 <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800f108:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 800f10c:	2210      	movs	r2, #16
 800f10e:	4641      	mov	r1, r8
 800f110:	4668      	mov	r0, sp
 800f112:	f000 feb0 	bl	800fe76 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800f116:	4622      	mov	r2, r4
 800f118:	4669      	mov	r1, sp
 800f11a:	4668      	mov	r0, sp
 800f11c:	f000 fb84 	bl	800f828 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800f120:	2210      	movs	r2, #16
 800f122:	4669      	mov	r1, sp
 800f124:	4640      	mov	r0, r8
 800f126:	f000 fea6 	bl	800fe76 <memcpy1>

        data += mlen;
 800f12a:	443d      	add	r5, r7
        len -= mlen;
 800f12c:	1bf6      	subs	r6, r6, r7
 800f12e:	e01e      	b.n	800f16e <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800f130:	eb04 0e03 	add.w	lr, r4, r3
 800f134:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 800f138:	5cea      	ldrb	r2, [r5, r3]
 800f13a:	ea8c 0c02 	eor.w	ip, ip, r2
 800f13e:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 800f142:	3301      	adds	r3, #1
 800f144:	2b0f      	cmp	r3, #15
 800f146:	ddf3      	ble.n	800f130 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800f148:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 800f14c:	2210      	movs	r2, #16
 800f14e:	4639      	mov	r1, r7
 800f150:	4668      	mov	r0, sp
 800f152:	f000 fe90 	bl	800fe76 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800f156:	4622      	mov	r2, r4
 800f158:	4669      	mov	r1, sp
 800f15a:	4668      	mov	r0, sp
 800f15c:	f000 fb64 	bl	800f828 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800f160:	2210      	movs	r2, #16
 800f162:	4669      	mov	r1, sp
 800f164:	4638      	mov	r0, r7
 800f166:	f000 fe86 	bl	800fe76 <memcpy1>

        data += 16;
 800f16a:	3510      	adds	r5, #16
        len -= 16;
 800f16c:	3e10      	subs	r6, #16
    while( len > 16 )
 800f16e:	2e10      	cmp	r6, #16
 800f170:	d901      	bls.n	800f176 <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800f172:	2300      	movs	r3, #0
 800f174:	e7e6      	b.n	800f144 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800f176:	b2b2      	uxth	r2, r6
 800f178:	4629      	mov	r1, r5
 800f17a:	f204 1001 	addw	r0, r4, #257	; 0x101
 800f17e:	f000 fe7a 	bl	800fe76 <memcpy1>
    ctx->M_n = len;
 800f182:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 800f186:	b004      	add	sp, #16
 800f188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f18c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800f18c:	b530      	push	{r4, r5, lr}
 800f18e:	b089      	sub	sp, #36	; 0x24
 800f190:	4605      	mov	r5, r0
 800f192:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800f194:	2210      	movs	r2, #16
 800f196:	2100      	movs	r1, #0
 800f198:	eb0d 0002 	add.w	r0, sp, r2
 800f19c:	f000 fe83 	bl	800fea6 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800f1a0:	4622      	mov	r2, r4
 800f1a2:	a904      	add	r1, sp, #16
 800f1a4:	4608      	mov	r0, r1
 800f1a6:	f000 fb3f 	bl	800f828 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800f1aa:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	db01      	blt.n	800f1b6 <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	e030      	b.n	800f218 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	2b0e      	cmp	r3, #14
 800f1ba:	dc11      	bgt.n	800f1e0 <AES_CMAC_Final+0x54>
 800f1bc:	f103 0220 	add.w	r2, r3, #32
 800f1c0:	eb0d 0102 	add.w	r1, sp, r2
 800f1c4:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	f103 0220 	add.w	r2, r3, #32
 800f1ce:	446a      	add	r2, sp
 800f1d0:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800f1d4:	09d2      	lsrs	r2, r2, #7
 800f1d6:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800f1da:	f801 2c10 	strb.w	r2, [r1, #-16]
 800f1de:	e7eb      	b.n	800f1b8 <AES_CMAC_Final+0x2c>
 800f1e0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800f1e4:	005b      	lsls	r3, r3, #1
 800f1e6:	b2db      	uxtb	r3, r3
 800f1e8:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 800f1ec:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800f1f0:	f88d 301f 	strb.w	r3, [sp, #31]
 800f1f4:	e017      	b.n	800f226 <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 800f1f6:	f103 0220 	add.w	r2, r3, #32
 800f1fa:	eb0d 0102 	add.w	r1, sp, r2
 800f1fe:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800f202:	3301      	adds	r3, #1
 800f204:	f103 0220 	add.w	r2, r3, #32
 800f208:	446a      	add	r2, sp
 800f20a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800f20e:	09d2      	lsrs	r2, r2, #7
 800f210:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800f214:	f801 2c10 	strb.w	r2, [r1, #-16]
 800f218:	2b0e      	cmp	r3, #14
 800f21a:	ddec      	ble.n	800f1f6 <AES_CMAC_Final+0x6a>
 800f21c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800f220:	005b      	lsls	r3, r3, #1
 800f222:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800f226:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 800f22a:	2810      	cmp	r0, #16
 800f22c:	d014      	beq.n	800f258 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800f22e:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800f232:	2b00      	cmp	r3, #0
 800f234:	db30      	blt.n	800f298 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800f236:	2300      	movs	r3, #0
 800f238:	e041      	b.n	800f2be <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 800f23a:	18e1      	adds	r1, r4, r3
 800f23c:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800f240:	f103 0020 	add.w	r0, r3, #32
 800f244:	4468      	add	r0, sp
 800f246:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800f24a:	4042      	eors	r2, r0
 800f24c:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800f250:	3301      	adds	r3, #1
 800f252:	2b0f      	cmp	r3, #15
 800f254:	ddf1      	ble.n	800f23a <AES_CMAC_Final+0xae>
 800f256:	e059      	b.n	800f30c <AES_CMAC_Final+0x180>
 800f258:	2300      	movs	r3, #0
 800f25a:	e7fa      	b.n	800f252 <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 800f25c:	f103 0220 	add.w	r2, r3, #32
 800f260:	eb0d 0102 	add.w	r1, sp, r2
 800f264:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800f268:	3301      	adds	r3, #1
 800f26a:	f103 0220 	add.w	r2, r3, #32
 800f26e:	446a      	add	r2, sp
 800f270:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800f274:	09d2      	lsrs	r2, r2, #7
 800f276:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800f27a:	f801 2c10 	strb.w	r2, [r1, #-16]
 800f27e:	2b0e      	cmp	r3, #14
 800f280:	ddec      	ble.n	800f25c <AES_CMAC_Final+0xd0>
 800f282:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800f286:	005b      	lsls	r3, r3, #1
 800f288:	b2db      	uxtb	r3, r3
 800f28a:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 800f28e:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800f292:	f88d 301f 	strb.w	r3, [sp, #31]
 800f296:	e019      	b.n	800f2cc <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 800f298:	2300      	movs	r3, #0
 800f29a:	e7f0      	b.n	800f27e <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 800f29c:	f103 0220 	add.w	r2, r3, #32
 800f2a0:	eb0d 0102 	add.w	r1, sp, r2
 800f2a4:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800f2a8:	3301      	adds	r3, #1
 800f2aa:	f103 0220 	add.w	r2, r3, #32
 800f2ae:	446a      	add	r2, sp
 800f2b0:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800f2b4:	09d2      	lsrs	r2, r2, #7
 800f2b6:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800f2ba:	f801 2c10 	strb.w	r2, [r1, #-16]
 800f2be:	2b0e      	cmp	r3, #14
 800f2c0:	ddec      	ble.n	800f29c <AES_CMAC_Final+0x110>
 800f2c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800f2c6:	005b      	lsls	r3, r3, #1
 800f2c8:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800f2cc:	4420      	add	r0, r4
 800f2ce:	2380      	movs	r3, #128	; 0x80
 800f2d0:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800f2d4:	e003      	b.n	800f2de <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 800f2d6:	4423      	add	r3, r4
 800f2d8:	2200      	movs	r2, #0
 800f2da:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800f2de:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800f2e8:	2b0f      	cmp	r3, #15
 800f2ea:	d9f4      	bls.n	800f2d6 <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	e00b      	b.n	800f308 <AES_CMAC_Final+0x17c>
 800f2f0:	18e1      	adds	r1, r4, r3
 800f2f2:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800f2f6:	f103 0020 	add.w	r0, r3, #32
 800f2fa:	4468      	add	r0, sp
 800f2fc:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800f300:	4042      	eors	r2, r0
 800f302:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800f306:	3301      	adds	r3, #1
 800f308:	2b0f      	cmp	r3, #15
 800f30a:	ddf1      	ble.n	800f2f0 <AES_CMAC_Final+0x164>
 800f30c:	2300      	movs	r3, #0
 800f30e:	e009      	b.n	800f324 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 800f310:	18e2      	adds	r2, r4, r3
 800f312:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 800f316:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 800f31a:	ea8c 0c01 	eor.w	ip, ip, r1
 800f31e:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 800f322:	3301      	adds	r3, #1
 800f324:	2b0f      	cmp	r3, #15
 800f326:	ddf3      	ble.n	800f310 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800f328:	2210      	movs	r2, #16
 800f32a:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 800f32e:	4668      	mov	r0, sp
 800f330:	f000 fda1 	bl	800fe76 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800f334:	4622      	mov	r2, r4
 800f336:	4629      	mov	r1, r5
 800f338:	4668      	mov	r0, sp
 800f33a:	f000 fa75 	bl	800f828 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800f33e:	2210      	movs	r2, #16
 800f340:	2100      	movs	r1, #0
 800f342:	eb0d 0002 	add.w	r0, sp, r2
 800f346:	f000 fdae 	bl	800fea6 <memset1>
}
 800f34a:	b009      	add	sp, #36	; 0x24
 800f34c:	bd30      	pop	{r4, r5, pc}

0800f34e <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800f34e:	780b      	ldrb	r3, [r1, #0]
 800f350:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800f352:	784b      	ldrb	r3, [r1, #1]
 800f354:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800f356:	788b      	ldrb	r3, [r1, #2]
 800f358:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800f35a:	78cb      	ldrb	r3, [r1, #3]
 800f35c:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800f35e:	790b      	ldrb	r3, [r1, #4]
 800f360:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800f362:	794b      	ldrb	r3, [r1, #5]
 800f364:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800f366:	798b      	ldrb	r3, [r1, #6]
 800f368:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800f36a:	79cb      	ldrb	r3, [r1, #7]
 800f36c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800f36e:	7a0b      	ldrb	r3, [r1, #8]
 800f370:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800f372:	7a4b      	ldrb	r3, [r1, #9]
 800f374:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800f376:	7a8b      	ldrb	r3, [r1, #10]
 800f378:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800f37a:	7acb      	ldrb	r3, [r1, #11]
 800f37c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800f37e:	7b0b      	ldrb	r3, [r1, #12]
 800f380:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800f382:	7b4b      	ldrb	r3, [r1, #13]
 800f384:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800f386:	7b8b      	ldrb	r3, [r1, #14]
 800f388:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800f38a:	7bcb      	ldrb	r3, [r1, #15]
 800f38c:	73c3      	strb	r3, [r0, #15]
#endif
}
 800f38e:	4770      	bx	lr

0800f390 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800f390:	e004      	b.n	800f39c <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800f392:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f396:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800f39a:	461a      	mov	r2, r3
 800f39c:	1e53      	subs	r3, r2, #1
 800f39e:	b2db      	uxtb	r3, r3
 800f3a0:	2a00      	cmp	r2, #0
 800f3a2:	d1f6      	bne.n	800f392 <copy_block_nn+0x2>
}
 800f3a4:	4770      	bx	lr

0800f3a6 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800f3a6:	780b      	ldrb	r3, [r1, #0]
 800f3a8:	7802      	ldrb	r2, [r0, #0]
 800f3aa:	4053      	eors	r3, r2
 800f3ac:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800f3ae:	784b      	ldrb	r3, [r1, #1]
 800f3b0:	7842      	ldrb	r2, [r0, #1]
 800f3b2:	4053      	eors	r3, r2
 800f3b4:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800f3b6:	788b      	ldrb	r3, [r1, #2]
 800f3b8:	7882      	ldrb	r2, [r0, #2]
 800f3ba:	4053      	eors	r3, r2
 800f3bc:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800f3be:	78cb      	ldrb	r3, [r1, #3]
 800f3c0:	78c2      	ldrb	r2, [r0, #3]
 800f3c2:	4053      	eors	r3, r2
 800f3c4:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800f3c6:	790b      	ldrb	r3, [r1, #4]
 800f3c8:	7902      	ldrb	r2, [r0, #4]
 800f3ca:	4053      	eors	r3, r2
 800f3cc:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800f3ce:	794b      	ldrb	r3, [r1, #5]
 800f3d0:	7942      	ldrb	r2, [r0, #5]
 800f3d2:	4053      	eors	r3, r2
 800f3d4:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800f3d6:	798b      	ldrb	r3, [r1, #6]
 800f3d8:	7982      	ldrb	r2, [r0, #6]
 800f3da:	4053      	eors	r3, r2
 800f3dc:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800f3de:	79cb      	ldrb	r3, [r1, #7]
 800f3e0:	79c2      	ldrb	r2, [r0, #7]
 800f3e2:	4053      	eors	r3, r2
 800f3e4:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800f3e6:	7a0b      	ldrb	r3, [r1, #8]
 800f3e8:	7a02      	ldrb	r2, [r0, #8]
 800f3ea:	4053      	eors	r3, r2
 800f3ec:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800f3ee:	7a4b      	ldrb	r3, [r1, #9]
 800f3f0:	7a42      	ldrb	r2, [r0, #9]
 800f3f2:	4053      	eors	r3, r2
 800f3f4:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800f3f6:	7a8b      	ldrb	r3, [r1, #10]
 800f3f8:	7a82      	ldrb	r2, [r0, #10]
 800f3fa:	4053      	eors	r3, r2
 800f3fc:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800f3fe:	7acb      	ldrb	r3, [r1, #11]
 800f400:	7ac2      	ldrb	r2, [r0, #11]
 800f402:	4053      	eors	r3, r2
 800f404:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800f406:	7b0b      	ldrb	r3, [r1, #12]
 800f408:	7b02      	ldrb	r2, [r0, #12]
 800f40a:	4053      	eors	r3, r2
 800f40c:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800f40e:	7b4b      	ldrb	r3, [r1, #13]
 800f410:	7b42      	ldrb	r2, [r0, #13]
 800f412:	4053      	eors	r3, r2
 800f414:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800f416:	7b8b      	ldrb	r3, [r1, #14]
 800f418:	7b82      	ldrb	r2, [r0, #14]
 800f41a:	4053      	eors	r3, r2
 800f41c:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800f41e:	7bcb      	ldrb	r3, [r1, #15]
 800f420:	7bc2      	ldrb	r2, [r0, #15]
 800f422:	4053      	eors	r3, r2
 800f424:	73c3      	strb	r3, [r0, #15]
#endif
}
 800f426:	4770      	bx	lr

0800f428 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800f428:	780b      	ldrb	r3, [r1, #0]
 800f42a:	f892 c000 	ldrb.w	ip, [r2]
 800f42e:	ea83 030c 	eor.w	r3, r3, ip
 800f432:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800f434:	784b      	ldrb	r3, [r1, #1]
 800f436:	f892 c001 	ldrb.w	ip, [r2, #1]
 800f43a:	ea83 030c 	eor.w	r3, r3, ip
 800f43e:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800f440:	788b      	ldrb	r3, [r1, #2]
 800f442:	f892 c002 	ldrb.w	ip, [r2, #2]
 800f446:	ea83 030c 	eor.w	r3, r3, ip
 800f44a:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800f44c:	78cb      	ldrb	r3, [r1, #3]
 800f44e:	f892 c003 	ldrb.w	ip, [r2, #3]
 800f452:	ea83 030c 	eor.w	r3, r3, ip
 800f456:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800f458:	790b      	ldrb	r3, [r1, #4]
 800f45a:	f892 c004 	ldrb.w	ip, [r2, #4]
 800f45e:	ea83 030c 	eor.w	r3, r3, ip
 800f462:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800f464:	794b      	ldrb	r3, [r1, #5]
 800f466:	f892 c005 	ldrb.w	ip, [r2, #5]
 800f46a:	ea83 030c 	eor.w	r3, r3, ip
 800f46e:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800f470:	798b      	ldrb	r3, [r1, #6]
 800f472:	f892 c006 	ldrb.w	ip, [r2, #6]
 800f476:	ea83 030c 	eor.w	r3, r3, ip
 800f47a:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800f47c:	79cb      	ldrb	r3, [r1, #7]
 800f47e:	f892 c007 	ldrb.w	ip, [r2, #7]
 800f482:	ea83 030c 	eor.w	r3, r3, ip
 800f486:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800f488:	7a0b      	ldrb	r3, [r1, #8]
 800f48a:	f892 c008 	ldrb.w	ip, [r2, #8]
 800f48e:	ea83 030c 	eor.w	r3, r3, ip
 800f492:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800f494:	7a4b      	ldrb	r3, [r1, #9]
 800f496:	f892 c009 	ldrb.w	ip, [r2, #9]
 800f49a:	ea83 030c 	eor.w	r3, r3, ip
 800f49e:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800f4a0:	7a8b      	ldrb	r3, [r1, #10]
 800f4a2:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800f4a6:	ea83 030c 	eor.w	r3, r3, ip
 800f4aa:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800f4ac:	7acb      	ldrb	r3, [r1, #11]
 800f4ae:	f892 c00b 	ldrb.w	ip, [r2, #11]
 800f4b2:	ea83 030c 	eor.w	r3, r3, ip
 800f4b6:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800f4b8:	7b0b      	ldrb	r3, [r1, #12]
 800f4ba:	f892 c00c 	ldrb.w	ip, [r2, #12]
 800f4be:	ea83 030c 	eor.w	r3, r3, ip
 800f4c2:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800f4c4:	7b4b      	ldrb	r3, [r1, #13]
 800f4c6:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800f4ca:	ea83 030c 	eor.w	r3, r3, ip
 800f4ce:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800f4d0:	7b8b      	ldrb	r3, [r1, #14]
 800f4d2:	f892 c00e 	ldrb.w	ip, [r2, #14]
 800f4d6:	ea83 030c 	eor.w	r3, r3, ip
 800f4da:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800f4dc:	7bcb      	ldrb	r3, [r1, #15]
 800f4de:	7bd2      	ldrb	r2, [r2, #15]
 800f4e0:	4053      	eors	r3, r2
 800f4e2:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800f4e4:	4770      	bx	lr

0800f4e6 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800f4e6:	b508      	push	{r3, lr}
    xor_block(d, k);
 800f4e8:	f7ff ff5d 	bl	800f3a6 <xor_block>
}
 800f4ec:	bd08      	pop	{r3, pc}
	...

0800f4f0 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800f4f0:	7802      	ldrb	r2, [r0, #0]
 800f4f2:	4b18      	ldr	r3, [pc, #96]	; (800f554 <shift_sub_rows+0x64>)
 800f4f4:	5c9a      	ldrb	r2, [r3, r2]
 800f4f6:	7002      	strb	r2, [r0, #0]
 800f4f8:	7902      	ldrb	r2, [r0, #4]
 800f4fa:	5c9a      	ldrb	r2, [r3, r2]
 800f4fc:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800f4fe:	7a02      	ldrb	r2, [r0, #8]
 800f500:	5c9a      	ldrb	r2, [r3, r2]
 800f502:	7202      	strb	r2, [r0, #8]
 800f504:	7b02      	ldrb	r2, [r0, #12]
 800f506:	5c9a      	ldrb	r2, [r3, r2]
 800f508:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800f50a:	7842      	ldrb	r2, [r0, #1]
 800f50c:	7941      	ldrb	r1, [r0, #5]
 800f50e:	5c59      	ldrb	r1, [r3, r1]
 800f510:	7041      	strb	r1, [r0, #1]
 800f512:	7a41      	ldrb	r1, [r0, #9]
 800f514:	5c59      	ldrb	r1, [r3, r1]
 800f516:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800f518:	7b41      	ldrb	r1, [r0, #13]
 800f51a:	5c59      	ldrb	r1, [r3, r1]
 800f51c:	7241      	strb	r1, [r0, #9]
 800f51e:	5c9a      	ldrb	r2, [r3, r2]
 800f520:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800f522:	7882      	ldrb	r2, [r0, #2]
 800f524:	7a81      	ldrb	r1, [r0, #10]
 800f526:	5c59      	ldrb	r1, [r3, r1]
 800f528:	7081      	strb	r1, [r0, #2]
 800f52a:	5c9a      	ldrb	r2, [r3, r2]
 800f52c:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800f52e:	7982      	ldrb	r2, [r0, #6]
 800f530:	7b81      	ldrb	r1, [r0, #14]
 800f532:	5c59      	ldrb	r1, [r3, r1]
 800f534:	7181      	strb	r1, [r0, #6]
 800f536:	5c9a      	ldrb	r2, [r3, r2]
 800f538:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800f53a:	7bc2      	ldrb	r2, [r0, #15]
 800f53c:	7ac1      	ldrb	r1, [r0, #11]
 800f53e:	5c59      	ldrb	r1, [r3, r1]
 800f540:	73c1      	strb	r1, [r0, #15]
 800f542:	79c1      	ldrb	r1, [r0, #7]
 800f544:	5c59      	ldrb	r1, [r3, r1]
 800f546:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800f548:	78c1      	ldrb	r1, [r0, #3]
 800f54a:	5c59      	ldrb	r1, [r3, r1]
 800f54c:	71c1      	strb	r1, [r0, #7]
 800f54e:	5c9b      	ldrb	r3, [r3, r2]
 800f550:	70c3      	strb	r3, [r0, #3]
}
 800f552:	4770      	bx	lr
 800f554:	0801423c 	.word	0x0801423c

0800f558 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800f558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f55c:	b084      	sub	sp, #16
 800f55e:	4604      	mov	r4, r0
    block_copy(st, dt);
 800f560:	4601      	mov	r1, r0
 800f562:	4668      	mov	r0, sp
 800f564:	f7ff fef3 	bl	800f34e <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800f568:	f89d c000 	ldrb.w	ip, [sp]
 800f56c:	4b6a      	ldr	r3, [pc, #424]	; (800f718 <mix_sub_columns+0x1c0>)
 800f56e:	f813 000c 	ldrb.w	r0, [r3, ip]
 800f572:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800f576:	4a69      	ldr	r2, [pc, #420]	; (800f71c <mix_sub_columns+0x1c4>)
 800f578:	f812 9008 	ldrb.w	r9, [r2, r8]
 800f57c:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800f580:	4967      	ldr	r1, [pc, #412]	; (800f720 <mix_sub_columns+0x1c8>)
 800f582:	f811 500e 	ldrb.w	r5, [r1, lr]
 800f586:	f89d 700f 	ldrb.w	r7, [sp, #15]
 800f58a:	5dce      	ldrb	r6, [r1, r7]
 800f58c:	ea80 0009 	eor.w	r0, r0, r9
 800f590:	4068      	eors	r0, r5
 800f592:	4070      	eors	r0, r6
 800f594:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800f596:	f811 000c 	ldrb.w	r0, [r1, ip]
 800f59a:	f813 a008 	ldrb.w	sl, [r3, r8]
 800f59e:	f812 900e 	ldrb.w	r9, [r2, lr]
 800f5a2:	ea80 0a0a 	eor.w	sl, r0, sl
 800f5a6:	ea89 090a 	eor.w	r9, r9, sl
 800f5aa:	ea86 0609 	eor.w	r6, r6, r9
 800f5ae:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800f5b0:	f811 8008 	ldrb.w	r8, [r1, r8]
 800f5b4:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800f5b8:	5dd6      	ldrb	r6, [r2, r7]
 800f5ba:	ea80 0008 	eor.w	r0, r0, r8
 800f5be:	ea8e 0000 	eor.w	r0, lr, r0
 800f5c2:	4070      	eors	r0, r6
 800f5c4:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800f5c6:	f812 600c 	ldrb.w	r6, [r2, ip]
 800f5ca:	5dd8      	ldrb	r0, [r3, r7]
 800f5cc:	ea86 0608 	eor.w	r6, r6, r8
 800f5d0:	4075      	eors	r5, r6
 800f5d2:	4045      	eors	r5, r0
 800f5d4:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800f5d6:	f89d c004 	ldrb.w	ip, [sp, #4]
 800f5da:	f813 000c 	ldrb.w	r0, [r3, ip]
 800f5de:	f89d 8009 	ldrb.w	r8, [sp, #9]
 800f5e2:	f812 9008 	ldrb.w	r9, [r2, r8]
 800f5e6:	f89d e00e 	ldrb.w	lr, [sp, #14]
 800f5ea:	f811 500e 	ldrb.w	r5, [r1, lr]
 800f5ee:	f89d 7003 	ldrb.w	r7, [sp, #3]
 800f5f2:	5dce      	ldrb	r6, [r1, r7]
 800f5f4:	ea80 0009 	eor.w	r0, r0, r9
 800f5f8:	4068      	eors	r0, r5
 800f5fa:	4070      	eors	r0, r6
 800f5fc:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800f5fe:	f811 000c 	ldrb.w	r0, [r1, ip]
 800f602:	f813 a008 	ldrb.w	sl, [r3, r8]
 800f606:	f812 900e 	ldrb.w	r9, [r2, lr]
 800f60a:	ea80 0a0a 	eor.w	sl, r0, sl
 800f60e:	ea89 090a 	eor.w	r9, r9, sl
 800f612:	ea86 0609 	eor.w	r6, r6, r9
 800f616:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800f618:	f811 8008 	ldrb.w	r8, [r1, r8]
 800f61c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800f620:	5dd6      	ldrb	r6, [r2, r7]
 800f622:	ea80 0008 	eor.w	r0, r0, r8
 800f626:	ea8e 0000 	eor.w	r0, lr, r0
 800f62a:	4070      	eors	r0, r6
 800f62c:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800f62e:	f812 600c 	ldrb.w	r6, [r2, ip]
 800f632:	5dd8      	ldrb	r0, [r3, r7]
 800f634:	ea86 0608 	eor.w	r6, r6, r8
 800f638:	4075      	eors	r5, r6
 800f63a:	4045      	eors	r5, r0
 800f63c:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800f63e:	f89d c008 	ldrb.w	ip, [sp, #8]
 800f642:	f813 000c 	ldrb.w	r0, [r3, ip]
 800f646:	f89d 800d 	ldrb.w	r8, [sp, #13]
 800f64a:	f812 9008 	ldrb.w	r9, [r2, r8]
 800f64e:	f89d e002 	ldrb.w	lr, [sp, #2]
 800f652:	f811 500e 	ldrb.w	r5, [r1, lr]
 800f656:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800f65a:	5dce      	ldrb	r6, [r1, r7]
 800f65c:	ea80 0009 	eor.w	r0, r0, r9
 800f660:	4068      	eors	r0, r5
 800f662:	4070      	eors	r0, r6
 800f664:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800f666:	f811 000c 	ldrb.w	r0, [r1, ip]
 800f66a:	f813 a008 	ldrb.w	sl, [r3, r8]
 800f66e:	f812 900e 	ldrb.w	r9, [r2, lr]
 800f672:	ea80 0a0a 	eor.w	sl, r0, sl
 800f676:	ea89 090a 	eor.w	r9, r9, sl
 800f67a:	ea86 0609 	eor.w	r6, r6, r9
 800f67e:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800f680:	f811 8008 	ldrb.w	r8, [r1, r8]
 800f684:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800f688:	5dd6      	ldrb	r6, [r2, r7]
 800f68a:	ea80 0008 	eor.w	r0, r0, r8
 800f68e:	ea8e 0000 	eor.w	r0, lr, r0
 800f692:	4070      	eors	r0, r6
 800f694:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800f696:	f812 600c 	ldrb.w	r6, [r2, ip]
 800f69a:	5dd8      	ldrb	r0, [r3, r7]
 800f69c:	ea86 0608 	eor.w	r6, r6, r8
 800f6a0:	4075      	eors	r5, r6
 800f6a2:	4045      	eors	r5, r0
 800f6a4:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800f6a6:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800f6aa:	5d98      	ldrb	r0, [r3, r6]
 800f6ac:	f89d 8001 	ldrb.w	r8, [sp, #1]
 800f6b0:	f812 9008 	ldrb.w	r9, [r2, r8]
 800f6b4:	f89d 7006 	ldrb.w	r7, [sp, #6]
 800f6b8:	f811 c007 	ldrb.w	ip, [r1, r7]
 800f6bc:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800f6c0:	f811 e005 	ldrb.w	lr, [r1, r5]
 800f6c4:	ea80 0009 	eor.w	r0, r0, r9
 800f6c8:	ea8c 0000 	eor.w	r0, ip, r0
 800f6cc:	ea8e 0000 	eor.w	r0, lr, r0
 800f6d0:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800f6d2:	5d88      	ldrb	r0, [r1, r6]
 800f6d4:	f813 a008 	ldrb.w	sl, [r3, r8]
 800f6d8:	f812 9007 	ldrb.w	r9, [r2, r7]
 800f6dc:	ea80 0a0a 	eor.w	sl, r0, sl
 800f6e0:	ea89 090a 	eor.w	r9, r9, sl
 800f6e4:	ea8e 0e09 	eor.w	lr, lr, r9
 800f6e8:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800f6ec:	f811 1008 	ldrb.w	r1, [r1, r8]
 800f6f0:	f813 e007 	ldrb.w	lr, [r3, r7]
 800f6f4:	5d57      	ldrb	r7, [r2, r5]
 800f6f6:	4048      	eors	r0, r1
 800f6f8:	ea8e 0000 	eor.w	r0, lr, r0
 800f6fc:	4078      	eors	r0, r7
 800f6fe:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800f700:	5d92      	ldrb	r2, [r2, r6]
 800f702:	5d5b      	ldrb	r3, [r3, r5]
 800f704:	4051      	eors	r1, r2
 800f706:	ea8c 0c01 	eor.w	ip, ip, r1
 800f70a:	ea83 0c0c 	eor.w	ip, r3, ip
 800f70e:	f884 c00f 	strb.w	ip, [r4, #15]
  }
 800f712:	b004      	add	sp, #16
 800f714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f718:	0801403c 	.word	0x0801403c
 800f71c:	0801413c 	.word	0x0801413c
 800f720:	0801423c 	.word	0x0801423c

0800f724 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800f724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f728:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800f72a:	f1a1 0310 	sub.w	r3, r1, #16
 800f72e:	b2da      	uxtb	r2, r3
 800f730:	2a10      	cmp	r2, #16
 800f732:	d807      	bhi.n	800f744 <lorawan_aes_set_key+0x20>
 800f734:	460d      	mov	r5, r1
 800f736:	2301      	movs	r3, #1
 800f738:	4093      	lsls	r3, r2
 800f73a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800f73e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f742:	b92b      	cbnz	r3, 800f750 <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800f744:	2300      	movs	r3, #0
 800f746:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 800f74a:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800f74c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 800f750:	460a      	mov	r2, r1
 800f752:	4601      	mov	r1, r0
 800f754:	4620      	mov	r0, r4
 800f756:	f7ff fe1b 	bl	800f390 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800f75a:	f105 031c 	add.w	r3, r5, #28
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	009b      	lsls	r3, r3, #2
 800f762:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 800f766:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800f76a:	3b01      	subs	r3, #1
 800f76c:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800f770:	462b      	mov	r3, r5
 800f772:	f04f 0c01 	mov.w	ip, #1
 800f776:	e023      	b.n	800f7c0 <lorawan_aes_set_key+0x9c>
        else if( keylen > 24 && cc % keylen == 16 )
 800f778:	2d18      	cmp	r5, #24
 800f77a:	d901      	bls.n	800f780 <lorawan_aes_set_key+0x5c>
 800f77c:	2a10      	cmp	r2, #16
 800f77e:	d047      	beq.n	800f810 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 800f780:	1b5a      	subs	r2, r3, r5
 800f782:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800f784:	f814 9002 	ldrb.w	r9, [r4, r2]
 800f788:	ea89 0808 	eor.w	r8, r9, r8
 800f78c:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800f790:	f102 0801 	add.w	r8, r2, #1
 800f794:	f814 8008 	ldrb.w	r8, [r4, r8]
 800f798:	f100 0901 	add.w	r9, r0, #1
 800f79c:	ea88 0707 	eor.w	r7, r8, r7
 800f7a0:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800f7a4:	1c97      	adds	r7, r2, #2
 800f7a6:	5de7      	ldrb	r7, [r4, r7]
 800f7a8:	f100 0802 	add.w	r8, r0, #2
 800f7ac:	407e      	eors	r6, r7
 800f7ae:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800f7b2:	3203      	adds	r2, #3
 800f7b4:	5ca6      	ldrb	r6, [r4, r2]
 800f7b6:	1cc2      	adds	r2, r0, #3
 800f7b8:	4071      	eors	r1, r6
 800f7ba:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800f7bc:	3304      	adds	r3, #4
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	4573      	cmp	r3, lr
 800f7c2:	d22c      	bcs.n	800f81e <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	1f1a      	subs	r2, r3, #4
 800f7c8:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 800f7cc:	1eda      	subs	r2, r3, #3
 800f7ce:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 800f7d0:	1e9a      	subs	r2, r3, #2
 800f7d2:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 800f7d4:	1e5a      	subs	r2, r3, #1
 800f7d6:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 800f7d8:	fbb3 f2f5 	udiv	r2, r3, r5
 800f7dc:	fb05 3212 	mls	r2, r5, r2, r3
 800f7e0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800f7e4:	d1c8      	bne.n	800f778 <lorawan_aes_set_key+0x54>
            t0 = s_box(t1) ^ rc;
 800f7e6:	4a0f      	ldr	r2, [pc, #60]	; (800f824 <lorawan_aes_set_key+0x100>)
 800f7e8:	f812 9007 	ldrb.w	r9, [r2, r7]
 800f7ec:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 800f7f0:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 800f7f2:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 800f7f4:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 800f7f8:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 800f7fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f800:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800f804:	ea82 0c4c 	eor.w	ip, r2, ip, lsl #1
 800f808:	fa5f fc8c 	uxtb.w	ip, ip
            t0 = s_box(t1) ^ rc;
 800f80c:	46c8      	mov	r8, r9
 800f80e:	e7b7      	b.n	800f780 <lorawan_aes_set_key+0x5c>
            t0 = s_box(t0);
 800f810:	4a04      	ldr	r2, [pc, #16]	; (800f824 <lorawan_aes_set_key+0x100>)
 800f812:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 800f816:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 800f818:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 800f81a:	5c51      	ldrb	r1, [r2, r1]
 800f81c:	e7b0      	b.n	800f780 <lorawan_aes_set_key+0x5c>
    return 0;
 800f81e:	2000      	movs	r0, #0
 800f820:	e794      	b.n	800f74c <lorawan_aes_set_key+0x28>
 800f822:	bf00      	nop
 800f824:	0801423c 	.word	0x0801423c

0800f828 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 800f828:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 800f82c:	b31b      	cbz	r3, 800f876 <lorawan_aes_encrypt+0x4e>
{
 800f82e:	b570      	push	{r4, r5, r6, lr}
 800f830:	b084      	sub	sp, #16
 800f832:	460e      	mov	r6, r1
 800f834:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800f836:	4601      	mov	r1, r0
 800f838:	4668      	mov	r0, sp
 800f83a:	f7ff fdf5 	bl	800f428 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800f83e:	2401      	movs	r4, #1
 800f840:	e009      	b.n	800f856 <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800f842:	4668      	mov	r0, sp
 800f844:	f7ff fe88 	bl	800f558 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800f848:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 800f84c:	4668      	mov	r0, sp
 800f84e:	f7ff fe4a 	bl	800f4e6 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800f852:	3401      	adds	r4, #1
 800f854:	b2e4      	uxtb	r4, r4
 800f856:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 800f85a:	42a3      	cmp	r3, r4
 800f85c:	d8f1      	bhi.n	800f842 <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800f85e:	4668      	mov	r0, sp
 800f860:	f7ff fe46 	bl	800f4f0 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800f864:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800f868:	4669      	mov	r1, sp
 800f86a:	4630      	mov	r0, r6
 800f86c:	f7ff fddc 	bl	800f428 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800f870:	2000      	movs	r0, #0
}
 800f872:	b004      	add	sp, #16
 800f874:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 800f876:	20ff      	movs	r0, #255	; 0xff
}
 800f878:	4770      	bx	lr
	...

0800f87c <GetKeyByID>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f87c:	2300      	movs	r3, #0
 800f87e:	2b09      	cmp	r3, #9
 800f880:	d817      	bhi.n	800f8b2 <GetKeyByID+0x36>
{
 800f882:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f884:	4a0c      	ldr	r2, [pc, #48]	; (800f8b8 <GetKeyByID+0x3c>)
 800f886:	6814      	ldr	r4, [r2, #0]
 800f888:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800f88c:	4422      	add	r2, r4
 800f88e:	7c12      	ldrb	r2, [r2, #16]
 800f890:	4282      	cmp	r2, r0
 800f892:	d006      	beq.n	800f8a2 <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f894:	3301      	adds	r3, #1
 800f896:	b2db      	uxtb	r3, r3
 800f898:	2b09      	cmp	r3, #9
 800f89a:	d9f3      	bls.n	800f884 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f89c:	2003      	movs	r0, #3
}
 800f89e:	bc10      	pop	{r4}
 800f8a0:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800f8a2:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800f8a6:	f10c 0c10 	add.w	ip, ip, #16
 800f8aa:	4464      	add	r4, ip
 800f8ac:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800f8ae:	2000      	movs	r0, #0
 800f8b0:	e7f5      	b.n	800f89e <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f8b2:	2003      	movs	r0, #3
}
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop
 800f8b8:	20000fb8 	.word	0x20000fb8

0800f8bc <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800f8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8c0:	b0cc      	sub	sp, #304	; 0x130
 800f8c2:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800f8c4:	b3a9      	cbz	r1, 800f932 <ComputeCmac+0x76>
 800f8c6:	4605      	mov	r5, r0
 800f8c8:	4617      	mov	r7, r2
 800f8ca:	461c      	mov	r4, r3
 800f8cc:	4688      	mov	r8, r1
 800f8ce:	b396      	cbz	r6, 800f936 <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800f8d0:	a802      	add	r0, sp, #8
 800f8d2:	f7ff fbd7 	bl	800f084 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800f8d6:	a901      	add	r1, sp, #4
 800f8d8:	4620      	mov	r0, r4
 800f8da:	f7ff ffcf 	bl	800f87c <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f8de:	4604      	mov	r4, r0
 800f8e0:	b118      	cbz	r0, 800f8ea <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	b04c      	add	sp, #304	; 0x130
 800f8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800f8ea:	9901      	ldr	r1, [sp, #4]
 800f8ec:	3101      	adds	r1, #1
 800f8ee:	a802      	add	r0, sp, #8
 800f8f0:	f7ff fbd7 	bl	800f0a2 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800f8f4:	b125      	cbz	r5, 800f900 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800f8f6:	2210      	movs	r2, #16
 800f8f8:	4629      	mov	r1, r5
 800f8fa:	a802      	add	r0, sp, #8
 800f8fc:	f7ff fbd8 	bl	800f0b0 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800f900:	463a      	mov	r2, r7
 800f902:	4641      	mov	r1, r8
 800f904:	a802      	add	r0, sp, #8
 800f906:	f7ff fbd3 	bl	800f0b0 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800f90a:	a902      	add	r1, sp, #8
 800f90c:	a848      	add	r0, sp, #288	; 0x120
 800f90e:	f7ff fc3d 	bl	800f18c <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800f912:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 800f916:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 800f91a:	041b      	lsls	r3, r3, #16
 800f91c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f920:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 800f924:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 800f928:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800f92c:	4313      	orrs	r3, r2
 800f92e:	6033      	str	r3, [r6, #0]
 800f930:	e7d7      	b.n	800f8e2 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 800f932:	2402      	movs	r4, #2
 800f934:	e7d5      	b.n	800f8e2 <ComputeCmac+0x26>
 800f936:	2402      	movs	r4, #2
 800f938:	e7d3      	b.n	800f8e2 <ComputeCmac+0x26>
	...

0800f93c <SecureElementInit>:
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800f93c:	b140      	cbz	r0, 800f950 <SecureElementInit+0x14>
{
 800f93e:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800f940:	4a04      	ldr	r2, [pc, #16]	; (800f954 <SecureElementInit+0x18>)
 800f942:	6010      	str	r0, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800f944:	22c0      	movs	r2, #192	; 0xc0
 800f946:	4904      	ldr	r1, [pc, #16]	; (800f958 <SecureElementInit+0x1c>)
 800f948:	f000 fa95 	bl	800fe76 <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800f94c:	2000      	movs	r0, #0
}
 800f94e:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f950:	2002      	movs	r0, #2
}
 800f952:	4770      	bx	lr
 800f954:	20000fb8 	.word	0x20000fb8
 800f958:	0803e500 	.word	0x0803e500

0800f95c <SecureElementGetKeyByID>:
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800f95c:	2300      	movs	r3, #0
 800f95e:	2b09      	cmp	r3, #9
 800f960:	d817      	bhi.n	800f992 <SecureElementGetKeyByID+0x36>
{
 800f962:	b410      	push	{r4}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800f964:	4a0c      	ldr	r2, [pc, #48]	; (800f998 <SecureElementGetKeyByID+0x3c>)
 800f966:	6814      	ldr	r4, [r2, #0]
 800f968:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800f96c:	4422      	add	r2, r4
 800f96e:	7c12      	ldrb	r2, [r2, #16]
 800f970:	4282      	cmp	r2, r0
 800f972:	d006      	beq.n	800f982 <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800f974:	3301      	adds	r3, #1
 800f976:	b2db      	uxtb	r3, r3
 800f978:	2b09      	cmp	r3, #9
 800f97a:	d9f3      	bls.n	800f964 <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f97c:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800f97e:	bc10      	pop	{r4}
 800f980:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 800f982:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800f986:	f10c 0c10 	add.w	ip, ip, #16
 800f98a:	4464      	add	r4, ip
 800f98c:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800f98e:	2000      	movs	r0, #0
 800f990:	e7f5      	b.n	800f97e <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f992:	2003      	movs	r0, #3
}
 800f994:	4770      	bx	lr
 800f996:	bf00      	nop
 800f998:	20000fb8 	.word	0x20000fb8

0800f99c <PrintKey>:
{
 800f99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9a0:	b095      	sub	sp, #84	; 0x54
 800f9a2:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 800f9a4:	a913      	add	r1, sp, #76	; 0x4c
 800f9a6:	f7ff ffd9 	bl	800f95c <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 800f9aa:	2800      	cmp	r0, #0
 800f9ac:	d154      	bne.n	800fa58 <PrintKey+0xbc>
        if (key == APP_KEY)
 800f9ae:	b1b4      	cbz	r4, 800f9de <PrintKey+0x42>
        else if (key == NWK_KEY)
 800f9b0:	2c01      	cmp	r4, #1
 800f9b2:	d054      	beq.n	800fa5e <PrintKey+0xc2>
        else if (key == APP_S_KEY)
 800f9b4:	2c03      	cmp	r4, #3
 800f9b6:	d059      	beq.n	800fa6c <PrintKey+0xd0>
        else if (key == NWK_S_KEY)
 800f9b8:	2c02      	cmp	r4, #2
 800f9ba:	d05e      	beq.n	800fa7a <PrintKey+0xde>
        else if (key == MC_ROOT_KEY)
 800f9bc:	2c04      	cmp	r4, #4
 800f9be:	d063      	beq.n	800fa88 <PrintKey+0xec>
        else if (key == MC_KE_KEY)
 800f9c0:	2c7f      	cmp	r4, #127	; 0x7f
 800f9c2:	d068      	beq.n	800fa96 <PrintKey+0xfa>
        else if (key == MC_KEY_0)
 800f9c4:	2c80      	cmp	r4, #128	; 0x80
 800f9c6:	d06d      	beq.n	800faa4 <PrintKey+0x108>
        else if (key == MC_APP_S_KEY_0)
 800f9c8:	2c81      	cmp	r4, #129	; 0x81
 800f9ca:	d072      	beq.n	800fab2 <PrintKey+0x116>
        else if (key == MC_NWK_S_KEY_0)
 800f9cc:	2c82      	cmp	r4, #130	; 0x82
 800f9ce:	d10c      	bne.n	800f9ea <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800f9d0:	4b3b      	ldr	r3, [pc, #236]	; (800fac0 <PrintKey+0x124>)
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	4611      	mov	r1, r2
 800f9d6:	2002      	movs	r0, #2
 800f9d8:	f002 f8f6 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
 800f9dc:	e005      	b.n	800f9ea <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800f9de:	4b39      	ldr	r3, [pc, #228]	; (800fac4 <PrintKey+0x128>)
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	4611      	mov	r1, r2
 800f9e4:	2002      	movs	r0, #2
 800f9e6:	f002 f8ef 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800f9ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f9ec:	785a      	ldrb	r2, [r3, #1]
 800f9ee:	9210      	str	r2, [sp, #64]	; 0x40
 800f9f0:	7899      	ldrb	r1, [r3, #2]
 800f9f2:	9111      	str	r1, [sp, #68]	; 0x44
 800f9f4:	78da      	ldrb	r2, [r3, #3]
 800f9f6:	7919      	ldrb	r1, [r3, #4]
 800f9f8:	7958      	ldrb	r0, [r3, #5]
 800f9fa:	799c      	ldrb	r4, [r3, #6]
 800f9fc:	79dd      	ldrb	r5, [r3, #7]
 800f9fe:	7a1e      	ldrb	r6, [r3, #8]
 800fa00:	7a5f      	ldrb	r7, [r3, #9]
 800fa02:	f893 c00a 	ldrb.w	ip, [r3, #10]
 800fa06:	f893 e00b 	ldrb.w	lr, [r3, #11]
 800fa0a:	f893 800c 	ldrb.w	r8, [r3, #12]
 800fa0e:	f893 900d 	ldrb.w	r9, [r3, #13]
 800fa12:	f893 a00e 	ldrb.w	sl, [r3, #14]
 800fa16:	f893 b00f 	ldrb.w	fp, [r3, #15]
 800fa1a:	7c1b      	ldrb	r3, [r3, #16]
 800fa1c:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa1e:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800fa22:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800fa26:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800fa2a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800fa2e:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800fa32:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800fa36:	9708      	str	r7, [sp, #32]
 800fa38:	9607      	str	r6, [sp, #28]
 800fa3a:	9506      	str	r5, [sp, #24]
 800fa3c:	9405      	str	r4, [sp, #20]
 800fa3e:	9004      	str	r0, [sp, #16]
 800fa40:	9103      	str	r1, [sp, #12]
 800fa42:	9202      	str	r2, [sp, #8]
 800fa44:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fa46:	9101      	str	r1, [sp, #4]
 800fa48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fa4a:	9200      	str	r2, [sp, #0]
 800fa4c:	4b1e      	ldr	r3, [pc, #120]	; (800fac8 <PrintKey+0x12c>)
 800fa4e:	2200      	movs	r2, #0
 800fa50:	4611      	mov	r1, r2
 800fa52:	2002      	movs	r0, #2
 800fa54:	f002 f8b8 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
}
 800fa58:	b015      	add	sp, #84	; 0x54
 800fa5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800fa5e:	4b1b      	ldr	r3, [pc, #108]	; (800facc <PrintKey+0x130>)
 800fa60:	2200      	movs	r2, #0
 800fa62:	4611      	mov	r1, r2
 800fa64:	2002      	movs	r0, #2
 800fa66:	f002 f8af 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
 800fa6a:	e7be      	b.n	800f9ea <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800fa6c:	4b18      	ldr	r3, [pc, #96]	; (800fad0 <PrintKey+0x134>)
 800fa6e:	2200      	movs	r2, #0
 800fa70:	4611      	mov	r1, r2
 800fa72:	2002      	movs	r0, #2
 800fa74:	f002 f8a8 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
 800fa78:	e7b7      	b.n	800f9ea <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800fa7a:	4b16      	ldr	r3, [pc, #88]	; (800fad4 <PrintKey+0x138>)
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	4611      	mov	r1, r2
 800fa80:	2002      	movs	r0, #2
 800fa82:	f002 f8a1 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
 800fa86:	e7b0      	b.n	800f9ea <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800fa88:	4b13      	ldr	r3, [pc, #76]	; (800fad8 <PrintKey+0x13c>)
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	4611      	mov	r1, r2
 800fa8e:	2002      	movs	r0, #2
 800fa90:	f002 f89a 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
 800fa94:	e7a9      	b.n	800f9ea <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800fa96:	4b11      	ldr	r3, [pc, #68]	; (800fadc <PrintKey+0x140>)
 800fa98:	2200      	movs	r2, #0
 800fa9a:	4611      	mov	r1, r2
 800fa9c:	2002      	movs	r0, #2
 800fa9e:	f002 f893 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
 800faa2:	e7a2      	b.n	800f9ea <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800faa4:	4b0e      	ldr	r3, [pc, #56]	; (800fae0 <PrintKey+0x144>)
 800faa6:	2200      	movs	r2, #0
 800faa8:	4611      	mov	r1, r2
 800faaa:	2002      	movs	r0, #2
 800faac:	f002 f88c 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
 800fab0:	e79b      	b.n	800f9ea <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800fab2:	4b0c      	ldr	r3, [pc, #48]	; (800fae4 <PrintKey+0x148>)
 800fab4:	2200      	movs	r2, #0
 800fab6:	4611      	mov	r1, r2
 800fab8:	2002      	movs	r0, #2
 800faba:	f002 f885 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
 800fabe:	e794      	b.n	800f9ea <PrintKey+0x4e>
 800fac0:	080143fc 	.word	0x080143fc
 800fac4:	0801433c 	.word	0x0801433c
 800fac8:	08014414 	.word	0x08014414
 800facc:	08014354 	.word	0x08014354
 800fad0:	0801436c 	.word	0x0801436c
 800fad4:	08014384 	.word	0x08014384
 800fad8:	0801439c 	.word	0x0801439c
 800fadc:	080143b4 	.word	0x080143b4
 800fae0:	080143cc 	.word	0x080143cc
 800fae4:	080143e4 	.word	0x080143e4

0800fae8 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800fae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faea:	b089      	sub	sp, #36	; 0x24
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800faec:	4b28      	ldr	r3, [pc, #160]	; (800fb90 <SecureElementPrintKeys+0xa8>)
 800faee:	2200      	movs	r2, #0
 800faf0:	4611      	mov	r1, r2
 800faf2:	2002      	movs	r0, #2
 800faf4:	f002 f868 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800faf8:	2000      	movs	r0, #0
 800fafa:	f7ff ff4f 	bl	800f99c <PrintKey>
    PrintKey(NWK_KEY);
 800fafe:	2001      	movs	r0, #1
 800fb00:	f7ff ff4c 	bl	800f99c <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800fb04:	4b23      	ldr	r3, [pc, #140]	; (800fb94 <SecureElementPrintKeys+0xac>)
 800fb06:	2200      	movs	r2, #0
 800fb08:	4611      	mov	r1, r2
 800fb0a:	2002      	movs	r0, #2
 800fb0c:	f002 f85c 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800fb10:	2003      	movs	r0, #3
 800fb12:	f7ff ff43 	bl	800f99c <PrintKey>
    PrintKey(NWK_S_KEY);
 800fb16:	2002      	movs	r0, #2
 800fb18:	f7ff ff40 	bl	800f99c <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800fb1c:	4b1e      	ldr	r3, [pc, #120]	; (800fb98 <SecureElementPrintKeys+0xb0>)
 800fb1e:	2200      	movs	r2, #0
 800fb20:	4611      	mov	r1, r2
 800fb22:	2002      	movs	r0, #2
 800fb24:	f002 f850 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800fb28:	4c1c      	ldr	r4, [pc, #112]	; (800fb9c <SecureElementPrintKeys+0xb4>)
 800fb2a:	6823      	ldr	r3, [r4, #0]
 800fb2c:	781a      	ldrb	r2, [r3, #0]
 800fb2e:	7859      	ldrb	r1, [r3, #1]
 800fb30:	7898      	ldrb	r0, [r3, #2]
 800fb32:	78dd      	ldrb	r5, [r3, #3]
 800fb34:	791e      	ldrb	r6, [r3, #4]
 800fb36:	795f      	ldrb	r7, [r3, #5]
 800fb38:	f893 c006 	ldrb.w	ip, [r3, #6]
 800fb3c:	79db      	ldrb	r3, [r3, #7]
 800fb3e:	9307      	str	r3, [sp, #28]
 800fb40:	f8cd c018 	str.w	ip, [sp, #24]
 800fb44:	9705      	str	r7, [sp, #20]
 800fb46:	9604      	str	r6, [sp, #16]
 800fb48:	9503      	str	r5, [sp, #12]
 800fb4a:	9002      	str	r0, [sp, #8]
 800fb4c:	9101      	str	r1, [sp, #4]
 800fb4e:	9200      	str	r2, [sp, #0]
 800fb50:	4b13      	ldr	r3, [pc, #76]	; (800fba0 <SecureElementPrintKeys+0xb8>)
 800fb52:	2200      	movs	r2, #0
 800fb54:	4611      	mov	r1, r2
 800fb56:	2002      	movs	r0, #2
 800fb58:	f002 f836 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800fb5c:	6823      	ldr	r3, [r4, #0]
 800fb5e:	7a1a      	ldrb	r2, [r3, #8]
 800fb60:	7a59      	ldrb	r1, [r3, #9]
 800fb62:	7a98      	ldrb	r0, [r3, #10]
 800fb64:	7adc      	ldrb	r4, [r3, #11]
 800fb66:	7b1d      	ldrb	r5, [r3, #12]
 800fb68:	7b5e      	ldrb	r6, [r3, #13]
 800fb6a:	7b9f      	ldrb	r7, [r3, #14]
 800fb6c:	7bdb      	ldrb	r3, [r3, #15]
 800fb6e:	9307      	str	r3, [sp, #28]
 800fb70:	9706      	str	r7, [sp, #24]
 800fb72:	9605      	str	r6, [sp, #20]
 800fb74:	9504      	str	r5, [sp, #16]
 800fb76:	9403      	str	r4, [sp, #12]
 800fb78:	9002      	str	r0, [sp, #8]
 800fb7a:	9101      	str	r1, [sp, #4]
 800fb7c:	9200      	str	r2, [sp, #0]
 800fb7e:	4b09      	ldr	r3, [pc, #36]	; (800fba4 <SecureElementPrintKeys+0xbc>)
 800fb80:	2200      	movs	r2, #0
 800fb82:	4611      	mov	r1, r2
 800fb84:	2002      	movs	r0, #2
 800fb86:	f002 f81f 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
}
 800fb8a:	2000      	movs	r0, #0
 800fb8c:	b009      	add	sp, #36	; 0x24
 800fb8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb90:	08014468 	.word	0x08014468
 800fb94:	08014480 	.word	0x08014480
 800fb98:	08014498 	.word	0x08014498
 800fb9c:	20000fb8 	.word	0x20000fb8
 800fba0:	080144b0 	.word	0x080144b0
 800fba4:	080144f0 	.word	0x080144f0

0800fba8 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800fba8:	b508      	push	{r3, lr}
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800fbaa:	2004      	movs	r0, #4
 800fbac:	f7ff fef6 	bl	800f99c <PrintKey>
    PrintKey(MC_KE_KEY);
 800fbb0:	207f      	movs	r0, #127	; 0x7f
 800fbb2:	f7ff fef3 	bl	800f99c <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800fbb6:	2002      	movs	r0, #2
 800fbb8:	f7ff fef0 	bl	800f99c <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800fbbc:	2003      	movs	r0, #3
 800fbbe:	f7ff feed 	bl	800f99c <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
}
 800fbc2:	2000      	movs	r0, #0
 800fbc4:	bd08      	pop	{r3, pc}

0800fbc6 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800fbc6:	2b7e      	cmp	r3, #126	; 0x7e
 800fbc8:	d80a      	bhi.n	800fbe0 <SecureElementComputeAesCmac+0x1a>
{
 800fbca:	b500      	push	{lr}
 800fbcc:	b083      	sub	sp, #12
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800fbce:	f8dd c010 	ldr.w	ip, [sp, #16]
 800fbd2:	f8cd c000 	str.w	ip, [sp]
 800fbd6:	f7ff fe71 	bl	800f8bc <ComputeCmac>
}
 800fbda:	b003      	add	sp, #12
 800fbdc:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fbe0:	2003      	movs	r0, #3
}
 800fbe2:	4770      	bx	lr

0800fbe4 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 800fbe4:	b190      	cbz	r0, 800fc0c <SecureElementVerifyAesCmac+0x28>
{
 800fbe6:	b510      	push	{r4, lr}
 800fbe8:	b084      	sub	sp, #16
 800fbea:	468c      	mov	ip, r1
 800fbec:	4614      	mov	r4, r2
 800fbee:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800fbf0:	2000      	movs	r0, #0
 800fbf2:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800fbf4:	aa03      	add	r2, sp, #12
 800fbf6:	9200      	str	r2, [sp, #0]
 800fbf8:	4662      	mov	r2, ip
 800fbfa:	f7ff fe5f 	bl	800f8bc <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800fbfe:	b918      	cbnz	r0, 800fc08 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800fc00:	9b03      	ldr	r3, [sp, #12]
 800fc02:	42a3      	cmp	r3, r4
 800fc04:	d000      	beq.n	800fc08 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800fc06:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 800fc08:	b004      	add	sp, #16
 800fc0a:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800fc0c:	2002      	movs	r0, #2
}
 800fc0e:	4770      	bx	lr

0800fc10 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800fc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc14:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 800fc16:	b350      	cbz	r0, 800fc6e <SecureElementAesEncrypt+0x5e>
 800fc18:	460c      	mov	r4, r1
 800fc1a:	4615      	mov	r5, r2
 800fc1c:	461e      	mov	r6, r3
 800fc1e:	4607      	mov	r7, r0
 800fc20:	b343      	cbz	r3, 800fc74 <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800fc22:	f011 0f0f 	tst.w	r1, #15
 800fc26:	d128      	bne.n	800fc7a <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800fc28:	22f0      	movs	r2, #240	; 0xf0
 800fc2a:	2100      	movs	r1, #0
 800fc2c:	a801      	add	r0, sp, #4
 800fc2e:	f000 f93a 	bl	800fea6 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800fc32:	4669      	mov	r1, sp
 800fc34:	4628      	mov	r0, r5
 800fc36:	f7ff fe21 	bl	800f87c <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800fc3a:	4680      	mov	r8, r0
 800fc3c:	b118      	cbz	r0, 800fc46 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800fc3e:	4640      	mov	r0, r8
 800fc40:	b03e      	add	sp, #248	; 0xf8
 800fc42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800fc46:	aa01      	add	r2, sp, #4
 800fc48:	2110      	movs	r1, #16
 800fc4a:	9800      	ldr	r0, [sp, #0]
 800fc4c:	3001      	adds	r0, #1
 800fc4e:	f7ff fd69 	bl	800f724 <lorawan_aes_set_key>
        uint8_t block = 0;
 800fc52:	4645      	mov	r5, r8
        while( size != 0 )
 800fc54:	e008      	b.n	800fc68 <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800fc56:	aa01      	add	r2, sp, #4
 800fc58:	1971      	adds	r1, r6, r5
 800fc5a:	1978      	adds	r0, r7, r5
 800fc5c:	f7ff fde4 	bl	800f828 <lorawan_aes_encrypt>
            block = block + 16;
 800fc60:	3510      	adds	r5, #16
 800fc62:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 800fc64:	3c10      	subs	r4, #16
 800fc66:	b2a4      	uxth	r4, r4
        while( size != 0 )
 800fc68:	2c00      	cmp	r4, #0
 800fc6a:	d1f4      	bne.n	800fc56 <SecureElementAesEncrypt+0x46>
 800fc6c:	e7e7      	b.n	800fc3e <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 800fc6e:	f04f 0802 	mov.w	r8, #2
 800fc72:	e7e4      	b.n	800fc3e <SecureElementAesEncrypt+0x2e>
 800fc74:	f04f 0802 	mov.w	r8, #2
 800fc78:	e7e1      	b.n	800fc3e <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800fc7a:	f04f 0805 	mov.w	r8, #5
 800fc7e:	e7de      	b.n	800fc3e <SecureElementAesEncrypt+0x2e>

0800fc80 <SecureElementSetKey>:
{
 800fc80:	b530      	push	{r4, r5, lr}
 800fc82:	b085      	sub	sp, #20
    if( key == NULL )
 800fc84:	2900      	cmp	r1, #0
 800fc86:	d038      	beq.n	800fcfa <SecureElementSetKey+0x7a>
 800fc88:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	2b09      	cmp	r3, #9
 800fc8e:	d830      	bhi.n	800fcf2 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800fc90:	4a1b      	ldr	r2, [pc, #108]	; (800fd00 <SecureElementSetKey+0x80>)
 800fc92:	6811      	ldr	r1, [r2, #0]
 800fc94:	461c      	mov	r4, r3
 800fc96:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800fc9a:	440a      	add	r2, r1
 800fc9c:	7c12      	ldrb	r2, [r2, #16]
 800fc9e:	4282      	cmp	r2, r0
 800fca0:	d002      	beq.n	800fca8 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fca2:	3301      	adds	r3, #1
 800fca4:	b2db      	uxtb	r3, r3
 800fca6:	e7f1      	b.n	800fc8c <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 800fca8:	2880      	cmp	r0, #128	; 0x80
 800fcaa:	d00a      	beq.n	800fcc2 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800fcac:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800fcb0:	3310      	adds	r3, #16
 800fcb2:	440b      	add	r3, r1
 800fcb4:	2210      	movs	r2, #16
 800fcb6:	4661      	mov	r1, ip
 800fcb8:	1c58      	adds	r0, r3, #1
 800fcba:	f000 f8dc 	bl	800fe76 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800fcbe:	2500      	movs	r5, #0
 800fcc0:	e018      	b.n	800fcf4 <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	9300      	str	r3, [sp, #0]
 800fcc6:	9301      	str	r3, [sp, #4]
 800fcc8:	9302      	str	r3, [sp, #8]
 800fcca:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800fccc:	466b      	mov	r3, sp
 800fcce:	227f      	movs	r2, #127	; 0x7f
 800fcd0:	2110      	movs	r1, #16
 800fcd2:	4660      	mov	r0, ip
 800fcd4:	f7ff ff9c 	bl	800fc10 <SecureElementAesEncrypt>
 800fcd8:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800fcda:	4b09      	ldr	r3, [pc, #36]	; (800fd00 <SecureElementSetKey+0x80>)
 800fcdc:	6818      	ldr	r0, [r3, #0]
 800fcde:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800fce2:	3410      	adds	r4, #16
 800fce4:	4420      	add	r0, r4
 800fce6:	2210      	movs	r2, #16
 800fce8:	4669      	mov	r1, sp
 800fcea:	3001      	adds	r0, #1
 800fcec:	f000 f8c3 	bl	800fe76 <memcpy1>
                return retval;
 800fcf0:	e000      	b.n	800fcf4 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fcf2:	2503      	movs	r5, #3
}
 800fcf4:	4628      	mov	r0, r5
 800fcf6:	b005      	add	sp, #20
 800fcf8:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800fcfa:	2502      	movs	r5, #2
 800fcfc:	e7fa      	b.n	800fcf4 <SecureElementSetKey+0x74>
 800fcfe:	bf00      	nop
 800fd00:	20000fb8 	.word	0x20000fb8

0800fd04 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 800fd04:	b1d0      	cbz	r0, 800fd3c <SecureElementDeriveAndStoreKey+0x38>
{
 800fd06:	b510      	push	{r4, lr}
 800fd08:	b084      	sub	sp, #16
 800fd0a:	4614      	mov	r4, r2
 800fd0c:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800fd0e:	2a7f      	cmp	r2, #127	; 0x7f
 800fd10:	d101      	bne.n	800fd16 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800fd12:	2904      	cmp	r1, #4
 800fd14:	d114      	bne.n	800fd40 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800fd16:	2300      	movs	r3, #0
 800fd18:	9300      	str	r3, [sp, #0]
 800fd1a:	9301      	str	r3, [sp, #4]
 800fd1c:	9302      	str	r3, [sp, #8]
 800fd1e:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800fd20:	466b      	mov	r3, sp
 800fd22:	460a      	mov	r2, r1
 800fd24:	2110      	movs	r1, #16
 800fd26:	4660      	mov	r0, ip
 800fd28:	f7ff ff72 	bl	800fc10 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800fd2c:	b108      	cbz	r0, 800fd32 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800fd2e:	b004      	add	sp, #16
 800fd30:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 800fd32:	4669      	mov	r1, sp
 800fd34:	4620      	mov	r0, r4
 800fd36:	f7ff ffa3 	bl	800fc80 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800fd3a:	e7f8      	b.n	800fd2e <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 800fd3c:	2002      	movs	r0, #2
}
 800fd3e:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fd40:	2003      	movs	r0, #3
 800fd42:	e7f4      	b.n	800fd2e <SecureElementDeriveAndStoreKey+0x2a>

0800fd44 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800fd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd48:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800fd4c:	9d07      	ldr	r5, [sp, #28]
 800fd4e:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800fd50:	b37b      	cbz	r3, 800fdb2 <SecureElementProcessJoinAccept+0x6e>
 800fd52:	4698      	mov	r8, r3
 800fd54:	b37d      	cbz	r5, 800fdb6 <SecureElementProcessJoinAccept+0x72>
 800fd56:	b386      	cbz	r6, 800fdba <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800fd58:	2c21      	cmp	r4, #33	; 0x21
 800fd5a:	d830      	bhi.n	800fdbe <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800fd5c:	b2a7      	uxth	r7, r4
 800fd5e:	463a      	mov	r2, r7
 800fd60:	4619      	mov	r1, r3
 800fd62:	4628      	mov	r0, r5
 800fd64:	f000 f887 	bl	800fe76 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800fd68:	1e79      	subs	r1, r7, #1
 800fd6a:	1c6b      	adds	r3, r5, #1
 800fd6c:	2201      	movs	r2, #1
 800fd6e:	b289      	uxth	r1, r1
 800fd70:	eb08 0002 	add.w	r0, r8, r2
 800fd74:	f7ff ff4c 	bl	800fc10 <SecureElementAesEncrypt>
 800fd78:	bb20      	cbnz	r0, 800fdc4 <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800fd7a:	7aeb      	ldrb	r3, [r5, #11]
 800fd7c:	09db      	lsrs	r3, r3, #7
 800fd7e:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800fd80:	442c      	add	r4, r5
 800fd82:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800fd86:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 800fd8a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800fd8e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 800fd92:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800fd96:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800fd9a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800fd9e:	b99b      	cbnz	r3, 800fdc8 <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800fda0:	1f39      	subs	r1, r7, #4
 800fda2:	2301      	movs	r3, #1
 800fda4:	b289      	uxth	r1, r1
 800fda6:	4628      	mov	r0, r5
 800fda8:	f7ff ff1c 	bl	800fbe4 <SecureElementVerifyAesCmac>
 800fdac:	b140      	cbz	r0, 800fdc0 <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800fdae:	2001      	movs	r0, #1
 800fdb0:	e006      	b.n	800fdc0 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 800fdb2:	2002      	movs	r0, #2
 800fdb4:	e004      	b.n	800fdc0 <SecureElementProcessJoinAccept+0x7c>
 800fdb6:	2002      	movs	r0, #2
 800fdb8:	e002      	b.n	800fdc0 <SecureElementProcessJoinAccept+0x7c>
 800fdba:	2002      	movs	r0, #2
 800fdbc:	e000      	b.n	800fdc0 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800fdbe:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800fdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800fdc4:	2007      	movs	r0, #7
 800fdc6:	e7fb      	b.n	800fdc0 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800fdc8:	2004      	movs	r0, #4
 800fdca:	e7f9      	b.n	800fdc0 <SecureElementProcessJoinAccept+0x7c>

0800fdcc <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 800fdcc:	b140      	cbz	r0, 800fde0 <SecureElementSetDevEui+0x14>
{
 800fdce:	b508      	push	{r3, lr}
 800fdd0:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800fdd2:	2208      	movs	r2, #8
 800fdd4:	4b03      	ldr	r3, [pc, #12]	; (800fde4 <SecureElementSetDevEui+0x18>)
 800fdd6:	6818      	ldr	r0, [r3, #0]
 800fdd8:	f000 f84d 	bl	800fe76 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800fddc:	2000      	movs	r0, #0
}
 800fdde:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800fde0:	2002      	movs	r0, #2
}
 800fde2:	4770      	bx	lr
 800fde4:	20000fb8 	.word	0x20000fb8

0800fde8 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 800fde8:	4b01      	ldr	r3, [pc, #4]	; (800fdf0 <SecureElementGetDevEui+0x8>)
 800fdea:	6818      	ldr	r0, [r3, #0]
 800fdec:	4770      	bx	lr
 800fdee:	bf00      	nop
 800fdf0:	20000fb8 	.word	0x20000fb8

0800fdf4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 800fdf4:	b148      	cbz	r0, 800fe0a <SecureElementSetJoinEui+0x16>
{
 800fdf6:	b508      	push	{r3, lr}
 800fdf8:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800fdfa:	4b05      	ldr	r3, [pc, #20]	; (800fe10 <SecureElementSetJoinEui+0x1c>)
 800fdfc:	6818      	ldr	r0, [r3, #0]
 800fdfe:	2208      	movs	r2, #8
 800fe00:	4410      	add	r0, r2
 800fe02:	f000 f838 	bl	800fe76 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800fe06:	2000      	movs	r0, #0
}
 800fe08:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800fe0a:	2002      	movs	r0, #2
}
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop
 800fe10:	20000fb8 	.word	0x20000fb8

0800fe14 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 800fe14:	4b01      	ldr	r3, [pc, #4]	; (800fe1c <SecureElementGetJoinEui+0x8>)
 800fe16:	6818      	ldr	r0, [r3, #0]
}
 800fe18:	3008      	adds	r0, #8
 800fe1a:	4770      	bx	lr
 800fe1c:	20000fb8 	.word	0x20000fb8

0800fe20 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800fe20:	4b09      	ldr	r3, [pc, #36]	; (800fe48 <rand1+0x28>)
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	4909      	ldr	r1, [pc, #36]	; (800fe4c <rand1+0x2c>)
 800fe26:	f243 0039 	movw	r0, #12345	; 0x3039
 800fe2a:	fb01 0002 	mla	r0, r1, r2, r0
 800fe2e:	6018      	str	r0, [r3, #0]
 800fe30:	2303      	movs	r3, #3
 800fe32:	fba3 2300 	umull	r2, r3, r3, r0
 800fe36:	1ac2      	subs	r2, r0, r3
 800fe38:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800fe3c:	0f9b      	lsrs	r3, r3, #30
 800fe3e:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 800fe42:	1ac0      	subs	r0, r0, r3
 800fe44:	4770      	bx	lr
 800fe46:	bf00      	nop
 800fe48:	20000108 	.word	0x20000108
 800fe4c:	41c64e6d 	.word	0x41c64e6d

0800fe50 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800fe50:	4b01      	ldr	r3, [pc, #4]	; (800fe58 <srand1+0x8>)
 800fe52:	6018      	str	r0, [r3, #0]
}
 800fe54:	4770      	bx	lr
 800fe56:	bf00      	nop
 800fe58:	20000108 	.word	0x20000108

0800fe5c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800fe5c:	b538      	push	{r3, r4, r5, lr}
 800fe5e:	4605      	mov	r5, r0
 800fe60:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800fe62:	f7ff ffdd 	bl	800fe20 <rand1>
 800fe66:	1b61      	subs	r1, r4, r5
 800fe68:	3101      	adds	r1, #1
 800fe6a:	fb90 f3f1 	sdiv	r3, r0, r1
 800fe6e:	fb01 0013 	mls	r0, r1, r3, r0
}
 800fe72:	4428      	add	r0, r5
 800fe74:	bd38      	pop	{r3, r4, r5, pc}

0800fe76 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800fe76:	e004      	b.n	800fe82 <memcpy1+0xc>
    {
        *dst++ = *src++;
 800fe78:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe7c:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800fe80:	461a      	mov	r2, r3
 800fe82:	1e53      	subs	r3, r2, #1
 800fe84:	b29b      	uxth	r3, r3
 800fe86:	2a00      	cmp	r2, #0
 800fe88:	d1f6      	bne.n	800fe78 <memcpy1+0x2>
    }
}
 800fe8a:	4770      	bx	lr

0800fe8c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800fe8c:	1e53      	subs	r3, r2, #1
 800fe8e:	4418      	add	r0, r3
    while( size-- )
 800fe90:	e004      	b.n	800fe9c <memcpyr+0x10>
    {
        *dst-- = *src++;
 800fe92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe96:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 800fe9a:	461a      	mov	r2, r3
 800fe9c:	1e53      	subs	r3, r2, #1
 800fe9e:	b29b      	uxth	r3, r3
 800fea0:	2a00      	cmp	r2, #0
 800fea2:	d1f6      	bne.n	800fe92 <memcpyr+0x6>
    }
}
 800fea4:	4770      	bx	lr

0800fea6 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800fea6:	e002      	b.n	800feae <memset1+0x8>
    {
        *dst++ = value;
 800fea8:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 800feac:	461a      	mov	r2, r3
 800feae:	1e53      	subs	r3, r2, #1
 800feb0:	b29b      	uxth	r3, r3
 800feb2:	2a00      	cmp	r2, #0
 800feb4:	d1f8      	bne.n	800fea8 <memset1+0x2>
    }
}
 800feb6:	4770      	bx	lr

0800feb8 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800feb8:	b1f0      	cbz	r0, 800fef8 <Crc32+0x40>
{
 800feba:	b510      	push	{r4, lr}
 800febc:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800febe:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 800fec2:	f04f 30ff 	mov.w	r0, #4294967295
 800fec6:	e00e      	b.n	800fee6 <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800fec8:	f340 0c00 	sbfx	ip, r0, #0, #1
 800fecc:	4a0b      	ldr	r2, [pc, #44]	; (800fefc <Crc32+0x44>)
 800fece:	ea0c 0202 	and.w	r2, ip, r2
 800fed2:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800fed6:	3301      	adds	r3, #1
 800fed8:	b29b      	uxth	r3, r3
 800feda:	2b07      	cmp	r3, #7
 800fedc:	d9f4      	bls.n	800fec8 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 800fede:	f10e 0e01 	add.w	lr, lr, #1
 800fee2:	fa1f fe8e 	uxth.w	lr, lr
 800fee6:	458e      	cmp	lr, r1
 800fee8:	d204      	bcs.n	800fef4 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 800feea:	f814 300e 	ldrb.w	r3, [r4, lr]
 800feee:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 800fef0:	2300      	movs	r3, #0
 800fef2:	e7f2      	b.n	800feda <Crc32+0x22>
        }
    }

    return ~crc;
 800fef4:	43c0      	mvns	r0, r0
}
 800fef6:	bd10      	pop	{r4, pc}
        return 0;
 800fef8:	2000      	movs	r0, #0
}
 800fefa:	4770      	bx	lr
 800fefc:	edb88320 	.word	0xedb88320

0800ff00 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800ff00:	2001      	movs	r0, #1
 800ff02:	4770      	bx	lr

0800ff04 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800ff04:	280a      	cmp	r0, #10
 800ff06:	d807      	bhi.n	800ff18 <RadioGetLoRaBandwidthInHz+0x14>
 800ff08:	e8df f000 	tbb	[pc, r0]
 800ff0c:	17110b20 	.word	0x17110b20
 800ff10:	061e1c1a 	.word	0x061e1c1a
 800ff14:	0e08      	.short	0x0e08
 800ff16:	14          	.byte	0x14
 800ff17:	00          	.byte	0x00
 800ff18:	2000      	movs	r0, #0
 800ff1a:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800ff1c:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 800ff20:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800ff22:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 800ff26:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800ff28:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 800ff2c:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800ff2e:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 800ff32:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800ff34:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 800ff38:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800ff3a:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 800ff3e:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800ff40:	4804      	ldr	r0, [pc, #16]	; (800ff54 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800ff42:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800ff44:	4804      	ldr	r0, [pc, #16]	; (800ff58 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800ff46:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800ff48:	4804      	ldr	r0, [pc, #16]	; (800ff5c <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 800ff4a:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 800ff4c:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 800ff50:	4770      	bx	lr
 800ff52:	bf00      	nop
 800ff54:	0001e848 	.word	0x0001e848
 800ff58:	0003d090 	.word	0x0003d090
 800ff5c:	0007a120 	.word	0x0007a120

0800ff60 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800ff60:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800ff64:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800ff66:	b953      	cbnz	r3, 800ff7e <RadioGetGfskTimeOnAirNumerator+0x1e>
 800ff68:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 800ff6a:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800ff6c:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800ff6e:	b141      	cbz	r1, 800ff82 <RadioGetGfskTimeOnAirNumerator+0x22>
 800ff70:	2302      	movs	r3, #2
 800ff72:	f89d 0000 	ldrb.w	r0, [sp]
 800ff76:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 800ff78:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800ff7c:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800ff7e:	2000      	movs	r0, #0
 800ff80:	e7f3      	b.n	800ff6a <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800ff82:	2300      	movs	r3, #0
 800ff84:	e7f5      	b.n	800ff72 <RadioGetGfskTimeOnAirNumerator+0x12>

0800ff86 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800ff86:	b570      	push	{r4, r5, r6, lr}
 800ff88:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800ff8c:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800ff90:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800ff92:	f1a1 0c05 	sub.w	ip, r1, #5
 800ff96:	f1bc 0f01 	cmp.w	ip, #1
 800ff9a:	d932      	bls.n	8010002 <RadioGetLoRaTimeOnAirNumerator+0x7c>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800ff9c:	b918      	cbnz	r0, 800ffa6 <RadioGetLoRaTimeOnAirNumerator+0x20>
 800ff9e:	f1a1 060b 	sub.w	r6, r1, #11
 800ffa2:	2e01      	cmp	r6, #1
 800ffa4:	d935      	bls.n	8010012 <RadioGetLoRaTimeOnAirNumerator+0x8c>
 800ffa6:	2801      	cmp	r0, #1
 800ffa8:	d02f      	beq.n	801000a <RadioGetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 800ffaa:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800ffac:	f89d e014 	ldrb.w	lr, [sp, #20]
 800ffb0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800ffb4:	b38d      	cbz	r5, 801001a <RadioGetLoRaTimeOnAirNumerator+0x94>
 800ffb6:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800ffba:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 800ffbc:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800ffbe:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800ffc2:	b36c      	cbz	r4, 8010020 <RadioGetLoRaTimeOnAirNumerator+0x9a>
 800ffc4:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 800ffc8:	44f4      	add	ip, lr

    if( datarate <= 6 )
 800ffca:	2906      	cmp	r1, #6
 800ffcc:	d904      	bls.n	800ffd8 <RadioGetLoRaTimeOnAirNumerator+0x52>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800ffce:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 800ffd2:	b10e      	cbz	r6, 800ffd8 <RadioGetLoRaTimeOnAirNumerator+0x52>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800ffd4:	1e88      	subs	r0, r1, #2
 800ffd6:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800ffd8:	f1bc 0f00 	cmp.w	ip, #0
 800ffdc:	db23      	blt.n	8010026 <RadioGetLoRaTimeOnAirNumerator+0xa0>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800ffde:	4484      	add	ip, r0
 800ffe0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ffe4:	fb9c fcf0 	sdiv	ip, ip, r0
 800ffe8:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800ffec:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800fff0:	2906      	cmp	r1, #6
 800fff2:	d801      	bhi.n	800fff8 <RadioGetLoRaTimeOnAirNumerator+0x72>
    {
        intermediate += 2;
 800fff4:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800fff8:	0080      	lsls	r0, r0, #2
 800fffa:	3001      	adds	r0, #1
 800fffc:	3902      	subs	r1, #2
}
 800fffe:	4088      	lsls	r0, r1
 8010000:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8010002:	2b0b      	cmp	r3, #11
 8010004:	d8ca      	bhi.n	800ff9c <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8010006:	230c      	movs	r3, #12
 8010008:	e7c8      	b.n	800ff9c <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801000a:	290c      	cmp	r1, #12
 801000c:	d003      	beq.n	8010016 <RadioGetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 801000e:	2600      	movs	r6, #0
 8010010:	e7cc      	b.n	800ffac <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8010012:	2601      	movs	r6, #1
 8010014:	e7ca      	b.n	800ffac <RadioGetLoRaTimeOnAirNumerator+0x26>
 8010016:	2601      	movs	r6, #1
 8010018:	e7c8      	b.n	800ffac <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 801001a:	f04f 0c00 	mov.w	ip, #0
 801001e:	e7cc      	b.n	800ffba <RadioGetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 8010020:	f04f 0c14 	mov.w	ip, #20
 8010024:	e7d0      	b.n	800ffc8 <RadioGetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 8010026:	f04f 0c00 	mov.w	ip, #0
 801002a:	e7d8      	b.n	800ffde <RadioGetLoRaTimeOnAirNumerator+0x58>

0801002c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801002c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801002e:	b085      	sub	sp, #20
 8010030:	460e      	mov	r6, r1
 8010032:	4615      	mov	r5, r2
 8010034:	4619      	mov	r1, r3
 8010036:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801003a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801003e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8010042:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8010046:	b148      	cbz	r0, 801005c <RadioTimeOnAir+0x30>
 8010048:	2801      	cmp	r0, #1
 801004a:	d012      	beq.n	8010072 <RadioTimeOnAir+0x46>
 801004c:	2501      	movs	r5, #1
 801004e:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8010050:	442c      	add	r4, r5
 8010052:	1e60      	subs	r0, r4, #1
}
 8010054:	fbb0 f0f5 	udiv	r0, r0, r5
 8010058:	b005      	add	sp, #20
 801005a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801005c:	f8cd c004 	str.w	ip, [sp, #4]
 8010060:	9700      	str	r7, [sp, #0]
 8010062:	4628      	mov	r0, r5
 8010064:	f7ff ff7c 	bl	800ff60 <RadioGetGfskTimeOnAirNumerator>
 8010068:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 801006c:	fb00 f404 	mul.w	r4, r0, r4
        break;
 8010070:	e7ee      	b.n	8010050 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8010072:	f8cd c008 	str.w	ip, [sp, #8]
 8010076:	9701      	str	r7, [sp, #4]
 8010078:	9300      	str	r3, [sp, #0]
 801007a:	4613      	mov	r3, r2
 801007c:	460a      	mov	r2, r1
 801007e:	4629      	mov	r1, r5
 8010080:	4630      	mov	r0, r6
 8010082:	f7ff ff80 	bl	800ff86 <RadioGetLoRaTimeOnAirNumerator>
 8010086:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 801008a:	fb00 f404 	mul.w	r4, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801008e:	4b03      	ldr	r3, [pc, #12]	; (801009c <RadioTimeOnAir+0x70>)
 8010090:	5d98      	ldrb	r0, [r3, r6]
 8010092:	f7ff ff37 	bl	800ff04 <RadioGetLoRaBandwidthInHz>
 8010096:	4605      	mov	r5, r0
        break;
 8010098:	e7da      	b.n	8010050 <RadioTimeOnAir+0x24>
 801009a:	bf00      	nop
 801009c:	0801459c 	.word	0x0801459c

080100a0 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 80100a0:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80100a2:	4b05      	ldr	r3, [pc, #20]	; (80100b8 <RadioOnTxTimeoutProcess+0x18>)
 80100a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80100a8:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80100aa:	4b04      	ldr	r3, [pc, #16]	; (80100bc <RadioOnTxTimeoutProcess+0x1c>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	b113      	cbz	r3, 80100b6 <RadioOnTxTimeoutProcess+0x16>
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	b103      	cbz	r3, 80100b6 <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 80100b4:	4798      	blx	r3
    }
}
 80100b6:	bd08      	pop	{r3, pc}
 80100b8:	48000400 	.word	0x48000400
 80100bc:	200010bc 	.word	0x200010bc

080100c0 <RadioOnTxTimeoutIrq>:
{
 80100c0:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 80100c2:	f7ff ffed 	bl	80100a0 <RadioOnTxTimeoutProcess>
}
 80100c6:	bd08      	pop	{r3, pc}

080100c8 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80100c8:	b508      	push	{r3, lr}
 80100ca:	4b05      	ldr	r3, [pc, #20]	; (80100e0 <RadioOnRxTimeoutProcess+0x18>)
 80100cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80100d0:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80100d2:	4b04      	ldr	r3, [pc, #16]	; (80100e4 <RadioOnRxTimeoutProcess+0x1c>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	b113      	cbz	r3, 80100de <RadioOnRxTimeoutProcess+0x16>
 80100d8:	68db      	ldr	r3, [r3, #12]
 80100da:	b103      	cbz	r3, 80100de <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 80100dc:	4798      	blx	r3
    }
}
 80100de:	bd08      	pop	{r3, pc}
 80100e0:	48000400 	.word	0x48000400
 80100e4:	200010bc 	.word	0x200010bc

080100e8 <RadioOnRxTimeoutIrq>:
{
 80100e8:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 80100ea:	f7ff ffed 	bl	80100c8 <RadioOnRxTimeoutProcess>
}
 80100ee:	bd08      	pop	{r3, pc}

080100f0 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80100f0:	f04f 30ff 	mov.w	r0, #4294967295
 80100f4:	4770      	bx	lr

080100f6 <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80100f6:	f04f 30ff 	mov.w	r0, #4294967295
 80100fa:	4770      	bx	lr

080100fc <RadioTxCw>:
{
 80100fc:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80100fe:	f001 fbab 	bl	8011858 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8010102:	2101      	movs	r1, #1
 8010104:	f001 fb94 	bl	8011830 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8010108:	f000 feac 	bl	8010e64 <SUBGRF_SetTxContinuousWave>
}
 801010c:	bd08      	pop	{r3, pc}
	...

08010110 <RadioSetRxDutyCycle>:
{
 8010110:	b570      	push	{r4, r5, r6, lr}
 8010112:	4604      	mov	r4, r0
 8010114:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8010116:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 801011a:	4e09      	ldr	r6, [pc, #36]	; (8010140 <RadioSetRxDutyCycle+0x30>)
 801011c:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801011e:	2300      	movs	r3, #0
 8010120:	461a      	mov	r2, r3
 8010122:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010126:	4608      	mov	r0, r1
 8010128:	f000 ff47 	bl	8010fba <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801012c:	2100      	movs	r1, #0
 801012e:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8010132:	f001 fb7d 	bl	8011830 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8010136:	4629      	mov	r1, r5
 8010138:	4620      	mov	r0, r4
 801013a:	f000 fe63 	bl	8010e04 <SUBGRF_SetRxDutyCycle>
}
 801013e:	bd70      	pop	{r4, r5, r6, pc}
 8010140:	200010d8 	.word	0x200010d8

08010144 <RadioRxBoosted>:
{
 8010144:	b538      	push	{r3, r4, r5, lr}
 8010146:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8010148:	f001 fc57 	bl	80119fa <RFW_Is_Init>
 801014c:	2801      	cmp	r0, #1
 801014e:	d019      	beq.n	8010184 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8010150:	2300      	movs	r3, #0
 8010152:	461a      	mov	r2, r3
 8010154:	f240 2162 	movw	r1, #610	; 0x262
 8010158:	4608      	mov	r0, r1
 801015a:	f000 ff2e 	bl	8010fba <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 801015e:	b9a4      	cbnz	r4, 801018a <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8010160:	4c11      	ldr	r4, [pc, #68]	; (80101a8 <RadioRxBoosted+0x64>)
 8010162:	2100      	movs	r1, #0
 8010164:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8010166:	4b11      	ldr	r3, [pc, #68]	; (80101ac <RadioRxBoosted+0x68>)
 8010168:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801016c:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801016e:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8010172:	f001 fb5d 	bl	8011830 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8010176:	7863      	ldrb	r3, [r4, #1]
 8010178:	b183      	cbz	r3, 801019c <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801017a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801017e:	f000 ffef 	bl	8011160 <SUBGRF_SetRxBoosted>
}
 8010182:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8010184:	f001 fc41 	bl	8011a0a <RFW_ReceiveInit>
 8010188:	e7e9      	b.n	801015e <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 801018a:	4d09      	ldr	r5, [pc, #36]	; (80101b0 <RadioRxBoosted+0x6c>)
 801018c:	4621      	mov	r1, r4
 801018e:	4628      	mov	r0, r5
 8010190:	f002 f90e 	bl	80123b0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8010194:	4628      	mov	r0, r5
 8010196:	f002 f8c5 	bl	8012324 <UTIL_TIMER_Start>
 801019a:	e7e1      	b.n	8010160 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801019c:	4b02      	ldr	r3, [pc, #8]	; (80101a8 <RadioRxBoosted+0x64>)
 801019e:	6898      	ldr	r0, [r3, #8]
 80101a0:	0180      	lsls	r0, r0, #6
 80101a2:	f000 ffdd 	bl	8011160 <SUBGRF_SetRxBoosted>
}
 80101a6:	e7ec      	b.n	8010182 <RadioRxBoosted+0x3e>
 80101a8:	200010d8 	.word	0x200010d8
 80101ac:	48000400 	.word	0x48000400
 80101b0:	200010c0 	.word	0x200010c0

080101b4 <RadioStandby>:
{
 80101b4:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 80101b6:	2000      	movs	r0, #0
 80101b8:	f000 fdd6 	bl	8010d68 <SUBGRF_SetStandby>
}
 80101bc:	bd08      	pop	{r3, pc}

080101be <RadioWrite>:
{
 80101be:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 80101c0:	f000 ffbe 	bl	8011140 <SUBGRF_WriteRegister>
}
 80101c4:	bd08      	pop	{r3, pc}
	...

080101c8 <RadioTxPrbs>:
{
 80101c8:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80101ca:	2101      	movs	r1, #1
 80101cc:	4b07      	ldr	r3, [pc, #28]	; (80101ec <RadioTxPrbs+0x24>)
 80101ce:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80101d2:	f001 fb2d 	bl	8011830 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80101d6:	212d      	movs	r1, #45	; 0x2d
 80101d8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80101dc:	f7ff ffef 	bl	80101be <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 80101e0:	f000 fe47 	bl	8010e72 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80101e4:	4802      	ldr	r0, [pc, #8]	; (80101f0 <RadioTxPrbs+0x28>)
 80101e6:	f000 fdd9 	bl	8010d9c <SUBGRF_SetTx>
}
 80101ea:	bd08      	pop	{r3, pc}
 80101ec:	200010d8 	.word	0x200010d8
 80101f0:	000fffff 	.word	0x000fffff

080101f4 <RadioRead>:
{
 80101f4:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 80101f6:	f001 f895 	bl	8011324 <SUBGRF_ReadRegister>
}
 80101fa:	bd08      	pop	{r3, pc}

080101fc <RadioGetStatus>:
{
 80101fc:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 80101fe:	f000 fdad 	bl	8010d5c <SUBGRF_GetOperatingMode>
 8010202:	2805      	cmp	r0, #5
 8010204:	d007      	beq.n	8010216 <RadioGetStatus+0x1a>
 8010206:	2807      	cmp	r0, #7
 8010208:	d007      	beq.n	801021a <RadioGetStatus+0x1e>
 801020a:	2804      	cmp	r0, #4
 801020c:	d001      	beq.n	8010212 <RadioGetStatus+0x16>
            return RF_IDLE;
 801020e:	2000      	movs	r0, #0
}
 8010210:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 8010212:	2002      	movs	r0, #2
 8010214:	e7fc      	b.n	8010210 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 8010216:	2001      	movs	r0, #1
 8010218:	e7fa      	b.n	8010210 <RadioGetStatus+0x14>
            return RF_CAD;
 801021a:	2003      	movs	r0, #3
 801021c:	e7f8      	b.n	8010210 <RadioGetStatus+0x14>
	...

08010220 <RadioIrqProcess>:
{
 8010220:	b530      	push	{r4, r5, lr}
 8010222:	b083      	sub	sp, #12
    uint8_t size = 0;
 8010224:	2300      	movs	r3, #0
 8010226:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 801022a:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 801022c:	4ba5      	ldr	r3, [pc, #660]	; (80104c4 <RadioIrqProcess+0x2a4>)
 801022e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8010232:	2b20      	cmp	r3, #32
 8010234:	d829      	bhi.n	801028a <RadioIrqProcess+0x6a>
 8010236:	b21a      	sxth	r2, r3
 8010238:	2a00      	cmp	r2, #0
 801023a:	f000 8140 	beq.w	80104be <RadioIrqProcess+0x29e>
 801023e:	3b01      	subs	r3, #1
 8010240:	2b1f      	cmp	r3, #31
 8010242:	f200 813c 	bhi.w	80104be <RadioIrqProcess+0x29e>
 8010246:	e8df f013 	tbh	[pc, r3, lsl #1]
 801024a:	0063      	.short	0x0063
 801024c:	013a007f 	.word	0x013a007f
 8010250:	013a00f7 	.word	0x013a00f7
 8010254:	013a013a 	.word	0x013a013a
 8010258:	013a0127 	.word	0x013a0127
 801025c:	013a013a 	.word	0x013a013a
 8010260:	013a013a 	.word	0x013a013a
 8010264:	013a013a 	.word	0x013a013a
 8010268:	013a0134 	.word	0x013a0134
 801026c:	013a013a 	.word	0x013a013a
 8010270:	013a013a 	.word	0x013a013a
 8010274:	013a013a 	.word	0x013a013a
 8010278:	013a013a 	.word	0x013a013a
 801027c:	013a013a 	.word	0x013a013a
 8010280:	013a013a 	.word	0x013a013a
 8010284:	013a013a 	.word	0x013a013a
 8010288:	0155      	.short	0x0155
 801028a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801028e:	f000 80b3 	beq.w	80103f8 <RadioIrqProcess+0x1d8>
 8010292:	d928      	bls.n	80102e6 <RadioIrqProcess+0xc6>
 8010294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010298:	f040 8111 	bne.w	80104be <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801029c:	4b8a      	ldr	r3, [pc, #552]	; (80104c8 <RadioIrqProcess+0x2a8>)
 801029e:	2201      	movs	r2, #1
 80102a0:	2100      	movs	r1, #0
 80102a2:	2002      	movs	r0, #2
 80102a4:	f001 fc90 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80102a8:	f000 fd58 	bl	8010d5c <SUBGRF_GetOperatingMode>
 80102ac:	2804      	cmp	r0, #4
 80102ae:	f000 80b0 	beq.w	8010412 <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80102b2:	f000 fd53 	bl	8010d5c <SUBGRF_GetOperatingMode>
 80102b6:	2805      	cmp	r0, #5
 80102b8:	f040 8101 	bne.w	80104be <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 80102bc:	4b83      	ldr	r3, [pc, #524]	; (80104cc <RadioIrqProcess+0x2ac>)
 80102be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80102c2:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 80102c4:	4882      	ldr	r0, [pc, #520]	; (80104d0 <RadioIrqProcess+0x2b0>)
 80102c6:	f001 ffd3 	bl	8012270 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80102ca:	2000      	movs	r0, #0
 80102cc:	f000 fd4c 	bl	8010d68 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80102d0:	4b80      	ldr	r3, [pc, #512]	; (80104d4 <RadioIrqProcess+0x2b4>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	f000 80f2 	beq.w	80104be <RadioIrqProcess+0x29e>
 80102da:	68db      	ldr	r3, [r3, #12]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	f000 80ee 	beq.w	80104be <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 80102e2:	4798      	blx	r3
 80102e4:	e0eb      	b.n	80104be <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 80102e6:	2b40      	cmp	r3, #64	; 0x40
 80102e8:	f000 811d 	beq.w	8010526 <RadioIrqProcess+0x306>
 80102ec:	2b80      	cmp	r3, #128	; 0x80
 80102ee:	f040 80e6 	bne.w	80104be <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 80102f2:	2000      	movs	r0, #0
 80102f4:	f000 fd38 	bl	8010d68 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80102f8:	4b76      	ldr	r3, [pc, #472]	; (80104d4 <RadioIrqProcess+0x2b4>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	f000 80de 	beq.w	80104be <RadioIrqProcess+0x29e>
 8010302:	699b      	ldr	r3, [r3, #24]
 8010304:	2b00      	cmp	r3, #0
 8010306:	f000 80da 	beq.w	80104be <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 801030a:	2000      	movs	r0, #0
 801030c:	4798      	blx	r3
 801030e:	e0d6      	b.n	80104be <RadioIrqProcess+0x29e>
 8010310:	4b6e      	ldr	r3, [pc, #440]	; (80104cc <RadioIrqProcess+0x2ac>)
 8010312:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010316:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 8010318:	486f      	ldr	r0, [pc, #444]	; (80104d8 <RadioIrqProcess+0x2b8>)
 801031a:	f001 ffa9 	bl	8012270 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801031e:	2000      	movs	r0, #0
 8010320:	f000 fd22 	bl	8010d68 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8010324:	f001 fb6b 	bl	80119fe <RFW_Is_LongPacketModeEnabled>
 8010328:	2801      	cmp	r0, #1
 801032a:	d00a      	beq.n	8010342 <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801032c:	4b69      	ldr	r3, [pc, #420]	; (80104d4 <RadioIrqProcess+0x2b4>)
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	2b00      	cmp	r3, #0
 8010332:	f000 80c4 	beq.w	80104be <RadioIrqProcess+0x29e>
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	f000 80c0 	beq.w	80104be <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 801033e:	4798      	blx	r3
 8010340:	e0bd      	b.n	80104be <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 8010342:	f001 fb65 	bl	8011a10 <RFW_DeInit_TxLongPacket>
 8010346:	e7f1      	b.n	801032c <RadioIrqProcess+0x10c>
 8010348:	4b60      	ldr	r3, [pc, #384]	; (80104cc <RadioIrqProcess+0x2ac>)
 801034a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801034e:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 8010350:	485f      	ldr	r0, [pc, #380]	; (80104d0 <RadioIrqProcess+0x2b0>)
 8010352:	f001 ff8d 	bl	8012270 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8010356:	4b5b      	ldr	r3, [pc, #364]	; (80104c4 <RadioIrqProcess+0x2a4>)
 8010358:	785b      	ldrb	r3, [r3, #1]
 801035a:	b303      	cbz	r3, 801039e <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801035c:	22ff      	movs	r2, #255	; 0xff
 801035e:	f10d 0107 	add.w	r1, sp, #7
 8010362:	485e      	ldr	r0, [pc, #376]	; (80104dc <RadioIrqProcess+0x2bc>)
 8010364:	f001 fa4a 	bl	80117fc <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8010368:	485d      	ldr	r0, [pc, #372]	; (80104e0 <RadioIrqProcess+0x2c0>)
 801036a:	f000 fead 	bl	80110c8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801036e:	4b59      	ldr	r3, [pc, #356]	; (80104d4 <RadioIrqProcess+0x2b4>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	2b00      	cmp	r3, #0
 8010374:	f000 80a3 	beq.w	80104be <RadioIrqProcess+0x29e>
 8010378:	689c      	ldr	r4, [r3, #8]
 801037a:	2c00      	cmp	r4, #0
 801037c:	f000 809f 	beq.w	80104be <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8010380:	4b50      	ldr	r3, [pc, #320]	; (80104c4 <RadioIrqProcess+0x2a4>)
 8010382:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010386:	2b01      	cmp	r3, #1
 8010388:	d11d      	bne.n	80103c6 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801038a:	4a4e      	ldr	r2, [pc, #312]	; (80104c4 <RadioIrqProcess+0x2a4>)
 801038c:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 8010390:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8010394:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010398:	4850      	ldr	r0, [pc, #320]	; (80104dc <RadioIrqProcess+0x2bc>)
 801039a:	47a0      	blx	r4
                break;
 801039c:	e08f      	b.n	80104be <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 801039e:	2000      	movs	r0, #0
 80103a0:	f000 fce2 	bl	8010d68 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80103a4:	2100      	movs	r1, #0
 80103a6:	f640 1002 	movw	r0, #2306	; 0x902
 80103aa:	f000 fec9 	bl	8011140 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80103ae:	f640 1044 	movw	r0, #2372	; 0x944
 80103b2:	f000 ffb7 	bl	8011324 <SUBGRF_ReadRegister>
 80103b6:	f040 0102 	orr.w	r1, r0, #2
 80103ba:	b2c9      	uxtb	r1, r1
 80103bc:	f640 1044 	movw	r0, #2372	; 0x944
 80103c0:	f000 febe 	bl	8011140 <SUBGRF_WriteRegister>
 80103c4:	e7ca      	b.n	801035c <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80103c6:	4c3f      	ldr	r4, [pc, #252]	; (80104c4 <RadioIrqProcess+0x2a4>)
 80103c8:	4669      	mov	r1, sp
 80103ca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80103cc:	f001 faca 	bl	8011964 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80103d0:	4b40      	ldr	r3, [pc, #256]	; (80104d4 <RadioIrqProcess+0x2b4>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	689d      	ldr	r5, [r3, #8]
 80103d6:	9b00      	ldr	r3, [sp, #0]
 80103d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80103dc:	4a41      	ldr	r2, [pc, #260]	; (80104e4 <RadioIrqProcess+0x2c4>)
 80103de:	fb82 1203 	smull	r1, r2, r2, r3
 80103e2:	17db      	asrs	r3, r3, #31
 80103e4:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 80103e8:	b25b      	sxtb	r3, r3
 80103ea:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 80103ee:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80103f2:	483a      	ldr	r0, [pc, #232]	; (80104dc <RadioIrqProcess+0x2bc>)
 80103f4:	47a8      	blx	r5
                break;
 80103f6:	e062      	b.n	80104be <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 80103f8:	2000      	movs	r0, #0
 80103fa:	f000 fcb5 	bl	8010d68 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80103fe:	4b35      	ldr	r3, [pc, #212]	; (80104d4 <RadioIrqProcess+0x2b4>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d05b      	beq.n	80104be <RadioIrqProcess+0x29e>
 8010406:	699b      	ldr	r3, [r3, #24]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d058      	beq.n	80104be <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 801040c:	2001      	movs	r0, #1
 801040e:	4798      	blx	r3
 8010410:	e055      	b.n	80104be <RadioIrqProcess+0x29e>
 8010412:	4b2e      	ldr	r3, [pc, #184]	; (80104cc <RadioIrqProcess+0x2ac>)
 8010414:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010418:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 801041a:	482f      	ldr	r0, [pc, #188]	; (80104d8 <RadioIrqProcess+0x2b8>)
 801041c:	f001 ff28 	bl	8012270 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8010420:	2000      	movs	r0, #0
 8010422:	f000 fca1 	bl	8010d68 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8010426:	4b2b      	ldr	r3, [pc, #172]	; (80104d4 <RadioIrqProcess+0x2b4>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d047      	beq.n	80104be <RadioIrqProcess+0x29e>
 801042e:	685b      	ldr	r3, [r3, #4]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d044      	beq.n	80104be <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 8010434:	4798      	blx	r3
 8010436:	e042      	b.n	80104be <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8010438:	4b2b      	ldr	r3, [pc, #172]	; (80104e8 <RadioIrqProcess+0x2c8>)
 801043a:	2201      	movs	r2, #1
 801043c:	2100      	movs	r1, #0
 801043e:	2002      	movs	r0, #2
 8010440:	f001 fbc2 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8010444:	4b1f      	ldr	r3, [pc, #124]	; (80104c4 <RadioIrqProcess+0x2a4>)
 8010446:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010448:	b3c9      	cbz	r1, 80104be <RadioIrqProcess+0x29e>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 801044a:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801044e:	f640 1003 	movw	r0, #2307	; 0x903
 8010452:	f7ff feb4 	bl	80101be <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8010456:	4c1b      	ldr	r4, [pc, #108]	; (80104c4 <RadioIrqProcess+0x2a4>)
 8010458:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801045c:	f640 1004 	movw	r0, #2308	; 0x904
 8010460:	f7ff fead 	bl	80101be <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8010464:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8010468:	f640 1005 	movw	r0, #2309	; 0x905
 801046c:	f7ff fea7 	bl	80101be <RadioWrite>
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8010470:	f640 1002 	movw	r0, #2306	; 0x902
 8010474:	f7ff febe 	bl	80101f4 <RadioRead>
 8010478:	f040 0101 	orr.w	r1, r0, #1
 801047c:	b2c9      	uxtb	r1, r1
 801047e:	f640 1002 	movw	r0, #2306	; 0x902
 8010482:	f7ff fe9c 	bl	80101be <RadioWrite>
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8010486:	2200      	movs	r2, #0
 8010488:	65a2      	str	r2, [r4, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801048a:	4613      	mov	r3, r2
 801048c:	f240 2162 	movw	r1, #610	; 0x262
 8010490:	4608      	mov	r0, r1
 8010492:	f000 fd92 	bl	8010fba <SUBGRF_SetDioIrqParams>
 8010496:	e012      	b.n	80104be <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8010498:	4b14      	ldr	r3, [pc, #80]	; (80104ec <RadioIrqProcess+0x2cc>)
 801049a:	2201      	movs	r2, #1
 801049c:	2100      	movs	r1, #0
 801049e:	2002      	movs	r0, #2
 80104a0:	f001 fb92 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80104a4:	f001 faa9 	bl	80119fa <RFW_Is_Init>
 80104a8:	2801      	cmp	r0, #1
 80104aa:	d108      	bne.n	80104be <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 80104ac:	f001 fab1 	bl	8011a12 <RFW_ReceivePayload>
 80104b0:	e005      	b.n	80104be <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80104b2:	4b0f      	ldr	r3, [pc, #60]	; (80104f0 <RadioIrqProcess+0x2d0>)
 80104b4:	2201      	movs	r2, #1
 80104b6:	2100      	movs	r1, #0
 80104b8:	2002      	movs	r0, #2
 80104ba:	f001 fb85 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
}
 80104be:	b003      	add	sp, #12
 80104c0:	bd30      	pop	{r4, r5, pc}
 80104c2:	bf00      	nop
 80104c4:	200010d8 	.word	0x200010d8
 80104c8:	08014530 	.word	0x08014530
 80104cc:	48000400 	.word	0x48000400
 80104d0:	200010c0 	.word	0x200010c0
 80104d4:	200010bc 	.word	0x200010bc
 80104d8:	20001134 	.word	0x20001134
 80104dc:	20000fbc 	.word	0x20000fbc
 80104e0:	200010fc 	.word	0x200010fc
 80104e4:	10624dd3 	.word	0x10624dd3
 80104e8:	08014544 	.word	0x08014544
 80104ec:	08014550 	.word	0x08014550
 80104f0:	0801455c 	.word	0x0801455c
        TimerStop( &RxTimeoutTimer );
 80104f4:	4817      	ldr	r0, [pc, #92]	; (8010554 <RadioIrqProcess+0x334>)
 80104f6:	f001 febb 	bl	8012270 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80104fa:	4b17      	ldr	r3, [pc, #92]	; (8010558 <RadioIrqProcess+0x338>)
 80104fc:	785b      	ldrb	r3, [r3, #1]
 80104fe:	b173      	cbz	r3, 801051e <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8010500:	4b16      	ldr	r3, [pc, #88]	; (801055c <RadioIrqProcess+0x33c>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d0da      	beq.n	80104be <RadioIrqProcess+0x29e>
 8010508:	68db      	ldr	r3, [r3, #12]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d0d7      	beq.n	80104be <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 801050e:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8010510:	4b13      	ldr	r3, [pc, #76]	; (8010560 <RadioIrqProcess+0x340>)
 8010512:	2201      	movs	r2, #1
 8010514:	2100      	movs	r1, #0
 8010516:	2002      	movs	r0, #2
 8010518:	f001 fb56 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
 801051c:	e7cf      	b.n	80104be <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 801051e:	2000      	movs	r0, #0
 8010520:	f000 fc22 	bl	8010d68 <SUBGRF_SetStandby>
 8010524:	e7ec      	b.n	8010500 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8010526:	4b0f      	ldr	r3, [pc, #60]	; (8010564 <RadioIrqProcess+0x344>)
 8010528:	2201      	movs	r2, #1
 801052a:	2100      	movs	r1, #0
 801052c:	2002      	movs	r0, #2
 801052e:	f001 fb4b 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8010532:	4b09      	ldr	r3, [pc, #36]	; (8010558 <RadioIrqProcess+0x338>)
 8010534:	785b      	ldrb	r3, [r3, #1]
 8010536:	b143      	cbz	r3, 801054a <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8010538:	4b08      	ldr	r3, [pc, #32]	; (801055c <RadioIrqProcess+0x33c>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d0be      	beq.n	80104be <RadioIrqProcess+0x29e>
 8010540:	691b      	ldr	r3, [r3, #16]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d0bb      	beq.n	80104be <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 8010546:	4798      	blx	r3
}
 8010548:	e7b9      	b.n	80104be <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 801054a:	2000      	movs	r0, #0
 801054c:	f000 fc0c 	bl	8010d68 <SUBGRF_SetStandby>
 8010550:	e7f2      	b.n	8010538 <RadioIrqProcess+0x318>
 8010552:	bf00      	nop
 8010554:	200010c0 	.word	0x200010c0
 8010558:	200010d8 	.word	0x200010d8
 801055c:	200010bc 	.word	0x200010bc
 8010560:	08014568 	.word	0x08014568
 8010564:	08014574 	.word	0x08014574

08010568 <RadioOnDioIrq>:
{
 8010568:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 801056a:	4b03      	ldr	r3, [pc, #12]	; (8010578 <RadioOnDioIrq+0x10>)
 801056c:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8010570:	f7ff fe56 	bl	8010220 <RadioIrqProcess>
}
 8010574:	bd08      	pop	{r3, pc}
 8010576:	bf00      	nop
 8010578:	200010d8 	.word	0x200010d8

0801057c <RadioGetWakeupTime>:
{
 801057c:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801057e:	f001 f982 	bl	8011886 <SUBGRF_GetRadioWakeUpTime>
}
 8010582:	3003      	adds	r0, #3
 8010584:	bd08      	pop	{r3, pc}
	...

08010588 <RadioSetMaxPayloadLength>:
{
 8010588:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 801058a:	2801      	cmp	r0, #1
 801058c:	d004      	beq.n	8010598 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801058e:	4b0a      	ldr	r3, [pc, #40]	; (80105b8 <RadioSetMaxPayloadLength+0x30>)
 8010590:	7d5b      	ldrb	r3, [r3, #21]
 8010592:	2b01      	cmp	r3, #1
 8010594:	d008      	beq.n	80105a8 <RadioSetMaxPayloadLength+0x20>
}
 8010596:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8010598:	4b08      	ldr	r3, [pc, #32]	; (80105bc <RadioSetMaxPayloadLength+0x34>)
 801059a:	7019      	strb	r1, [r3, #0]
 801059c:	4806      	ldr	r0, [pc, #24]	; (80105b8 <RadioSetMaxPayloadLength+0x30>)
 801059e:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80105a0:	300e      	adds	r0, #14
 80105a2:	f001 f843 	bl	801162c <SUBGRF_SetPacketParams>
 80105a6:	e7f6      	b.n	8010596 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80105a8:	4b04      	ldr	r3, [pc, #16]	; (80105bc <RadioSetMaxPayloadLength+0x34>)
 80105aa:	7019      	strb	r1, [r3, #0]
 80105ac:	4802      	ldr	r0, [pc, #8]	; (80105b8 <RadioSetMaxPayloadLength+0x30>)
 80105ae:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80105b0:	300e      	adds	r0, #14
 80105b2:	f001 f83b 	bl	801162c <SUBGRF_SetPacketParams>
}
 80105b6:	e7ee      	b.n	8010596 <RadioSetMaxPayloadLength+0xe>
 80105b8:	200010d8 	.word	0x200010d8
 80105bc:	2000010c 	.word	0x2000010c

080105c0 <RadioReadRegisters>:
{
 80105c0:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 80105c2:	f001 f8a5 	bl	8011710 <SUBGRF_ReadRegisters>
}
 80105c6:	bd08      	pop	{r3, pc}

080105c8 <RadioWriteRegisters>:
{
 80105c8:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 80105ca:	f000 ffed 	bl	80115a8 <SUBGRF_WriteRegisters>
}
 80105ce:	bd08      	pop	{r3, pc}

080105d0 <RadioRssi>:
{
 80105d0:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 80105d2:	f000 fd6b 	bl	80110ac <SUBGRF_GetRssiInst>
}
 80105d6:	b200      	sxth	r0, r0
 80105d8:	bd08      	pop	{r3, pc}
	...

080105dc <RadioSetTxContinuousWave>:
{
 80105dc:	b538      	push	{r3, r4, r5, lr}
 80105de:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 80105e0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80105e4:	fb02 f404 	mul.w	r4, r2, r4
    SUBGRF_SetRfFrequency( freq );
 80105e8:	f000 fd20 	bl	801102c <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 80105ec:	4628      	mov	r0, r5
 80105ee:	f001 f933 	bl	8011858 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80105f2:	2101      	movs	r1, #1
 80105f4:	f001 f91c 	bl	8011830 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80105f8:	f000 fc34 	bl	8010e64 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80105fc:	4d04      	ldr	r5, [pc, #16]	; (8010610 <RadioSetTxContinuousWave+0x34>)
 80105fe:	4621      	mov	r1, r4
 8010600:	4628      	mov	r0, r5
 8010602:	f001 fed5 	bl	80123b0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8010606:	4628      	mov	r0, r5
 8010608:	f001 fe8c 	bl	8012324 <UTIL_TIMER_Start>
}
 801060c:	bd38      	pop	{r3, r4, r5, pc}
 801060e:	bf00      	nop
 8010610:	20001134 	.word	0x20001134

08010614 <RadioSetChannel>:
{
 8010614:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8010616:	f000 fd09 	bl	801102c <SUBGRF_SetRfFrequency>
}
 801061a:	bd08      	pop	{r3, pc}

0801061c <RadioStartCad>:
{
 801061c:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801061e:	2100      	movs	r1, #0
 8010620:	4b07      	ldr	r3, [pc, #28]	; (8010640 <RadioStartCad+0x24>)
 8010622:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8010626:	f001 f903 	bl	8011830 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801062a:	2300      	movs	r3, #0
 801062c:	461a      	mov	r2, r3
 801062e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8010632:	4608      	mov	r0, r1
 8010634:	f000 fcc1 	bl	8010fba <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8010638:	f000 fc08 	bl	8010e4c <SUBGRF_SetCad>
}
 801063c:	bd08      	pop	{r3, pc}
 801063e:	bf00      	nop
 8010640:	200010d8 	.word	0x200010d8

08010644 <RadioRx>:
{
 8010644:	b538      	push	{r3, r4, r5, lr}
 8010646:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8010648:	f001 f9d7 	bl	80119fa <RFW_Is_Init>
 801064c:	2801      	cmp	r0, #1
 801064e:	d019      	beq.n	8010684 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8010650:	2300      	movs	r3, #0
 8010652:	461a      	mov	r2, r3
 8010654:	f240 2162 	movw	r1, #610	; 0x262
 8010658:	4608      	mov	r0, r1
 801065a:	f000 fcae 	bl	8010fba <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 801065e:	b9a4      	cbnz	r4, 801068a <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8010660:	4c11      	ldr	r4, [pc, #68]	; (80106a8 <RadioRx+0x64>)
 8010662:	2100      	movs	r1, #0
 8010664:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8010666:	4b11      	ldr	r3, [pc, #68]	; (80106ac <RadioRx+0x68>)
 8010668:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801066c:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801066e:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8010672:	f001 f8dd 	bl	8011830 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8010676:	7863      	ldrb	r3, [r4, #1]
 8010678:	b183      	cbz	r3, 801069c <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801067a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801067e:	f000 fba7 	bl	8010dd0 <SUBGRF_SetRx>
}
 8010682:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8010684:	f001 f9c1 	bl	8011a0a <RFW_ReceiveInit>
 8010688:	e7e9      	b.n	801065e <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 801068a:	4d09      	ldr	r5, [pc, #36]	; (80106b0 <RadioRx+0x6c>)
 801068c:	4621      	mov	r1, r4
 801068e:	4628      	mov	r0, r5
 8010690:	f001 fe8e 	bl	80123b0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8010694:	4628      	mov	r0, r5
 8010696:	f001 fe45 	bl	8012324 <UTIL_TIMER_Start>
 801069a:	e7e1      	b.n	8010660 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801069c:	4b02      	ldr	r3, [pc, #8]	; (80106a8 <RadioRx+0x64>)
 801069e:	6898      	ldr	r0, [r3, #8]
 80106a0:	0180      	lsls	r0, r0, #6
 80106a2:	f000 fb95 	bl	8010dd0 <SUBGRF_SetRx>
}
 80106a6:	e7ec      	b.n	8010682 <RadioRx+0x3e>
 80106a8:	200010d8 	.word	0x200010d8
 80106ac:	48000400 	.word	0x48000400
 80106b0:	200010c0 	.word	0x200010c0

080106b4 <RadioSleep>:
{
 80106b4:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 80106b6:	f04f 0004 	mov.w	r0, #4
 80106ba:	f000 fe8d 	bl	80113d8 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 80106be:	2002      	movs	r0, #2
 80106c0:	f7f1 fa1a 	bl	8001af8 <HAL_Delay>
}
 80106c4:	bd08      	pop	{r3, pc}
	...

080106c8 <RadioSend>:
{
 80106c8:	b570      	push	{r4, r5, r6, lr}
 80106ca:	b082      	sub	sp, #8
 80106cc:	4605      	mov	r5, r0
 80106ce:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80106d0:	2300      	movs	r3, #0
 80106d2:	461a      	mov	r2, r3
 80106d4:	f240 2101 	movw	r1, #513	; 0x201
 80106d8:	4608      	mov	r0, r1
 80106da:	f000 fc6e 	bl	8010fba <SUBGRF_SetDioIrqParams>
 80106de:	4b3e      	ldr	r3, [pc, #248]	; (80107d8 <RadioSend+0x110>)
 80106e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80106e4:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80106e6:	4e3d      	ldr	r6, [pc, #244]	; (80107dc <RadioSend+0x114>)
 80106e8:	2101      	movs	r1, #1
 80106ea:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 80106ee:	f001 f89f 	bl	8011830 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80106f2:	7833      	ldrb	r3, [r6, #0]
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	d103      	bne.n	8010700 <RadioSend+0x38>
 80106f8:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 80106fc:	2b06      	cmp	r3, #6
 80106fe:	d012      	beq.n	8010726 <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8010700:	f640 0089 	movw	r0, #2185	; 0x889
 8010704:	f000 fe0e 	bl	8011324 <SUBGRF_ReadRegister>
 8010708:	f040 0104 	orr.w	r1, r0, #4
 801070c:	b2c9      	uxtb	r1, r1
 801070e:	f640 0089 	movw	r0, #2185	; 0x889
 8010712:	f000 fd15 	bl	8011140 <SUBGRF_WriteRegister>
    switch( SubgRf.Modem )
 8010716:	4b31      	ldr	r3, [pc, #196]	; (80107dc <RadioSend+0x114>)
 8010718:	781b      	ldrb	r3, [r3, #0]
 801071a:	2b03      	cmp	r3, #3
 801071c:	d818      	bhi.n	8010750 <RadioSend+0x88>
 801071e:	e8df f003 	tbb	[pc, r3]
 8010722:	0d22      	.short	0x0d22
 8010724:	4d22      	.short	0x4d22
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8010726:	f640 0089 	movw	r0, #2185	; 0x889
 801072a:	f000 fdfb 	bl	8011324 <SUBGRF_ReadRegister>
 801072e:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8010732:	f640 0089 	movw	r0, #2185	; 0x889
 8010736:	f000 fd03 	bl	8011140 <SUBGRF_WriteRegister>
 801073a:	e7ec      	b.n	8010716 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801073c:	4827      	ldr	r0, [pc, #156]	; (80107dc <RadioSend+0x114>)
 801073e:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010740:	300e      	adds	r0, #14
 8010742:	f000 ff73 	bl	801162c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8010746:	2200      	movs	r2, #0
 8010748:	4621      	mov	r1, r4
 801074a:	4628      	mov	r0, r5
 801074c:	f001 f83d 	bl	80117ca <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8010750:	4c23      	ldr	r4, [pc, #140]	; (80107e0 <RadioSend+0x118>)
 8010752:	4b22      	ldr	r3, [pc, #136]	; (80107dc <RadioSend+0x114>)
 8010754:	6859      	ldr	r1, [r3, #4]
 8010756:	4620      	mov	r0, r4
 8010758:	f001 fe2a 	bl	80123b0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801075c:	4620      	mov	r0, r4
 801075e:	f001 fde1 	bl	8012324 <UTIL_TIMER_Start>
}
 8010762:	b002      	add	sp, #8
 8010764:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8010766:	f001 f948 	bl	80119fa <RFW_Is_Init>
 801076a:	2801      	cmp	r0, #1
 801076c:	d00a      	beq.n	8010784 <RadioSend+0xbc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801076e:	481b      	ldr	r0, [pc, #108]	; (80107dc <RadioSend+0x114>)
 8010770:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010772:	300e      	adds	r0, #14
 8010774:	f000 ff5a 	bl	801162c <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8010778:	2200      	movs	r2, #0
 801077a:	4621      	mov	r1, r4
 801077c:	4628      	mov	r0, r5
 801077e:	f001 f824 	bl	80117ca <SUBGRF_SendPayload>
 8010782:	e7e5      	b.n	8010750 <RadioSend+0x88>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8010784:	f10d 0207 	add.w	r2, sp, #7
 8010788:	4621      	mov	r1, r4
 801078a:	4628      	mov	r0, r5
 801078c:	f001 f93a 	bl	8011a04 <RFW_TransmitInit>
 8010790:	b968      	cbnz	r0, 80107ae <RadioSend+0xe6>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8010792:	4812      	ldr	r0, [pc, #72]	; (80107dc <RadioSend+0x114>)
 8010794:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010798:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801079a:	300e      	adds	r0, #14
 801079c:	f000 ff46 	bl	801162c <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 80107a0:	2200      	movs	r2, #0
 80107a2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80107a6:	4628      	mov	r0, r5
 80107a8:	f001 f80f 	bl	80117ca <SUBGRF_SendPayload>
 80107ac:	e7d0      	b.n	8010750 <RadioSend+0x88>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 80107ae:	4b0d      	ldr	r3, [pc, #52]	; (80107e4 <RadioSend+0x11c>)
 80107b0:	2201      	movs	r2, #1
 80107b2:	2100      	movs	r1, #0
 80107b4:	2002      	movs	r0, #2
 80107b6:	f001 fa07 	bl	8011bc8 <UTIL_ADV_TRACE_COND_FSend>
                return;
 80107ba:	e7d2      	b.n	8010762 <RadioSend+0x9a>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80107bc:	4807      	ldr	r0, [pc, #28]	; (80107dc <RadioSend+0x114>)
 80107be:	2302      	movs	r3, #2
 80107c0:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80107c2:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80107c4:	300e      	adds	r0, #14
 80107c6:	f000 ff31 	bl	801162c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80107ca:	2200      	movs	r2, #0
 80107cc:	4621      	mov	r1, r4
 80107ce:	4628      	mov	r0, r5
 80107d0:	f000 fffb 	bl	80117ca <SUBGRF_SendPayload>
            break;
 80107d4:	e7bc      	b.n	8010750 <RadioSend+0x88>
 80107d6:	bf00      	nop
 80107d8:	48000400 	.word	0x48000400
 80107dc:	200010d8 	.word	0x200010d8
 80107e0:	20001134 	.word	0x20001134
 80107e4:	08014584 	.word	0x08014584

080107e8 <RadioRandom>:
{
 80107e8:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80107ea:	2300      	movs	r3, #0
 80107ec:	461a      	mov	r2, r3
 80107ee:	4619      	mov	r1, r3
 80107f0:	4618      	mov	r0, r3
 80107f2:	f000 fbe2 	bl	8010fba <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 80107f6:	f000 ff9b 	bl	8011730 <SUBGRF_GetRandom>
}
 80107fa:	bd08      	pop	{r3, pc}

080107fc <RadioSetModem>:
{
 80107fc:	b510      	push	{r4, lr}
 80107fe:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8010800:	4b14      	ldr	r3, [pc, #80]	; (8010854 <RadioSetModem+0x58>)
 8010802:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8010804:	f001 f906 	bl	8011a14 <RFW_SetRadioModem>
    switch( modem )
 8010808:	2c01      	cmp	r4, #1
 801080a:	d010      	beq.n	801082e <RadioSetModem+0x32>
 801080c:	2c03      	cmp	r4, #3
 801080e:	d01a      	beq.n	8010846 <RadioSetModem+0x4a>
 8010810:	b134      	cbz	r4, 8010820 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8010812:	2003      	movs	r0, #3
 8010814:	f000 fce4 	bl	80111e0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8010818:	4b0e      	ldr	r3, [pc, #56]	; (8010854 <RadioSetModem+0x58>)
 801081a:	2200      	movs	r2, #0
 801081c:	735a      	strb	r2, [r3, #13]
}
 801081e:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8010820:	2000      	movs	r0, #0
 8010822:	f000 fcdd 	bl	80111e0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8010826:	4b0b      	ldr	r3, [pc, #44]	; (8010854 <RadioSetModem+0x58>)
 8010828:	2200      	movs	r2, #0
 801082a:	735a      	strb	r2, [r3, #13]
        break;
 801082c:	e7f7      	b.n	801081e <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801082e:	2001      	movs	r0, #1
 8010830:	f000 fcd6 	bl	80111e0 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8010834:	4b07      	ldr	r3, [pc, #28]	; (8010854 <RadioSetModem+0x58>)
 8010836:	7b5a      	ldrb	r2, [r3, #13]
 8010838:	7b18      	ldrb	r0, [r3, #12]
 801083a:	4282      	cmp	r2, r0
 801083c:	d0ef      	beq.n	801081e <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801083e:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8010840:	f000 f80a 	bl	8010858 <RadioSetPublicNetwork>
 8010844:	e7eb      	b.n	801081e <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8010846:	2002      	movs	r0, #2
 8010848:	f000 fcca 	bl	80111e0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 801084c:	4b01      	ldr	r3, [pc, #4]	; (8010854 <RadioSetModem+0x58>)
 801084e:	2200      	movs	r2, #0
 8010850:	735a      	strb	r2, [r3, #13]
}
 8010852:	e7e4      	b.n	801081e <RadioSetModem+0x22>
 8010854:	200010d8 	.word	0x200010d8

08010858 <RadioSetPublicNetwork>:
{
 8010858:	b510      	push	{r4, lr}
 801085a:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801085c:	4b0e      	ldr	r3, [pc, #56]	; (8010898 <RadioSetPublicNetwork+0x40>)
 801085e:	7318      	strb	r0, [r3, #12]
 8010860:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8010862:	2001      	movs	r0, #1
 8010864:	f7ff ffca 	bl	80107fc <RadioSetModem>
    if( enable == true )
 8010868:	b154      	cbz	r4, 8010880 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801086a:	2134      	movs	r1, #52	; 0x34
 801086c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8010870:	f000 fc66 	bl	8011140 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8010874:	2144      	movs	r1, #68	; 0x44
 8010876:	f240 7041 	movw	r0, #1857	; 0x741
 801087a:	f000 fc61 	bl	8011140 <SUBGRF_WriteRegister>
}
 801087e:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8010880:	2114      	movs	r1, #20
 8010882:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8010886:	f000 fc5b 	bl	8011140 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801088a:	2124      	movs	r1, #36	; 0x24
 801088c:	f240 7041 	movw	r0, #1857	; 0x741
 8010890:	f000 fc56 	bl	8011140 <SUBGRF_WriteRegister>
}
 8010894:	e7f3      	b.n	801087e <RadioSetPublicNetwork+0x26>
 8010896:	bf00      	nop
 8010898:	200010d8 	.word	0x200010d8

0801089c <RadioSetTxConfig>:
{
 801089c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108a0:	b083      	sub	sp, #12
 80108a2:	4604      	mov	r4, r0
 80108a4:	460e      	mov	r6, r1
 80108a6:	4617      	mov	r7, r2
 80108a8:	461d      	mov	r5, r3
 80108aa:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 80108ae:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 80108b2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80108b6:	f001 f89f 	bl	80119f8 <RFW_DeInit>
    switch( modem )
 80108ba:	b174      	cbz	r4, 80108da <RadioSetTxConfig+0x3e>
 80108bc:	2c01      	cmp	r4, #1
 80108be:	d053      	beq.n	8010968 <RadioSetTxConfig+0xcc>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80108c0:	4630      	mov	r0, r6
 80108c2:	f000 ffc9 	bl	8011858 <SUBGRF_SetRfTxPower>
 80108c6:	4c51      	ldr	r4, [pc, #324]	; (8010a0c <RadioSetTxConfig+0x170>)
 80108c8:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80108cc:	f001 f899 	bl	8011a02 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80108d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80108d2:	6063      	str	r3, [r4, #4]
}
 80108d4:	b003      	add	sp, #12
 80108d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80108da:	4c4c      	ldr	r4, [pc, #304]	; (8010a0c <RadioSetTxConfig+0x170>)
 80108dc:	f04f 0b00 	mov.w	fp, #0
 80108e0:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80108e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108e6:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80108e8:	230b      	movs	r3, #11
 80108ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80108ee:	4628      	mov	r0, r5
 80108f0:	f001 f820 	bl	8011934 <SUBGRF_GetFskBandwidthRegValue>
 80108f4:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80108f8:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80108fa:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80108fe:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8010902:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8010906:	2304      	movs	r3, #4
 8010908:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801090a:	2318      	movs	r3, #24
 801090c:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801090e:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8010912:	f089 0901 	eor.w	r9, r9, #1
 8010916:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 801091a:	f1ba 0f00 	cmp.w	sl, #0
 801091e:	d01f      	beq.n	8010960 <RadioSetTxConfig+0xc4>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8010920:	22f2      	movs	r2, #242	; 0xf2
 8010922:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8010924:	4c39      	ldr	r4, [pc, #228]	; (8010a0c <RadioSetTxConfig+0x170>)
 8010926:	2301      	movs	r3, #1
 8010928:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 801092a:	f7ff fc43 	bl	80101b4 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801092e:	2000      	movs	r0, #0
 8010930:	f7ff ff64 	bl	80107fc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010934:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010938:	f000 fc6c 	bl	8011214 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801093c:	f104 000e 	add.w	r0, r4, #14
 8010940:	f000 fe74 	bl	801162c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8010944:	4a32      	ldr	r2, [pc, #200]	; (8010a10 <RadioSetTxConfig+0x174>)
 8010946:	466b      	mov	r3, sp
 8010948:	e892 0003 	ldmia.w	r2, {r0, r1}
 801094c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010950:	4618      	mov	r0, r3
 8010952:	f000 fe39 	bl	80115c8 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8010956:	f240 10ff 	movw	r0, #511	; 0x1ff
 801095a:	f000 fd5d 	bl	8011418 <SUBGRF_SetWhiteningSeed>
            break;
 801095e:	e7af      	b.n	80108c0 <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8010960:	4b2a      	ldr	r3, [pc, #168]	; (8010a0c <RadioSetTxConfig+0x170>)
 8010962:	2201      	movs	r2, #1
 8010964:	75da      	strb	r2, [r3, #23]
 8010966:	e7dd      	b.n	8010924 <RadioSetTxConfig+0x88>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8010968:	4a28      	ldr	r2, [pc, #160]	; (8010a0c <RadioSetTxConfig+0x170>)
 801096a:	2301      	movs	r3, #1
 801096c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8010970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010972:	b2db      	uxtb	r3, r3
 8010974:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8010978:	4926      	ldr	r1, [pc, #152]	; (8010a14 <RadioSetTxConfig+0x178>)
 801097a:	5d49      	ldrb	r1, [r1, r5]
 801097c:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8010980:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8010984:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010988:	b91d      	cbnz	r5, 8010992 <RadioSetTxConfig+0xf6>
 801098a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801098c:	3a0b      	subs	r2, #11
 801098e:	2a01      	cmp	r2, #1
 8010990:	d92c      	bls.n	80109ec <RadioSetTxConfig+0x150>
 8010992:	2d01      	cmp	r5, #1
 8010994:	d027      	beq.n	80109e6 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8010996:	4a1d      	ldr	r2, [pc, #116]	; (8010a0c <RadioSetTxConfig+0x170>)
 8010998:	2100      	movs	r1, #0
 801099a:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801099e:	4a1b      	ldr	r2, [pc, #108]	; (8010a0c <RadioSetTxConfig+0x170>)
 80109a0:	2101      	movs	r1, #1
 80109a2:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80109a4:	3b05      	subs	r3, #5
 80109a6:	b2db      	uxtb	r3, r3
 80109a8:	428b      	cmp	r3, r1
 80109aa:	d924      	bls.n	80109f6 <RadioSetTxConfig+0x15a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80109ac:	4b17      	ldr	r3, [pc, #92]	; (8010a0c <RadioSetTxConfig+0x170>)
 80109ae:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80109b2:	4c16      	ldr	r4, [pc, #88]	; (8010a0c <RadioSetTxConfig+0x170>)
 80109b4:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80109b8:	4b17      	ldr	r3, [pc, #92]	; (8010a18 <RadioSetTxConfig+0x17c>)
 80109ba:	781b      	ldrb	r3, [r3, #0]
 80109bc:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80109be:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80109c2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80109c6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 80109ca:	f7ff fbf3 	bl	80101b4 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80109ce:	2001      	movs	r0, #1
 80109d0:	f7ff ff14 	bl	80107fc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80109d4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80109d8:	f000 fc1c 	bl	8011214 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80109dc:	f104 000e 	add.w	r0, r4, #14
 80109e0:	f000 fe24 	bl	801162c <SUBGRF_SetPacketParams>
            break;
 80109e4:	e76c      	b.n	80108c0 <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80109e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109e8:	2a0c      	cmp	r2, #12
 80109ea:	d1d4      	bne.n	8010996 <RadioSetTxConfig+0xfa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80109ec:	4a07      	ldr	r2, [pc, #28]	; (8010a0c <RadioSetTxConfig+0x170>)
 80109ee:	2101      	movs	r1, #1
 80109f0:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 80109f4:	e7d3      	b.n	801099e <RadioSetTxConfig+0x102>
                if( preambleLen < 12 )
 80109f6:	f1b8 0f0b 	cmp.w	r8, #11
 80109fa:	d803      	bhi.n	8010a04 <RadioSetTxConfig+0x168>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80109fc:	4613      	mov	r3, r2
 80109fe:	220c      	movs	r2, #12
 8010a00:	839a      	strh	r2, [r3, #28]
 8010a02:	e7d6      	b.n	80109b2 <RadioSetTxConfig+0x116>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010a04:	4b01      	ldr	r3, [pc, #4]	; (8010a0c <RadioSetTxConfig+0x170>)
 8010a06:	f8a3 801c 	strh.w	r8, [r3, #28]
 8010a0a:	e7d2      	b.n	80109b2 <RadioSetTxConfig+0x116>
 8010a0c:	200010d8 	.word	0x200010d8
 8010a10:	08013858 	.word	0x08013858
 8010a14:	0801459c 	.word	0x0801459c
 8010a18:	2000010c 	.word	0x2000010c

08010a1c <RadioSetRxConfig>:
{
 8010a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a20:	b085      	sub	sp, #20
 8010a22:	4604      	mov	r4, r0
 8010a24:	460d      	mov	r5, r1
 8010a26:	4616      	mov	r6, r2
 8010a28:	9301      	str	r3, [sp, #4]
 8010a2a:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 8010a2e:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8010a32:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8010a36:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 8010a3a:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 8010a3e:	4b6e      	ldr	r3, [pc, #440]	; (8010bf8 <RadioSetRxConfig+0x1dc>)
 8010a40:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8010a44:	f000 ffd8 	bl	80119f8 <RFW_DeInit>
    if( rxContinuous == true )
 8010a48:	f1b8 0f00 	cmp.w	r8, #0
 8010a4c:	d001      	beq.n	8010a52 <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8010a4e:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8010a52:	b14f      	cbz	r7, 8010a68 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 8010a54:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8010a58:	4b68      	ldr	r3, [pc, #416]	; (8010bfc <RadioSetRxConfig+0x1e0>)
 8010a5a:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8010a5c:	b144      	cbz	r4, 8010a70 <RadioSetRxConfig+0x54>
 8010a5e:	2c01      	cmp	r4, #1
 8010a60:	d057      	beq.n	8010b12 <RadioSetRxConfig+0xf6>
}
 8010a62:	b005      	add	sp, #20
 8010a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8010a68:	4b64      	ldr	r3, [pc, #400]	; (8010bfc <RadioSetRxConfig+0x1e0>)
 8010a6a:	22ff      	movs	r2, #255	; 0xff
 8010a6c:	701a      	strb	r2, [r3, #0]
 8010a6e:	e7f5      	b.n	8010a5c <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8010a70:	2000      	movs	r0, #0
 8010a72:	f000 fa05 	bl	8010e80 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010a76:	4c60      	ldr	r4, [pc, #384]	; (8010bf8 <RadioSetRxConfig+0x1dc>)
 8010a78:	f04f 0800 	mov.w	r8, #0
 8010a7c:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8010a80:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8010a82:	230b      	movs	r3, #11
 8010a84:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8010a88:	4628      	mov	r0, r5
 8010a8a:	f000 ff53 	bl	8011934 <SUBGRF_GetFskBandwidthRegValue>
 8010a8e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8010a92:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8010a96:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8010a9a:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8010a9e:	2304      	movs	r3, #4
 8010aa0:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8010aa2:	2318      	movs	r3, #24
 8010aa4:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8010aa6:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8010aaa:	f087 0701 	eor.w	r7, r7, #1
 8010aae:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8010ab0:	4b52      	ldr	r3, [pc, #328]	; (8010bfc <RadioSetRxConfig+0x1e0>)
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8010ab6:	f1bb 0f00 	cmp.w	fp, #0
 8010aba:	d026      	beq.n	8010b0a <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8010abc:	22f2      	movs	r2, #242	; 0xf2
 8010abe:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8010ac0:	4c4d      	ldr	r4, [pc, #308]	; (8010bf8 <RadioSetRxConfig+0x1dc>)
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8010ac6:	f7ff fb75 	bl	80101b4 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8010aca:	2000      	movs	r0, #0
 8010acc:	f7ff fe96 	bl	80107fc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010ad0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010ad4:	f000 fb9e 	bl	8011214 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010ad8:	f104 000e 	add.w	r0, r4, #14
 8010adc:	f000 fda6 	bl	801162c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8010ae0:	4a47      	ldr	r2, [pc, #284]	; (8010c00 <RadioSetRxConfig+0x1e4>)
 8010ae2:	ab02      	add	r3, sp, #8
 8010ae4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ae8:	e883 0003 	stmia.w	r3, {r0, r1}
 8010aec:	4618      	mov	r0, r3
 8010aee:	f000 fd6b 	bl	80115c8 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8010af2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8010af6:	f000 fc8f 	bl	8011418 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8010afa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8010afe:	fb02 fa0a 	mul.w	sl, r2, sl
 8010b02:	fbba f6f6 	udiv	r6, sl, r6
 8010b06:	60a6      	str	r6, [r4, #8]
            break;
 8010b08:	e7ab      	b.n	8010a62 <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8010b0a:	4b3b      	ldr	r3, [pc, #236]	; (8010bf8 <RadioSetRxConfig+0x1dc>)
 8010b0c:	2201      	movs	r2, #1
 8010b0e:	75da      	strb	r2, [r3, #23]
 8010b10:	e7d6      	b.n	8010ac0 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8010b12:	2000      	movs	r0, #0
 8010b14:	f000 f9b4 	bl	8010e80 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8010b18:	4a37      	ldr	r2, [pc, #220]	; (8010bf8 <RadioSetRxConfig+0x1dc>)
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8010b20:	b2f3      	uxtb	r3, r6
 8010b22:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8010b26:	4937      	ldr	r1, [pc, #220]	; (8010c04 <RadioSetRxConfig+0x1e8>)
 8010b28:	5d49      	ldrb	r1, [r1, r5]
 8010b2a:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8010b2e:	9901      	ldr	r1, [sp, #4]
 8010b30:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010b34:	b91d      	cbnz	r5, 8010b3e <RadioSetRxConfig+0x122>
 8010b36:	f1a6 020b 	sub.w	r2, r6, #11
 8010b3a:	2a01      	cmp	r2, #1
 8010b3c:	d941      	bls.n	8010bc2 <RadioSetRxConfig+0x1a6>
 8010b3e:	2d01      	cmp	r5, #1
 8010b40:	d03d      	beq.n	8010bbe <RadioSetRxConfig+0x1a2>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8010b42:	4a2d      	ldr	r2, [pc, #180]	; (8010bf8 <RadioSetRxConfig+0x1dc>)
 8010b44:	2100      	movs	r1, #0
 8010b46:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8010b4a:	4a2b      	ldr	r2, [pc, #172]	; (8010bf8 <RadioSetRxConfig+0x1dc>)
 8010b4c:	2101      	movs	r1, #1
 8010b4e:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8010b50:	3b05      	subs	r3, #5
 8010b52:	b2db      	uxtb	r3, r3
 8010b54:	428b      	cmp	r3, r1
 8010b56:	d939      	bls.n	8010bcc <RadioSetRxConfig+0x1b0>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010b58:	4b27      	ldr	r3, [pc, #156]	; (8010bf8 <RadioSetRxConfig+0x1dc>)
 8010b5a:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8010b5e:	4c26      	ldr	r4, [pc, #152]	; (8010bf8 <RadioSetRxConfig+0x1dc>)
 8010b60:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8010b62:	4b26      	ldr	r3, [pc, #152]	; (8010bfc <RadioSetRxConfig+0x1e0>)
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8010b68:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8010b6c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8010b70:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8010b74:	f7ff fb1e 	bl	80101b4 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8010b78:	2001      	movs	r0, #1
 8010b7a:	f7ff fe3f 	bl	80107fc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010b7e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010b82:	f000 fb47 	bl	8011214 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010b86:	f104 000e 	add.w	r0, r4, #14
 8010b8a:	f000 fd4f 	bl	801162c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8010b8e:	fa5f f08a 	uxtb.w	r0, sl
 8010b92:	f000 fb03 	bl	801119c <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8010b96:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8010b9a:	2b01      	cmp	r3, #1
 8010b9c:	d021      	beq.n	8010be2 <RadioSetRxConfig+0x1c6>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8010b9e:	f240 7036 	movw	r0, #1846	; 0x736
 8010ba2:	f000 fbbf 	bl	8011324 <SUBGRF_ReadRegister>
 8010ba6:	f040 0104 	orr.w	r1, r0, #4
 8010baa:	b2c9      	uxtb	r1, r1
 8010bac:	f240 7036 	movw	r0, #1846	; 0x736
 8010bb0:	f000 fac6 	bl	8011140 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8010bb4:	4b10      	ldr	r3, [pc, #64]	; (8010bf8 <RadioSetRxConfig+0x1dc>)
 8010bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bba:	609a      	str	r2, [r3, #8]
}
 8010bbc:	e751      	b.n	8010a62 <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010bbe:	2e0c      	cmp	r6, #12
 8010bc0:	d1bf      	bne.n	8010b42 <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8010bc2:	4a0d      	ldr	r2, [pc, #52]	; (8010bf8 <RadioSetRxConfig+0x1dc>)
 8010bc4:	2101      	movs	r1, #1
 8010bc6:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8010bca:	e7be      	b.n	8010b4a <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8010bcc:	f1b9 0f0b 	cmp.w	r9, #11
 8010bd0:	d803      	bhi.n	8010bda <RadioSetRxConfig+0x1be>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	220c      	movs	r2, #12
 8010bd6:	839a      	strh	r2, [r3, #28]
 8010bd8:	e7c1      	b.n	8010b5e <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010bda:	4b07      	ldr	r3, [pc, #28]	; (8010bf8 <RadioSetRxConfig+0x1dc>)
 8010bdc:	f8a3 901c 	strh.w	r9, [r3, #28]
 8010be0:	e7bd      	b.n	8010b5e <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8010be2:	f240 7036 	movw	r0, #1846	; 0x736
 8010be6:	f000 fb9d 	bl	8011324 <SUBGRF_ReadRegister>
 8010bea:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8010bee:	f240 7036 	movw	r0, #1846	; 0x736
 8010bf2:	f000 faa5 	bl	8011140 <SUBGRF_WriteRegister>
 8010bf6:	e7dd      	b.n	8010bb4 <RadioSetRxConfig+0x198>
 8010bf8:	200010d8 	.word	0x200010d8
 8010bfc:	2000010c 	.word	0x2000010c
 8010c00:	08013858 	.word	0x08013858
 8010c04:	0801459c 	.word	0x0801459c

08010c08 <RadioIsChannelFree>:
{
 8010c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c0a:	b08b      	sub	sp, #44	; 0x2c
 8010c0c:	4604      	mov	r4, r0
 8010c0e:	460f      	mov	r7, r1
 8010c10:	4616      	mov	r6, r2
 8010c12:	461d      	mov	r5, r3
    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8010c14:	f7ff face 	bl	80101b4 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8010c18:	2000      	movs	r0, #0
 8010c1a:	f7ff fdef 	bl	80107fc <RadioSetModem>
    RadioSetChannel( freq );
 8010c1e:	4620      	mov	r0, r4
 8010c20:	f7ff fcf8 	bl	8010614 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8010c24:	2301      	movs	r3, #1
 8010c26:	9309      	str	r3, [sp, #36]	; 0x24
 8010c28:	2400      	movs	r4, #0
 8010c2a:	9408      	str	r4, [sp, #32]
 8010c2c:	9407      	str	r4, [sp, #28]
 8010c2e:	9406      	str	r4, [sp, #24]
 8010c30:	9405      	str	r4, [sp, #20]
 8010c32:	9404      	str	r4, [sp, #16]
 8010c34:	9403      	str	r4, [sp, #12]
 8010c36:	9402      	str	r4, [sp, #8]
 8010c38:	2303      	movs	r3, #3
 8010c3a:	9301      	str	r3, [sp, #4]
 8010c3c:	9700      	str	r7, [sp, #0]
 8010c3e:	4623      	mov	r3, r4
 8010c40:	f44f 7216 	mov.w	r2, #600	; 0x258
 8010c44:	4639      	mov	r1, r7
 8010c46:	4620      	mov	r0, r4
 8010c48:	f7ff fee8 	bl	8010a1c <RadioSetRxConfig>
    RadioRx( 0 );
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	f7ff fcf9 	bl	8010644 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8010c52:	f7ff fc93 	bl	801057c <RadioGetWakeupTime>
 8010c56:	f7f0 ff4f 	bl	8001af8 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8010c5a:	f001 fac9 	bl	80121f0 <UTIL_TIMER_GetCurrentTime>
 8010c5e:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8010c60:	4620      	mov	r0, r4
 8010c62:	f001 facf 	bl	8012204 <UTIL_TIMER_GetElapsedTime>
 8010c66:	42a8      	cmp	r0, r5
 8010c68:	d206      	bcs.n	8010c78 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8010c6a:	2000      	movs	r0, #0
 8010c6c:	f7ff fcb0 	bl	80105d0 <RadioRssi>
        if( rssi > rssiThresh )
 8010c70:	42b0      	cmp	r0, r6
 8010c72:	ddf5      	ble.n	8010c60 <RadioIsChannelFree+0x58>
            status = false;
 8010c74:	2400      	movs	r4, #0
 8010c76:	e000      	b.n	8010c7a <RadioIsChannelFree+0x72>
    bool status = true;
 8010c78:	2401      	movs	r4, #1
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8010c7a:	f7ff fa9b 	bl	80101b4 <RadioStandby>
}
 8010c7e:	4620      	mov	r0, r4
 8010c80:	b00b      	add	sp, #44	; 0x2c
 8010c82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010c84 <RadioInit>:
{
 8010c84:	b570      	push	{r4, r5, r6, lr}
 8010c86:	b082      	sub	sp, #8
    RadioEvents = events;
 8010c88:	4b1d      	ldr	r3, [pc, #116]	; (8010d00 <RadioInit+0x7c>)
 8010c8a:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8010c8c:	4d1d      	ldr	r5, [pc, #116]	; (8010d04 <RadioInit+0x80>)
 8010c8e:	2400      	movs	r4, #0
 8010c90:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8010c92:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8010c94:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8010c96:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8010c98:	481b      	ldr	r0, [pc, #108]	; (8010d08 <RadioInit+0x84>)
 8010c9a:	f000 fb67 	bl	801136c <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8010c9e:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8010ca0:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8010ca2:	f000 f8fa 	bl	8010e9a <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8010ca6:	4621      	mov	r1, r4
 8010ca8:	4620      	mov	r0, r4
 8010caa:	f000 f9f1 	bl	8011090 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8010cae:	2204      	movs	r2, #4
 8010cb0:	4621      	mov	r1, r4
 8010cb2:	2001      	movs	r0, #1
 8010cb4:	f000 fbc9 	bl	801144a <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8010cb8:	4623      	mov	r3, r4
 8010cba:	4622      	mov	r2, r4
 8010cbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010cc0:	4608      	mov	r0, r1
 8010cc2:	f000 f97a 	bl	8010fba <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8010cc6:	f7ff fcf5 	bl	80106b4 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8010cca:	4e10      	ldr	r6, [pc, #64]	; (8010d0c <RadioInit+0x88>)
 8010ccc:	9400      	str	r4, [sp, #0]
 8010cce:	4b10      	ldr	r3, [pc, #64]	; (8010d10 <RadioInit+0x8c>)
 8010cd0:	4622      	mov	r2, r4
 8010cd2:	f04f 31ff 	mov.w	r1, #4294967295
 8010cd6:	4630      	mov	r0, r6
 8010cd8:	f001 fa6c 	bl	80121b4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8010cdc:	4d0d      	ldr	r5, [pc, #52]	; (8010d14 <RadioInit+0x90>)
 8010cde:	9400      	str	r4, [sp, #0]
 8010ce0:	4b0d      	ldr	r3, [pc, #52]	; (8010d18 <RadioInit+0x94>)
 8010ce2:	4622      	mov	r2, r4
 8010ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8010ce8:	4628      	mov	r0, r5
 8010cea:	f001 fa63 	bl	80121b4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8010cee:	4630      	mov	r0, r6
 8010cf0:	f001 fabe 	bl	8012270 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8010cf4:	4628      	mov	r0, r5
 8010cf6:	f001 fabb 	bl	8012270 <UTIL_TIMER_Stop>
}
 8010cfa:	b002      	add	sp, #8
 8010cfc:	bd70      	pop	{r4, r5, r6, pc}
 8010cfe:	bf00      	nop
 8010d00:	200010bc 	.word	0x200010bc
 8010d04:	200010d8 	.word	0x200010d8
 8010d08:	08010569 	.word	0x08010569
 8010d0c:	20001134 	.word	0x20001134
 8010d10:	080100c1 	.word	0x080100c1
 8010d14:	200010c0 	.word	0x200010c0
 8010d18:	080100e9 	.word	0x080100e9

08010d1c <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8010d1c:	b510      	push	{r4, lr}
 8010d1e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d20:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010d24:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8010d26:	460a      	mov	r2, r1
 8010d28:	4601      	mov	r1, r0
 8010d2a:	4803      	ldr	r0, [pc, #12]	; (8010d38 <SUBGRF_WriteCommand+0x1c>)
 8010d2c:	f7f4 fe0a 	bl	8005944 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d30:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8010d34:	bd10      	pop	{r4, pc}
 8010d36:	bf00      	nop
 8010d38:	20000238 	.word	0x20000238

08010d3c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8010d3c:	b510      	push	{r4, lr}
 8010d3e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d40:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010d44:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8010d46:	460a      	mov	r2, r1
 8010d48:	4601      	mov	r1, r0
 8010d4a:	4803      	ldr	r0, [pc, #12]	; (8010d58 <SUBGRF_ReadCommand+0x1c>)
 8010d4c:	f7f4 fe50 	bl	80059f0 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d50:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8010d54:	bd10      	pop	{r4, pc}
 8010d56:	bf00      	nop
 8010d58:	20000238 	.word	0x20000238

08010d5c <SUBGRF_GetOperatingMode>:
}
 8010d5c:	4b01      	ldr	r3, [pc, #4]	; (8010d64 <SUBGRF_GetOperatingMode+0x8>)
 8010d5e:	7818      	ldrb	r0, [r3, #0]
 8010d60:	4770      	bx	lr
 8010d62:	bf00      	nop
 8010d64:	20001152 	.word	0x20001152

08010d68 <SUBGRF_SetStandby>:
{
 8010d68:	b500      	push	{lr}
 8010d6a:	b083      	sub	sp, #12
 8010d6c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8010d70:	2201      	movs	r2, #1
 8010d72:	f10d 0107 	add.w	r1, sp, #7
 8010d76:	2080      	movs	r0, #128	; 0x80
 8010d78:	f7ff ffd0 	bl	8010d1c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8010d7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010d80:	b92b      	cbnz	r3, 8010d8e <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8010d82:	4b05      	ldr	r3, [pc, #20]	; (8010d98 <SUBGRF_SetStandby+0x30>)
 8010d84:	2201      	movs	r2, #1
 8010d86:	701a      	strb	r2, [r3, #0]
}
 8010d88:	b003      	add	sp, #12
 8010d8a:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8010d8e:	4b02      	ldr	r3, [pc, #8]	; (8010d98 <SUBGRF_SetStandby+0x30>)
 8010d90:	2202      	movs	r2, #2
 8010d92:	701a      	strb	r2, [r3, #0]
}
 8010d94:	e7f8      	b.n	8010d88 <SUBGRF_SetStandby+0x20>
 8010d96:	bf00      	nop
 8010d98:	20001152 	.word	0x20001152

08010d9c <SUBGRF_SetTx>:
{
 8010d9c:	b500      	push	{lr}
 8010d9e:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8010da0:	4b0a      	ldr	r3, [pc, #40]	; (8010dcc <SUBGRF_SetTx+0x30>)
 8010da2:	2204      	movs	r2, #4
 8010da4:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010da6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010daa:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010dae:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010db2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8010db6:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8010dba:	2203      	movs	r2, #3
 8010dbc:	a901      	add	r1, sp, #4
 8010dbe:	2083      	movs	r0, #131	; 0x83
 8010dc0:	f7ff ffac 	bl	8010d1c <SUBGRF_WriteCommand>
}
 8010dc4:	b003      	add	sp, #12
 8010dc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8010dca:	bf00      	nop
 8010dcc:	20001152 	.word	0x20001152

08010dd0 <SUBGRF_SetRx>:
{
 8010dd0:	b500      	push	{lr}
 8010dd2:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8010dd4:	4b0a      	ldr	r3, [pc, #40]	; (8010e00 <SUBGRF_SetRx+0x30>)
 8010dd6:	2205      	movs	r2, #5
 8010dd8:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010dda:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010dde:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010de2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010de6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8010dea:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8010dee:	2203      	movs	r2, #3
 8010df0:	a901      	add	r1, sp, #4
 8010df2:	2082      	movs	r0, #130	; 0x82
 8010df4:	f7ff ff92 	bl	8010d1c <SUBGRF_WriteCommand>
}
 8010df8:	b003      	add	sp, #12
 8010dfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8010dfe:	bf00      	nop
 8010e00:	20001152 	.word	0x20001152

08010e04 <SUBGRF_SetRxDutyCycle>:
{
 8010e04:	b500      	push	{lr}
 8010e06:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8010e08:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010e0c:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8010e10:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010e14:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8010e18:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8010e1c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010e20:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8010e24:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8010e28:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8010e2c:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8010e30:	2206      	movs	r2, #6
 8010e32:	4669      	mov	r1, sp
 8010e34:	2094      	movs	r0, #148	; 0x94
 8010e36:	f7ff ff71 	bl	8010d1c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8010e3a:	4b03      	ldr	r3, [pc, #12]	; (8010e48 <SUBGRF_SetRxDutyCycle+0x44>)
 8010e3c:	2206      	movs	r2, #6
 8010e3e:	701a      	strb	r2, [r3, #0]
}
 8010e40:	b003      	add	sp, #12
 8010e42:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e46:	bf00      	nop
 8010e48:	20001152 	.word	0x20001152

08010e4c <SUBGRF_SetCad>:
{
 8010e4c:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8010e4e:	2200      	movs	r2, #0
 8010e50:	4611      	mov	r1, r2
 8010e52:	20c5      	movs	r0, #197	; 0xc5
 8010e54:	f7ff ff62 	bl	8010d1c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8010e58:	4b01      	ldr	r3, [pc, #4]	; (8010e60 <SUBGRF_SetCad+0x14>)
 8010e5a:	2207      	movs	r2, #7
 8010e5c:	701a      	strb	r2, [r3, #0]
}
 8010e5e:	bd08      	pop	{r3, pc}
 8010e60:	20001152 	.word	0x20001152

08010e64 <SUBGRF_SetTxContinuousWave>:
{
 8010e64:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8010e66:	2200      	movs	r2, #0
 8010e68:	4611      	mov	r1, r2
 8010e6a:	20d1      	movs	r0, #209	; 0xd1
 8010e6c:	f7ff ff56 	bl	8010d1c <SUBGRF_WriteCommand>
}
 8010e70:	bd08      	pop	{r3, pc}

08010e72 <SUBGRF_SetTxInfinitePreamble>:
{
 8010e72:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8010e74:	2200      	movs	r2, #0
 8010e76:	4611      	mov	r1, r2
 8010e78:	20d2      	movs	r0, #210	; 0xd2
 8010e7a:	f7ff ff4f 	bl	8010d1c <SUBGRF_WriteCommand>
}
 8010e7e:	bd08      	pop	{r3, pc}

08010e80 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8010e80:	b500      	push	{lr}
 8010e82:	b083      	sub	sp, #12
 8010e84:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8010e88:	2201      	movs	r2, #1
 8010e8a:	f10d 0107 	add.w	r1, sp, #7
 8010e8e:	209f      	movs	r0, #159	; 0x9f
 8010e90:	f7ff ff44 	bl	8010d1c <SUBGRF_WriteCommand>
}
 8010e94:	b003      	add	sp, #12
 8010e96:	f85d fb04 	ldr.w	pc, [sp], #4

08010e9a <SUBGRF_SetRegulatorMode>:
{
 8010e9a:	b500      	push	{lr}
 8010e9c:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8010e9e:	f7f1 fdc9 	bl	8002a34 <RBI_IsDCDC>
 8010ea2:	2801      	cmp	r0, #1
 8010ea4:	d00b      	beq.n	8010ebe <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8010eac:	2201      	movs	r2, #1
 8010eae:	f10d 0107 	add.w	r1, sp, #7
 8010eb2:	2096      	movs	r0, #150	; 0x96
 8010eb4:	f7ff ff32 	bl	8010d1c <SUBGRF_WriteCommand>
}
 8010eb8:	b003      	add	sp, #12
 8010eba:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	f88d 3007 	strb.w	r3, [sp, #7]
 8010ec4:	e7f2      	b.n	8010eac <SUBGRF_SetRegulatorMode+0x12>

08010ec6 <SUBGRF_Calibrate>:
{
 8010ec6:	b500      	push	{lr}
 8010ec8:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8010eca:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8010ece:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8010ed2:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8010ed4:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8010ed8:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8010eda:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8010ede:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8010ee0:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8010ee4:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8010ee6:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8010eea:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8010eec:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8010ef0:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8010ef2:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	f10d 0107 	add.w	r1, sp, #7
 8010efc:	2089      	movs	r0, #137	; 0x89
 8010efe:	f7ff ff0d 	bl	8010d1c <SUBGRF_WriteCommand>
}
 8010f02:	b003      	add	sp, #12
 8010f04:	f85d fb04 	ldr.w	pc, [sp], #4

08010f08 <SUBGRF_CalibrateImage>:
{
 8010f08:	b500      	push	{lr}
 8010f0a:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8010f0c:	4b1c      	ldr	r3, [pc, #112]	; (8010f80 <SUBGRF_CalibrateImage+0x78>)
 8010f0e:	4298      	cmp	r0, r3
 8010f10:	d90d      	bls.n	8010f2e <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8010f12:	23e1      	movs	r3, #225	; 0xe1
 8010f14:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8010f18:	23e9      	movs	r3, #233	; 0xe9
 8010f1a:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8010f1e:	2202      	movs	r2, #2
 8010f20:	a901      	add	r1, sp, #4
 8010f22:	2098      	movs	r0, #152	; 0x98
 8010f24:	f7ff fefa 	bl	8010d1c <SUBGRF_WriteCommand>
}
 8010f28:	b003      	add	sp, #12
 8010f2a:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8010f2e:	4b15      	ldr	r3, [pc, #84]	; (8010f84 <SUBGRF_CalibrateImage+0x7c>)
 8010f30:	4298      	cmp	r0, r3
 8010f32:	d906      	bls.n	8010f42 <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8010f34:	23d7      	movs	r3, #215	; 0xd7
 8010f36:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8010f3a:	23db      	movs	r3, #219	; 0xdb
 8010f3c:	f88d 3005 	strb.w	r3, [sp, #5]
 8010f40:	e7ed      	b.n	8010f1e <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8010f42:	4b11      	ldr	r3, [pc, #68]	; (8010f88 <SUBGRF_CalibrateImage+0x80>)
 8010f44:	4298      	cmp	r0, r3
 8010f46:	d906      	bls.n	8010f56 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8010f48:	23c1      	movs	r3, #193	; 0xc1
 8010f4a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8010f4e:	23c5      	movs	r3, #197	; 0xc5
 8010f50:	f88d 3005 	strb.w	r3, [sp, #5]
 8010f54:	e7e3      	b.n	8010f1e <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8010f56:	4b0d      	ldr	r3, [pc, #52]	; (8010f8c <SUBGRF_CalibrateImage+0x84>)
 8010f58:	4298      	cmp	r0, r3
 8010f5a:	d906      	bls.n	8010f6a <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8010f5c:	2375      	movs	r3, #117	; 0x75
 8010f5e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8010f62:	2381      	movs	r3, #129	; 0x81
 8010f64:	f88d 3005 	strb.w	r3, [sp, #5]
 8010f68:	e7d9      	b.n	8010f1e <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8010f6a:	4b09      	ldr	r3, [pc, #36]	; (8010f90 <SUBGRF_CalibrateImage+0x88>)
 8010f6c:	4298      	cmp	r0, r3
 8010f6e:	d9d6      	bls.n	8010f1e <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 8010f70:	236b      	movs	r3, #107	; 0x6b
 8010f72:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8010f76:	236f      	movs	r3, #111	; 0x6f
 8010f78:	f88d 3005 	strb.w	r3, [sp, #5]
 8010f7c:	e7cf      	b.n	8010f1e <SUBGRF_CalibrateImage+0x16>
 8010f7e:	bf00      	nop
 8010f80:	35a4e900 	.word	0x35a4e900
 8010f84:	32a9f880 	.word	0x32a9f880
 8010f88:	2de54480 	.word	0x2de54480
 8010f8c:	1b6b0b00 	.word	0x1b6b0b00
 8010f90:	1954fc40 	.word	0x1954fc40

08010f94 <SUBGRF_SetPaConfig>:
{
 8010f94:	b500      	push	{lr}
 8010f96:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8010f98:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8010f9c:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8010fa0:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8010fa4:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8010fa8:	2204      	movs	r2, #4
 8010faa:	eb0d 0102 	add.w	r1, sp, r2
 8010fae:	2095      	movs	r0, #149	; 0x95
 8010fb0:	f7ff feb4 	bl	8010d1c <SUBGRF_WriteCommand>
}
 8010fb4:	b003      	add	sp, #12
 8010fb6:	f85d fb04 	ldr.w	pc, [sp], #4

08010fba <SUBGRF_SetDioIrqParams>:
{
 8010fba:	b500      	push	{lr}
 8010fbc:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8010fbe:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8010fc2:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8010fc6:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8010fca:	0a08      	lsrs	r0, r1, #8
 8010fcc:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8010fd0:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8010fd4:	0a11      	lsrs	r1, r2, #8
 8010fd6:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8010fda:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8010fde:	0a1a      	lsrs	r2, r3, #8
 8010fe0:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8010fe4:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8010fe8:	2208      	movs	r2, #8
 8010fea:	4669      	mov	r1, sp
 8010fec:	4610      	mov	r0, r2
 8010fee:	f7ff fe95 	bl	8010d1c <SUBGRF_WriteCommand>
}
 8010ff2:	b003      	add	sp, #12
 8010ff4:	f85d fb04 	ldr.w	pc, [sp], #4

08010ff8 <SUBGRF_SetTcxoMode>:
{
 8010ff8:	b500      	push	{lr}
 8010ffa:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8010ffc:	f000 0007 	and.w	r0, r0, #7
 8011000:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011004:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011008:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801100c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8011010:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8011014:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8011018:	2204      	movs	r2, #4
 801101a:	eb0d 0102 	add.w	r1, sp, r2
 801101e:	2097      	movs	r0, #151	; 0x97
 8011020:	f7ff fe7c 	bl	8010d1c <SUBGRF_WriteCommand>
}
 8011024:	b003      	add	sp, #12
 8011026:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801102c <SUBGRF_SetRfFrequency>:
{
 801102c:	b510      	push	{r4, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8011032:	4b12      	ldr	r3, [pc, #72]	; (801107c <SUBGRF_SetRfFrequency+0x50>)
 8011034:	781b      	ldrb	r3, [r3, #0]
 8011036:	b1d3      	cbz	r3, 801106e <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8011038:	4a11      	ldr	r2, [pc, #68]	; (8011080 <SUBGRF_SetRfFrequency+0x54>)
 801103a:	2300      	movs	r3, #0
 801103c:	0660      	lsls	r0, r4, #25
 801103e:	09e1      	lsrs	r1, r4, #7
 8011040:	f7ef fecc 	bl	8000ddc <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8011044:	0e03      	lsrs	r3, r0, #24
 8011046:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801104a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801104e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8011052:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011056:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801105a:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801105e:	2204      	movs	r2, #4
 8011060:	eb0d 0102 	add.w	r1, sp, r2
 8011064:	2086      	movs	r0, #134	; 0x86
 8011066:	f7ff fe59 	bl	8010d1c <SUBGRF_WriteCommand>
}
 801106a:	b002      	add	sp, #8
 801106c:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 801106e:	f7ff ff4b 	bl	8010f08 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8011072:	4b02      	ldr	r3, [pc, #8]	; (801107c <SUBGRF_SetRfFrequency+0x50>)
 8011074:	2201      	movs	r2, #1
 8011076:	701a      	strb	r2, [r3, #0]
 8011078:	e7de      	b.n	8011038 <SUBGRF_SetRfFrequency+0xc>
 801107a:	bf00      	nop
 801107c:	20001150 	.word	0x20001150
 8011080:	01e84800 	.word	0x01e84800

08011084 <SUBGRF_GetPacketType>:
}
 8011084:	4b01      	ldr	r3, [pc, #4]	; (801108c <SUBGRF_GetPacketType+0x8>)
 8011086:	7818      	ldrb	r0, [r3, #0]
 8011088:	4770      	bx	lr
 801108a:	bf00      	nop
 801108c:	20001153 	.word	0x20001153

08011090 <SUBGRF_SetBufferBaseAddress>:
{
 8011090:	b500      	push	{lr}
 8011092:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8011094:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8011098:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801109c:	2202      	movs	r2, #2
 801109e:	a901      	add	r1, sp, #4
 80110a0:	208f      	movs	r0, #143	; 0x8f
 80110a2:	f7ff fe3b 	bl	8010d1c <SUBGRF_WriteCommand>
}
 80110a6:	b003      	add	sp, #12
 80110a8:	f85d fb04 	ldr.w	pc, [sp], #4

080110ac <SUBGRF_GetRssiInst>:
{
 80110ac:	b500      	push	{lr}
 80110ae:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80110b0:	2201      	movs	r2, #1
 80110b2:	a901      	add	r1, sp, #4
 80110b4:	2015      	movs	r0, #21
 80110b6:	f7ff fe41 	bl	8010d3c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80110ba:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80110be:	4240      	negs	r0, r0
}
 80110c0:	1040      	asrs	r0, r0, #1
 80110c2:	b003      	add	sp, #12
 80110c4:	f85d fb04 	ldr.w	pc, [sp], #4

080110c8 <SUBGRF_GetPacketStatus>:
{
 80110c8:	b510      	push	{r4, lr}
 80110ca:	b082      	sub	sp, #8
 80110cc:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80110ce:	2203      	movs	r2, #3
 80110d0:	a901      	add	r1, sp, #4
 80110d2:	2014      	movs	r0, #20
 80110d4:	f7ff fe32 	bl	8010d3c <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 80110d8:	f7ff ffd4 	bl	8011084 <SUBGRF_GetPacketType>
 80110dc:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 80110de:	b148      	cbz	r0, 80110f4 <SUBGRF_GetPacketStatus+0x2c>
 80110e0:	2801      	cmp	r0, #1
 80110e2:	d018      	beq.n	8011116 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80110e4:	2214      	movs	r2, #20
 80110e6:	2100      	movs	r1, #0
 80110e8:	4620      	mov	r0, r4
 80110ea:	f000 fe8e 	bl	8011e0a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80110ee:	230f      	movs	r3, #15
 80110f0:	7023      	strb	r3, [r4, #0]
}
 80110f2:	e00e      	b.n	8011112 <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80110f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80110f8:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80110fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80110fe:	425b      	negs	r3, r3
 8011100:	105b      	asrs	r3, r3, #1
 8011102:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8011104:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011108:	425b      	negs	r3, r3
 801110a:	105b      	asrs	r3, r3, #1
 801110c:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801110e:	2300      	movs	r3, #0
 8011110:	60a3      	str	r3, [r4, #8]
}
 8011112:	b002      	add	sp, #8
 8011114:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8011116:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801111a:	425b      	negs	r3, r3
 801111c:	105b      	asrs	r3, r3, #1
 801111e:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8011120:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8011124:	3302      	adds	r3, #2
 8011126:	109b      	asrs	r3, r3, #2
 8011128:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801112a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801112e:	425b      	negs	r3, r3
 8011130:	105b      	asrs	r3, r3, #1
 8011132:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8011134:	4b01      	ldr	r3, [pc, #4]	; (801113c <SUBGRF_GetPacketStatus+0x74>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	6123      	str	r3, [r4, #16]
            break;
 801113a:	e7ea      	b.n	8011112 <SUBGRF_GetPacketStatus+0x4a>
 801113c:	2000114c 	.word	0x2000114c

08011140 <SUBGRF_WriteRegister>:
{
 8011140:	b500      	push	{lr}
 8011142:	b083      	sub	sp, #12
 8011144:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8011148:	2301      	movs	r3, #1
 801114a:	f10d 0207 	add.w	r2, sp, #7
 801114e:	4601      	mov	r1, r0
 8011150:	4802      	ldr	r0, [pc, #8]	; (801115c <SUBGRF_WriteRegister+0x1c>)
 8011152:	f7f4 fb53 	bl	80057fc <HAL_SUBGHZ_WriteRegisters>
}
 8011156:	b003      	add	sp, #12
 8011158:	f85d fb04 	ldr.w	pc, [sp], #4
 801115c:	20000238 	.word	0x20000238

08011160 <SUBGRF_SetRxBoosted>:
{
 8011160:	b510      	push	{r4, lr}
 8011162:	b082      	sub	sp, #8
 8011164:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8011166:	4b0c      	ldr	r3, [pc, #48]	; (8011198 <SUBGRF_SetRxBoosted+0x38>)
 8011168:	2205      	movs	r2, #5
 801116a:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801116c:	2197      	movs	r1, #151	; 0x97
 801116e:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8011172:	f7ff ffe5 	bl	8011140 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011176:	f3c4 4307 	ubfx	r3, r4, #16, #8
 801117a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801117e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8011182:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8011186:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801118a:	2203      	movs	r2, #3
 801118c:	a901      	add	r1, sp, #4
 801118e:	2082      	movs	r0, #130	; 0x82
 8011190:	f7ff fdc4 	bl	8010d1c <SUBGRF_WriteCommand>
}
 8011194:	b002      	add	sp, #8
 8011196:	bd10      	pop	{r4, pc}
 8011198:	20001152 	.word	0x20001152

0801119c <SUBGRF_SetLoRaSymbNumTimeout>:
{
 801119c:	b500      	push	{lr}
 801119e:	b083      	sub	sp, #12
 80111a0:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80111a4:	2201      	movs	r2, #1
 80111a6:	f10d 0107 	add.w	r1, sp, #7
 80111aa:	20a0      	movs	r0, #160	; 0xa0
 80111ac:	f7ff fdb6 	bl	8010d1c <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 80111b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80111b4:	2b3f      	cmp	r3, #63	; 0x3f
 80111b6:	d90f      	bls.n	80111d8 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 80111b8:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 80111ba:	2200      	movs	r2, #0
        while( mant > 31 )
 80111bc:	e002      	b.n	80111c4 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 80111be:	089b      	lsrs	r3, r3, #2
            exp++;
 80111c0:	1c51      	adds	r1, r2, #1
 80111c2:	b2ca      	uxtb	r2, r1
        while( mant > 31 )
 80111c4:	2b1f      	cmp	r3, #31
 80111c6:	d8fa      	bhi.n	80111be <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 80111c8:	00d9      	lsls	r1, r3, #3
 80111ca:	b2c9      	uxtb	r1, r1
 80111cc:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80111ce:	b2c9      	uxtb	r1, r1
 80111d0:	f240 7006 	movw	r0, #1798	; 0x706
 80111d4:	f7ff ffb4 	bl	8011140 <SUBGRF_WriteRegister>
}
 80111d8:	b003      	add	sp, #12
 80111da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080111e0 <SUBGRF_SetPacketType>:
{
 80111e0:	b500      	push	{lr}
 80111e2:	b083      	sub	sp, #12
 80111e4:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 80111e8:	b2c3      	uxtb	r3, r0
 80111ea:	4a09      	ldr	r2, [pc, #36]	; (8011210 <SUBGRF_SetPacketType+0x30>)
 80111ec:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 80111ee:	b143      	cbz	r3, 8011202 <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80111f0:	2201      	movs	r2, #1
 80111f2:	f10d 0107 	add.w	r1, sp, #7
 80111f6:	208a      	movs	r0, #138	; 0x8a
 80111f8:	f7ff fd90 	bl	8010d1c <SUBGRF_WriteCommand>
}
 80111fc:	b003      	add	sp, #12
 80111fe:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8011202:	2100      	movs	r1, #0
 8011204:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8011208:	f7ff ff9a 	bl	8011140 <SUBGRF_WriteRegister>
 801120c:	e7f0      	b.n	80111f0 <SUBGRF_SetPacketType+0x10>
 801120e:	bf00      	nop
 8011210:	20001153 	.word	0x20001153

08011214 <SUBGRF_SetModulationParams>:
{
 8011214:	b510      	push	{r4, lr}
 8011216:	b082      	sub	sp, #8
 8011218:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801121a:	4b3e      	ldr	r3, [pc, #248]	; (8011314 <SUBGRF_SetModulationParams+0x100>)
 801121c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011220:	ab02      	add	r3, sp, #8
 8011222:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8011226:	7820      	ldrb	r0, [r4, #0]
 8011228:	4b3b      	ldr	r3, [pc, #236]	; (8011318 <SUBGRF_SetModulationParams+0x104>)
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	4298      	cmp	r0, r3
 801122e:	d106      	bne.n	801123e <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8011230:	7823      	ldrb	r3, [r4, #0]
 8011232:	2b03      	cmp	r3, #3
 8011234:	d82c      	bhi.n	8011290 <SUBGRF_SetModulationParams+0x7c>
 8011236:	e8df f003 	tbb	[pc, r3]
 801123a:	4205      	.short	0x4205
 801123c:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801123e:	f7ff ffcf 	bl	80111e0 <SUBGRF_SetPacketType>
 8011242:	e7f5      	b.n	8011230 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8011244:	6862      	ldr	r2, [r4, #4]
 8011246:	4b35      	ldr	r3, [pc, #212]	; (801131c <SUBGRF_SetModulationParams+0x108>)
 8011248:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801124c:	0c1a      	lsrs	r2, r3, #16
 801124e:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8011252:	0a1a      	lsrs	r2, r3, #8
 8011254:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8011258:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801125c:	7b23      	ldrb	r3, [r4, #12]
 801125e:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8011262:	7b63      	ldrb	r3, [r4, #13]
 8011264:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8011268:	68a1      	ldr	r1, [r4, #8]
 801126a:	4a2d      	ldr	r2, [pc, #180]	; (8011320 <SUBGRF_SetModulationParams+0x10c>)
 801126c:	2300      	movs	r3, #0
 801126e:	0648      	lsls	r0, r1, #25
 8011270:	09c9      	lsrs	r1, r1, #7
 8011272:	f7ef fdb3 	bl	8000ddc <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8011276:	0c03      	lsrs	r3, r0, #16
 8011278:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801127c:	0a03      	lsrs	r3, r0, #8
 801127e:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8011282:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011286:	2208      	movs	r2, #8
 8011288:	4669      	mov	r1, sp
 801128a:	208b      	movs	r0, #139	; 0x8b
 801128c:	f7ff fd46 	bl	8010d1c <SUBGRF_WriteCommand>
}
 8011290:	b002      	add	sp, #8
 8011292:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8011294:	6922      	ldr	r2, [r4, #16]
 8011296:	4b21      	ldr	r3, [pc, #132]	; (801131c <SUBGRF_SetModulationParams+0x108>)
 8011298:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801129c:	0c1a      	lsrs	r2, r3, #16
 801129e:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80112a2:	0a1a      	lsrs	r2, r3, #8
 80112a4:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80112a8:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80112ac:	7d23      	ldrb	r3, [r4, #20]
 80112ae:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80112b2:	2204      	movs	r2, #4
 80112b4:	4669      	mov	r1, sp
 80112b6:	208b      	movs	r0, #139	; 0x8b
 80112b8:	f7ff fd30 	bl	8010d1c <SUBGRF_WriteCommand>
        break;
 80112bc:	e7e8      	b.n	8011290 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80112be:	7e23      	ldrb	r3, [r4, #24]
 80112c0:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80112c4:	7e63      	ldrb	r3, [r4, #25]
 80112c6:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80112ca:	7ea3      	ldrb	r3, [r4, #26]
 80112cc:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80112d0:	7ee3      	ldrb	r3, [r4, #27]
 80112d2:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80112d6:	2204      	movs	r2, #4
 80112d8:	4669      	mov	r1, sp
 80112da:	208b      	movs	r0, #139	; 0x8b
 80112dc:	f7ff fd1e 	bl	8010d1c <SUBGRF_WriteCommand>
        break;
 80112e0:	e7d6      	b.n	8011290 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80112e2:	6862      	ldr	r2, [r4, #4]
 80112e4:	4b0d      	ldr	r3, [pc, #52]	; (801131c <SUBGRF_SetModulationParams+0x108>)
 80112e6:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80112ea:	0c1a      	lsrs	r2, r3, #16
 80112ec:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80112f0:	0a1a      	lsrs	r2, r3, #8
 80112f2:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80112f6:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80112fa:	7b23      	ldrb	r3, [r4, #12]
 80112fc:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8011300:	7b63      	ldrb	r3, [r4, #13]
 8011302:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011306:	2205      	movs	r2, #5
 8011308:	4669      	mov	r1, sp
 801130a:	208b      	movs	r0, #139	; 0x8b
 801130c:	f7ff fd06 	bl	8010d1c <SUBGRF_WriteCommand>
}
 8011310:	e7be      	b.n	8011290 <SUBGRF_SetModulationParams+0x7c>
 8011312:	bf00      	nop
 8011314:	08013860 	.word	0x08013860
 8011318:	20001153 	.word	0x20001153
 801131c:	3d090000 	.word	0x3d090000
 8011320:	01e84800 	.word	0x01e84800

08011324 <SUBGRF_ReadRegister>:
{
 8011324:	b500      	push	{lr}
 8011326:	b083      	sub	sp, #12
 8011328:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801132a:	2301      	movs	r3, #1
 801132c:	f10d 0207 	add.w	r2, sp, #7
 8011330:	4803      	ldr	r0, [pc, #12]	; (8011340 <SUBGRF_ReadRegister+0x1c>)
 8011332:	f7f4 fab3 	bl	800589c <HAL_SUBGHZ_ReadRegisters>
}
 8011336:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801133a:	b003      	add	sp, #12
 801133c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011340:	20000238 	.word	0x20000238

08011344 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8011344:	b510      	push	{r4, lr}
 8011346:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8011348:	f7f1 fb74 	bl	8002a34 <RBI_IsDCDC>
 801134c:	2801      	cmp	r0, #1
 801134e:	d000      	beq.n	8011352 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8011350:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8011352:	f640 1023 	movw	r0, #2339	; 0x923
 8011356:	f7ff ffe5 	bl	8011324 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 801135a:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801135e:	4321      	orrs	r1, r4
 8011360:	f640 1023 	movw	r0, #2339	; 0x923
 8011364:	f7ff feec 	bl	8011140 <SUBGRF_WriteRegister>
}
 8011368:	e7f2      	b.n	8011350 <Radio_SMPS_Set+0xc>
	...

0801136c <SUBGRF_Init>:
{
 801136c:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 801136e:	b108      	cbz	r0, 8011374 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8011370:	4a16      	ldr	r2, [pc, #88]	; (80113cc <SUBGRF_Init+0x60>)
 8011372:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8011374:	f7f0 fab8 	bl	80018e8 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8011378:	2002      	movs	r0, #2
 801137a:	f7ff ffe3 	bl	8011344 <Radio_SMPS_Set>
    ImageCalibrated = false;
 801137e:	2000      	movs	r0, #0
 8011380:	4b13      	ldr	r3, [pc, #76]	; (80113d0 <SUBGRF_Init+0x64>)
 8011382:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8011384:	f7ff fcf0 	bl	8010d68 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8011388:	f7f1 fb50 	bl	8002a2c <RBI_IsTCXO>
 801138c:	2801      	cmp	r0, #1
 801138e:	d00f      	beq.n	80113b0 <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8011390:	2120      	movs	r1, #32
 8011392:	f640 1011 	movw	r0, #2321	; 0x911
 8011396:	f7ff fed3 	bl	8011140 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801139a:	2120      	movs	r1, #32
 801139c:	f640 1012 	movw	r0, #2322	; 0x912
 80113a0:	f7ff fece 	bl	8011140 <SUBGRF_WriteRegister>
    RBI_Init();
 80113a4:	f7f1 fb36 	bl	8002a14 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 80113a8:	4b0a      	ldr	r3, [pc, #40]	; (80113d4 <SUBGRF_Init+0x68>)
 80113aa:	2201      	movs	r2, #1
 80113ac:	701a      	strb	r2, [r3, #0]
}
 80113ae:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80113b0:	2140      	movs	r1, #64	; 0x40
 80113b2:	f7ff fe21 	bl	8010ff8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80113b6:	2100      	movs	r1, #0
 80113b8:	f640 1011 	movw	r0, #2321	; 0x911
 80113bc:	f7ff fec0 	bl	8011140 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 80113c0:	f04f 007f 	mov.w	r0, #127	; 0x7f
 80113c4:	f7ff fd7f 	bl	8010ec6 <SUBGRF_Calibrate>
 80113c8:	e7ec      	b.n	80113a4 <SUBGRF_Init+0x38>
 80113ca:	bf00      	nop
 80113cc:	20001154 	.word	0x20001154
 80113d0:	20001150 	.word	0x20001150
 80113d4:	20001152 	.word	0x20001152

080113d8 <SUBGRF_SetSleep>:
{
 80113d8:	b510      	push	{r4, lr}
 80113da:	b082      	sub	sp, #8
 80113dc:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80113de:	2000      	movs	r0, #0
 80113e0:	f7f1 fb1c 	bl	8002a1c <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80113e4:	2002      	movs	r0, #2
 80113e6:	f7ff ffad 	bl	8011344 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80113ea:	f004 0004 	and.w	r0, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80113ee:	f004 0302 	and.w	r3, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80113f2:	4318      	orrs	r0, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80113f4:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80113f8:	4304      	orrs	r4, r0
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80113fa:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80113fe:	2201      	movs	r2, #1
 8011400:	f10d 0107 	add.w	r1, sp, #7
 8011404:	2084      	movs	r0, #132	; 0x84
 8011406:	f7ff fc89 	bl	8010d1c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801140a:	4b02      	ldr	r3, [pc, #8]	; (8011414 <SUBGRF_SetSleep+0x3c>)
 801140c:	2200      	movs	r2, #0
 801140e:	701a      	strb	r2, [r3, #0]
}
 8011410:	b002      	add	sp, #8
 8011412:	bd10      	pop	{r4, pc}
 8011414:	20001152 	.word	0x20001152

08011418 <SUBGRF_SetWhiteningSeed>:
{
 8011418:	b510      	push	{r4, lr}
 801141a:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 801141c:	f7ff fe32 	bl	8011084 <SUBGRF_GetPacketType>
 8011420:	b100      	cbz	r0, 8011424 <SUBGRF_SetWhiteningSeed+0xc>
}
 8011422:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8011424:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8011428:	f7ff ff7c 	bl	8011324 <SUBGRF_ReadRegister>
 801142c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8011430:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8011434:	4301      	orrs	r1, r0
 8011436:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801143a:	f7ff fe81 	bl	8011140 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801143e:	b2e1      	uxtb	r1, r4
 8011440:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8011444:	f7ff fe7c 	bl	8011140 <SUBGRF_WriteRegister>
}
 8011448:	e7eb      	b.n	8011422 <SUBGRF_SetWhiteningSeed+0xa>

0801144a <SUBGRF_SetTxParams>:
{
 801144a:	b570      	push	{r4, r5, r6, lr}
 801144c:	b082      	sub	sp, #8
 801144e:	460c      	mov	r4, r1
 8011450:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8011452:	2801      	cmp	r0, #1
 8011454:	d035      	beq.n	80114c2 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8011456:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801145a:	f7ff ff63 	bl	8011324 <SUBGRF_ReadRegister>
 801145e:	f040 011e 	orr.w	r1, r0, #30
 8011462:	b2c9      	uxtb	r1, r1
 8011464:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8011468:	f7ff fe6a 	bl	8011140 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801146c:	2001      	movs	r0, #1
 801146e:	f7f1 fae5 	bl	8002a3c <RBI_GetRFOMaxPowerConfig>
 8011472:	4605      	mov	r5, r0
        if (power > max_power)
 8011474:	4284      	cmp	r4, r0
 8011476:	dd00      	ble.n	801147a <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8011478:	b244      	sxtb	r4, r0
        if (max_power == 20)
 801147a:	2d14      	cmp	r5, #20
 801147c:	d054      	beq.n	8011528 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 801147e:	2d11      	cmp	r5, #17
 8011480:	d05c      	beq.n	801153c <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8011482:	2d0e      	cmp	r5, #14
 8011484:	d064      	beq.n	8011550 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8011486:	2301      	movs	r3, #1
 8011488:	2200      	movs	r2, #0
 801148a:	2107      	movs	r1, #7
 801148c:	2004      	movs	r0, #4
 801148e:	f7ff fd81 	bl	8010f94 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8011492:	1b64      	subs	r4, r4, r5
 8011494:	3416      	adds	r4, #22
 8011496:	b264      	sxtb	r4, r4
        if (power < -9)
 8011498:	f114 0f09 	cmn.w	r4, #9
 801149c:	da01      	bge.n	80114a2 <SUBGRF_SetTxParams+0x58>
            power = -9;
 801149e:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80114a2:	2138      	movs	r1, #56	; 0x38
 80114a4:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80114a8:	f7ff fe4a 	bl	8011140 <SUBGRF_WriteRegister>
    buf[0] = power;
 80114ac:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 80114b0:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80114b4:	2202      	movs	r2, #2
 80114b6:	a901      	add	r1, sp, #4
 80114b8:	208e      	movs	r0, #142	; 0x8e
 80114ba:	f7ff fc2f 	bl	8010d1c <SUBGRF_WriteCommand>
}
 80114be:	b002      	add	sp, #8
 80114c0:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80114c2:	2000      	movs	r0, #0
 80114c4:	f7f1 faba 	bl	8002a3c <RBI_GetRFOMaxPowerConfig>
 80114c8:	4605      	mov	r5, r0
        if (power >  max_power)
 80114ca:	4284      	cmp	r4, r0
 80114cc:	dd00      	ble.n	80114d0 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 80114ce:	b244      	sxtb	r4, r0
        if (max_power == 14)
 80114d0:	2d0e      	cmp	r5, #14
 80114d2:	d015      	beq.n	8011500 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 80114d4:	2d0a      	cmp	r5, #10
 80114d6:	d01d      	beq.n	8011514 <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 80114d8:	2301      	movs	r3, #1
 80114da:	461a      	mov	r2, r3
 80114dc:	2100      	movs	r1, #0
 80114de:	2006      	movs	r0, #6
 80114e0:	f7ff fd58 	bl	8010f94 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80114e4:	1b64      	subs	r4, r4, r5
 80114e6:	340e      	adds	r4, #14
 80114e8:	b264      	sxtb	r4, r4
        if (power < -17)
 80114ea:	f114 0f11 	cmn.w	r4, #17
 80114ee:	da01      	bge.n	80114f4 <SUBGRF_SetTxParams+0xaa>
            power = -17;
 80114f0:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80114f4:	2118      	movs	r1, #24
 80114f6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80114fa:	f7ff fe21 	bl	8011140 <SUBGRF_WriteRegister>
 80114fe:	e7d5      	b.n	80114ac <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8011500:	2301      	movs	r3, #1
 8011502:	461a      	mov	r2, r3
 8011504:	2100      	movs	r1, #0
 8011506:	2004      	movs	r0, #4
 8011508:	f7ff fd44 	bl	8010f94 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801150c:	1b64      	subs	r4, r4, r5
 801150e:	340e      	adds	r4, #14
 8011510:	b264      	sxtb	r4, r4
 8011512:	e7ea      	b.n	80114ea <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8011514:	2301      	movs	r3, #1
 8011516:	461a      	mov	r2, r3
 8011518:	2100      	movs	r1, #0
 801151a:	4618      	mov	r0, r3
 801151c:	f7ff fd3a 	bl	8010f94 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8011520:	1b64      	subs	r4, r4, r5
 8011522:	340d      	adds	r4, #13
 8011524:	b264      	sxtb	r4, r4
 8011526:	e7e0      	b.n	80114ea <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8011528:	2301      	movs	r3, #1
 801152a:	2200      	movs	r2, #0
 801152c:	2105      	movs	r1, #5
 801152e:	2003      	movs	r0, #3
 8011530:	f7ff fd30 	bl	8010f94 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8011534:	1b64      	subs	r4, r4, r5
 8011536:	3416      	adds	r4, #22
 8011538:	b264      	sxtb	r4, r4
 801153a:	e7ad      	b.n	8011498 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801153c:	2301      	movs	r3, #1
 801153e:	2200      	movs	r2, #0
 8011540:	2103      	movs	r1, #3
 8011542:	2002      	movs	r0, #2
 8011544:	f7ff fd26 	bl	8010f94 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8011548:	1b64      	subs	r4, r4, r5
 801154a:	3416      	adds	r4, #22
 801154c:	b264      	sxtb	r4, r4
 801154e:	e7a3      	b.n	8011498 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8011550:	2301      	movs	r3, #1
 8011552:	2200      	movs	r2, #0
 8011554:	2102      	movs	r1, #2
 8011556:	4608      	mov	r0, r1
 8011558:	f7ff fd1c 	bl	8010f94 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801155c:	1b64      	subs	r4, r4, r5
 801155e:	340e      	adds	r4, #14
 8011560:	b264      	sxtb	r4, r4
 8011562:	e799      	b.n	8011498 <SUBGRF_SetTxParams+0x4e>

08011564 <SUBGRF_GetRxBufferStatus>:
{
 8011564:	b530      	push	{r4, r5, lr}
 8011566:	b083      	sub	sp, #12
 8011568:	4605      	mov	r5, r0
 801156a:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801156c:	2202      	movs	r2, #2
 801156e:	a901      	add	r1, sp, #4
 8011570:	2013      	movs	r0, #19
 8011572:	f7ff fbe3 	bl	8010d3c <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8011576:	f7ff fd85 	bl	8011084 <SUBGRF_GetPacketType>
 801157a:	2801      	cmp	r0, #1
 801157c:	d007      	beq.n	801158e <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 801157e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011582:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8011584:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011588:	7023      	strb	r3, [r4, #0]
}
 801158a:	b003      	add	sp, #12
 801158c:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801158e:	4b05      	ldr	r3, [pc, #20]	; (80115a4 <SUBGRF_GetRxBufferStatus+0x40>)
 8011590:	781b      	ldrb	r3, [r3, #0]
 8011592:	b2db      	uxtb	r3, r3
 8011594:	2b01      	cmp	r3, #1
 8011596:	d1f2      	bne.n	801157e <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8011598:	f240 7002 	movw	r0, #1794	; 0x702
 801159c:	f7ff fec2 	bl	8011324 <SUBGRF_ReadRegister>
 80115a0:	7028      	strb	r0, [r5, #0]
 80115a2:	e7ef      	b.n	8011584 <SUBGRF_GetRxBufferStatus+0x20>
 80115a4:	20001151 	.word	0x20001151

080115a8 <SUBGRF_WriteRegisters>:
{
 80115a8:	b510      	push	{r4, lr}
 80115aa:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115ac:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80115b0:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80115b2:	460a      	mov	r2, r1
 80115b4:	4601      	mov	r1, r0
 80115b6:	4803      	ldr	r0, [pc, #12]	; (80115c4 <SUBGRF_WriteRegisters+0x1c>)
 80115b8:	f7f4 f920 	bl	80057fc <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80115bc:	f384 8810 	msr	PRIMASK, r4
}
 80115c0:	bd10      	pop	{r4, pc}
 80115c2:	bf00      	nop
 80115c4:	20000238 	.word	0x20000238

080115c8 <SUBGRF_SetSyncWord>:
{
 80115c8:	b508      	push	{r3, lr}
 80115ca:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80115cc:	2208      	movs	r2, #8
 80115ce:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80115d2:	f7ff ffe9 	bl	80115a8 <SUBGRF_WriteRegisters>
}
 80115d6:	2000      	movs	r0, #0
 80115d8:	bd08      	pop	{r3, pc}

080115da <SUBGRF_SetCrcSeed>:
{
 80115da:	b500      	push	{lr}
 80115dc:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80115de:	0a03      	lsrs	r3, r0, #8
 80115e0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80115e4:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80115e8:	f7ff fd4c 	bl	8011084 <SUBGRF_GetPacketType>
 80115ec:	b110      	cbz	r0, 80115f4 <SUBGRF_SetCrcSeed+0x1a>
}
 80115ee:	b003      	add	sp, #12
 80115f0:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80115f4:	2202      	movs	r2, #2
 80115f6:	a901      	add	r1, sp, #4
 80115f8:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80115fc:	f7ff ffd4 	bl	80115a8 <SUBGRF_WriteRegisters>
}
 8011600:	e7f5      	b.n	80115ee <SUBGRF_SetCrcSeed+0x14>

08011602 <SUBGRF_SetCrcPolynomial>:
{
 8011602:	b500      	push	{lr}
 8011604:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8011606:	0a03      	lsrs	r3, r0, #8
 8011608:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801160c:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8011610:	f7ff fd38 	bl	8011084 <SUBGRF_GetPacketType>
 8011614:	b110      	cbz	r0, 801161c <SUBGRF_SetCrcPolynomial+0x1a>
}
 8011616:	b003      	add	sp, #12
 8011618:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801161c:	2202      	movs	r2, #2
 801161e:	a901      	add	r1, sp, #4
 8011620:	f240 60be 	movw	r0, #1726	; 0x6be
 8011624:	f7ff ffc0 	bl	80115a8 <SUBGRF_WriteRegisters>
}
 8011628:	e7f5      	b.n	8011616 <SUBGRF_SetCrcPolynomial+0x14>
	...

0801162c <SUBGRF_SetPacketParams>:
{
 801162c:	b510      	push	{r4, lr}
 801162e:	b084      	sub	sp, #16
 8011630:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8011632:	ab01      	add	r3, sp, #4
 8011634:	4a33      	ldr	r2, [pc, #204]	; (8011704 <SUBGRF_SetPacketParams+0xd8>)
 8011636:	ca07      	ldmia	r2, {r0, r1, r2}
 8011638:	c303      	stmia	r3!, {r0, r1}
 801163a:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 801163c:	7820      	ldrb	r0, [r4, #0]
 801163e:	4b32      	ldr	r3, [pc, #200]	; (8011708 <SUBGRF_SetPacketParams+0xdc>)
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	4298      	cmp	r0, r3
 8011644:	d106      	bne.n	8011654 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8011646:	7823      	ldrb	r3, [r4, #0]
 8011648:	2b03      	cmp	r3, #3
 801164a:	d82a      	bhi.n	80116a2 <SUBGRF_SetPacketParams+0x76>
 801164c:	e8df f003 	tbb	[pc, r3]
 8011650:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8011654:	f7ff fdc4 	bl	80111e0 <SUBGRF_SetPacketType>
 8011658:	e7f5      	b.n	8011646 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801165a:	7a63      	ldrb	r3, [r4, #9]
 801165c:	2bf1      	cmp	r3, #241	; 0xf1
 801165e:	d022      	beq.n	80116a6 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8011660:	2bf2      	cmp	r3, #242	; 0xf2
 8011662:	d02a      	beq.n	80116ba <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8011664:	8862      	ldrh	r2, [r4, #2]
 8011666:	0a11      	lsrs	r1, r2, #8
 8011668:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801166c:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8011670:	7922      	ldrb	r2, [r4, #4]
 8011672:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8011676:	7962      	ldrb	r2, [r4, #5]
 8011678:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801167c:	79a2      	ldrb	r2, [r4, #6]
 801167e:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8011682:	79e2      	ldrb	r2, [r4, #7]
 8011684:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8011688:	7a22      	ldrb	r2, [r4, #8]
 801168a:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 801168e:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8011692:	7aa3      	ldrb	r3, [r4, #10]
 8011694:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8011698:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801169a:	a901      	add	r1, sp, #4
 801169c:	208c      	movs	r0, #140	; 0x8c
 801169e:	f7ff fb3d 	bl	8010d1c <SUBGRF_WriteCommand>
}
 80116a2:	b004      	add	sp, #16
 80116a4:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80116a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80116aa:	f7ff ff96 	bl	80115da <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80116ae:	f248 0005 	movw	r0, #32773	; 0x8005
 80116b2:	f7ff ffa6 	bl	8011602 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80116b6:	2302      	movs	r3, #2
 80116b8:	e7d4      	b.n	8011664 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80116ba:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80116be:	f7ff ff8c 	bl	80115da <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80116c2:	f241 0021 	movw	r0, #4129	; 0x1021
 80116c6:	f7ff ff9c 	bl	8011602 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80116ca:	2306      	movs	r3, #6
 80116cc:	e7ca      	b.n	8011664 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80116ce:	7b23      	ldrb	r3, [r4, #12]
 80116d0:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 80116d4:	2201      	movs	r2, #1
        break;
 80116d6:	e7e0      	b.n	801169a <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80116d8:	89e3      	ldrh	r3, [r4, #14]
 80116da:	0a1a      	lsrs	r2, r3, #8
 80116dc:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80116e0:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80116e4:	7c23      	ldrb	r3, [r4, #16]
 80116e6:	4a09      	ldr	r2, [pc, #36]	; (801170c <SUBGRF_SetPacketParams+0xe0>)
 80116e8:	7013      	strb	r3, [r2, #0]
 80116ea:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80116ee:	7c63      	ldrb	r3, [r4, #17]
 80116f0:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80116f4:	7ca3      	ldrb	r3, [r4, #18]
 80116f6:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80116fa:	7ce3      	ldrb	r3, [r4, #19]
 80116fc:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8011700:	2206      	movs	r2, #6
        break;
 8011702:	e7ca      	b.n	801169a <SUBGRF_SetPacketParams+0x6e>
 8011704:	08013868 	.word	0x08013868
 8011708:	20001153 	.word	0x20001153
 801170c:	20001151 	.word	0x20001151

08011710 <SUBGRF_ReadRegisters>:
{
 8011710:	b510      	push	{r4, lr}
 8011712:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011714:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011718:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801171a:	460a      	mov	r2, r1
 801171c:	4601      	mov	r1, r0
 801171e:	4803      	ldr	r0, [pc, #12]	; (801172c <SUBGRF_ReadRegisters+0x1c>)
 8011720:	f7f4 f8bc 	bl	800589c <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011724:	f384 8810 	msr	PRIMASK, r4
}
 8011728:	bd10      	pop	{r4, pc}
 801172a:	bf00      	nop
 801172c:	20000238 	.word	0x20000238

08011730 <SUBGRF_GetRandom>:
{
 8011730:	b570      	push	{r4, r5, r6, lr}
 8011732:	b082      	sub	sp, #8
    uint32_t number = 0;
 8011734:	2600      	movs	r6, #0
 8011736:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8011738:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801173c:	f7ff fdf2 	bl	8011324 <SUBGRF_ReadRegister>
 8011740:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8011742:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8011746:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801174a:	f7ff fcf9 	bl	8011140 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801174e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8011752:	f7ff fde7 	bl	8011324 <SUBGRF_ReadRegister>
 8011756:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8011758:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 801175c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8011760:	f7ff fcee 	bl	8011140 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8011764:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011768:	f7ff fb32 	bl	8010dd0 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801176c:	2204      	movs	r2, #4
 801176e:	eb0d 0102 	add.w	r1, sp, r2
 8011772:	f640 0019 	movw	r0, #2073	; 0x819
 8011776:	f7ff ffcb 	bl	8011710 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 801177a:	4630      	mov	r0, r6
 801177c:	f7ff faf4 	bl	8010d68 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8011780:	4629      	mov	r1, r5
 8011782:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8011786:	f7ff fcdb 	bl	8011140 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801178a:	4621      	mov	r1, r4
 801178c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8011790:	f7ff fcd6 	bl	8011140 <SUBGRF_WriteRegister>
}
 8011794:	9801      	ldr	r0, [sp, #4]
 8011796:	b002      	add	sp, #8
 8011798:	bd70      	pop	{r4, r5, r6, pc}
	...

0801179c <SUBGRF_WriteBuffer>:
{
 801179c:	b510      	push	{r4, lr}
 801179e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80117a0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80117a4:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80117a6:	460a      	mov	r2, r1
 80117a8:	4601      	mov	r1, r0
 80117aa:	4803      	ldr	r0, [pc, #12]	; (80117b8 <SUBGRF_WriteBuffer+0x1c>)
 80117ac:	f7f4 f9cc 	bl	8005b48 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80117b0:	f384 8810 	msr	PRIMASK, r4
}
 80117b4:	bd10      	pop	{r4, pc}
 80117b6:	bf00      	nop
 80117b8:	20000238 	.word	0x20000238

080117bc <SUBGRF_SetPayload>:
{
 80117bc:	b508      	push	{r3, lr}
 80117be:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80117c0:	4601      	mov	r1, r0
 80117c2:	2000      	movs	r0, #0
 80117c4:	f7ff ffea 	bl	801179c <SUBGRF_WriteBuffer>
}
 80117c8:	bd08      	pop	{r3, pc}

080117ca <SUBGRF_SendPayload>:
{
 80117ca:	b510      	push	{r4, lr}
 80117cc:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 80117ce:	f7ff fff5 	bl	80117bc <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80117d2:	4620      	mov	r0, r4
 80117d4:	f7ff fae2 	bl	8010d9c <SUBGRF_SetTx>
}
 80117d8:	bd10      	pop	{r4, pc}
	...

080117dc <SUBGRF_ReadBuffer>:
{
 80117dc:	b510      	push	{r4, lr}
 80117de:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80117e0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80117e4:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80117e6:	460a      	mov	r2, r1
 80117e8:	4601      	mov	r1, r0
 80117ea:	4803      	ldr	r0, [pc, #12]	; (80117f8 <SUBGRF_ReadBuffer+0x1c>)
 80117ec:	f7f4 f9f6 	bl	8005bdc <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80117f0:	f384 8810 	msr	PRIMASK, r4
}
 80117f4:	bd10      	pop	{r4, pc}
 80117f6:	bf00      	nop
 80117f8:	20000238 	.word	0x20000238

080117fc <SUBGRF_GetPayload>:
{
 80117fc:	b570      	push	{r4, r5, r6, lr}
 80117fe:	b082      	sub	sp, #8
 8011800:	4606      	mov	r6, r0
 8011802:	460c      	mov	r4, r1
 8011804:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8011806:	2300      	movs	r3, #0
 8011808:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 801180c:	f10d 0107 	add.w	r1, sp, #7
 8011810:	4620      	mov	r0, r4
 8011812:	f7ff fea7 	bl	8011564 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8011816:	7822      	ldrb	r2, [r4, #0]
 8011818:	42aa      	cmp	r2, r5
 801181a:	d902      	bls.n	8011822 <SUBGRF_GetPayload+0x26>
        return 1;
 801181c:	2001      	movs	r0, #1
}
 801181e:	b002      	add	sp, #8
 8011820:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8011822:	4631      	mov	r1, r6
 8011824:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011828:	f7ff ffd8 	bl	80117dc <SUBGRF_ReadBuffer>
    return 0;
 801182c:	2000      	movs	r0, #0
 801182e:	e7f6      	b.n	801181e <SUBGRF_GetPayload+0x22>

08011830 <SUBGRF_SetSwitch>:
{
 8011830:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8011832:	2901      	cmp	r1, #1
 8011834:	d003      	beq.n	801183e <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8011836:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8011838:	f7f1 f8f0 	bl	8002a1c <RBI_ConfigRFSwitch>
}
 801183c:	bd10      	pop	{r4, pc}
 801183e:	4604      	mov	r4, r0
 8011840:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8011842:	2c01      	cmp	r4, #1
 8011844:	d003      	beq.n	801184e <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8011846:	2c02      	cmp	r4, #2
 8011848:	d1f6      	bne.n	8011838 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 801184a:	2003      	movs	r0, #3
 801184c:	e7f4      	b.n	8011838 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801184e:	2004      	movs	r0, #4
 8011850:	f7ff fd78 	bl	8011344 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8011854:	2002      	movs	r0, #2
 8011856:	e7f6      	b.n	8011846 <SUBGRF_SetSwitch+0x16>

08011858 <SUBGRF_SetRfTxPower>:
{
 8011858:	b538      	push	{r3, r4, r5, lr}
 801185a:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 801185c:	f7f1 f8e2 	bl	8002a24 <RBI_GetTxConfig>
    switch (TxConfig)
 8011860:	b148      	cbz	r0, 8011876 <SUBGRF_SetRfTxPower+0x1e>
 8011862:	2802      	cmp	r0, #2
 8011864:	d10d      	bne.n	8011882 <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8011866:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8011868:	2202      	movs	r2, #2
 801186a:	4621      	mov	r1, r4
 801186c:	4628      	mov	r0, r5
 801186e:	f7ff fdec 	bl	801144a <SUBGRF_SetTxParams>
}
 8011872:	4628      	mov	r0, r5
 8011874:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8011876:	2c0f      	cmp	r4, #15
 8011878:	dc01      	bgt.n	801187e <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 801187a:	2501      	movs	r5, #1
 801187c:	e7f4      	b.n	8011868 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 801187e:	2502      	movs	r5, #2
 8011880:	e7f2      	b.n	8011868 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8011882:	2501      	movs	r5, #1
 8011884:	e7f0      	b.n	8011868 <SUBGRF_SetRfTxPower+0x10>

08011886 <SUBGRF_GetRadioWakeUpTime>:
}
 8011886:	2001      	movs	r0, #1
 8011888:	4770      	bx	lr
	...

0801188c <HAL_SUBGHZ_TxCpltCallback>:
{
 801188c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801188e:	4b02      	ldr	r3, [pc, #8]	; (8011898 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	2001      	movs	r0, #1
 8011894:	4798      	blx	r3
}
 8011896:	bd08      	pop	{r3, pc}
 8011898:	20001154 	.word	0x20001154

0801189c <HAL_SUBGHZ_RxCpltCallback>:
{
 801189c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801189e:	4b02      	ldr	r3, [pc, #8]	; (80118a8 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	2002      	movs	r0, #2
 80118a4:	4798      	blx	r3
}
 80118a6:	bd08      	pop	{r3, pc}
 80118a8:	20001154 	.word	0x20001154

080118ac <HAL_SUBGHZ_CRCErrorCallback>:
{
 80118ac:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80118ae:	4b02      	ldr	r3, [pc, #8]	; (80118b8 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	2040      	movs	r0, #64	; 0x40
 80118b4:	4798      	blx	r3
}
 80118b6:	bd08      	pop	{r3, pc}
 80118b8:	20001154 	.word	0x20001154

080118bc <HAL_SUBGHZ_CADStatusCallback>:
{
 80118bc:	b508      	push	{r3, lr}
    switch (cadstatus)
 80118be:	b111      	cbz	r1, 80118c6 <HAL_SUBGHZ_CADStatusCallback+0xa>
 80118c0:	2901      	cmp	r1, #1
 80118c2:	d005      	beq.n	80118d0 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 80118c4:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80118c6:	4b05      	ldr	r3, [pc, #20]	; (80118dc <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	2080      	movs	r0, #128	; 0x80
 80118cc:	4798      	blx	r3
            break;
 80118ce:	e7f9      	b.n	80118c4 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80118d0:	4b02      	ldr	r3, [pc, #8]	; (80118dc <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80118d8:	4798      	blx	r3
}
 80118da:	e7f3      	b.n	80118c4 <HAL_SUBGHZ_CADStatusCallback+0x8>
 80118dc:	20001154 	.word	0x20001154

080118e0 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 80118e0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80118e2:	4b03      	ldr	r3, [pc, #12]	; (80118f0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80118ea:	4798      	blx	r3
}
 80118ec:	bd08      	pop	{r3, pc}
 80118ee:	bf00      	nop
 80118f0:	20001154 	.word	0x20001154

080118f4 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 80118f4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80118f6:	4b02      	ldr	r3, [pc, #8]	; (8011900 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	2020      	movs	r0, #32
 80118fc:	4798      	blx	r3
}
 80118fe:	bd08      	pop	{r3, pc}
 8011900:	20001154 	.word	0x20001154

08011904 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8011904:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8011906:	4b02      	ldr	r3, [pc, #8]	; (8011910 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	2004      	movs	r0, #4
 801190c:	4798      	blx	r3
}
 801190e:	bd08      	pop	{r3, pc}
 8011910:	20001154 	.word	0x20001154

08011914 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8011914:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8011916:	4b02      	ldr	r3, [pc, #8]	; (8011920 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	2008      	movs	r0, #8
 801191c:	4798      	blx	r3
}
 801191e:	bd08      	pop	{r3, pc}
 8011920:	20001154 	.word	0x20001154

08011924 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8011924:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8011926:	4b02      	ldr	r3, [pc, #8]	; (8011930 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	2010      	movs	r0, #16
 801192c:	4798      	blx	r3
}
 801192e:	bd08      	pop	{r3, pc}
 8011930:	20001154 	.word	0x20001154

08011934 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8011934:	4601      	mov	r1, r0
 8011936:	b188      	cbz	r0, 801195c <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8011938:	2300      	movs	r3, #0
 801193a:	2b15      	cmp	r3, #21
 801193c:	d80d      	bhi.n	801195a <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801193e:	4618      	mov	r0, r3
 8011940:	4a07      	ldr	r2, [pc, #28]	; (8011960 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8011942:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011946:	428a      	cmp	r2, r1
 8011948:	d802      	bhi.n	8011950 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801194a:	3301      	adds	r3, #1
 801194c:	b2db      	uxtb	r3, r3
 801194e:	e7f4      	b.n	801193a <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8011950:	4b03      	ldr	r3, [pc, #12]	; (8011960 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8011952:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8011956:	7900      	ldrb	r0, [r0, #4]
 8011958:	4770      	bx	lr
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801195a:	e7fe      	b.n	801195a <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 801195c:	201f      	movs	r0, #31
}
 801195e:	4770      	bx	lr
 8011960:	08014624 	.word	0x08014624

08011964 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8011964:	b570      	push	{r4, r5, r6, lr}
 8011966:	b082      	sub	sp, #8
 8011968:	4606      	mov	r6, r0
 801196a:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 801196c:	4b1d      	ldr	r3, [pc, #116]	; (80119e4 <SUBGRF_GetCFO+0x80>)
 801196e:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8011970:	f640 0007 	movw	r0, #2055	; 0x807
 8011974:	f7ff fcd6 	bl	8011324 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8011978:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 801197c:	3308      	adds	r3, #8
 801197e:	446b      	add	r3, sp
 8011980:	f813 5c04 	ldrb.w	r5, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8011984:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8011988:	3b01      	subs	r3, #1
 801198a:	fa05 f303 	lsl.w	r3, r5, r3
 801198e:	4d16      	ldr	r5, [pc, #88]	; (80119e8 <SUBGRF_GetCFO+0x84>)
 8011990:	fbb5 f5f3 	udiv	r5, r5, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8011994:	fbb5 f2f6 	udiv	r2, r5, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8011998:	2a07      	cmp	r2, #7
 801199a:	d921      	bls.n	80119e0 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 801199c:	2001      	movs	r0, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 801199e:	fb00 f202 	mul.w	r2, r0, r2
 80119a2:	2a03      	cmp	r2, #3
 80119a4:	d800      	bhi.n	80119a8 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 80119a6:	2004      	movs	r0, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80119a8:	fb00 f505 	mul.w	r5, r0, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 80119ac:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80119b0:	f7ff fcb8 	bl	8011324 <SUBGRF_ReadRegister>
 80119b4:	0200      	lsls	r0, r0, #8
 80119b6:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 80119ba:	f240 60b1 	movw	r0, #1713	; 0x6b1
 80119be:	f7ff fcb1 	bl	8011324 <SUBGRF_ReadRegister>
 80119c2:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80119c4:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80119c8:	d003      	beq.n	80119d2 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 80119ca:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 80119ce:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80119d2:	096d      	lsrs	r5, r5, #5
 80119d4:	fb05 f000 	mul.w	r0, r5, r0
 80119d8:	11c0      	asrs	r0, r0, #7
 80119da:	6020      	str	r0, [r4, #0]
}
 80119dc:	b002      	add	sp, #8
 80119de:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 80119e0:	2002      	movs	r0, #2
 80119e2:	e7dc      	b.n	801199e <SUBGRF_GetCFO+0x3a>
 80119e4:	0c0a0804 	.word	0x0c0a0804
 80119e8:	01e84800 	.word	0x01e84800

080119ec <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 80119ec:	f04f 30ff 	mov.w	r0, #4294967295
 80119f0:	4770      	bx	lr

080119f2 <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 80119f2:	f04f 30ff 	mov.w	r0, #4294967295
 80119f6:	4770      	bx	lr

080119f8 <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 80119f8:	4770      	bx	lr

080119fa <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 80119fa:	2000      	movs	r0, #0
 80119fc:	4770      	bx	lr

080119fe <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 80119fe:	2000      	movs	r0, #0
 8011a00:	4770      	bx	lr

08011a02 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8011a02:	4770      	bx	lr

08011a04 <RFW_TransmitInit>:

    status= 0;
  }
#endif
  return status;
}
 8011a04:	f04f 30ff 	mov.w	r0, #4294967295
 8011a08:	4770      	bx	lr

08011a0a <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 8011a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a0e:	4770      	bx	lr

08011a10 <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8011a10:	4770      	bx	lr

08011a12 <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8011a12:	4770      	bx	lr

08011a14 <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8011a14:	4770      	bx	lr
	...

08011a18 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8011a18:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a1a:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011a1e:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8011a20:	4b1e      	ldr	r3, [pc, #120]	; (8011a9c <TRACE_AllocateBufer+0x84>)
 8011a22:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8011a26:	8a1a      	ldrh	r2, [r3, #16]
 8011a28:	4594      	cmp	ip, r2
 8011a2a:	d011      	beq.n	8011a50 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8011a2c:	4594      	cmp	ip, r2
 8011a2e:	d921      	bls.n	8011a74 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8011a30:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8011a34:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8011a36:	4283      	cmp	r3, r0
 8011a38:	d81f      	bhi.n	8011a7a <TRACE_AllocateBufer+0x62>
 8011a3a:	4282      	cmp	r2, r0
 8011a3c:	d91d      	bls.n	8011a7a <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8011a3e:	4b17      	ldr	r3, [pc, #92]	; (8011a9c <TRACE_AllocateBufer+0x84>)
 8011a40:	2401      	movs	r4, #1
 8011a42:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8011a44:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8011a48:	2400      	movs	r4, #0
 8011a4a:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8011a4c:	4613      	mov	r3, r2
 8011a4e:	e014      	b.n	8011a7a <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8011a50:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8011a54:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8011a56:	4298      	cmp	r0, r3
 8011a58:	d30f      	bcc.n	8011a7a <TRACE_AllocateBufer+0x62>
 8011a5a:	4282      	cmp	r2, r0
 8011a5c:	d90d      	bls.n	8011a7a <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8011a5e:	4b0f      	ldr	r3, [pc, #60]	; (8011a9c <TRACE_AllocateBufer+0x84>)
 8011a60:	2401      	movs	r4, #1
 8011a62:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8011a64:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8011a68:	f04f 0c00 	mov.w	ip, #0
 8011a6c:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8011a70:	4613      	mov	r3, r2
 8011a72:	e002      	b.n	8011a7a <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8011a74:	eba2 030c 	sub.w	r3, r2, ip
 8011a78:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8011a7a:	4283      	cmp	r3, r0
 8011a7c:	d90a      	bls.n	8011a94 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8011a7e:	4a07      	ldr	r2, [pc, #28]	; (8011a9c <TRACE_AllocateBufer+0x84>)
 8011a80:	8a53      	ldrh	r3, [r2, #18]
 8011a82:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8011a84:	4403      	add	r3, r0
 8011a86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011a8a:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8011a8c:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a8e:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8011a92:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8011a94:	f04f 30ff 	mov.w	r0, #4294967295
 8011a98:	e7f9      	b.n	8011a8e <TRACE_AllocateBufer+0x76>
 8011a9a:	bf00      	nop
 8011a9c:	20001558 	.word	0x20001558

08011aa0 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011aa0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011aa4:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8011aa6:	4a03      	ldr	r2, [pc, #12]	; (8011ab4 <TRACE_Lock+0x14>)
 8011aa8:	8ad3      	ldrh	r3, [r2, #22]
 8011aaa:	3301      	adds	r3, #1
 8011aac:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011aae:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8011ab2:	4770      	bx	lr
 8011ab4:	20001558 	.word	0x20001558

08011ab8 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ab8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011abc:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8011abe:	4a03      	ldr	r2, [pc, #12]	; (8011acc <TRACE_UnLock+0x14>)
 8011ac0:	8ad3      	ldrh	r3, [r2, #22]
 8011ac2:	3b01      	subs	r3, #1
 8011ac4:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ac6:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8011aca:	4770      	bx	lr
 8011acc:	20001558 	.word	0x20001558

08011ad0 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8011ad0:	4b02      	ldr	r3, [pc, #8]	; (8011adc <TRACE_IsLocked+0xc>)
 8011ad2:	8ad8      	ldrh	r0, [r3, #22]
}
 8011ad4:	3800      	subs	r0, #0
 8011ad6:	bf18      	it	ne
 8011ad8:	2001      	movne	r0, #1
 8011ada:	4770      	bx	lr
 8011adc:	20001558 	.word	0x20001558

08011ae0 <UTIL_ADV_TRACE_Init>:
{
 8011ae0:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8011ae2:	2218      	movs	r2, #24
 8011ae4:	2100      	movs	r1, #0
 8011ae6:	4807      	ldr	r0, [pc, #28]	; (8011b04 <UTIL_ADV_TRACE_Init+0x24>)
 8011ae8:	f000 f98f 	bl	8011e0a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8011aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011af0:	2100      	movs	r1, #0
 8011af2:	4805      	ldr	r0, [pc, #20]	; (8011b08 <UTIL_ADV_TRACE_Init+0x28>)
 8011af4:	f000 f989 	bl	8011e0a <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8011af8:	4b04      	ldr	r3, [pc, #16]	; (8011b0c <UTIL_ADV_TRACE_Init+0x2c>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	4804      	ldr	r0, [pc, #16]	; (8011b10 <UTIL_ADV_TRACE_Init+0x30>)
 8011afe:	4798      	blx	r3
}
 8011b00:	bd08      	pop	{r3, pc}
 8011b02:	bf00      	nop
 8011b04:	20001558 	.word	0x20001558
 8011b08:	20001158 	.word	0x20001158
 8011b0c:	080138d8 	.word	0x080138d8
 8011b10:	08011c95 	.word	0x08011c95

08011b14 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8011b14:	4b01      	ldr	r3, [pc, #4]	; (8011b1c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8011b16:	6058      	str	r0, [r3, #4]
}
 8011b18:	4770      	bx	lr
 8011b1a:	bf00      	nop
 8011b1c:	20001558 	.word	0x20001558

08011b20 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8011b20:	4b01      	ldr	r3, [pc, #4]	; (8011b28 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8011b22:	7218      	strb	r0, [r3, #8]
}
 8011b24:	4770      	bx	lr
 8011b26:	bf00      	nop
 8011b28:	20001558 	.word	0x20001558

08011b2c <TRACE_Send>:
{
 8011b2c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b2e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011b32:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8011b34:	f7ff ffcc 	bl	8011ad0 <TRACE_IsLocked>
 8011b38:	b118      	cbz	r0, 8011b42 <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011b3a:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8011b3e:	2000      	movs	r0, #0
}
 8011b40:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8011b42:	f7ff ffad 	bl	8011aa0 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8011b46:	4b1d      	ldr	r3, [pc, #116]	; (8011bbc <TRACE_Send+0x90>)
 8011b48:	8a1a      	ldrh	r2, [r3, #16]
 8011b4a:	8a5b      	ldrh	r3, [r3, #18]
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	d02e      	beq.n	8011bae <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8011b50:	491a      	ldr	r1, [pc, #104]	; (8011bbc <TRACE_Send+0x90>)
 8011b52:	7889      	ldrb	r1, [r1, #2]
 8011b54:	2901      	cmp	r1, #1
 8011b56:	d017      	beq.n	8011b88 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8011b58:	4a18      	ldr	r2, [pc, #96]	; (8011bbc <TRACE_Send+0x90>)
 8011b5a:	7892      	ldrb	r2, [r2, #2]
 8011b5c:	b932      	cbnz	r2, 8011b6c <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8011b5e:	4a17      	ldr	r2, [pc, #92]	; (8011bbc <TRACE_Send+0x90>)
 8011b60:	8a12      	ldrh	r2, [r2, #16]
 8011b62:	4293      	cmp	r3, r2
 8011b64:	d91e      	bls.n	8011ba4 <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8011b66:	1a9b      	subs	r3, r3, r2
 8011b68:	4a14      	ldr	r2, [pc, #80]	; (8011bbc <TRACE_Send+0x90>)
 8011b6a:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8011b6c:	4e13      	ldr	r6, [pc, #76]	; (8011bbc <TRACE_Send+0x90>)
 8011b6e:	8a33      	ldrh	r3, [r6, #16]
 8011b70:	4d13      	ldr	r5, [pc, #76]	; (8011bc0 <TRACE_Send+0x94>)
 8011b72:	441d      	add	r5, r3
 8011b74:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8011b78:	f7ef ffa4 	bl	8001ac4 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8011b7c:	4b11      	ldr	r3, [pc, #68]	; (8011bc4 <TRACE_Send+0x98>)
 8011b7e:	68db      	ldr	r3, [r3, #12]
 8011b80:	8ab1      	ldrh	r1, [r6, #20]
 8011b82:	4628      	mov	r0, r5
 8011b84:	4798      	blx	r3
 8011b86:	e7db      	b.n	8011b40 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8011b88:	480c      	ldr	r0, [pc, #48]	; (8011bbc <TRACE_Send+0x90>)
 8011b8a:	8801      	ldrh	r1, [r0, #0]
 8011b8c:	1a8a      	subs	r2, r1, r2
 8011b8e:	b292      	uxth	r2, r2
 8011b90:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8011b92:	2102      	movs	r1, #2
 8011b94:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8011b96:	2100      	movs	r1, #0
 8011b98:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8011b9a:	2a00      	cmp	r2, #0
 8011b9c:	d1dc      	bne.n	8011b58 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8011b9e:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8011ba0:	8201      	strh	r1, [r0, #16]
 8011ba2:	e7d9      	b.n	8011b58 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8011ba4:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8011ba8:	4a04      	ldr	r2, [pc, #16]	; (8011bbc <TRACE_Send+0x90>)
 8011baa:	8293      	strh	r3, [r2, #20]
 8011bac:	e7de      	b.n	8011b6c <TRACE_Send+0x40>
      TRACE_UnLock();
 8011bae:	f7ff ff83 	bl	8011ab8 <TRACE_UnLock>
 8011bb2:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8011bb6:	2000      	movs	r0, #0
}
 8011bb8:	e7c2      	b.n	8011b40 <TRACE_Send+0x14>
 8011bba:	bf00      	nop
 8011bbc:	20001558 	.word	0x20001558
 8011bc0:	20001158 	.word	0x20001158
 8011bc4:	080138d8 	.word	0x080138d8

08011bc8 <UTIL_ADV_TRACE_COND_FSend>:
{
 8011bc8:	b408      	push	{r3}
 8011bca:	b530      	push	{r4, r5, lr}
 8011bcc:	b086      	sub	sp, #24
 8011bce:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8011bd6:	4b2c      	ldr	r3, [pc, #176]	; (8011c88 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8011bd8:	7a1b      	ldrb	r3, [r3, #8]
 8011bda:	4283      	cmp	r3, r0
 8011bdc:	d34d      	bcc.n	8011c7a <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8011bde:	4b2a      	ldr	r3, [pc, #168]	; (8011c88 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8011be0:	68db      	ldr	r3, [r3, #12]
 8011be2:	ea31 0303 	bics.w	r3, r1, r3
 8011be6:	d14b      	bne.n	8011c80 <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8011be8:	4b27      	ldr	r3, [pc, #156]	; (8011c88 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8011bea:	685b      	ldr	r3, [r3, #4]
 8011bec:	b123      	cbz	r3, 8011bf8 <UTIL_ADV_TRACE_COND_FSend+0x30>
 8011bee:	b11a      	cbz	r2, 8011bf8 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8011bf0:	f10d 0102 	add.w	r1, sp, #2
 8011bf4:	a801      	add	r0, sp, #4
 8011bf6:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8011bf8:	ab0a      	add	r3, sp, #40	; 0x28
 8011bfa:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8011bfc:	4622      	mov	r2, r4
 8011bfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011c02:	4822      	ldr	r0, [pc, #136]	; (8011c8c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8011c04:	f000 fcd0 	bl	80125a8 <tiny_vsnprintf_like>
 8011c08:	b285      	uxth	r5, r0
  TRACE_Lock();
 8011c0a:	f7ff ff49 	bl	8011aa0 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8011c0e:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8011c12:	4428      	add	r0, r5
 8011c14:	4669      	mov	r1, sp
 8011c16:	b280      	uxth	r0, r0
 8011c18:	f7ff fefe 	bl	8011a18 <TRACE_AllocateBufer>
 8011c1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011c20:	d026      	beq.n	8011c70 <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 8011c22:	2300      	movs	r3, #0
 8011c24:	e00d      	b.n	8011c42 <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8011c26:	f8bd 2000 	ldrh.w	r2, [sp]
 8011c2a:	f103 0118 	add.w	r1, r3, #24
 8011c2e:	4469      	add	r1, sp
 8011c30:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8011c34:	4916      	ldr	r1, [pc, #88]	; (8011c90 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8011c36:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8011c38:	3201      	adds	r2, #1
 8011c3a:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8011c3e:	3301      	adds	r3, #1
 8011c40:	b29b      	uxth	r3, r3
 8011c42:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011c46:	429a      	cmp	r2, r3
 8011c48:	d8ed      	bhi.n	8011c26 <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8011c4a:	f8bd 0000 	ldrh.w	r0, [sp]
 8011c4e:	9b05      	ldr	r3, [sp, #20]
 8011c50:	4622      	mov	r2, r4
 8011c52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011c56:	4c0e      	ldr	r4, [pc, #56]	; (8011c90 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8011c58:	4420      	add	r0, r4
 8011c5a:	f000 fca5 	bl	80125a8 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8011c5e:	f7ff ff2b 	bl	8011ab8 <TRACE_UnLock>
    return TRACE_Send();
 8011c62:	f7ff ff63 	bl	8011b2c <TRACE_Send>
}
 8011c66:	b006      	add	sp, #24
 8011c68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c6c:	b001      	add	sp, #4
 8011c6e:	4770      	bx	lr
  TRACE_UnLock();
 8011c70:	f7ff ff22 	bl	8011ab8 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8011c74:	f06f 0002 	mvn.w	r0, #2
 8011c78:	e7f5      	b.n	8011c66 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 8011c7a:	f06f 0004 	mvn.w	r0, #4
 8011c7e:	e7f2      	b.n	8011c66 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8011c80:	f06f 0005 	mvn.w	r0, #5
 8011c84:	e7ef      	b.n	8011c66 <UTIL_ADV_TRACE_COND_FSend+0x9e>
 8011c86:	bf00      	nop
 8011c88:	20001558 	.word	0x20001558
 8011c8c:	20001570 	.word	0x20001570
 8011c90:	20001158 	.word	0x20001158

08011c94 <TRACE_TxCpltCallback>:
{
 8011c94:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c96:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011c9a:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8011c9c:	4b25      	ldr	r3, [pc, #148]	; (8011d34 <TRACE_TxCpltCallback+0xa0>)
 8011c9e:	789b      	ldrb	r3, [r3, #2]
 8011ca0:	2b02      	cmp	r3, #2
 8011ca2:	d016      	beq.n	8011cd2 <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8011ca4:	4a23      	ldr	r2, [pc, #140]	; (8011d34 <TRACE_TxCpltCallback+0xa0>)
 8011ca6:	8a13      	ldrh	r3, [r2, #16]
 8011ca8:	8a90      	ldrh	r0, [r2, #20]
 8011caa:	4403      	add	r3, r0
 8011cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011cb0:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8011cb2:	4b20      	ldr	r3, [pc, #128]	; (8011d34 <TRACE_TxCpltCallback+0xa0>)
 8011cb4:	8a1a      	ldrh	r2, [r3, #16]
 8011cb6:	8a5b      	ldrh	r3, [r3, #18]
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	d003      	beq.n	8011cc4 <TRACE_TxCpltCallback+0x30>
 8011cbc:	481d      	ldr	r0, [pc, #116]	; (8011d34 <TRACE_TxCpltCallback+0xa0>)
 8011cbe:	8ac0      	ldrh	r0, [r0, #22]
 8011cc0:	2801      	cmp	r0, #1
 8011cc2:	d00b      	beq.n	8011cdc <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011cc4:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8011cc8:	f7ef ff02 	bl	8001ad0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8011ccc:	f7ff fef4 	bl	8011ab8 <TRACE_UnLock>
}
 8011cd0:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8011cd2:	4b18      	ldr	r3, [pc, #96]	; (8011d34 <TRACE_TxCpltCallback+0xa0>)
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8011cd8:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8011cda:	e7ea      	b.n	8011cb2 <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8011cdc:	4815      	ldr	r0, [pc, #84]	; (8011d34 <TRACE_TxCpltCallback+0xa0>)
 8011cde:	7880      	ldrb	r0, [r0, #2]
 8011ce0:	2801      	cmp	r0, #1
 8011ce2:	d014      	beq.n	8011d0e <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8011ce4:	4a13      	ldr	r2, [pc, #76]	; (8011d34 <TRACE_TxCpltCallback+0xa0>)
 8011ce6:	7892      	ldrb	r2, [r2, #2]
 8011ce8:	b932      	cbnz	r2, 8011cf8 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8011cea:	4a12      	ldr	r2, [pc, #72]	; (8011d34 <TRACE_TxCpltCallback+0xa0>)
 8011cec:	8a12      	ldrh	r2, [r2, #16]
 8011cee:	4293      	cmp	r3, r2
 8011cf0:	d91b      	bls.n	8011d2a <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8011cf2:	1a9b      	subs	r3, r3, r2
 8011cf4:	4a0f      	ldr	r2, [pc, #60]	; (8011d34 <TRACE_TxCpltCallback+0xa0>)
 8011cf6:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8011cf8:	4b0e      	ldr	r3, [pc, #56]	; (8011d34 <TRACE_TxCpltCallback+0xa0>)
 8011cfa:	8a1a      	ldrh	r2, [r3, #16]
 8011cfc:	480e      	ldr	r0, [pc, #56]	; (8011d38 <TRACE_TxCpltCallback+0xa4>)
 8011cfe:	4410      	add	r0, r2
 8011d00:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8011d04:	4a0d      	ldr	r2, [pc, #52]	; (8011d3c <TRACE_TxCpltCallback+0xa8>)
 8011d06:	68d2      	ldr	r2, [r2, #12]
 8011d08:	8a99      	ldrh	r1, [r3, #20]
 8011d0a:	4790      	blx	r2
 8011d0c:	e7e0      	b.n	8011cd0 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8011d0e:	4c09      	ldr	r4, [pc, #36]	; (8011d34 <TRACE_TxCpltCallback+0xa0>)
 8011d10:	8820      	ldrh	r0, [r4, #0]
 8011d12:	1a82      	subs	r2, r0, r2
 8011d14:	b292      	uxth	r2, r2
 8011d16:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8011d18:	2002      	movs	r0, #2
 8011d1a:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8011d1c:	2000      	movs	r0, #0
 8011d1e:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8011d20:	2a00      	cmp	r2, #0
 8011d22:	d1df      	bne.n	8011ce4 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8011d24:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8011d26:	8220      	strh	r0, [r4, #16]
 8011d28:	e7dc      	b.n	8011ce4 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8011d2a:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8011d2e:	4a01      	ldr	r2, [pc, #4]	; (8011d34 <TRACE_TxCpltCallback+0xa0>)
 8011d30:	8293      	strh	r3, [r2, #20]
 8011d32:	e7e1      	b.n	8011cf8 <TRACE_TxCpltCallback+0x64>
 8011d34:	20001558 	.word	0x20001558
 8011d38:	20001158 	.word	0x20001158
 8011d3c:	080138d8 	.word	0x080138d8

08011d40 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8011d40:	2300      	movs	r3, #0
 8011d42:	4a02      	ldr	r2, [pc, #8]	; (8011d4c <UTIL_LPM_Init+0xc>)
 8011d44:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8011d46:	4a02      	ldr	r2, [pc, #8]	; (8011d50 <UTIL_LPM_Init+0x10>)
 8011d48:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8011d4a:	4770      	bx	lr
 8011d4c:	20001774 	.word	0x20001774
 8011d50:	20001770 	.word	0x20001770

08011d54 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d54:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011d58:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8011d5a:	b141      	cbz	r1, 8011d6e <UTIL_LPM_SetStopMode+0x1a>
 8011d5c:	2901      	cmp	r1, #1
 8011d5e:	d103      	bne.n	8011d68 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8011d60:	4906      	ldr	r1, [pc, #24]	; (8011d7c <UTIL_LPM_SetStopMode+0x28>)
 8011d62:	680a      	ldr	r2, [r1, #0]
 8011d64:	4310      	orrs	r0, r2
 8011d66:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d68:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011d6c:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8011d6e:	4903      	ldr	r1, [pc, #12]	; (8011d7c <UTIL_LPM_SetStopMode+0x28>)
 8011d70:	680a      	ldr	r2, [r1, #0]
 8011d72:	ea22 0000 	bic.w	r0, r2, r0
 8011d76:	6008      	str	r0, [r1, #0]
      break;
 8011d78:	e7f6      	b.n	8011d68 <UTIL_LPM_SetStopMode+0x14>
 8011d7a:	bf00      	nop
 8011d7c:	20001774 	.word	0x20001774

08011d80 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d80:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011d84:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8011d86:	b141      	cbz	r1, 8011d9a <UTIL_LPM_SetOffMode+0x1a>
 8011d88:	2901      	cmp	r1, #1
 8011d8a:	d103      	bne.n	8011d94 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8011d8c:	4906      	ldr	r1, [pc, #24]	; (8011da8 <UTIL_LPM_SetOffMode+0x28>)
 8011d8e:	680a      	ldr	r2, [r1, #0]
 8011d90:	4310      	orrs	r0, r2
 8011d92:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d94:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011d98:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8011d9a:	4903      	ldr	r1, [pc, #12]	; (8011da8 <UTIL_LPM_SetOffMode+0x28>)
 8011d9c:	680a      	ldr	r2, [r1, #0]
 8011d9e:	ea22 0000 	bic.w	r0, r2, r0
 8011da2:	6008      	str	r0, [r1, #0]
      break;
 8011da4:	e7f6      	b.n	8011d94 <UTIL_LPM_SetOffMode+0x14>
 8011da6:	bf00      	nop
 8011da8:	20001770 	.word	0x20001770

08011dac <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8011dac:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011dae:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011db2:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8011db4:	4b0c      	ldr	r3, [pc, #48]	; (8011de8 <UTIL_LPM_EnterLowPower+0x3c>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	b13b      	cbz	r3, 8011dca <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8011dba:	4d0c      	ldr	r5, [pc, #48]	; (8011dec <UTIL_LPM_EnterLowPower+0x40>)
 8011dbc:	682b      	ldr	r3, [r5, #0]
 8011dbe:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8011dc0:	686b      	ldr	r3, [r5, #4]
 8011dc2:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011dc4:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8011dc8:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8011dca:	4b09      	ldr	r3, [pc, #36]	; (8011df0 <UTIL_LPM_EnterLowPower+0x44>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	b12b      	cbz	r3, 8011ddc <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8011dd0:	4d06      	ldr	r5, [pc, #24]	; (8011dec <UTIL_LPM_EnterLowPower+0x40>)
 8011dd2:	68ab      	ldr	r3, [r5, #8]
 8011dd4:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8011dd6:	68eb      	ldr	r3, [r5, #12]
 8011dd8:	4798      	blx	r3
 8011dda:	e7f3      	b.n	8011dc4 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8011ddc:	4d03      	ldr	r5, [pc, #12]	; (8011dec <UTIL_LPM_EnterLowPower+0x40>)
 8011dde:	692b      	ldr	r3, [r5, #16]
 8011de0:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8011de2:	696b      	ldr	r3, [r5, #20]
 8011de4:	4798      	blx	r3
 8011de6:	e7ed      	b.n	8011dc4 <UTIL_LPM_EnterLowPower+0x18>
 8011de8:	20001774 	.word	0x20001774
 8011dec:	08013874 	.word	0x08013874
 8011df0:	20001770 	.word	0x20001770

08011df4 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8011df4:	e004      	b.n	8011e00 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8011df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011dfa:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8011dfe:	461a      	mov	r2, r3
 8011e00:	1e53      	subs	r3, r2, #1
 8011e02:	b29b      	uxth	r3, r3
 8011e04:	2a00      	cmp	r2, #0
 8011e06:	d1f6      	bne.n	8011df6 <UTIL_MEM_cpy_8+0x2>
    }
}
 8011e08:	4770      	bx	lr

08011e0a <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8011e0a:	e002      	b.n	8011e12 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8011e0c:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8011e10:	461a      	mov	r2, r3
 8011e12:	1e53      	subs	r3, r2, #1
 8011e14:	b29b      	uxth	r3, r3
 8011e16:	2a00      	cmp	r2, #0
 8011e18:	d1f8      	bne.n	8011e0c <UTIL_MEM_set_8+0x2>
  }
}
 8011e1a:	4770      	bx	lr

08011e1c <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e1c:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011e20:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8011e22:	4a06      	ldr	r2, [pc, #24]	; (8011e3c <UTIL_SEQ_SetTask+0x20>)
 8011e24:	6813      	ldr	r3, [r2, #0]
 8011e26:	4303      	orrs	r3, r0
 8011e28:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8011e2a:	4a05      	ldr	r2, [pc, #20]	; (8011e40 <UTIL_SEQ_SetTask+0x24>)
 8011e2c:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8011e30:	4318      	orrs	r0, r3
 8011e32:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e36:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8011e3a:	4770      	bx	lr
 8011e3c:	2000179c 	.word	0x2000179c
 8011e40:	20001794 	.word	0x20001794

08011e44 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8011e44:	4770      	bx	lr

08011e46 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8011e46:	4770      	bx	lr

08011e48 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8011e48:	0c03      	lsrs	r3, r0, #16
 8011e4a:	041b      	lsls	r3, r3, #16
 8011e4c:	b9b3      	cbnz	r3, 8011e7c <SEQ_BitPosition+0x34>
 8011e4e:	0400      	lsls	r0, r0, #16
 8011e50:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8011e52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011e56:	d102      	bne.n	8011e5e <SEQ_BitPosition+0x16>
 8011e58:	3308      	adds	r3, #8
 8011e5a:	b2db      	uxtb	r3, r3
 8011e5c:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8011e5e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011e62:	d102      	bne.n	8011e6a <SEQ_BitPosition+0x22>
 8011e64:	3304      	adds	r3, #4
 8011e66:	b2db      	uxtb	r3, r3
 8011e68:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8011e6a:	0f00      	lsrs	r0, r0, #28
 8011e6c:	4a04      	ldr	r2, [pc, #16]	; (8011e80 <SEQ_BitPosition+0x38>)
 8011e6e:	5c10      	ldrb	r0, [r2, r0]
 8011e70:	4418      	add	r0, r3
 8011e72:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8011e74:	f1c0 001f 	rsb	r0, r0, #31
}
 8011e78:	b2c0      	uxtb	r0, r0
 8011e7a:	4770      	bx	lr
uint8_t n = 0U;
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	e7e8      	b.n	8011e52 <SEQ_BitPosition+0xa>
 8011e80:	080146d4 	.word	0x080146d4

08011e84 <UTIL_SEQ_Run>:
{
 8011e84:	b538      	push	{r3, r4, r5, lr}
  super_mask_backup = SuperMask;
 8011e86:	4b43      	ldr	r3, [pc, #268]	; (8011f94 <UTIL_SEQ_Run+0x110>)
 8011e88:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8011e8a:	4020      	ands	r0, r4
 8011e8c:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8011e8e:	4b42      	ldr	r3, [pc, #264]	; (8011f98 <UTIL_SEQ_Run+0x114>)
 8011e90:	6819      	ldr	r1, [r3, #0]
  local_evtset = EvtSet;
 8011e92:	4b42      	ldr	r3, [pc, #264]	; (8011f9c <UTIL_SEQ_Run+0x118>)
 8011e94:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8011e96:	4a42      	ldr	r2, [pc, #264]	; (8011fa0 <UTIL_SEQ_Run+0x11c>)
 8011e98:	6810      	ldr	r0, [r2, #0]
  local_evtwaited =  EvtWaited;
 8011e9a:	4a42      	ldr	r2, [pc, #264]	; (8011fa4 <UTIL_SEQ_Run+0x120>)
 8011e9c:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8011e9e:	e030      	b.n	8011f02 <UTIL_SEQ_Run+0x7e>
      counter++;
 8011ea0:	3301      	adds	r3, #1
 8011ea2:	e035      	b.n	8011f10 <UTIL_SEQ_Run+0x8c>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8011ea4:	4d40      	ldr	r5, [pc, #256]	; (8011fa8 <UTIL_SEQ_Run+0x124>)
 8011ea6:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011eaa:	6868      	ldr	r0, [r5, #4]
 8011eac:	4010      	ands	r0, r2
 8011eae:	f7ff ffcb 	bl	8011e48 <SEQ_BitPosition>
 8011eb2:	493e      	ldr	r1, [pc, #248]	; (8011fac <UTIL_SEQ_Run+0x128>)
 8011eb4:	6008      	str	r0, [r1, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8011eb6:	686a      	ldr	r2, [r5, #4]
 8011eb8:	2301      	movs	r3, #1
 8011eba:	fa03 f000 	lsl.w	r0, r3, r0
 8011ebe:	ea22 0000 	bic.w	r0, r2, r0
 8011ec2:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ec4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011ec8:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8011eca:	680a      	ldr	r2, [r1, #0]
 8011ecc:	fa03 f202 	lsl.w	r2, r3, r2
 8011ed0:	ea6f 0c02 	mvn.w	ip, r2
 8011ed4:	4830      	ldr	r0, [pc, #192]	; (8011f98 <UTIL_SEQ_Run+0x114>)
 8011ed6:	6801      	ldr	r1, [r0, #0]
 8011ed8:	ea21 0202 	bic.w	r2, r1, r2
 8011edc:	6002      	str	r2, [r0, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d12d      	bne.n	8011f3e <UTIL_SEQ_Run+0xba>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ee2:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 8011ee6:	4b31      	ldr	r3, [pc, #196]	; (8011fac <UTIL_SEQ_Run+0x128>)
 8011ee8:	681a      	ldr	r2, [r3, #0]
 8011eea:	4b31      	ldr	r3, [pc, #196]	; (8011fb0 <UTIL_SEQ_Run+0x12c>)
 8011eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ef0:	4798      	blx	r3
    local_taskset = TaskSet;
 8011ef2:	4b29      	ldr	r3, [pc, #164]	; (8011f98 <UTIL_SEQ_Run+0x114>)
 8011ef4:	6819      	ldr	r1, [r3, #0]
    local_evtset = EvtSet;
 8011ef6:	4b29      	ldr	r3, [pc, #164]	; (8011f9c <UTIL_SEQ_Run+0x118>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8011efa:	4a29      	ldr	r2, [pc, #164]	; (8011fa0 <UTIL_SEQ_Run+0x11c>)
 8011efc:	6810      	ldr	r0, [r2, #0]
    local_evtwaited = EvtWaited;
 8011efe:	4a29      	ldr	r2, [pc, #164]	; (8011fa4 <UTIL_SEQ_Run+0x120>)
 8011f00:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8011f02:	4001      	ands	r1, r0
 8011f04:	4d23      	ldr	r5, [pc, #140]	; (8011f94 <UTIL_SEQ_Run+0x110>)
 8011f06:	682d      	ldr	r5, [r5, #0]
 8011f08:	4229      	tst	r1, r5
 8011f0a:	d021      	beq.n	8011f50 <UTIL_SEQ_Run+0xcc>
 8011f0c:	4013      	ands	r3, r2
 8011f0e:	d11f      	bne.n	8011f50 <UTIL_SEQ_Run+0xcc>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011f10:	4a25      	ldr	r2, [pc, #148]	; (8011fa8 <UTIL_SEQ_Run+0x124>)
 8011f12:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011f16:	4002      	ands	r2, r0
 8011f18:	422a      	tst	r2, r5
 8011f1a:	d0c1      	beq.n	8011ea0 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8011f1c:	4922      	ldr	r1, [pc, #136]	; (8011fa8 <UTIL_SEQ_Run+0x124>)
 8011f1e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8011f22:	4002      	ands	r2, r0
 8011f24:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8011f26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011f2a:	6849      	ldr	r1, [r1, #4]
 8011f2c:	4211      	tst	r1, r2
 8011f2e:	d1b9      	bne.n	8011ea4 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8011f30:	491d      	ldr	r1, [pc, #116]	; (8011fa8 <UTIL_SEQ_Run+0x124>)
 8011f32:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011f36:	f04f 30ff 	mov.w	r0, #4294967295
 8011f3a:	6048      	str	r0, [r1, #4]
 8011f3c:	e7b2      	b.n	8011ea4 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8011f3e:	3b01      	subs	r3, #1
 8011f40:	4919      	ldr	r1, [pc, #100]	; (8011fa8 <UTIL_SEQ_Run+0x124>)
 8011f42:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8011f46:	ea0c 0202 	and.w	r2, ip, r2
 8011f4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011f4e:	e7c6      	b.n	8011ede <UTIL_SEQ_Run+0x5a>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8011f50:	4b16      	ldr	r3, [pc, #88]	; (8011fac <UTIL_SEQ_Run+0x128>)
 8011f52:	f04f 32ff 	mov.w	r2, #4294967295
 8011f56:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8011f58:	f7ff ff74 	bl	8011e44 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f5c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011f60:	b672      	cpsid	i
  local_taskset = TaskSet;
 8011f62:	4b0d      	ldr	r3, [pc, #52]	; (8011f98 <UTIL_SEQ_Run+0x114>)
 8011f64:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8011f66:	4a0d      	ldr	r2, [pc, #52]	; (8011f9c <UTIL_SEQ_Run+0x118>)
 8011f68:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8011f6a:	4a0d      	ldr	r2, [pc, #52]	; (8011fa0 <UTIL_SEQ_Run+0x11c>)
 8011f6c:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8011f6e:	4013      	ands	r3, r2
 8011f70:	4a08      	ldr	r2, [pc, #32]	; (8011f94 <UTIL_SEQ_Run+0x110>)
 8011f72:	6812      	ldr	r2, [r2, #0]
 8011f74:	4213      	tst	r3, r2
 8011f76:	d103      	bne.n	8011f80 <UTIL_SEQ_Run+0xfc>
    if ((local_evtset & EvtWaited)== 0U)
 8011f78:	4b0a      	ldr	r3, [pc, #40]	; (8011fa4 <UTIL_SEQ_Run+0x120>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	420b      	tst	r3, r1
 8011f7e:	d006      	beq.n	8011f8e <UTIL_SEQ_Run+0x10a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f80:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8011f84:	f7ff ff5f 	bl	8011e46 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8011f88:	4b02      	ldr	r3, [pc, #8]	; (8011f94 <UTIL_SEQ_Run+0x110>)
 8011f8a:	601c      	str	r4, [r3, #0]
}
 8011f8c:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_SEQ_Idle( );
 8011f8e:	f7ef fd23 	bl	80019d8 <UTIL_SEQ_Idle>
 8011f92:	e7f5      	b.n	8011f80 <UTIL_SEQ_Run+0xfc>
 8011f94:	20000110 	.word	0x20000110
 8011f98:	2000179c 	.word	0x2000179c
 8011f9c:	2000177c 	.word	0x2000177c
 8011fa0:	20000114 	.word	0x20000114
 8011fa4:	20001780 	.word	0x20001780
 8011fa8:	20001794 	.word	0x20001794
 8011fac:	20001778 	.word	0x20001778
 8011fb0:	20001784 	.word	0x20001784

08011fb4 <UTIL_SEQ_RegTask>:
{
 8011fb4:	b538      	push	{r3, r4, r5, lr}
 8011fb6:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fb8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011fbc:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8011fbe:	f7ff ff43 	bl	8011e48 <SEQ_BitPosition>
 8011fc2:	4b03      	ldr	r3, [pc, #12]	; (8011fd0 <UTIL_SEQ_RegTask+0x1c>)
 8011fc4:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011fc8:	f385 8810 	msr	PRIMASK, r5
}
 8011fcc:	bd38      	pop	{r3, r4, r5, pc}
 8011fce:	bf00      	nop
 8011fd0:	20001784 	.word	0x20001784

08011fd4 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8011fd4:	b082      	sub	sp, #8
 8011fd6:	b082      	sub	sp, #8
 8011fd8:	f10d 0c08 	add.w	ip, sp, #8
 8011fdc:	e90c 0006 	stmdb	ip, {r1, r2}
 8011fe0:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	6002      	str	r2, [r0, #0]
 8011fe6:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8011fe8:	440b      	add	r3, r1
 8011fea:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8011fec:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8011ff0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8011ff4:	440a      	add	r2, r1
 8011ff6:	b291      	uxth	r1, r2
 8011ff8:	b212      	sxth	r2, r2
 8011ffa:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8011ffc:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8012000:	db04      	blt.n	801200c <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8012002:	3301      	adds	r3, #1
 8012004:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8012006:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 801200a:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 801200c:	b002      	add	sp, #8
 801200e:	b002      	add	sp, #8
 8012010:	4770      	bx	lr

08012012 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8012012:	b082      	sub	sp, #8
 8012014:	b082      	sub	sp, #8
 8012016:	f10d 0c08 	add.w	ip, sp, #8
 801201a:	e90c 0006 	stmdb	ip, {r1, r2}
 801201e:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8012020:	2200      	movs	r2, #0
 8012022:	6002      	str	r2, [r0, #0]
 8012024:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 8012026:	1acb      	subs	r3, r1, r3
 8012028:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801202a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801202e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8012032:	1a52      	subs	r2, r2, r1
 8012034:	b291      	uxth	r1, r2
 8012036:	b212      	sxth	r2, r2
 8012038:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 801203a:	2a00      	cmp	r2, #0
 801203c:	db02      	blt.n	8012044 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 801203e:	b002      	add	sp, #8
 8012040:	b002      	add	sp, #8
 8012042:	4770      	bx	lr
    c.Seconds--;
 8012044:	3b01      	subs	r3, #1
 8012046:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8012048:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 801204c:	8081      	strh	r1, [r0, #4]
  return c;
 801204e:	e7f6      	b.n	801203e <SysTimeSub+0x2c>

08012050 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8012050:	b530      	push	{r4, r5, lr}
 8012052:	b089      	sub	sp, #36	; 0x24
 8012054:	ac02      	add	r4, sp, #8
 8012056:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801205a:	2300      	movs	r3, #0
 801205c:	9304      	str	r3, [sp, #16]
 801205e:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012062:	4d0b      	ldr	r5, [pc, #44]	; (8012090 <SysTimeSet+0x40>)
 8012064:	692b      	ldr	r3, [r5, #16]
 8012066:	a805      	add	r0, sp, #20
 8012068:	4798      	blx	r3
 801206a:	4603      	mov	r3, r0
 801206c:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801206e:	9a05      	ldr	r2, [sp, #20]
 8012070:	9200      	str	r2, [sp, #0]
 8012072:	e894 0006 	ldmia.w	r4, {r1, r2}
 8012076:	a806      	add	r0, sp, #24
 8012078:	f7ff ffcb 	bl	8012012 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801207c:	682b      	ldr	r3, [r5, #0]
 801207e:	9806      	ldr	r0, [sp, #24]
 8012080:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8012082:	68ab      	ldr	r3, [r5, #8]
 8012084:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8012088:	4798      	blx	r3
}
 801208a:	b009      	add	sp, #36	; 0x24
 801208c:	bd30      	pop	{r4, r5, pc}
 801208e:	bf00      	nop
 8012090:	08013898 	.word	0x08013898

08012094 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8012094:	b530      	push	{r4, r5, lr}
 8012096:	b087      	sub	sp, #28
 8012098:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801209a:	2300      	movs	r3, #0
 801209c:	9304      	str	r3, [sp, #16]
 801209e:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 80120a2:	6003      	str	r3, [r0, #0]
 80120a4:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80120a6:	4d0b      	ldr	r5, [pc, #44]	; (80120d4 <SysTimeGet+0x40>)
 80120a8:	692b      	ldr	r3, [r5, #16]
 80120aa:	a805      	add	r0, sp, #20
 80120ac:	4798      	blx	r3
 80120ae:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80120b0:	68eb      	ldr	r3, [r5, #12]
 80120b2:	4798      	blx	r3
 80120b4:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80120b8:	686b      	ldr	r3, [r5, #4]
 80120ba:	4798      	blx	r3
 80120bc:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80120be:	9b05      	ldr	r3, [sp, #20]
 80120c0:	9300      	str	r3, [sp, #0]
 80120c2:	9b04      	ldr	r3, [sp, #16]
 80120c4:	aa02      	add	r2, sp, #8
 80120c6:	ca06      	ldmia	r2, {r1, r2}
 80120c8:	4620      	mov	r0, r4
 80120ca:	f7ff ff83 	bl	8011fd4 <SysTimeAdd>

  return sysTime;
}
 80120ce:	4620      	mov	r0, r4
 80120d0:	b007      	add	sp, #28
 80120d2:	bd30      	pop	{r4, r5, pc}
 80120d4:	08013898 	.word	0x08013898

080120d8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 80120d8:	b530      	push	{r4, r5, lr}
 80120da:	b083      	sub	sp, #12
 80120dc:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80120de:	2300      	movs	r3, #0
 80120e0:	9300      	str	r3, [sp, #0]
 80120e2:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80120e6:	4b06      	ldr	r3, [pc, #24]	; (8012100 <SysTimeGetMcuTime+0x28>)
 80120e8:	691b      	ldr	r3, [r3, #16]
 80120ea:	466d      	mov	r5, sp
 80120ec:	a801      	add	r0, sp, #4
 80120ee:	4798      	blx	r3
 80120f0:	9000      	str	r0, [sp, #0]

  return calendarTime;
 80120f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80120f6:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80120fa:	4620      	mov	r0, r4
 80120fc:	b003      	add	sp, #12
 80120fe:	bd30      	pop	{r4, r5, pc}
 8012100:	08013898 	.word	0x08013898

08012104 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8012104:	b530      	push	{r4, r5, lr}
 8012106:	b089      	sub	sp, #36	; 0x24
 8012108:	ac02      	add	r4, sp, #8
 801210a:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801210e:	4d0c      	ldr	r5, [pc, #48]	; (8012140 <SysTimeToMs+0x3c>)
 8012110:	68eb      	ldr	r3, [r5, #12]
 8012112:	4798      	blx	r3
 8012114:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8012118:	686b      	ldr	r3, [r5, #4]
 801211a:	4798      	blx	r3
 801211c:	4603      	mov	r3, r0
 801211e:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8012120:	9a07      	ldr	r2, [sp, #28]
 8012122:	9200      	str	r2, [sp, #0]
 8012124:	e894 0006 	ldmia.w	r4, {r1, r2}
 8012128:	a804      	add	r0, sp, #16
 801212a:	f7ff ff72 	bl	8012012 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801212e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8012132:	9a04      	ldr	r2, [sp, #16]
 8012134:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012138:	fb00 3002 	mla	r0, r0, r2, r3
 801213c:	b009      	add	sp, #36	; 0x24
 801213e:	bd30      	pop	{r4, r5, pc}
 8012140:	08013898 	.word	0x08013898

08012144 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8012144:	b530      	push	{r4, r5, lr}
 8012146:	b087      	sub	sp, #28
 8012148:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 801214a:	4b12      	ldr	r3, [pc, #72]	; (8012194 <SysTimeFromMs+0x50>)
 801214c:	fba3 2301 	umull	r2, r3, r3, r1
 8012150:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8012152:	9304      	str	r3, [sp, #16]
 8012154:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8012158:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801215c:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8012160:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8012164:	2300      	movs	r3, #0
 8012166:	9302      	str	r3, [sp, #8]
 8012168:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801216a:	4d0b      	ldr	r5, [pc, #44]	; (8012198 <SysTimeFromMs+0x54>)
 801216c:	68eb      	ldr	r3, [r5, #12]
 801216e:	4798      	blx	r3
 8012170:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8012174:	686b      	ldr	r3, [r5, #4]
 8012176:	4798      	blx	r3
 8012178:	4603      	mov	r3, r0
 801217a:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 801217c:	9a03      	ldr	r2, [sp, #12]
 801217e:	9200      	str	r2, [sp, #0]
 8012180:	aa06      	add	r2, sp, #24
 8012182:	e912 0006 	ldmdb	r2, {r1, r2}
 8012186:	4620      	mov	r0, r4
 8012188:	f7ff ff24 	bl	8011fd4 <SysTimeAdd>
}
 801218c:	4620      	mov	r0, r4
 801218e:	b007      	add	sp, #28
 8012190:	bd30      	pop	{r4, r5, pc}
 8012192:	bf00      	nop
 8012194:	10624dd3 	.word	0x10624dd3
 8012198:	08013898 	.word	0x08013898

0801219c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801219c:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801219e:	4b03      	ldr	r3, [pc, #12]	; (80121ac <UTIL_TIMER_Init+0x10>)
 80121a0:	2200      	movs	r2, #0
 80121a2:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80121a4:	4b02      	ldr	r3, [pc, #8]	; (80121b0 <UTIL_TIMER_Init+0x14>)
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	4798      	blx	r3
}
 80121aa:	bd08      	pop	{r3, pc}
 80121ac:	200017a0 	.word	0x200017a0
 80121b0:	080138ac 	.word	0x080138ac

080121b4 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 80121b4:	b1a8      	cbz	r0, 80121e2 <UTIL_TIMER_Create+0x2e>
{
 80121b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121b8:	4617      	mov	r7, r2
 80121ba:	461e      	mov	r6, r3
 80121bc:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 80121be:	b193      	cbz	r3, 80121e6 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 80121c0:	2500      	movs	r5, #0
 80121c2:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80121c4:	4b09      	ldr	r3, [pc, #36]	; (80121ec <UTIL_TIMER_Create+0x38>)
 80121c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121c8:	4608      	mov	r0, r1
 80121ca:	4798      	blx	r3
 80121cc:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 80121ce:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 80121d0:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80121d2:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 80121d4:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 80121d6:	9b06      	ldr	r3, [sp, #24]
 80121d8:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 80121da:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 80121dc:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 80121de:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 80121e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 80121e2:	2001      	movs	r0, #1
}
 80121e4:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 80121e6:	2001      	movs	r0, #1
 80121e8:	e7fa      	b.n	80121e0 <UTIL_TIMER_Create+0x2c>
 80121ea:	bf00      	nop
 80121ec:	080138ac 	.word	0x080138ac

080121f0 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 80121f0:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 80121f2:	4c03      	ldr	r4, [pc, #12]	; (8012200 <UTIL_TIMER_GetCurrentTime+0x10>)
 80121f4:	69e3      	ldr	r3, [r4, #28]
 80121f6:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 80121f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80121fa:	4798      	blx	r3
}
 80121fc:	bd10      	pop	{r4, pc}
 80121fe:	bf00      	nop
 8012200:	080138ac 	.word	0x080138ac

08012204 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8012204:	b570      	push	{r4, r5, r6, lr}
 8012206:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8012208:	4d05      	ldr	r5, [pc, #20]	; (8012220 <UTIL_TIMER_GetElapsedTime+0x1c>)
 801220a:	69eb      	ldr	r3, [r5, #28]
 801220c:	4798      	blx	r3
 801220e:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8012210:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012212:	4630      	mov	r0, r6
 8012214:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8012216:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8012218:	1a20      	subs	r0, r4, r0
 801221a:	4798      	blx	r3
}
 801221c:	bd70      	pop	{r4, r5, r6, pc}
 801221e:	bf00      	nop
 8012220:	080138ac 	.word	0x080138ac

08012224 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8012224:	4b05      	ldr	r3, [pc, #20]	; (801223c <TimerExists+0x18>)
 8012226:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8012228:	e000      	b.n	801222c <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 801222a:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 801222c:	b11b      	cbz	r3, 8012236 <TimerExists+0x12>
    if( cur == TimerObject )
 801222e:	4283      	cmp	r3, r0
 8012230:	d1fb      	bne.n	801222a <TimerExists+0x6>
      return true;
 8012232:	2001      	movs	r0, #1
  }
  return false;
}
 8012234:	4770      	bx	lr
  return false;
 8012236:	2000      	movs	r0, #0
 8012238:	4770      	bx	lr
 801223a:	bf00      	nop
 801223c:	200017a0 	.word	0x200017a0

08012240 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8012240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012242:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8012244:	4e09      	ldr	r6, [pc, #36]	; (801226c <TimerSetTimeout+0x2c>)
 8012246:	6a33      	ldr	r3, [r6, #32]
 8012248:	4798      	blx	r3
 801224a:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 801224c:	2301      	movs	r3, #1
 801224e:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8012250:	6827      	ldr	r7, [r4, #0]
 8012252:	69b6      	ldr	r6, [r6, #24]
 8012254:	47b0      	blx	r6
 8012256:	4428      	add	r0, r5
 8012258:	4287      	cmp	r7, r0
 801225a:	d202      	bcs.n	8012262 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801225c:	47b0      	blx	r6
 801225e:	4405      	add	r5, r0
 8012260:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8012262:	4b02      	ldr	r3, [pc, #8]	; (801226c <TimerSetTimeout+0x2c>)
 8012264:	689b      	ldr	r3, [r3, #8]
 8012266:	6820      	ldr	r0, [r4, #0]
 8012268:	4798      	blx	r3
}
 801226a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801226c:	080138ac 	.word	0x080138ac

08012270 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8012270:	b368      	cbz	r0, 80122ce <UTIL_TIMER_Stop+0x5e>
{
 8012272:	b510      	push	{r4, lr}
 8012274:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012276:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801227a:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801227c:	4b15      	ldr	r3, [pc, #84]	; (80122d4 <UTIL_TIMER_Stop+0x64>)
 801227e:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8012280:	2301      	movs	r3, #1
 8012282:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8012284:	b1e1      	cbz	r1, 80122c0 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8012286:	2300      	movs	r3, #0
 8012288:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801228a:	4288      	cmp	r0, r1
 801228c:	d006      	beq.n	801229c <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801228e:	460b      	mov	r3, r1
        while( cur != NULL )
 8012290:	b1b3      	cbz	r3, 80122c0 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8012292:	4293      	cmp	r3, r2
 8012294:	d011      	beq.n	80122ba <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8012296:	4619      	mov	r1, r3
            cur = cur->Next;
 8012298:	695b      	ldr	r3, [r3, #20]
 801229a:	e7f9      	b.n	8012290 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 801229c:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 801229e:	6948      	ldr	r0, [r1, #20]
 80122a0:	b120      	cbz	r0, 80122ac <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 80122a2:	4b0c      	ldr	r3, [pc, #48]	; (80122d4 <UTIL_TIMER_Stop+0x64>)
 80122a4:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 80122a6:	f7ff ffcb 	bl	8012240 <TimerSetTimeout>
 80122aa:	e009      	b.n	80122c0 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 80122ac:	4b0a      	ldr	r3, [pc, #40]	; (80122d8 <UTIL_TIMER_Stop+0x68>)
 80122ae:	68db      	ldr	r3, [r3, #12]
 80122b0:	4798      	blx	r3
            TimerListHead = NULL;
 80122b2:	4b08      	ldr	r3, [pc, #32]	; (80122d4 <UTIL_TIMER_Stop+0x64>)
 80122b4:	2200      	movs	r2, #0
 80122b6:	601a      	str	r2, [r3, #0]
 80122b8:	e002      	b.n	80122c0 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 80122ba:	695b      	ldr	r3, [r3, #20]
 80122bc:	b123      	cbz	r3, 80122c8 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 80122be:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80122c0:	f384 8810 	msr	PRIMASK, r4
}
 80122c4:	2000      	movs	r0, #0
}
 80122c6:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 80122c8:	2300      	movs	r3, #0
 80122ca:	614b      	str	r3, [r1, #20]
 80122cc:	e7f8      	b.n	80122c0 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 80122ce:	2001      	movs	r0, #1
}
 80122d0:	4770      	bx	lr
 80122d2:	bf00      	nop
 80122d4:	200017a0 	.word	0x200017a0
 80122d8:	080138ac 	.word	0x080138ac

080122dc <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80122dc:	4b09      	ldr	r3, [pc, #36]	; (8012304 <TimerInsertTimer+0x28>)
 80122de:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 80122e0:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 80122e2:	e001      	b.n	80122e8 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 80122e4:	461a      	mov	r2, r3
        next = next->Next;
 80122e6:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 80122e8:	6951      	ldr	r1, [r2, #20]
 80122ea:	b139      	cbz	r1, 80122fc <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 80122ec:	6819      	ldr	r1, [r3, #0]
 80122ee:	f8d0 c000 	ldr.w	ip, [r0]
 80122f2:	458c      	cmp	ip, r1
 80122f4:	d8f6      	bhi.n	80122e4 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 80122f6:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 80122f8:	6143      	str	r3, [r0, #20]
        return;
 80122fa:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 80122fc:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 80122fe:	2300      	movs	r3, #0
 8012300:	6143      	str	r3, [r0, #20]
}
 8012302:	4770      	bx	lr
 8012304:	200017a0 	.word	0x200017a0

08012308 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8012308:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801230a:	4b05      	ldr	r3, [pc, #20]	; (8012320 <TimerInsertNewHeadTimer+0x18>)
 801230c:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 801230e:	b10b      	cbz	r3, 8012314 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8012310:	2200      	movs	r2, #0
 8012312:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8012314:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8012316:	4b02      	ldr	r3, [pc, #8]	; (8012320 <TimerInsertNewHeadTimer+0x18>)
 8012318:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801231a:	f7ff ff91 	bl	8012240 <TimerSetTimeout>
}
 801231e:	bd08      	pop	{r3, pc}
 8012320:	200017a0 	.word	0x200017a0

08012324 <UTIL_TIMER_Start>:
{
 8012324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8012326:	2800      	cmp	r0, #0
 8012328:	d036      	beq.n	8012398 <UTIL_TIMER_Start+0x74>
 801232a:	4604      	mov	r4, r0
 801232c:	f7ff ff7a 	bl	8012224 <TimerExists>
 8012330:	2800      	cmp	r0, #0
 8012332:	d134      	bne.n	801239e <UTIL_TIMER_Start+0x7a>
 8012334:	7a65      	ldrb	r5, [r4, #9]
 8012336:	2d00      	cmp	r5, #0
 8012338:	d133      	bne.n	80123a2 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801233a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801233e:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8012340:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8012342:	4b19      	ldr	r3, [pc, #100]	; (80123a8 <UTIL_TIMER_Start+0x84>)
 8012344:	6a1b      	ldr	r3, [r3, #32]
 8012346:	4798      	blx	r3
    if( ticks < minValue )
 8012348:	4287      	cmp	r7, r0
 801234a:	d300      	bcc.n	801234e <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 801234c:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 801234e:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8012350:	2300      	movs	r3, #0
 8012352:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8012354:	2201      	movs	r2, #1
 8012356:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8012358:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 801235a:	4b14      	ldr	r3, [pc, #80]	; (80123ac <UTIL_TIMER_Start+0x88>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	b183      	cbz	r3, 8012382 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8012360:	4b11      	ldr	r3, [pc, #68]	; (80123a8 <UTIL_TIMER_Start+0x84>)
 8012362:	699b      	ldr	r3, [r3, #24]
 8012364:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8012366:	6823      	ldr	r3, [r4, #0]
 8012368:	4418      	add	r0, r3
 801236a:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801236c:	4b0f      	ldr	r3, [pc, #60]	; (80123ac <UTIL_TIMER_Start+0x88>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	4298      	cmp	r0, r3
 8012374:	d20c      	bcs.n	8012390 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8012376:	4620      	mov	r0, r4
 8012378:	f7ff ffc6 	bl	8012308 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801237c:	f386 8810 	msr	PRIMASK, r6
}
 8012380:	e00b      	b.n	801239a <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8012382:	4b09      	ldr	r3, [pc, #36]	; (80123a8 <UTIL_TIMER_Start+0x84>)
 8012384:	691b      	ldr	r3, [r3, #16]
 8012386:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8012388:	4620      	mov	r0, r4
 801238a:	f7ff ffbd 	bl	8012308 <TimerInsertNewHeadTimer>
 801238e:	e7f5      	b.n	801237c <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8012390:	4620      	mov	r0, r4
 8012392:	f7ff ffa3 	bl	80122dc <TimerInsertTimer>
 8012396:	e7f1      	b.n	801237c <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8012398:	2501      	movs	r5, #1
}
 801239a:	4628      	mov	r0, r5
 801239c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 801239e:	2501      	movs	r5, #1
 80123a0:	e7fb      	b.n	801239a <UTIL_TIMER_Start+0x76>
 80123a2:	2501      	movs	r5, #1
 80123a4:	e7f9      	b.n	801239a <UTIL_TIMER_Start+0x76>
 80123a6:	bf00      	nop
 80123a8:	080138ac 	.word	0x080138ac
 80123ac:	200017a0 	.word	0x200017a0

080123b0 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 80123b0:	b198      	cbz	r0, 80123da <UTIL_TIMER_SetPeriod+0x2a>
{
 80123b2:	b510      	push	{r4, lr}
 80123b4:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80123b6:	4b0a      	ldr	r3, [pc, #40]	; (80123e0 <UTIL_TIMER_SetPeriod+0x30>)
 80123b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ba:	4608      	mov	r0, r1
 80123bc:	4798      	blx	r3
 80123be:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 80123c0:	4620      	mov	r0, r4
 80123c2:	f7ff ff2f 	bl	8012224 <TimerExists>
 80123c6:	b908      	cbnz	r0, 80123cc <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80123c8:	2000      	movs	r0, #0
}
 80123ca:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 80123cc:	4620      	mov	r0, r4
 80123ce:	f7ff ff4f 	bl	8012270 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80123d2:	4620      	mov	r0, r4
 80123d4:	f7ff ffa6 	bl	8012324 <UTIL_TIMER_Start>
 80123d8:	e7f7      	b.n	80123ca <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 80123da:	2001      	movs	r0, #1
}
 80123dc:	4770      	bx	lr
 80123de:	bf00      	nop
 80123e0:	080138ac 	.word	0x080138ac

080123e4 <UTIL_TIMER_IRQ_Handler>:
{
 80123e4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80123e6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80123ea:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 80123ec:	4c1e      	ldr	r4, [pc, #120]	; (8012468 <UTIL_TIMER_IRQ_Handler+0x84>)
 80123ee:	6963      	ldr	r3, [r4, #20]
 80123f0:	4798      	blx	r3
 80123f2:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 80123f4:	6923      	ldr	r3, [r4, #16]
 80123f6:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 80123f8:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 80123fa:	4b1c      	ldr	r3, [pc, #112]	; (801246c <UTIL_TIMER_IRQ_Handler+0x88>)
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	b923      	cbnz	r3, 801240a <UTIL_TIMER_IRQ_Handler+0x26>
 8012400:	e018      	b.n	8012434 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8012402:	2200      	movs	r2, #0
 8012404:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8012406:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8012408:	b1a3      	cbz	r3, 8012434 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 801240a:	681a      	ldr	r2, [r3, #0]
 801240c:	42a2      	cmp	r2, r4
 801240e:	d9f8      	bls.n	8012402 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8012410:	1a31      	subs	r1, r6, r0
 8012412:	440a      	add	r2, r1
 8012414:	601a      	str	r2, [r3, #0]
 8012416:	e7f6      	b.n	8012406 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8012418:	4b14      	ldr	r3, [pc, #80]	; (801246c <UTIL_TIMER_IRQ_Handler+0x88>)
 801241a:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 801241c:	6962      	ldr	r2, [r4, #20]
 801241e:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8012420:	2300      	movs	r3, #0
 8012422:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8012424:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8012426:	68e3      	ldr	r3, [r4, #12]
 8012428:	6920      	ldr	r0, [r4, #16]
 801242a:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801242c:	8963      	ldrh	r3, [r4, #10]
 801242e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012432:	d012      	beq.n	801245a <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8012434:	4b0d      	ldr	r3, [pc, #52]	; (801246c <UTIL_TIMER_IRQ_Handler+0x88>)
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	b13b      	cbz	r3, 801244a <UTIL_TIMER_IRQ_Handler+0x66>
 801243a:	681c      	ldr	r4, [r3, #0]
 801243c:	2c00      	cmp	r4, #0
 801243e:	d0eb      	beq.n	8012418 <UTIL_TIMER_IRQ_Handler+0x34>
 8012440:	4b09      	ldr	r3, [pc, #36]	; (8012468 <UTIL_TIMER_IRQ_Handler+0x84>)
 8012442:	699b      	ldr	r3, [r3, #24]
 8012444:	4798      	blx	r3
 8012446:	4284      	cmp	r4, r0
 8012448:	d3e6      	bcc.n	8012418 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801244a:	4b08      	ldr	r3, [pc, #32]	; (801246c <UTIL_TIMER_IRQ_Handler+0x88>)
 801244c:	6818      	ldr	r0, [r3, #0]
 801244e:	b108      	cbz	r0, 8012454 <UTIL_TIMER_IRQ_Handler+0x70>
 8012450:	7a03      	ldrb	r3, [r0, #8]
 8012452:	b133      	cbz	r3, 8012462 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012454:	f385 8810 	msr	PRIMASK, r5
}
 8012458:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 801245a:	4620      	mov	r0, r4
 801245c:	f7ff ff62 	bl	8012324 <UTIL_TIMER_Start>
 8012460:	e7e8      	b.n	8012434 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8012462:	f7ff feed 	bl	8012240 <TimerSetTimeout>
 8012466:	e7f5      	b.n	8012454 <UTIL_TIMER_IRQ_Handler+0x70>
 8012468:	080138ac 	.word	0x080138ac
 801246c:	200017a0 	.word	0x200017a0

08012470 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8012470:	4601      	mov	r1, r0
  int i = 0;
 8012472:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8012474:	e007      	b.n	8012486 <ee_skip_atoi+0x16>
 8012476:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801247a:	1c53      	adds	r3, r2, #1
 801247c:	600b      	str	r3, [r1, #0]
 801247e:	7813      	ldrb	r3, [r2, #0]
 8012480:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8012484:	3830      	subs	r0, #48	; 0x30
 8012486:	680a      	ldr	r2, [r1, #0]
 8012488:	7813      	ldrb	r3, [r2, #0]
 801248a:	3b30      	subs	r3, #48	; 0x30
 801248c:	b2db      	uxtb	r3, r3
 801248e:	2b09      	cmp	r3, #9
 8012490:	d9f1      	bls.n	8012476 <ee_skip_atoi+0x6>
  return i;
}
 8012492:	4770      	bx	lr

08012494 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8012494:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8012498:	b093      	sub	sp, #76	; 0x4c
 801249a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801249c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801249e:	f016 0f40 	tst.w	r6, #64	; 0x40
 80124a2:	d110      	bne.n	80124c6 <ee_number+0x32>
  char *dig = lower_digits;
 80124a4:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80125a0 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 80124a8:	1e9f      	subs	r7, r3, #2
 80124aa:	2f22      	cmp	r7, #34	; 0x22
 80124ac:	d875      	bhi.n	801259a <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 80124ae:	f016 0401 	ands.w	r4, r6, #1
 80124b2:	d00b      	beq.n	80124cc <ee_number+0x38>
 80124b4:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 80124b8:	f016 0f02 	tst.w	r6, #2
 80124bc:	d00f      	beq.n	80124de <ee_number+0x4a>
  {
    if (num < 0)
 80124be:	2a00      	cmp	r2, #0
 80124c0:	db07      	blt.n	80124d2 <ee_number+0x3e>
  sign = 0;
 80124c2:	2700      	movs	r7, #0
 80124c4:	e00c      	b.n	80124e0 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 80124c6:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80125a4 <ee_number+0x110>
 80124ca:	e7ed      	b.n	80124a8 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 80124cc:	f04f 0e20 	mov.w	lr, #32
 80124d0:	e7f2      	b.n	80124b8 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 80124d2:	4252      	negs	r2, r2
      size--;
 80124d4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80124d6:	3e01      	subs	r6, #1
 80124d8:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 80124da:	272d      	movs	r7, #45	; 0x2d
 80124dc:	e000      	b.n	80124e0 <ee_number+0x4c>
  sign = 0;
 80124de:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 80124e0:	bb5a      	cbnz	r2, 801253a <ee_number+0xa6>
    tmp[i++] = '0';
 80124e2:	2330      	movs	r3, #48	; 0x30
 80124e4:	f88d 3004 	strb.w	r3, [sp, #4]
 80124e8:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 80124ec:	45ac      	cmp	ip, r5
 80124ee:	dd00      	ble.n	80124f2 <ee_number+0x5e>
 80124f0:	4665      	mov	r5, ip
  size -= precision;
 80124f2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80124f4:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80124f6:	b31c      	cbz	r4, 8012540 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 80124f8:	b11f      	cbz	r7, 8012502 <ee_number+0x6e>
 80124fa:	f800 7b01 	strb.w	r7, [r0], #1
 80124fe:	3901      	subs	r1, #1
 8012500:	d007      	beq.n	8012512 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8012502:	2b00      	cmp	r3, #0
 8012504:	f103 33ff 	add.w	r3, r3, #4294967295
 8012508:	dd24      	ble.n	8012554 <ee_number+0xc0>
 801250a:	f800 eb01 	strb.w	lr, [r0], #1
 801250e:	3901      	subs	r1, #1
 8012510:	d1f7      	bne.n	8012502 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8012512:	b013      	add	sp, #76	; 0x4c
 8012514:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8012518:	fbb2 f6f3 	udiv	r6, r2, r3
 801251c:	fb03 2216 	mls	r2, r3, r6, r2
 8012520:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8012524:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8012528:	446a      	add	r2, sp
 801252a:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 801252e:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8012530:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8012534:	2a00      	cmp	r2, #0
 8012536:	d1ef      	bne.n	8012518 <ee_number+0x84>
 8012538:	e7d8      	b.n	80124ec <ee_number+0x58>
  i = 0;
 801253a:	f04f 0c00 	mov.w	ip, #0
 801253e:	e7f9      	b.n	8012534 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8012540:	2b00      	cmp	r3, #0
 8012542:	f103 33ff 	add.w	r3, r3, #4294967295
 8012546:	ddd7      	ble.n	80124f8 <ee_number+0x64>
 8012548:	2220      	movs	r2, #32
 801254a:	f800 2b01 	strb.w	r2, [r0], #1
 801254e:	3901      	subs	r1, #1
 8012550:	d1f6      	bne.n	8012540 <ee_number+0xac>
 8012552:	e7de      	b.n	8012512 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8012554:	4565      	cmp	r5, ip
 8012556:	f105 35ff 	add.w	r5, r5, #4294967295
 801255a:	dd05      	ble.n	8012568 <ee_number+0xd4>
 801255c:	2230      	movs	r2, #48	; 0x30
 801255e:	f800 2b01 	strb.w	r2, [r0], #1
 8012562:	3901      	subs	r1, #1
 8012564:	d1f6      	bne.n	8012554 <ee_number+0xc0>
 8012566:	e7d4      	b.n	8012512 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8012568:	4662      	mov	r2, ip
 801256a:	2a00      	cmp	r2, #0
 801256c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012570:	dd09      	ble.n	8012586 <ee_number+0xf2>
 8012572:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8012576:	446a      	add	r2, sp
 8012578:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 801257c:	f800 2b01 	strb.w	r2, [r0], #1
 8012580:	3901      	subs	r1, #1
 8012582:	d1f1      	bne.n	8012568 <ee_number+0xd4>
 8012584:	e7c5      	b.n	8012512 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8012586:	2b00      	cmp	r3, #0
 8012588:	f103 33ff 	add.w	r3, r3, #4294967295
 801258c:	ddc1      	ble.n	8012512 <ee_number+0x7e>
 801258e:	2220      	movs	r2, #32
 8012590:	f800 2b01 	strb.w	r2, [r0], #1
 8012594:	3901      	subs	r1, #1
 8012596:	d1f6      	bne.n	8012586 <ee_number+0xf2>
 8012598:	e7bb      	b.n	8012512 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 801259a:	2000      	movs	r0, #0
 801259c:	e7b9      	b.n	8012512 <ee_number+0x7e>
 801259e:	bf00      	nop
 80125a0:	0801470c 	.word	0x0801470c
 80125a4:	080146e4 	.word	0x080146e4

080125a8 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 80125a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80125ac:	b087      	sub	sp, #28
 80125ae:	9205      	str	r2, [sp, #20]
 80125b0:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 80125b2:	1e0f      	subs	r7, r1, #0
 80125b4:	f340 80b8 	ble.w	8012728 <tiny_vsnprintf_like+0x180>
 80125b8:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80125ba:	4604      	mov	r4, r0
 80125bc:	e004      	b.n	80125c8 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 80125be:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80125c2:	9b05      	ldr	r3, [sp, #20]
 80125c4:	3301      	adds	r3, #1
 80125c6:	9305      	str	r3, [sp, #20]
 80125c8:	9905      	ldr	r1, [sp, #20]
 80125ca:	780a      	ldrb	r2, [r1, #0]
 80125cc:	b922      	cbnz	r2, 80125d8 <tiny_vsnprintf_like+0x30>
 80125ce:	1ba3      	subs	r3, r4, r6
 80125d0:	1e78      	subs	r0, r7, #1
 80125d2:	4283      	cmp	r3, r0
 80125d4:	f2c0 80a2 	blt.w	801271c <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 80125d8:	1ba3      	subs	r3, r4, r6
 80125da:	f107 38ff 	add.w	r8, r7, #4294967295
 80125de:	4543      	cmp	r3, r8
 80125e0:	f280 809c 	bge.w	801271c <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 80125e4:	2a25      	cmp	r2, #37	; 0x25
 80125e6:	d1ea      	bne.n	80125be <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 80125e8:	1c4b      	adds	r3, r1, #1
 80125ea:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 80125ec:	784b      	ldrb	r3, [r1, #1]
 80125ee:	2b30      	cmp	r3, #48	; 0x30
 80125f0:	d020      	beq.n	8012634 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 80125f2:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 80125f6:	3b30      	subs	r3, #48	; 0x30
 80125f8:	b2db      	uxtb	r3, r3
 80125fa:	2b09      	cmp	r3, #9
 80125fc:	d91d      	bls.n	801263a <tiny_vsnprintf_like+0x92>
    field_width = -1;
 80125fe:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8012602:	9b05      	ldr	r3, [sp, #20]
 8012604:	781a      	ldrb	r2, [r3, #0]
 8012606:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 801260a:	2b20      	cmp	r3, #32
 801260c:	d867      	bhi.n	80126de <tiny_vsnprintf_like+0x136>
 801260e:	e8df f003 	tbb	[pc, r3]
 8012612:	664a      	.short	0x664a
 8012614:	66666666 	.word	0x66666666
 8012618:	66666666 	.word	0x66666666
 801261c:	66621e66 	.word	0x66621e66
 8012620:	62666666 	.word	0x62666666
 8012624:	66666666 	.word	0x66666666
 8012628:	66666666 	.word	0x66666666
 801262c:	19662866 	.word	0x19662866
 8012630:	6666      	.short	0x6666
 8012632:	7c          	.byte	0x7c
 8012633:	00          	.byte	0x00
      flags |= ZEROPAD;
 8012634:	f04f 0901 	mov.w	r9, #1
 8012638:	e7dd      	b.n	80125f6 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 801263a:	a805      	add	r0, sp, #20
 801263c:	f7ff ff18 	bl	8012470 <ee_skip_atoi>
 8012640:	4605      	mov	r5, r0
 8012642:	e7de      	b.n	8012602 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8012644:	230a      	movs	r3, #10
 8012646:	e031      	b.n	80126ac <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8012648:	2320      	movs	r3, #32
 801264a:	f804 3b01 	strb.w	r3, [r4], #1
 801264e:	3d01      	subs	r5, #1
 8012650:	2d00      	cmp	r5, #0
 8012652:	dcf9      	bgt.n	8012648 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8012654:	9b04      	ldr	r3, [sp, #16]
 8012656:	1d1a      	adds	r2, r3, #4
 8012658:	9204      	str	r2, [sp, #16]
 801265a:	781b      	ldrb	r3, [r3, #0]
 801265c:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8012660:	e7af      	b.n	80125c2 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8012662:	9b04      	ldr	r3, [sp, #16]
 8012664:	1d1a      	adds	r2, r3, #4
 8012666:	9204      	str	r2, [sp, #16]
 8012668:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 801266c:	f1b8 0f00 	cmp.w	r8, #0
 8012670:	d003      	beq.n	801267a <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8012672:	4640      	mov	r0, r8
 8012674:	f7ed fd84 	bl	8000180 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8012678:	e006      	b.n	8012688 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 801267a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801272c <tiny_vsnprintf_like+0x184>
 801267e:	e7f8      	b.n	8012672 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8012680:	2220      	movs	r2, #32
 8012682:	f804 2b01 	strb.w	r2, [r4], #1
 8012686:	461d      	mov	r5, r3
 8012688:	1e6b      	subs	r3, r5, #1
 801268a:	4285      	cmp	r5, r0
 801268c:	dcf8      	bgt.n	8012680 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801268e:	2200      	movs	r2, #0
 8012690:	e006      	b.n	80126a0 <tiny_vsnprintf_like+0xf8>
 8012692:	4643      	mov	r3, r8
 8012694:	f813 1b01 	ldrb.w	r1, [r3], #1
 8012698:	f804 1b01 	strb.w	r1, [r4], #1
 801269c:	3201      	adds	r2, #1
 801269e:	4698      	mov	r8, r3
 80126a0:	4282      	cmp	r2, r0
 80126a2:	dbf6      	blt.n	8012692 <tiny_vsnprintf_like+0xea>
 80126a4:	e78d      	b.n	80125c2 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 80126a6:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 80126aa:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 80126ac:	f019 0f02 	tst.w	r9, #2
 80126b0:	d02f      	beq.n	8012712 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 80126b2:	9a04      	ldr	r2, [sp, #16]
 80126b4:	1d11      	adds	r1, r2, #4
 80126b6:	9104      	str	r1, [sp, #16]
 80126b8:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80126ba:	1ba1      	subs	r1, r4, r6
 80126bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80126c0:	f04f 30ff 	mov.w	r0, #4294967295
 80126c4:	9001      	str	r0, [sp, #4]
 80126c6:	9500      	str	r5, [sp, #0]
 80126c8:	eba8 0101 	sub.w	r1, r8, r1
 80126cc:	4620      	mov	r0, r4
 80126ce:	f7ff fee1 	bl	8012494 <ee_number>
 80126d2:	4604      	mov	r4, r0
 80126d4:	e775      	b.n	80125c2 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 80126d6:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 80126da:	230a      	movs	r3, #10
 80126dc:	e7e6      	b.n	80126ac <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 80126de:	2a25      	cmp	r2, #37	; 0x25
 80126e0:	d002      	beq.n	80126e8 <tiny_vsnprintf_like+0x140>
 80126e2:	2325      	movs	r3, #37	; 0x25
 80126e4:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 80126e8:	1ba3      	subs	r3, r4, r6
 80126ea:	4598      	cmp	r8, r3
 80126ec:	dd0f      	ble.n	801270e <tiny_vsnprintf_like+0x166>
        if (*fmt)
 80126ee:	9b05      	ldr	r3, [sp, #20]
 80126f0:	781a      	ldrb	r2, [r3, #0]
 80126f2:	b13a      	cbz	r2, 8012704 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 80126f4:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 80126f8:	1ba3      	subs	r3, r4, r6
 80126fa:	4598      	cmp	r8, r3
 80126fc:	f73f af61 	bgt.w	80125c2 <tiny_vsnprintf_like+0x1a>
    base = 10;
 8012700:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8012702:	e7d3      	b.n	80126ac <tiny_vsnprintf_like+0x104>
          --fmt;
 8012704:	3b01      	subs	r3, #1
 8012706:	9305      	str	r3, [sp, #20]
 8012708:	e7f6      	b.n	80126f8 <tiny_vsnprintf_like+0x150>
        base = 16;
 801270a:	2310      	movs	r3, #16
 801270c:	e7ce      	b.n	80126ac <tiny_vsnprintf_like+0x104>
    base = 10;
 801270e:	230a      	movs	r3, #10
 8012710:	e7cc      	b.n	80126ac <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8012712:	9a04      	ldr	r2, [sp, #16]
 8012714:	1d11      	adds	r1, r2, #4
 8012716:	9104      	str	r1, [sp, #16]
 8012718:	6812      	ldr	r2, [r2, #0]
 801271a:	e7ce      	b.n	80126ba <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 801271c:	2300      	movs	r3, #0
 801271e:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8012720:	1ba0      	subs	r0, r4, r6
}
 8012722:	b007      	add	sp, #28
 8012724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8012728:	2000      	movs	r0, #0
 801272a:	e7fa      	b.n	8012722 <tiny_vsnprintf_like+0x17a>
 801272c:	08014734 	.word	0x08014734

08012730 <clock>:
 8012730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012732:	4b08      	ldr	r3, [pc, #32]	; (8012754 <clock+0x24>)
 8012734:	4669      	mov	r1, sp
 8012736:	6818      	ldr	r0, [r3, #0]
 8012738:	f000 f94e 	bl	80129d8 <_times_r>
 801273c:	1c43      	adds	r3, r0, #1
 801273e:	d006      	beq.n	801274e <clock+0x1e>
 8012740:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012744:	4418      	add	r0, r3
 8012746:	9b02      	ldr	r3, [sp, #8]
 8012748:	4418      	add	r0, r3
 801274a:	9b03      	ldr	r3, [sp, #12]
 801274c:	4418      	add	r0, r3
 801274e:	b005      	add	sp, #20
 8012750:	f85d fb04 	ldr.w	pc, [sp], #4
 8012754:	20000118 	.word	0x20000118

08012758 <__errno>:
 8012758:	4b01      	ldr	r3, [pc, #4]	; (8012760 <__errno+0x8>)
 801275a:	6818      	ldr	r0, [r3, #0]
 801275c:	4770      	bx	lr
 801275e:	bf00      	nop
 8012760:	20000118 	.word	0x20000118

08012764 <__libc_init_array>:
 8012764:	b570      	push	{r4, r5, r6, lr}
 8012766:	4d0d      	ldr	r5, [pc, #52]	; (801279c <__libc_init_array+0x38>)
 8012768:	4c0d      	ldr	r4, [pc, #52]	; (80127a0 <__libc_init_array+0x3c>)
 801276a:	1b64      	subs	r4, r4, r5
 801276c:	10a4      	asrs	r4, r4, #2
 801276e:	2600      	movs	r6, #0
 8012770:	42a6      	cmp	r6, r4
 8012772:	d109      	bne.n	8012788 <__libc_init_array+0x24>
 8012774:	4d0b      	ldr	r5, [pc, #44]	; (80127a4 <__libc_init_array+0x40>)
 8012776:	4c0c      	ldr	r4, [pc, #48]	; (80127a8 <__libc_init_array+0x44>)
 8012778:	f001 f832 	bl	80137e0 <_init>
 801277c:	1b64      	subs	r4, r4, r5
 801277e:	10a4      	asrs	r4, r4, #2
 8012780:	2600      	movs	r6, #0
 8012782:	42a6      	cmp	r6, r4
 8012784:	d105      	bne.n	8012792 <__libc_init_array+0x2e>
 8012786:	bd70      	pop	{r4, r5, r6, pc}
 8012788:	f855 3b04 	ldr.w	r3, [r5], #4
 801278c:	4798      	blx	r3
 801278e:	3601      	adds	r6, #1
 8012790:	e7ee      	b.n	8012770 <__libc_init_array+0xc>
 8012792:	f855 3b04 	ldr.w	r3, [r5], #4
 8012796:	4798      	blx	r3
 8012798:	3601      	adds	r6, #1
 801279a:	e7f2      	b.n	8012782 <__libc_init_array+0x1e>
 801279c:	080147e0 	.word	0x080147e0
 80127a0:	080147e0 	.word	0x080147e0
 80127a4:	080147e0 	.word	0x080147e0
 80127a8:	080147e4 	.word	0x080147e4

080127ac <malloc>:
 80127ac:	4b02      	ldr	r3, [pc, #8]	; (80127b8 <malloc+0xc>)
 80127ae:	4601      	mov	r1, r0
 80127b0:	6818      	ldr	r0, [r3, #0]
 80127b2:	f000 b875 	b.w	80128a0 <_malloc_r>
 80127b6:	bf00      	nop
 80127b8:	20000118 	.word	0x20000118

080127bc <memset>:
 80127bc:	4402      	add	r2, r0
 80127be:	4603      	mov	r3, r0
 80127c0:	4293      	cmp	r3, r2
 80127c2:	d100      	bne.n	80127c6 <memset+0xa>
 80127c4:	4770      	bx	lr
 80127c6:	f803 1b01 	strb.w	r1, [r3], #1
 80127ca:	e7f9      	b.n	80127c0 <memset+0x4>

080127cc <_free_r>:
 80127cc:	b538      	push	{r3, r4, r5, lr}
 80127ce:	4605      	mov	r5, r0
 80127d0:	2900      	cmp	r1, #0
 80127d2:	d041      	beq.n	8012858 <_free_r+0x8c>
 80127d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127d8:	1f0c      	subs	r4, r1, #4
 80127da:	2b00      	cmp	r3, #0
 80127dc:	bfb8      	it	lt
 80127de:	18e4      	addlt	r4, r4, r3
 80127e0:	f000 f9f6 	bl	8012bd0 <__malloc_lock>
 80127e4:	4a1d      	ldr	r2, [pc, #116]	; (801285c <_free_r+0x90>)
 80127e6:	6813      	ldr	r3, [r2, #0]
 80127e8:	b933      	cbnz	r3, 80127f8 <_free_r+0x2c>
 80127ea:	6063      	str	r3, [r4, #4]
 80127ec:	6014      	str	r4, [r2, #0]
 80127ee:	4628      	mov	r0, r5
 80127f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127f4:	f000 b9f2 	b.w	8012bdc <__malloc_unlock>
 80127f8:	42a3      	cmp	r3, r4
 80127fa:	d908      	bls.n	801280e <_free_r+0x42>
 80127fc:	6820      	ldr	r0, [r4, #0]
 80127fe:	1821      	adds	r1, r4, r0
 8012800:	428b      	cmp	r3, r1
 8012802:	bf01      	itttt	eq
 8012804:	6819      	ldreq	r1, [r3, #0]
 8012806:	685b      	ldreq	r3, [r3, #4]
 8012808:	1809      	addeq	r1, r1, r0
 801280a:	6021      	streq	r1, [r4, #0]
 801280c:	e7ed      	b.n	80127ea <_free_r+0x1e>
 801280e:	461a      	mov	r2, r3
 8012810:	685b      	ldr	r3, [r3, #4]
 8012812:	b10b      	cbz	r3, 8012818 <_free_r+0x4c>
 8012814:	42a3      	cmp	r3, r4
 8012816:	d9fa      	bls.n	801280e <_free_r+0x42>
 8012818:	6811      	ldr	r1, [r2, #0]
 801281a:	1850      	adds	r0, r2, r1
 801281c:	42a0      	cmp	r0, r4
 801281e:	d10b      	bne.n	8012838 <_free_r+0x6c>
 8012820:	6820      	ldr	r0, [r4, #0]
 8012822:	4401      	add	r1, r0
 8012824:	1850      	adds	r0, r2, r1
 8012826:	4283      	cmp	r3, r0
 8012828:	6011      	str	r1, [r2, #0]
 801282a:	d1e0      	bne.n	80127ee <_free_r+0x22>
 801282c:	6818      	ldr	r0, [r3, #0]
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	6053      	str	r3, [r2, #4]
 8012832:	4401      	add	r1, r0
 8012834:	6011      	str	r1, [r2, #0]
 8012836:	e7da      	b.n	80127ee <_free_r+0x22>
 8012838:	d902      	bls.n	8012840 <_free_r+0x74>
 801283a:	230c      	movs	r3, #12
 801283c:	602b      	str	r3, [r5, #0]
 801283e:	e7d6      	b.n	80127ee <_free_r+0x22>
 8012840:	6820      	ldr	r0, [r4, #0]
 8012842:	1821      	adds	r1, r4, r0
 8012844:	428b      	cmp	r3, r1
 8012846:	bf04      	itt	eq
 8012848:	6819      	ldreq	r1, [r3, #0]
 801284a:	685b      	ldreq	r3, [r3, #4]
 801284c:	6063      	str	r3, [r4, #4]
 801284e:	bf04      	itt	eq
 8012850:	1809      	addeq	r1, r1, r0
 8012852:	6021      	streq	r1, [r4, #0]
 8012854:	6054      	str	r4, [r2, #4]
 8012856:	e7ca      	b.n	80127ee <_free_r+0x22>
 8012858:	bd38      	pop	{r3, r4, r5, pc}
 801285a:	bf00      	nop
 801285c:	200017a4 	.word	0x200017a4

08012860 <sbrk_aligned>:
 8012860:	b570      	push	{r4, r5, r6, lr}
 8012862:	4e0e      	ldr	r6, [pc, #56]	; (801289c <sbrk_aligned+0x3c>)
 8012864:	460c      	mov	r4, r1
 8012866:	6831      	ldr	r1, [r6, #0]
 8012868:	4605      	mov	r5, r0
 801286a:	b911      	cbnz	r1, 8012872 <sbrk_aligned+0x12>
 801286c:	f000 f8a4 	bl	80129b8 <_sbrk_r>
 8012870:	6030      	str	r0, [r6, #0]
 8012872:	4621      	mov	r1, r4
 8012874:	4628      	mov	r0, r5
 8012876:	f000 f89f 	bl	80129b8 <_sbrk_r>
 801287a:	1c43      	adds	r3, r0, #1
 801287c:	d00a      	beq.n	8012894 <sbrk_aligned+0x34>
 801287e:	1cc4      	adds	r4, r0, #3
 8012880:	f024 0403 	bic.w	r4, r4, #3
 8012884:	42a0      	cmp	r0, r4
 8012886:	d007      	beq.n	8012898 <sbrk_aligned+0x38>
 8012888:	1a21      	subs	r1, r4, r0
 801288a:	4628      	mov	r0, r5
 801288c:	f000 f894 	bl	80129b8 <_sbrk_r>
 8012890:	3001      	adds	r0, #1
 8012892:	d101      	bne.n	8012898 <sbrk_aligned+0x38>
 8012894:	f04f 34ff 	mov.w	r4, #4294967295
 8012898:	4620      	mov	r0, r4
 801289a:	bd70      	pop	{r4, r5, r6, pc}
 801289c:	200017a8 	.word	0x200017a8

080128a0 <_malloc_r>:
 80128a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128a4:	1ccd      	adds	r5, r1, #3
 80128a6:	f025 0503 	bic.w	r5, r5, #3
 80128aa:	3508      	adds	r5, #8
 80128ac:	2d0c      	cmp	r5, #12
 80128ae:	bf38      	it	cc
 80128b0:	250c      	movcc	r5, #12
 80128b2:	2d00      	cmp	r5, #0
 80128b4:	4607      	mov	r7, r0
 80128b6:	db01      	blt.n	80128bc <_malloc_r+0x1c>
 80128b8:	42a9      	cmp	r1, r5
 80128ba:	d905      	bls.n	80128c8 <_malloc_r+0x28>
 80128bc:	230c      	movs	r3, #12
 80128be:	603b      	str	r3, [r7, #0]
 80128c0:	2600      	movs	r6, #0
 80128c2:	4630      	mov	r0, r6
 80128c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128c8:	4e2e      	ldr	r6, [pc, #184]	; (8012984 <_malloc_r+0xe4>)
 80128ca:	f000 f981 	bl	8012bd0 <__malloc_lock>
 80128ce:	6833      	ldr	r3, [r6, #0]
 80128d0:	461c      	mov	r4, r3
 80128d2:	bb34      	cbnz	r4, 8012922 <_malloc_r+0x82>
 80128d4:	4629      	mov	r1, r5
 80128d6:	4638      	mov	r0, r7
 80128d8:	f7ff ffc2 	bl	8012860 <sbrk_aligned>
 80128dc:	1c43      	adds	r3, r0, #1
 80128de:	4604      	mov	r4, r0
 80128e0:	d14d      	bne.n	801297e <_malloc_r+0xde>
 80128e2:	6834      	ldr	r4, [r6, #0]
 80128e4:	4626      	mov	r6, r4
 80128e6:	2e00      	cmp	r6, #0
 80128e8:	d140      	bne.n	801296c <_malloc_r+0xcc>
 80128ea:	6823      	ldr	r3, [r4, #0]
 80128ec:	4631      	mov	r1, r6
 80128ee:	4638      	mov	r0, r7
 80128f0:	eb04 0803 	add.w	r8, r4, r3
 80128f4:	f000 f860 	bl	80129b8 <_sbrk_r>
 80128f8:	4580      	cmp	r8, r0
 80128fa:	d13a      	bne.n	8012972 <_malloc_r+0xd2>
 80128fc:	6821      	ldr	r1, [r4, #0]
 80128fe:	3503      	adds	r5, #3
 8012900:	1a6d      	subs	r5, r5, r1
 8012902:	f025 0503 	bic.w	r5, r5, #3
 8012906:	3508      	adds	r5, #8
 8012908:	2d0c      	cmp	r5, #12
 801290a:	bf38      	it	cc
 801290c:	250c      	movcc	r5, #12
 801290e:	4629      	mov	r1, r5
 8012910:	4638      	mov	r0, r7
 8012912:	f7ff ffa5 	bl	8012860 <sbrk_aligned>
 8012916:	3001      	adds	r0, #1
 8012918:	d02b      	beq.n	8012972 <_malloc_r+0xd2>
 801291a:	6823      	ldr	r3, [r4, #0]
 801291c:	442b      	add	r3, r5
 801291e:	6023      	str	r3, [r4, #0]
 8012920:	e00e      	b.n	8012940 <_malloc_r+0xa0>
 8012922:	6822      	ldr	r2, [r4, #0]
 8012924:	1b52      	subs	r2, r2, r5
 8012926:	d41e      	bmi.n	8012966 <_malloc_r+0xc6>
 8012928:	2a0b      	cmp	r2, #11
 801292a:	d916      	bls.n	801295a <_malloc_r+0xba>
 801292c:	1961      	adds	r1, r4, r5
 801292e:	42a3      	cmp	r3, r4
 8012930:	6025      	str	r5, [r4, #0]
 8012932:	bf18      	it	ne
 8012934:	6059      	strne	r1, [r3, #4]
 8012936:	6863      	ldr	r3, [r4, #4]
 8012938:	bf08      	it	eq
 801293a:	6031      	streq	r1, [r6, #0]
 801293c:	5162      	str	r2, [r4, r5]
 801293e:	604b      	str	r3, [r1, #4]
 8012940:	4638      	mov	r0, r7
 8012942:	f104 060b 	add.w	r6, r4, #11
 8012946:	f000 f949 	bl	8012bdc <__malloc_unlock>
 801294a:	f026 0607 	bic.w	r6, r6, #7
 801294e:	1d23      	adds	r3, r4, #4
 8012950:	1af2      	subs	r2, r6, r3
 8012952:	d0b6      	beq.n	80128c2 <_malloc_r+0x22>
 8012954:	1b9b      	subs	r3, r3, r6
 8012956:	50a3      	str	r3, [r4, r2]
 8012958:	e7b3      	b.n	80128c2 <_malloc_r+0x22>
 801295a:	6862      	ldr	r2, [r4, #4]
 801295c:	42a3      	cmp	r3, r4
 801295e:	bf0c      	ite	eq
 8012960:	6032      	streq	r2, [r6, #0]
 8012962:	605a      	strne	r2, [r3, #4]
 8012964:	e7ec      	b.n	8012940 <_malloc_r+0xa0>
 8012966:	4623      	mov	r3, r4
 8012968:	6864      	ldr	r4, [r4, #4]
 801296a:	e7b2      	b.n	80128d2 <_malloc_r+0x32>
 801296c:	4634      	mov	r4, r6
 801296e:	6876      	ldr	r6, [r6, #4]
 8012970:	e7b9      	b.n	80128e6 <_malloc_r+0x46>
 8012972:	230c      	movs	r3, #12
 8012974:	603b      	str	r3, [r7, #0]
 8012976:	4638      	mov	r0, r7
 8012978:	f000 f930 	bl	8012bdc <__malloc_unlock>
 801297c:	e7a1      	b.n	80128c2 <_malloc_r+0x22>
 801297e:	6025      	str	r5, [r4, #0]
 8012980:	e7de      	b.n	8012940 <_malloc_r+0xa0>
 8012982:	bf00      	nop
 8012984:	200017a4 	.word	0x200017a4

08012988 <iprintf>:
 8012988:	b40f      	push	{r0, r1, r2, r3}
 801298a:	4b0a      	ldr	r3, [pc, #40]	; (80129b4 <iprintf+0x2c>)
 801298c:	b513      	push	{r0, r1, r4, lr}
 801298e:	681c      	ldr	r4, [r3, #0]
 8012990:	b124      	cbz	r4, 801299c <iprintf+0x14>
 8012992:	69a3      	ldr	r3, [r4, #24]
 8012994:	b913      	cbnz	r3, 801299c <iprintf+0x14>
 8012996:	4620      	mov	r0, r4
 8012998:	f000 f87a 	bl	8012a90 <__sinit>
 801299c:	ab05      	add	r3, sp, #20
 801299e:	9a04      	ldr	r2, [sp, #16]
 80129a0:	68a1      	ldr	r1, [r4, #8]
 80129a2:	9301      	str	r3, [sp, #4]
 80129a4:	4620      	mov	r0, r4
 80129a6:	f000 f947 	bl	8012c38 <_vfiprintf_r>
 80129aa:	b002      	add	sp, #8
 80129ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129b0:	b004      	add	sp, #16
 80129b2:	4770      	bx	lr
 80129b4:	20000118 	.word	0x20000118

080129b8 <_sbrk_r>:
 80129b8:	b538      	push	{r3, r4, r5, lr}
 80129ba:	4d06      	ldr	r5, [pc, #24]	; (80129d4 <_sbrk_r+0x1c>)
 80129bc:	2300      	movs	r3, #0
 80129be:	4604      	mov	r4, r0
 80129c0:	4608      	mov	r0, r1
 80129c2:	602b      	str	r3, [r5, #0]
 80129c4:	f7ef f932 	bl	8001c2c <_sbrk>
 80129c8:	1c43      	adds	r3, r0, #1
 80129ca:	d102      	bne.n	80129d2 <_sbrk_r+0x1a>
 80129cc:	682b      	ldr	r3, [r5, #0]
 80129ce:	b103      	cbz	r3, 80129d2 <_sbrk_r+0x1a>
 80129d0:	6023      	str	r3, [r4, #0]
 80129d2:	bd38      	pop	{r3, r4, r5, pc}
 80129d4:	200017b0 	.word	0x200017b0

080129d8 <_times_r>:
 80129d8:	4608      	mov	r0, r1
 80129da:	f7ef b923 	b.w	8001c24 <_times>
	...

080129e0 <std>:
 80129e0:	2300      	movs	r3, #0
 80129e2:	b510      	push	{r4, lr}
 80129e4:	4604      	mov	r4, r0
 80129e6:	e9c0 3300 	strd	r3, r3, [r0]
 80129ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80129ee:	6083      	str	r3, [r0, #8]
 80129f0:	8181      	strh	r1, [r0, #12]
 80129f2:	6643      	str	r3, [r0, #100]	; 0x64
 80129f4:	81c2      	strh	r2, [r0, #14]
 80129f6:	6183      	str	r3, [r0, #24]
 80129f8:	4619      	mov	r1, r3
 80129fa:	2208      	movs	r2, #8
 80129fc:	305c      	adds	r0, #92	; 0x5c
 80129fe:	f7ff fedd 	bl	80127bc <memset>
 8012a02:	4b05      	ldr	r3, [pc, #20]	; (8012a18 <std+0x38>)
 8012a04:	6263      	str	r3, [r4, #36]	; 0x24
 8012a06:	4b05      	ldr	r3, [pc, #20]	; (8012a1c <std+0x3c>)
 8012a08:	62a3      	str	r3, [r4, #40]	; 0x28
 8012a0a:	4b05      	ldr	r3, [pc, #20]	; (8012a20 <std+0x40>)
 8012a0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012a0e:	4b05      	ldr	r3, [pc, #20]	; (8012a24 <std+0x44>)
 8012a10:	6224      	str	r4, [r4, #32]
 8012a12:	6323      	str	r3, [r4, #48]	; 0x30
 8012a14:	bd10      	pop	{r4, pc}
 8012a16:	bf00      	nop
 8012a18:	080131c1 	.word	0x080131c1
 8012a1c:	080131e3 	.word	0x080131e3
 8012a20:	0801321b 	.word	0x0801321b
 8012a24:	0801323f 	.word	0x0801323f

08012a28 <_cleanup_r>:
 8012a28:	4901      	ldr	r1, [pc, #4]	; (8012a30 <_cleanup_r+0x8>)
 8012a2a:	f000 b8af 	b.w	8012b8c <_fwalk_reent>
 8012a2e:	bf00      	nop
 8012a30:	08013511 	.word	0x08013511

08012a34 <__sfmoreglue>:
 8012a34:	b570      	push	{r4, r5, r6, lr}
 8012a36:	2268      	movs	r2, #104	; 0x68
 8012a38:	1e4d      	subs	r5, r1, #1
 8012a3a:	4355      	muls	r5, r2
 8012a3c:	460e      	mov	r6, r1
 8012a3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012a42:	f7ff ff2d 	bl	80128a0 <_malloc_r>
 8012a46:	4604      	mov	r4, r0
 8012a48:	b140      	cbz	r0, 8012a5c <__sfmoreglue+0x28>
 8012a4a:	2100      	movs	r1, #0
 8012a4c:	e9c0 1600 	strd	r1, r6, [r0]
 8012a50:	300c      	adds	r0, #12
 8012a52:	60a0      	str	r0, [r4, #8]
 8012a54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012a58:	f7ff feb0 	bl	80127bc <memset>
 8012a5c:	4620      	mov	r0, r4
 8012a5e:	bd70      	pop	{r4, r5, r6, pc}

08012a60 <__sfp_lock_acquire>:
 8012a60:	4801      	ldr	r0, [pc, #4]	; (8012a68 <__sfp_lock_acquire+0x8>)
 8012a62:	f000 b8b3 	b.w	8012bcc <__retarget_lock_acquire_recursive>
 8012a66:	bf00      	nop
 8012a68:	200017ad 	.word	0x200017ad

08012a6c <__sfp_lock_release>:
 8012a6c:	4801      	ldr	r0, [pc, #4]	; (8012a74 <__sfp_lock_release+0x8>)
 8012a6e:	f000 b8ae 	b.w	8012bce <__retarget_lock_release_recursive>
 8012a72:	bf00      	nop
 8012a74:	200017ad 	.word	0x200017ad

08012a78 <__sinit_lock_acquire>:
 8012a78:	4801      	ldr	r0, [pc, #4]	; (8012a80 <__sinit_lock_acquire+0x8>)
 8012a7a:	f000 b8a7 	b.w	8012bcc <__retarget_lock_acquire_recursive>
 8012a7e:	bf00      	nop
 8012a80:	200017ae 	.word	0x200017ae

08012a84 <__sinit_lock_release>:
 8012a84:	4801      	ldr	r0, [pc, #4]	; (8012a8c <__sinit_lock_release+0x8>)
 8012a86:	f000 b8a2 	b.w	8012bce <__retarget_lock_release_recursive>
 8012a8a:	bf00      	nop
 8012a8c:	200017ae 	.word	0x200017ae

08012a90 <__sinit>:
 8012a90:	b510      	push	{r4, lr}
 8012a92:	4604      	mov	r4, r0
 8012a94:	f7ff fff0 	bl	8012a78 <__sinit_lock_acquire>
 8012a98:	69a3      	ldr	r3, [r4, #24]
 8012a9a:	b11b      	cbz	r3, 8012aa4 <__sinit+0x14>
 8012a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012aa0:	f7ff bff0 	b.w	8012a84 <__sinit_lock_release>
 8012aa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012aa8:	6523      	str	r3, [r4, #80]	; 0x50
 8012aaa:	4b13      	ldr	r3, [pc, #76]	; (8012af8 <__sinit+0x68>)
 8012aac:	4a13      	ldr	r2, [pc, #76]	; (8012afc <__sinit+0x6c>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	62a2      	str	r2, [r4, #40]	; 0x28
 8012ab2:	42a3      	cmp	r3, r4
 8012ab4:	bf04      	itt	eq
 8012ab6:	2301      	moveq	r3, #1
 8012ab8:	61a3      	streq	r3, [r4, #24]
 8012aba:	4620      	mov	r0, r4
 8012abc:	f000 f820 	bl	8012b00 <__sfp>
 8012ac0:	6060      	str	r0, [r4, #4]
 8012ac2:	4620      	mov	r0, r4
 8012ac4:	f000 f81c 	bl	8012b00 <__sfp>
 8012ac8:	60a0      	str	r0, [r4, #8]
 8012aca:	4620      	mov	r0, r4
 8012acc:	f000 f818 	bl	8012b00 <__sfp>
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	60e0      	str	r0, [r4, #12]
 8012ad4:	2104      	movs	r1, #4
 8012ad6:	6860      	ldr	r0, [r4, #4]
 8012ad8:	f7ff ff82 	bl	80129e0 <std>
 8012adc:	68a0      	ldr	r0, [r4, #8]
 8012ade:	2201      	movs	r2, #1
 8012ae0:	2109      	movs	r1, #9
 8012ae2:	f7ff ff7d 	bl	80129e0 <std>
 8012ae6:	68e0      	ldr	r0, [r4, #12]
 8012ae8:	2202      	movs	r2, #2
 8012aea:	2112      	movs	r1, #18
 8012aec:	f7ff ff78 	bl	80129e0 <std>
 8012af0:	2301      	movs	r3, #1
 8012af2:	61a3      	str	r3, [r4, #24]
 8012af4:	e7d2      	b.n	8012a9c <__sinit+0xc>
 8012af6:	bf00      	nop
 8012af8:	0801473c 	.word	0x0801473c
 8012afc:	08012a29 	.word	0x08012a29

08012b00 <__sfp>:
 8012b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b02:	4607      	mov	r7, r0
 8012b04:	f7ff ffac 	bl	8012a60 <__sfp_lock_acquire>
 8012b08:	4b1e      	ldr	r3, [pc, #120]	; (8012b84 <__sfp+0x84>)
 8012b0a:	681e      	ldr	r6, [r3, #0]
 8012b0c:	69b3      	ldr	r3, [r6, #24]
 8012b0e:	b913      	cbnz	r3, 8012b16 <__sfp+0x16>
 8012b10:	4630      	mov	r0, r6
 8012b12:	f7ff ffbd 	bl	8012a90 <__sinit>
 8012b16:	3648      	adds	r6, #72	; 0x48
 8012b18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012b1c:	3b01      	subs	r3, #1
 8012b1e:	d503      	bpl.n	8012b28 <__sfp+0x28>
 8012b20:	6833      	ldr	r3, [r6, #0]
 8012b22:	b30b      	cbz	r3, 8012b68 <__sfp+0x68>
 8012b24:	6836      	ldr	r6, [r6, #0]
 8012b26:	e7f7      	b.n	8012b18 <__sfp+0x18>
 8012b28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012b2c:	b9d5      	cbnz	r5, 8012b64 <__sfp+0x64>
 8012b2e:	4b16      	ldr	r3, [pc, #88]	; (8012b88 <__sfp+0x88>)
 8012b30:	60e3      	str	r3, [r4, #12]
 8012b32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012b36:	6665      	str	r5, [r4, #100]	; 0x64
 8012b38:	f000 f847 	bl	8012bca <__retarget_lock_init_recursive>
 8012b3c:	f7ff ff96 	bl	8012a6c <__sfp_lock_release>
 8012b40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012b44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012b48:	6025      	str	r5, [r4, #0]
 8012b4a:	61a5      	str	r5, [r4, #24]
 8012b4c:	2208      	movs	r2, #8
 8012b4e:	4629      	mov	r1, r5
 8012b50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012b54:	f7ff fe32 	bl	80127bc <memset>
 8012b58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012b5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012b60:	4620      	mov	r0, r4
 8012b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b64:	3468      	adds	r4, #104	; 0x68
 8012b66:	e7d9      	b.n	8012b1c <__sfp+0x1c>
 8012b68:	2104      	movs	r1, #4
 8012b6a:	4638      	mov	r0, r7
 8012b6c:	f7ff ff62 	bl	8012a34 <__sfmoreglue>
 8012b70:	4604      	mov	r4, r0
 8012b72:	6030      	str	r0, [r6, #0]
 8012b74:	2800      	cmp	r0, #0
 8012b76:	d1d5      	bne.n	8012b24 <__sfp+0x24>
 8012b78:	f7ff ff78 	bl	8012a6c <__sfp_lock_release>
 8012b7c:	230c      	movs	r3, #12
 8012b7e:	603b      	str	r3, [r7, #0]
 8012b80:	e7ee      	b.n	8012b60 <__sfp+0x60>
 8012b82:	bf00      	nop
 8012b84:	0801473c 	.word	0x0801473c
 8012b88:	ffff0001 	.word	0xffff0001

08012b8c <_fwalk_reent>:
 8012b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b90:	4606      	mov	r6, r0
 8012b92:	4688      	mov	r8, r1
 8012b94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012b98:	2700      	movs	r7, #0
 8012b9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012b9e:	f1b9 0901 	subs.w	r9, r9, #1
 8012ba2:	d505      	bpl.n	8012bb0 <_fwalk_reent+0x24>
 8012ba4:	6824      	ldr	r4, [r4, #0]
 8012ba6:	2c00      	cmp	r4, #0
 8012ba8:	d1f7      	bne.n	8012b9a <_fwalk_reent+0xe>
 8012baa:	4638      	mov	r0, r7
 8012bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bb0:	89ab      	ldrh	r3, [r5, #12]
 8012bb2:	2b01      	cmp	r3, #1
 8012bb4:	d907      	bls.n	8012bc6 <_fwalk_reent+0x3a>
 8012bb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012bba:	3301      	adds	r3, #1
 8012bbc:	d003      	beq.n	8012bc6 <_fwalk_reent+0x3a>
 8012bbe:	4629      	mov	r1, r5
 8012bc0:	4630      	mov	r0, r6
 8012bc2:	47c0      	blx	r8
 8012bc4:	4307      	orrs	r7, r0
 8012bc6:	3568      	adds	r5, #104	; 0x68
 8012bc8:	e7e9      	b.n	8012b9e <_fwalk_reent+0x12>

08012bca <__retarget_lock_init_recursive>:
 8012bca:	4770      	bx	lr

08012bcc <__retarget_lock_acquire_recursive>:
 8012bcc:	4770      	bx	lr

08012bce <__retarget_lock_release_recursive>:
 8012bce:	4770      	bx	lr

08012bd0 <__malloc_lock>:
 8012bd0:	4801      	ldr	r0, [pc, #4]	; (8012bd8 <__malloc_lock+0x8>)
 8012bd2:	f7ff bffb 	b.w	8012bcc <__retarget_lock_acquire_recursive>
 8012bd6:	bf00      	nop
 8012bd8:	200017ac 	.word	0x200017ac

08012bdc <__malloc_unlock>:
 8012bdc:	4801      	ldr	r0, [pc, #4]	; (8012be4 <__malloc_unlock+0x8>)
 8012bde:	f7ff bff6 	b.w	8012bce <__retarget_lock_release_recursive>
 8012be2:	bf00      	nop
 8012be4:	200017ac 	.word	0x200017ac

08012be8 <__sfputc_r>:
 8012be8:	6893      	ldr	r3, [r2, #8]
 8012bea:	3b01      	subs	r3, #1
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	b410      	push	{r4}
 8012bf0:	6093      	str	r3, [r2, #8]
 8012bf2:	da07      	bge.n	8012c04 <__sfputc_r+0x1c>
 8012bf4:	6994      	ldr	r4, [r2, #24]
 8012bf6:	42a3      	cmp	r3, r4
 8012bf8:	db01      	blt.n	8012bfe <__sfputc_r+0x16>
 8012bfa:	290a      	cmp	r1, #10
 8012bfc:	d102      	bne.n	8012c04 <__sfputc_r+0x1c>
 8012bfe:	bc10      	pop	{r4}
 8012c00:	f000 bb22 	b.w	8013248 <__swbuf_r>
 8012c04:	6813      	ldr	r3, [r2, #0]
 8012c06:	1c58      	adds	r0, r3, #1
 8012c08:	6010      	str	r0, [r2, #0]
 8012c0a:	7019      	strb	r1, [r3, #0]
 8012c0c:	4608      	mov	r0, r1
 8012c0e:	bc10      	pop	{r4}
 8012c10:	4770      	bx	lr

08012c12 <__sfputs_r>:
 8012c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c14:	4606      	mov	r6, r0
 8012c16:	460f      	mov	r7, r1
 8012c18:	4614      	mov	r4, r2
 8012c1a:	18d5      	adds	r5, r2, r3
 8012c1c:	42ac      	cmp	r4, r5
 8012c1e:	d101      	bne.n	8012c24 <__sfputs_r+0x12>
 8012c20:	2000      	movs	r0, #0
 8012c22:	e007      	b.n	8012c34 <__sfputs_r+0x22>
 8012c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c28:	463a      	mov	r2, r7
 8012c2a:	4630      	mov	r0, r6
 8012c2c:	f7ff ffdc 	bl	8012be8 <__sfputc_r>
 8012c30:	1c43      	adds	r3, r0, #1
 8012c32:	d1f3      	bne.n	8012c1c <__sfputs_r+0xa>
 8012c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012c38 <_vfiprintf_r>:
 8012c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c3c:	460d      	mov	r5, r1
 8012c3e:	b09d      	sub	sp, #116	; 0x74
 8012c40:	4614      	mov	r4, r2
 8012c42:	4698      	mov	r8, r3
 8012c44:	4606      	mov	r6, r0
 8012c46:	b118      	cbz	r0, 8012c50 <_vfiprintf_r+0x18>
 8012c48:	6983      	ldr	r3, [r0, #24]
 8012c4a:	b90b      	cbnz	r3, 8012c50 <_vfiprintf_r+0x18>
 8012c4c:	f7ff ff20 	bl	8012a90 <__sinit>
 8012c50:	4b89      	ldr	r3, [pc, #548]	; (8012e78 <_vfiprintf_r+0x240>)
 8012c52:	429d      	cmp	r5, r3
 8012c54:	d11b      	bne.n	8012c8e <_vfiprintf_r+0x56>
 8012c56:	6875      	ldr	r5, [r6, #4]
 8012c58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c5a:	07d9      	lsls	r1, r3, #31
 8012c5c:	d405      	bmi.n	8012c6a <_vfiprintf_r+0x32>
 8012c5e:	89ab      	ldrh	r3, [r5, #12]
 8012c60:	059a      	lsls	r2, r3, #22
 8012c62:	d402      	bmi.n	8012c6a <_vfiprintf_r+0x32>
 8012c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c66:	f7ff ffb1 	bl	8012bcc <__retarget_lock_acquire_recursive>
 8012c6a:	89ab      	ldrh	r3, [r5, #12]
 8012c6c:	071b      	lsls	r3, r3, #28
 8012c6e:	d501      	bpl.n	8012c74 <_vfiprintf_r+0x3c>
 8012c70:	692b      	ldr	r3, [r5, #16]
 8012c72:	b9eb      	cbnz	r3, 8012cb0 <_vfiprintf_r+0x78>
 8012c74:	4629      	mov	r1, r5
 8012c76:	4630      	mov	r0, r6
 8012c78:	f000 fb4a 	bl	8013310 <__swsetup_r>
 8012c7c:	b1c0      	cbz	r0, 8012cb0 <_vfiprintf_r+0x78>
 8012c7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c80:	07dc      	lsls	r4, r3, #31
 8012c82:	d50e      	bpl.n	8012ca2 <_vfiprintf_r+0x6a>
 8012c84:	f04f 30ff 	mov.w	r0, #4294967295
 8012c88:	b01d      	add	sp, #116	; 0x74
 8012c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c8e:	4b7b      	ldr	r3, [pc, #492]	; (8012e7c <_vfiprintf_r+0x244>)
 8012c90:	429d      	cmp	r5, r3
 8012c92:	d101      	bne.n	8012c98 <_vfiprintf_r+0x60>
 8012c94:	68b5      	ldr	r5, [r6, #8]
 8012c96:	e7df      	b.n	8012c58 <_vfiprintf_r+0x20>
 8012c98:	4b79      	ldr	r3, [pc, #484]	; (8012e80 <_vfiprintf_r+0x248>)
 8012c9a:	429d      	cmp	r5, r3
 8012c9c:	bf08      	it	eq
 8012c9e:	68f5      	ldreq	r5, [r6, #12]
 8012ca0:	e7da      	b.n	8012c58 <_vfiprintf_r+0x20>
 8012ca2:	89ab      	ldrh	r3, [r5, #12]
 8012ca4:	0598      	lsls	r0, r3, #22
 8012ca6:	d4ed      	bmi.n	8012c84 <_vfiprintf_r+0x4c>
 8012ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012caa:	f7ff ff90 	bl	8012bce <__retarget_lock_release_recursive>
 8012cae:	e7e9      	b.n	8012c84 <_vfiprintf_r+0x4c>
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8012cb4:	2320      	movs	r3, #32
 8012cb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012cba:	f8cd 800c 	str.w	r8, [sp, #12]
 8012cbe:	2330      	movs	r3, #48	; 0x30
 8012cc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012e84 <_vfiprintf_r+0x24c>
 8012cc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012cc8:	f04f 0901 	mov.w	r9, #1
 8012ccc:	4623      	mov	r3, r4
 8012cce:	469a      	mov	sl, r3
 8012cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cd4:	b10a      	cbz	r2, 8012cda <_vfiprintf_r+0xa2>
 8012cd6:	2a25      	cmp	r2, #37	; 0x25
 8012cd8:	d1f9      	bne.n	8012cce <_vfiprintf_r+0x96>
 8012cda:	ebba 0b04 	subs.w	fp, sl, r4
 8012cde:	d00b      	beq.n	8012cf8 <_vfiprintf_r+0xc0>
 8012ce0:	465b      	mov	r3, fp
 8012ce2:	4622      	mov	r2, r4
 8012ce4:	4629      	mov	r1, r5
 8012ce6:	4630      	mov	r0, r6
 8012ce8:	f7ff ff93 	bl	8012c12 <__sfputs_r>
 8012cec:	3001      	adds	r0, #1
 8012cee:	f000 80aa 	beq.w	8012e46 <_vfiprintf_r+0x20e>
 8012cf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012cf4:	445a      	add	r2, fp
 8012cf6:	9209      	str	r2, [sp, #36]	; 0x24
 8012cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	f000 80a2 	beq.w	8012e46 <_vfiprintf_r+0x20e>
 8012d02:	2300      	movs	r3, #0
 8012d04:	f04f 32ff 	mov.w	r2, #4294967295
 8012d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d0c:	f10a 0a01 	add.w	sl, sl, #1
 8012d10:	9304      	str	r3, [sp, #16]
 8012d12:	9307      	str	r3, [sp, #28]
 8012d14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012d18:	931a      	str	r3, [sp, #104]	; 0x68
 8012d1a:	4654      	mov	r4, sl
 8012d1c:	2205      	movs	r2, #5
 8012d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d22:	4858      	ldr	r0, [pc, #352]	; (8012e84 <_vfiprintf_r+0x24c>)
 8012d24:	f7ed fa34 	bl	8000190 <memchr>
 8012d28:	9a04      	ldr	r2, [sp, #16]
 8012d2a:	b9d8      	cbnz	r0, 8012d64 <_vfiprintf_r+0x12c>
 8012d2c:	06d1      	lsls	r1, r2, #27
 8012d2e:	bf44      	itt	mi
 8012d30:	2320      	movmi	r3, #32
 8012d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d36:	0713      	lsls	r3, r2, #28
 8012d38:	bf44      	itt	mi
 8012d3a:	232b      	movmi	r3, #43	; 0x2b
 8012d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d40:	f89a 3000 	ldrb.w	r3, [sl]
 8012d44:	2b2a      	cmp	r3, #42	; 0x2a
 8012d46:	d015      	beq.n	8012d74 <_vfiprintf_r+0x13c>
 8012d48:	9a07      	ldr	r2, [sp, #28]
 8012d4a:	4654      	mov	r4, sl
 8012d4c:	2000      	movs	r0, #0
 8012d4e:	f04f 0c0a 	mov.w	ip, #10
 8012d52:	4621      	mov	r1, r4
 8012d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d58:	3b30      	subs	r3, #48	; 0x30
 8012d5a:	2b09      	cmp	r3, #9
 8012d5c:	d94e      	bls.n	8012dfc <_vfiprintf_r+0x1c4>
 8012d5e:	b1b0      	cbz	r0, 8012d8e <_vfiprintf_r+0x156>
 8012d60:	9207      	str	r2, [sp, #28]
 8012d62:	e014      	b.n	8012d8e <_vfiprintf_r+0x156>
 8012d64:	eba0 0308 	sub.w	r3, r0, r8
 8012d68:	fa09 f303 	lsl.w	r3, r9, r3
 8012d6c:	4313      	orrs	r3, r2
 8012d6e:	9304      	str	r3, [sp, #16]
 8012d70:	46a2      	mov	sl, r4
 8012d72:	e7d2      	b.n	8012d1a <_vfiprintf_r+0xe2>
 8012d74:	9b03      	ldr	r3, [sp, #12]
 8012d76:	1d19      	adds	r1, r3, #4
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	9103      	str	r1, [sp, #12]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	bfbb      	ittet	lt
 8012d80:	425b      	neglt	r3, r3
 8012d82:	f042 0202 	orrlt.w	r2, r2, #2
 8012d86:	9307      	strge	r3, [sp, #28]
 8012d88:	9307      	strlt	r3, [sp, #28]
 8012d8a:	bfb8      	it	lt
 8012d8c:	9204      	strlt	r2, [sp, #16]
 8012d8e:	7823      	ldrb	r3, [r4, #0]
 8012d90:	2b2e      	cmp	r3, #46	; 0x2e
 8012d92:	d10c      	bne.n	8012dae <_vfiprintf_r+0x176>
 8012d94:	7863      	ldrb	r3, [r4, #1]
 8012d96:	2b2a      	cmp	r3, #42	; 0x2a
 8012d98:	d135      	bne.n	8012e06 <_vfiprintf_r+0x1ce>
 8012d9a:	9b03      	ldr	r3, [sp, #12]
 8012d9c:	1d1a      	adds	r2, r3, #4
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	9203      	str	r2, [sp, #12]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	bfb8      	it	lt
 8012da6:	f04f 33ff 	movlt.w	r3, #4294967295
 8012daa:	3402      	adds	r4, #2
 8012dac:	9305      	str	r3, [sp, #20]
 8012dae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8012e88 <_vfiprintf_r+0x250>
 8012db2:	7821      	ldrb	r1, [r4, #0]
 8012db4:	2203      	movs	r2, #3
 8012db6:	4650      	mov	r0, sl
 8012db8:	f7ed f9ea 	bl	8000190 <memchr>
 8012dbc:	b140      	cbz	r0, 8012dd0 <_vfiprintf_r+0x198>
 8012dbe:	2340      	movs	r3, #64	; 0x40
 8012dc0:	eba0 000a 	sub.w	r0, r0, sl
 8012dc4:	fa03 f000 	lsl.w	r0, r3, r0
 8012dc8:	9b04      	ldr	r3, [sp, #16]
 8012dca:	4303      	orrs	r3, r0
 8012dcc:	3401      	adds	r4, #1
 8012dce:	9304      	str	r3, [sp, #16]
 8012dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dd4:	482d      	ldr	r0, [pc, #180]	; (8012e8c <_vfiprintf_r+0x254>)
 8012dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012dda:	2206      	movs	r2, #6
 8012ddc:	f7ed f9d8 	bl	8000190 <memchr>
 8012de0:	2800      	cmp	r0, #0
 8012de2:	d03f      	beq.n	8012e64 <_vfiprintf_r+0x22c>
 8012de4:	4b2a      	ldr	r3, [pc, #168]	; (8012e90 <_vfiprintf_r+0x258>)
 8012de6:	bb1b      	cbnz	r3, 8012e30 <_vfiprintf_r+0x1f8>
 8012de8:	9b03      	ldr	r3, [sp, #12]
 8012dea:	3307      	adds	r3, #7
 8012dec:	f023 0307 	bic.w	r3, r3, #7
 8012df0:	3308      	adds	r3, #8
 8012df2:	9303      	str	r3, [sp, #12]
 8012df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012df6:	443b      	add	r3, r7
 8012df8:	9309      	str	r3, [sp, #36]	; 0x24
 8012dfa:	e767      	b.n	8012ccc <_vfiprintf_r+0x94>
 8012dfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e00:	460c      	mov	r4, r1
 8012e02:	2001      	movs	r0, #1
 8012e04:	e7a5      	b.n	8012d52 <_vfiprintf_r+0x11a>
 8012e06:	2300      	movs	r3, #0
 8012e08:	3401      	adds	r4, #1
 8012e0a:	9305      	str	r3, [sp, #20]
 8012e0c:	4619      	mov	r1, r3
 8012e0e:	f04f 0c0a 	mov.w	ip, #10
 8012e12:	4620      	mov	r0, r4
 8012e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e18:	3a30      	subs	r2, #48	; 0x30
 8012e1a:	2a09      	cmp	r2, #9
 8012e1c:	d903      	bls.n	8012e26 <_vfiprintf_r+0x1ee>
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d0c5      	beq.n	8012dae <_vfiprintf_r+0x176>
 8012e22:	9105      	str	r1, [sp, #20]
 8012e24:	e7c3      	b.n	8012dae <_vfiprintf_r+0x176>
 8012e26:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e2a:	4604      	mov	r4, r0
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	e7f0      	b.n	8012e12 <_vfiprintf_r+0x1da>
 8012e30:	ab03      	add	r3, sp, #12
 8012e32:	9300      	str	r3, [sp, #0]
 8012e34:	462a      	mov	r2, r5
 8012e36:	4b17      	ldr	r3, [pc, #92]	; (8012e94 <_vfiprintf_r+0x25c>)
 8012e38:	a904      	add	r1, sp, #16
 8012e3a:	4630      	mov	r0, r6
 8012e3c:	f3af 8000 	nop.w
 8012e40:	4607      	mov	r7, r0
 8012e42:	1c78      	adds	r0, r7, #1
 8012e44:	d1d6      	bne.n	8012df4 <_vfiprintf_r+0x1bc>
 8012e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012e48:	07d9      	lsls	r1, r3, #31
 8012e4a:	d405      	bmi.n	8012e58 <_vfiprintf_r+0x220>
 8012e4c:	89ab      	ldrh	r3, [r5, #12]
 8012e4e:	059a      	lsls	r2, r3, #22
 8012e50:	d402      	bmi.n	8012e58 <_vfiprintf_r+0x220>
 8012e52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012e54:	f7ff febb 	bl	8012bce <__retarget_lock_release_recursive>
 8012e58:	89ab      	ldrh	r3, [r5, #12]
 8012e5a:	065b      	lsls	r3, r3, #25
 8012e5c:	f53f af12 	bmi.w	8012c84 <_vfiprintf_r+0x4c>
 8012e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e62:	e711      	b.n	8012c88 <_vfiprintf_r+0x50>
 8012e64:	ab03      	add	r3, sp, #12
 8012e66:	9300      	str	r3, [sp, #0]
 8012e68:	462a      	mov	r2, r5
 8012e6a:	4b0a      	ldr	r3, [pc, #40]	; (8012e94 <_vfiprintf_r+0x25c>)
 8012e6c:	a904      	add	r1, sp, #16
 8012e6e:	4630      	mov	r0, r6
 8012e70:	f000 f880 	bl	8012f74 <_printf_i>
 8012e74:	e7e4      	b.n	8012e40 <_vfiprintf_r+0x208>
 8012e76:	bf00      	nop
 8012e78:	08014760 	.word	0x08014760
 8012e7c:	08014780 	.word	0x08014780
 8012e80:	08014740 	.word	0x08014740
 8012e84:	080147a0 	.word	0x080147a0
 8012e88:	080147a6 	.word	0x080147a6
 8012e8c:	080147aa 	.word	0x080147aa
 8012e90:	00000000 	.word	0x00000000
 8012e94:	08012c13 	.word	0x08012c13

08012e98 <_printf_common>:
 8012e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e9c:	4616      	mov	r6, r2
 8012e9e:	4699      	mov	r9, r3
 8012ea0:	688a      	ldr	r2, [r1, #8]
 8012ea2:	690b      	ldr	r3, [r1, #16]
 8012ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012ea8:	4293      	cmp	r3, r2
 8012eaa:	bfb8      	it	lt
 8012eac:	4613      	movlt	r3, r2
 8012eae:	6033      	str	r3, [r6, #0]
 8012eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012eb4:	4607      	mov	r7, r0
 8012eb6:	460c      	mov	r4, r1
 8012eb8:	b10a      	cbz	r2, 8012ebe <_printf_common+0x26>
 8012eba:	3301      	adds	r3, #1
 8012ebc:	6033      	str	r3, [r6, #0]
 8012ebe:	6823      	ldr	r3, [r4, #0]
 8012ec0:	0699      	lsls	r1, r3, #26
 8012ec2:	bf42      	ittt	mi
 8012ec4:	6833      	ldrmi	r3, [r6, #0]
 8012ec6:	3302      	addmi	r3, #2
 8012ec8:	6033      	strmi	r3, [r6, #0]
 8012eca:	6825      	ldr	r5, [r4, #0]
 8012ecc:	f015 0506 	ands.w	r5, r5, #6
 8012ed0:	d106      	bne.n	8012ee0 <_printf_common+0x48>
 8012ed2:	f104 0a19 	add.w	sl, r4, #25
 8012ed6:	68e3      	ldr	r3, [r4, #12]
 8012ed8:	6832      	ldr	r2, [r6, #0]
 8012eda:	1a9b      	subs	r3, r3, r2
 8012edc:	42ab      	cmp	r3, r5
 8012ede:	dc26      	bgt.n	8012f2e <_printf_common+0x96>
 8012ee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012ee4:	1e13      	subs	r3, r2, #0
 8012ee6:	6822      	ldr	r2, [r4, #0]
 8012ee8:	bf18      	it	ne
 8012eea:	2301      	movne	r3, #1
 8012eec:	0692      	lsls	r2, r2, #26
 8012eee:	d42b      	bmi.n	8012f48 <_printf_common+0xb0>
 8012ef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012ef4:	4649      	mov	r1, r9
 8012ef6:	4638      	mov	r0, r7
 8012ef8:	47c0      	blx	r8
 8012efa:	3001      	adds	r0, #1
 8012efc:	d01e      	beq.n	8012f3c <_printf_common+0xa4>
 8012efe:	6823      	ldr	r3, [r4, #0]
 8012f00:	68e5      	ldr	r5, [r4, #12]
 8012f02:	6832      	ldr	r2, [r6, #0]
 8012f04:	f003 0306 	and.w	r3, r3, #6
 8012f08:	2b04      	cmp	r3, #4
 8012f0a:	bf08      	it	eq
 8012f0c:	1aad      	subeq	r5, r5, r2
 8012f0e:	68a3      	ldr	r3, [r4, #8]
 8012f10:	6922      	ldr	r2, [r4, #16]
 8012f12:	bf0c      	ite	eq
 8012f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012f18:	2500      	movne	r5, #0
 8012f1a:	4293      	cmp	r3, r2
 8012f1c:	bfc4      	itt	gt
 8012f1e:	1a9b      	subgt	r3, r3, r2
 8012f20:	18ed      	addgt	r5, r5, r3
 8012f22:	2600      	movs	r6, #0
 8012f24:	341a      	adds	r4, #26
 8012f26:	42b5      	cmp	r5, r6
 8012f28:	d11a      	bne.n	8012f60 <_printf_common+0xc8>
 8012f2a:	2000      	movs	r0, #0
 8012f2c:	e008      	b.n	8012f40 <_printf_common+0xa8>
 8012f2e:	2301      	movs	r3, #1
 8012f30:	4652      	mov	r2, sl
 8012f32:	4649      	mov	r1, r9
 8012f34:	4638      	mov	r0, r7
 8012f36:	47c0      	blx	r8
 8012f38:	3001      	adds	r0, #1
 8012f3a:	d103      	bne.n	8012f44 <_printf_common+0xac>
 8012f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f44:	3501      	adds	r5, #1
 8012f46:	e7c6      	b.n	8012ed6 <_printf_common+0x3e>
 8012f48:	18e1      	adds	r1, r4, r3
 8012f4a:	1c5a      	adds	r2, r3, #1
 8012f4c:	2030      	movs	r0, #48	; 0x30
 8012f4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012f52:	4422      	add	r2, r4
 8012f54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012f58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012f5c:	3302      	adds	r3, #2
 8012f5e:	e7c7      	b.n	8012ef0 <_printf_common+0x58>
 8012f60:	2301      	movs	r3, #1
 8012f62:	4622      	mov	r2, r4
 8012f64:	4649      	mov	r1, r9
 8012f66:	4638      	mov	r0, r7
 8012f68:	47c0      	blx	r8
 8012f6a:	3001      	adds	r0, #1
 8012f6c:	d0e6      	beq.n	8012f3c <_printf_common+0xa4>
 8012f6e:	3601      	adds	r6, #1
 8012f70:	e7d9      	b.n	8012f26 <_printf_common+0x8e>
	...

08012f74 <_printf_i>:
 8012f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012f78:	7e0f      	ldrb	r7, [r1, #24]
 8012f7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012f7c:	2f78      	cmp	r7, #120	; 0x78
 8012f7e:	4691      	mov	r9, r2
 8012f80:	4680      	mov	r8, r0
 8012f82:	460c      	mov	r4, r1
 8012f84:	469a      	mov	sl, r3
 8012f86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012f8a:	d807      	bhi.n	8012f9c <_printf_i+0x28>
 8012f8c:	2f62      	cmp	r7, #98	; 0x62
 8012f8e:	d80a      	bhi.n	8012fa6 <_printf_i+0x32>
 8012f90:	2f00      	cmp	r7, #0
 8012f92:	f000 80d8 	beq.w	8013146 <_printf_i+0x1d2>
 8012f96:	2f58      	cmp	r7, #88	; 0x58
 8012f98:	f000 80a3 	beq.w	80130e2 <_printf_i+0x16e>
 8012f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012fa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012fa4:	e03a      	b.n	801301c <_printf_i+0xa8>
 8012fa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012faa:	2b15      	cmp	r3, #21
 8012fac:	d8f6      	bhi.n	8012f9c <_printf_i+0x28>
 8012fae:	a101      	add	r1, pc, #4	; (adr r1, 8012fb4 <_printf_i+0x40>)
 8012fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012fb4:	0801300d 	.word	0x0801300d
 8012fb8:	08013021 	.word	0x08013021
 8012fbc:	08012f9d 	.word	0x08012f9d
 8012fc0:	08012f9d 	.word	0x08012f9d
 8012fc4:	08012f9d 	.word	0x08012f9d
 8012fc8:	08012f9d 	.word	0x08012f9d
 8012fcc:	08013021 	.word	0x08013021
 8012fd0:	08012f9d 	.word	0x08012f9d
 8012fd4:	08012f9d 	.word	0x08012f9d
 8012fd8:	08012f9d 	.word	0x08012f9d
 8012fdc:	08012f9d 	.word	0x08012f9d
 8012fe0:	0801312d 	.word	0x0801312d
 8012fe4:	08013051 	.word	0x08013051
 8012fe8:	0801310f 	.word	0x0801310f
 8012fec:	08012f9d 	.word	0x08012f9d
 8012ff0:	08012f9d 	.word	0x08012f9d
 8012ff4:	0801314f 	.word	0x0801314f
 8012ff8:	08012f9d 	.word	0x08012f9d
 8012ffc:	08013051 	.word	0x08013051
 8013000:	08012f9d 	.word	0x08012f9d
 8013004:	08012f9d 	.word	0x08012f9d
 8013008:	08013117 	.word	0x08013117
 801300c:	682b      	ldr	r3, [r5, #0]
 801300e:	1d1a      	adds	r2, r3, #4
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	602a      	str	r2, [r5, #0]
 8013014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801301c:	2301      	movs	r3, #1
 801301e:	e0a3      	b.n	8013168 <_printf_i+0x1f4>
 8013020:	6820      	ldr	r0, [r4, #0]
 8013022:	6829      	ldr	r1, [r5, #0]
 8013024:	0606      	lsls	r6, r0, #24
 8013026:	f101 0304 	add.w	r3, r1, #4
 801302a:	d50a      	bpl.n	8013042 <_printf_i+0xce>
 801302c:	680e      	ldr	r6, [r1, #0]
 801302e:	602b      	str	r3, [r5, #0]
 8013030:	2e00      	cmp	r6, #0
 8013032:	da03      	bge.n	801303c <_printf_i+0xc8>
 8013034:	232d      	movs	r3, #45	; 0x2d
 8013036:	4276      	negs	r6, r6
 8013038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801303c:	485e      	ldr	r0, [pc, #376]	; (80131b8 <_printf_i+0x244>)
 801303e:	230a      	movs	r3, #10
 8013040:	e019      	b.n	8013076 <_printf_i+0x102>
 8013042:	680e      	ldr	r6, [r1, #0]
 8013044:	602b      	str	r3, [r5, #0]
 8013046:	f010 0f40 	tst.w	r0, #64	; 0x40
 801304a:	bf18      	it	ne
 801304c:	b236      	sxthne	r6, r6
 801304e:	e7ef      	b.n	8013030 <_printf_i+0xbc>
 8013050:	682b      	ldr	r3, [r5, #0]
 8013052:	6820      	ldr	r0, [r4, #0]
 8013054:	1d19      	adds	r1, r3, #4
 8013056:	6029      	str	r1, [r5, #0]
 8013058:	0601      	lsls	r1, r0, #24
 801305a:	d501      	bpl.n	8013060 <_printf_i+0xec>
 801305c:	681e      	ldr	r6, [r3, #0]
 801305e:	e002      	b.n	8013066 <_printf_i+0xf2>
 8013060:	0646      	lsls	r6, r0, #25
 8013062:	d5fb      	bpl.n	801305c <_printf_i+0xe8>
 8013064:	881e      	ldrh	r6, [r3, #0]
 8013066:	4854      	ldr	r0, [pc, #336]	; (80131b8 <_printf_i+0x244>)
 8013068:	2f6f      	cmp	r7, #111	; 0x6f
 801306a:	bf0c      	ite	eq
 801306c:	2308      	moveq	r3, #8
 801306e:	230a      	movne	r3, #10
 8013070:	2100      	movs	r1, #0
 8013072:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013076:	6865      	ldr	r5, [r4, #4]
 8013078:	60a5      	str	r5, [r4, #8]
 801307a:	2d00      	cmp	r5, #0
 801307c:	bfa2      	ittt	ge
 801307e:	6821      	ldrge	r1, [r4, #0]
 8013080:	f021 0104 	bicge.w	r1, r1, #4
 8013084:	6021      	strge	r1, [r4, #0]
 8013086:	b90e      	cbnz	r6, 801308c <_printf_i+0x118>
 8013088:	2d00      	cmp	r5, #0
 801308a:	d04d      	beq.n	8013128 <_printf_i+0x1b4>
 801308c:	4615      	mov	r5, r2
 801308e:	fbb6 f1f3 	udiv	r1, r6, r3
 8013092:	fb03 6711 	mls	r7, r3, r1, r6
 8013096:	5dc7      	ldrb	r7, [r0, r7]
 8013098:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801309c:	4637      	mov	r7, r6
 801309e:	42bb      	cmp	r3, r7
 80130a0:	460e      	mov	r6, r1
 80130a2:	d9f4      	bls.n	801308e <_printf_i+0x11a>
 80130a4:	2b08      	cmp	r3, #8
 80130a6:	d10b      	bne.n	80130c0 <_printf_i+0x14c>
 80130a8:	6823      	ldr	r3, [r4, #0]
 80130aa:	07de      	lsls	r6, r3, #31
 80130ac:	d508      	bpl.n	80130c0 <_printf_i+0x14c>
 80130ae:	6923      	ldr	r3, [r4, #16]
 80130b0:	6861      	ldr	r1, [r4, #4]
 80130b2:	4299      	cmp	r1, r3
 80130b4:	bfde      	ittt	le
 80130b6:	2330      	movle	r3, #48	; 0x30
 80130b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80130bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80130c0:	1b52      	subs	r2, r2, r5
 80130c2:	6122      	str	r2, [r4, #16]
 80130c4:	f8cd a000 	str.w	sl, [sp]
 80130c8:	464b      	mov	r3, r9
 80130ca:	aa03      	add	r2, sp, #12
 80130cc:	4621      	mov	r1, r4
 80130ce:	4640      	mov	r0, r8
 80130d0:	f7ff fee2 	bl	8012e98 <_printf_common>
 80130d4:	3001      	adds	r0, #1
 80130d6:	d14c      	bne.n	8013172 <_printf_i+0x1fe>
 80130d8:	f04f 30ff 	mov.w	r0, #4294967295
 80130dc:	b004      	add	sp, #16
 80130de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130e2:	4835      	ldr	r0, [pc, #212]	; (80131b8 <_printf_i+0x244>)
 80130e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80130e8:	6829      	ldr	r1, [r5, #0]
 80130ea:	6823      	ldr	r3, [r4, #0]
 80130ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80130f0:	6029      	str	r1, [r5, #0]
 80130f2:	061d      	lsls	r5, r3, #24
 80130f4:	d514      	bpl.n	8013120 <_printf_i+0x1ac>
 80130f6:	07df      	lsls	r7, r3, #31
 80130f8:	bf44      	itt	mi
 80130fa:	f043 0320 	orrmi.w	r3, r3, #32
 80130fe:	6023      	strmi	r3, [r4, #0]
 8013100:	b91e      	cbnz	r6, 801310a <_printf_i+0x196>
 8013102:	6823      	ldr	r3, [r4, #0]
 8013104:	f023 0320 	bic.w	r3, r3, #32
 8013108:	6023      	str	r3, [r4, #0]
 801310a:	2310      	movs	r3, #16
 801310c:	e7b0      	b.n	8013070 <_printf_i+0xfc>
 801310e:	6823      	ldr	r3, [r4, #0]
 8013110:	f043 0320 	orr.w	r3, r3, #32
 8013114:	6023      	str	r3, [r4, #0]
 8013116:	2378      	movs	r3, #120	; 0x78
 8013118:	4828      	ldr	r0, [pc, #160]	; (80131bc <_printf_i+0x248>)
 801311a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801311e:	e7e3      	b.n	80130e8 <_printf_i+0x174>
 8013120:	0659      	lsls	r1, r3, #25
 8013122:	bf48      	it	mi
 8013124:	b2b6      	uxthmi	r6, r6
 8013126:	e7e6      	b.n	80130f6 <_printf_i+0x182>
 8013128:	4615      	mov	r5, r2
 801312a:	e7bb      	b.n	80130a4 <_printf_i+0x130>
 801312c:	682b      	ldr	r3, [r5, #0]
 801312e:	6826      	ldr	r6, [r4, #0]
 8013130:	6961      	ldr	r1, [r4, #20]
 8013132:	1d18      	adds	r0, r3, #4
 8013134:	6028      	str	r0, [r5, #0]
 8013136:	0635      	lsls	r5, r6, #24
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	d501      	bpl.n	8013140 <_printf_i+0x1cc>
 801313c:	6019      	str	r1, [r3, #0]
 801313e:	e002      	b.n	8013146 <_printf_i+0x1d2>
 8013140:	0670      	lsls	r0, r6, #25
 8013142:	d5fb      	bpl.n	801313c <_printf_i+0x1c8>
 8013144:	8019      	strh	r1, [r3, #0]
 8013146:	2300      	movs	r3, #0
 8013148:	6123      	str	r3, [r4, #16]
 801314a:	4615      	mov	r5, r2
 801314c:	e7ba      	b.n	80130c4 <_printf_i+0x150>
 801314e:	682b      	ldr	r3, [r5, #0]
 8013150:	1d1a      	adds	r2, r3, #4
 8013152:	602a      	str	r2, [r5, #0]
 8013154:	681d      	ldr	r5, [r3, #0]
 8013156:	6862      	ldr	r2, [r4, #4]
 8013158:	2100      	movs	r1, #0
 801315a:	4628      	mov	r0, r5
 801315c:	f7ed f818 	bl	8000190 <memchr>
 8013160:	b108      	cbz	r0, 8013166 <_printf_i+0x1f2>
 8013162:	1b40      	subs	r0, r0, r5
 8013164:	6060      	str	r0, [r4, #4]
 8013166:	6863      	ldr	r3, [r4, #4]
 8013168:	6123      	str	r3, [r4, #16]
 801316a:	2300      	movs	r3, #0
 801316c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013170:	e7a8      	b.n	80130c4 <_printf_i+0x150>
 8013172:	6923      	ldr	r3, [r4, #16]
 8013174:	462a      	mov	r2, r5
 8013176:	4649      	mov	r1, r9
 8013178:	4640      	mov	r0, r8
 801317a:	47d0      	blx	sl
 801317c:	3001      	adds	r0, #1
 801317e:	d0ab      	beq.n	80130d8 <_printf_i+0x164>
 8013180:	6823      	ldr	r3, [r4, #0]
 8013182:	079b      	lsls	r3, r3, #30
 8013184:	d413      	bmi.n	80131ae <_printf_i+0x23a>
 8013186:	68e0      	ldr	r0, [r4, #12]
 8013188:	9b03      	ldr	r3, [sp, #12]
 801318a:	4298      	cmp	r0, r3
 801318c:	bfb8      	it	lt
 801318e:	4618      	movlt	r0, r3
 8013190:	e7a4      	b.n	80130dc <_printf_i+0x168>
 8013192:	2301      	movs	r3, #1
 8013194:	4632      	mov	r2, r6
 8013196:	4649      	mov	r1, r9
 8013198:	4640      	mov	r0, r8
 801319a:	47d0      	blx	sl
 801319c:	3001      	adds	r0, #1
 801319e:	d09b      	beq.n	80130d8 <_printf_i+0x164>
 80131a0:	3501      	adds	r5, #1
 80131a2:	68e3      	ldr	r3, [r4, #12]
 80131a4:	9903      	ldr	r1, [sp, #12]
 80131a6:	1a5b      	subs	r3, r3, r1
 80131a8:	42ab      	cmp	r3, r5
 80131aa:	dcf2      	bgt.n	8013192 <_printf_i+0x21e>
 80131ac:	e7eb      	b.n	8013186 <_printf_i+0x212>
 80131ae:	2500      	movs	r5, #0
 80131b0:	f104 0619 	add.w	r6, r4, #25
 80131b4:	e7f5      	b.n	80131a2 <_printf_i+0x22e>
 80131b6:	bf00      	nop
 80131b8:	080147b1 	.word	0x080147b1
 80131bc:	080147c2 	.word	0x080147c2

080131c0 <__sread>:
 80131c0:	b510      	push	{r4, lr}
 80131c2:	460c      	mov	r4, r1
 80131c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131c8:	f000 fa56 	bl	8013678 <_read_r>
 80131cc:	2800      	cmp	r0, #0
 80131ce:	bfab      	itete	ge
 80131d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80131d2:	89a3      	ldrhlt	r3, [r4, #12]
 80131d4:	181b      	addge	r3, r3, r0
 80131d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80131da:	bfac      	ite	ge
 80131dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80131de:	81a3      	strhlt	r3, [r4, #12]
 80131e0:	bd10      	pop	{r4, pc}

080131e2 <__swrite>:
 80131e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131e6:	461f      	mov	r7, r3
 80131e8:	898b      	ldrh	r3, [r1, #12]
 80131ea:	05db      	lsls	r3, r3, #23
 80131ec:	4605      	mov	r5, r0
 80131ee:	460c      	mov	r4, r1
 80131f0:	4616      	mov	r6, r2
 80131f2:	d505      	bpl.n	8013200 <__swrite+0x1e>
 80131f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131f8:	2302      	movs	r3, #2
 80131fa:	2200      	movs	r2, #0
 80131fc:	f000 f9c4 	bl	8013588 <_lseek_r>
 8013200:	89a3      	ldrh	r3, [r4, #12]
 8013202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801320a:	81a3      	strh	r3, [r4, #12]
 801320c:	4632      	mov	r2, r6
 801320e:	463b      	mov	r3, r7
 8013210:	4628      	mov	r0, r5
 8013212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013216:	f000 b869 	b.w	80132ec <_write_r>

0801321a <__sseek>:
 801321a:	b510      	push	{r4, lr}
 801321c:	460c      	mov	r4, r1
 801321e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013222:	f000 f9b1 	bl	8013588 <_lseek_r>
 8013226:	1c43      	adds	r3, r0, #1
 8013228:	89a3      	ldrh	r3, [r4, #12]
 801322a:	bf15      	itete	ne
 801322c:	6560      	strne	r0, [r4, #84]	; 0x54
 801322e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013232:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013236:	81a3      	strheq	r3, [r4, #12]
 8013238:	bf18      	it	ne
 801323a:	81a3      	strhne	r3, [r4, #12]
 801323c:	bd10      	pop	{r4, pc}

0801323e <__sclose>:
 801323e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013242:	f000 b8d3 	b.w	80133ec <_close_r>
	...

08013248 <__swbuf_r>:
 8013248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801324a:	460e      	mov	r6, r1
 801324c:	4614      	mov	r4, r2
 801324e:	4605      	mov	r5, r0
 8013250:	b118      	cbz	r0, 801325a <__swbuf_r+0x12>
 8013252:	6983      	ldr	r3, [r0, #24]
 8013254:	b90b      	cbnz	r3, 801325a <__swbuf_r+0x12>
 8013256:	f7ff fc1b 	bl	8012a90 <__sinit>
 801325a:	4b21      	ldr	r3, [pc, #132]	; (80132e0 <__swbuf_r+0x98>)
 801325c:	429c      	cmp	r4, r3
 801325e:	d12b      	bne.n	80132b8 <__swbuf_r+0x70>
 8013260:	686c      	ldr	r4, [r5, #4]
 8013262:	69a3      	ldr	r3, [r4, #24]
 8013264:	60a3      	str	r3, [r4, #8]
 8013266:	89a3      	ldrh	r3, [r4, #12]
 8013268:	071a      	lsls	r2, r3, #28
 801326a:	d52f      	bpl.n	80132cc <__swbuf_r+0x84>
 801326c:	6923      	ldr	r3, [r4, #16]
 801326e:	b36b      	cbz	r3, 80132cc <__swbuf_r+0x84>
 8013270:	6923      	ldr	r3, [r4, #16]
 8013272:	6820      	ldr	r0, [r4, #0]
 8013274:	1ac0      	subs	r0, r0, r3
 8013276:	6963      	ldr	r3, [r4, #20]
 8013278:	b2f6      	uxtb	r6, r6
 801327a:	4283      	cmp	r3, r0
 801327c:	4637      	mov	r7, r6
 801327e:	dc04      	bgt.n	801328a <__swbuf_r+0x42>
 8013280:	4621      	mov	r1, r4
 8013282:	4628      	mov	r0, r5
 8013284:	f000 f944 	bl	8013510 <_fflush_r>
 8013288:	bb30      	cbnz	r0, 80132d8 <__swbuf_r+0x90>
 801328a:	68a3      	ldr	r3, [r4, #8]
 801328c:	3b01      	subs	r3, #1
 801328e:	60a3      	str	r3, [r4, #8]
 8013290:	6823      	ldr	r3, [r4, #0]
 8013292:	1c5a      	adds	r2, r3, #1
 8013294:	6022      	str	r2, [r4, #0]
 8013296:	701e      	strb	r6, [r3, #0]
 8013298:	6963      	ldr	r3, [r4, #20]
 801329a:	3001      	adds	r0, #1
 801329c:	4283      	cmp	r3, r0
 801329e:	d004      	beq.n	80132aa <__swbuf_r+0x62>
 80132a0:	89a3      	ldrh	r3, [r4, #12]
 80132a2:	07db      	lsls	r3, r3, #31
 80132a4:	d506      	bpl.n	80132b4 <__swbuf_r+0x6c>
 80132a6:	2e0a      	cmp	r6, #10
 80132a8:	d104      	bne.n	80132b4 <__swbuf_r+0x6c>
 80132aa:	4621      	mov	r1, r4
 80132ac:	4628      	mov	r0, r5
 80132ae:	f000 f92f 	bl	8013510 <_fflush_r>
 80132b2:	b988      	cbnz	r0, 80132d8 <__swbuf_r+0x90>
 80132b4:	4638      	mov	r0, r7
 80132b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132b8:	4b0a      	ldr	r3, [pc, #40]	; (80132e4 <__swbuf_r+0x9c>)
 80132ba:	429c      	cmp	r4, r3
 80132bc:	d101      	bne.n	80132c2 <__swbuf_r+0x7a>
 80132be:	68ac      	ldr	r4, [r5, #8]
 80132c0:	e7cf      	b.n	8013262 <__swbuf_r+0x1a>
 80132c2:	4b09      	ldr	r3, [pc, #36]	; (80132e8 <__swbuf_r+0xa0>)
 80132c4:	429c      	cmp	r4, r3
 80132c6:	bf08      	it	eq
 80132c8:	68ec      	ldreq	r4, [r5, #12]
 80132ca:	e7ca      	b.n	8013262 <__swbuf_r+0x1a>
 80132cc:	4621      	mov	r1, r4
 80132ce:	4628      	mov	r0, r5
 80132d0:	f000 f81e 	bl	8013310 <__swsetup_r>
 80132d4:	2800      	cmp	r0, #0
 80132d6:	d0cb      	beq.n	8013270 <__swbuf_r+0x28>
 80132d8:	f04f 37ff 	mov.w	r7, #4294967295
 80132dc:	e7ea      	b.n	80132b4 <__swbuf_r+0x6c>
 80132de:	bf00      	nop
 80132e0:	08014760 	.word	0x08014760
 80132e4:	08014780 	.word	0x08014780
 80132e8:	08014740 	.word	0x08014740

080132ec <_write_r>:
 80132ec:	b538      	push	{r3, r4, r5, lr}
 80132ee:	4d07      	ldr	r5, [pc, #28]	; (801330c <_write_r+0x20>)
 80132f0:	4604      	mov	r4, r0
 80132f2:	4608      	mov	r0, r1
 80132f4:	4611      	mov	r1, r2
 80132f6:	2200      	movs	r2, #0
 80132f8:	602a      	str	r2, [r5, #0]
 80132fa:	461a      	mov	r2, r3
 80132fc:	f7ee fc78 	bl	8001bf0 <_write>
 8013300:	1c43      	adds	r3, r0, #1
 8013302:	d102      	bne.n	801330a <_write_r+0x1e>
 8013304:	682b      	ldr	r3, [r5, #0]
 8013306:	b103      	cbz	r3, 801330a <_write_r+0x1e>
 8013308:	6023      	str	r3, [r4, #0]
 801330a:	bd38      	pop	{r3, r4, r5, pc}
 801330c:	200017b0 	.word	0x200017b0

08013310 <__swsetup_r>:
 8013310:	4b32      	ldr	r3, [pc, #200]	; (80133dc <__swsetup_r+0xcc>)
 8013312:	b570      	push	{r4, r5, r6, lr}
 8013314:	681d      	ldr	r5, [r3, #0]
 8013316:	4606      	mov	r6, r0
 8013318:	460c      	mov	r4, r1
 801331a:	b125      	cbz	r5, 8013326 <__swsetup_r+0x16>
 801331c:	69ab      	ldr	r3, [r5, #24]
 801331e:	b913      	cbnz	r3, 8013326 <__swsetup_r+0x16>
 8013320:	4628      	mov	r0, r5
 8013322:	f7ff fbb5 	bl	8012a90 <__sinit>
 8013326:	4b2e      	ldr	r3, [pc, #184]	; (80133e0 <__swsetup_r+0xd0>)
 8013328:	429c      	cmp	r4, r3
 801332a:	d10f      	bne.n	801334c <__swsetup_r+0x3c>
 801332c:	686c      	ldr	r4, [r5, #4]
 801332e:	89a3      	ldrh	r3, [r4, #12]
 8013330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013334:	0719      	lsls	r1, r3, #28
 8013336:	d42c      	bmi.n	8013392 <__swsetup_r+0x82>
 8013338:	06dd      	lsls	r5, r3, #27
 801333a:	d411      	bmi.n	8013360 <__swsetup_r+0x50>
 801333c:	2309      	movs	r3, #9
 801333e:	6033      	str	r3, [r6, #0]
 8013340:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013344:	81a3      	strh	r3, [r4, #12]
 8013346:	f04f 30ff 	mov.w	r0, #4294967295
 801334a:	e03e      	b.n	80133ca <__swsetup_r+0xba>
 801334c:	4b25      	ldr	r3, [pc, #148]	; (80133e4 <__swsetup_r+0xd4>)
 801334e:	429c      	cmp	r4, r3
 8013350:	d101      	bne.n	8013356 <__swsetup_r+0x46>
 8013352:	68ac      	ldr	r4, [r5, #8]
 8013354:	e7eb      	b.n	801332e <__swsetup_r+0x1e>
 8013356:	4b24      	ldr	r3, [pc, #144]	; (80133e8 <__swsetup_r+0xd8>)
 8013358:	429c      	cmp	r4, r3
 801335a:	bf08      	it	eq
 801335c:	68ec      	ldreq	r4, [r5, #12]
 801335e:	e7e6      	b.n	801332e <__swsetup_r+0x1e>
 8013360:	0758      	lsls	r0, r3, #29
 8013362:	d512      	bpl.n	801338a <__swsetup_r+0x7a>
 8013364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013366:	b141      	cbz	r1, 801337a <__swsetup_r+0x6a>
 8013368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801336c:	4299      	cmp	r1, r3
 801336e:	d002      	beq.n	8013376 <__swsetup_r+0x66>
 8013370:	4630      	mov	r0, r6
 8013372:	f7ff fa2b 	bl	80127cc <_free_r>
 8013376:	2300      	movs	r3, #0
 8013378:	6363      	str	r3, [r4, #52]	; 0x34
 801337a:	89a3      	ldrh	r3, [r4, #12]
 801337c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013380:	81a3      	strh	r3, [r4, #12]
 8013382:	2300      	movs	r3, #0
 8013384:	6063      	str	r3, [r4, #4]
 8013386:	6923      	ldr	r3, [r4, #16]
 8013388:	6023      	str	r3, [r4, #0]
 801338a:	89a3      	ldrh	r3, [r4, #12]
 801338c:	f043 0308 	orr.w	r3, r3, #8
 8013390:	81a3      	strh	r3, [r4, #12]
 8013392:	6923      	ldr	r3, [r4, #16]
 8013394:	b94b      	cbnz	r3, 80133aa <__swsetup_r+0x9a>
 8013396:	89a3      	ldrh	r3, [r4, #12]
 8013398:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801339c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80133a0:	d003      	beq.n	80133aa <__swsetup_r+0x9a>
 80133a2:	4621      	mov	r1, r4
 80133a4:	4630      	mov	r0, r6
 80133a6:	f000 f927 	bl	80135f8 <__smakebuf_r>
 80133aa:	89a0      	ldrh	r0, [r4, #12]
 80133ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80133b0:	f010 0301 	ands.w	r3, r0, #1
 80133b4:	d00a      	beq.n	80133cc <__swsetup_r+0xbc>
 80133b6:	2300      	movs	r3, #0
 80133b8:	60a3      	str	r3, [r4, #8]
 80133ba:	6963      	ldr	r3, [r4, #20]
 80133bc:	425b      	negs	r3, r3
 80133be:	61a3      	str	r3, [r4, #24]
 80133c0:	6923      	ldr	r3, [r4, #16]
 80133c2:	b943      	cbnz	r3, 80133d6 <__swsetup_r+0xc6>
 80133c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80133c8:	d1ba      	bne.n	8013340 <__swsetup_r+0x30>
 80133ca:	bd70      	pop	{r4, r5, r6, pc}
 80133cc:	0781      	lsls	r1, r0, #30
 80133ce:	bf58      	it	pl
 80133d0:	6963      	ldrpl	r3, [r4, #20]
 80133d2:	60a3      	str	r3, [r4, #8]
 80133d4:	e7f4      	b.n	80133c0 <__swsetup_r+0xb0>
 80133d6:	2000      	movs	r0, #0
 80133d8:	e7f7      	b.n	80133ca <__swsetup_r+0xba>
 80133da:	bf00      	nop
 80133dc:	20000118 	.word	0x20000118
 80133e0:	08014760 	.word	0x08014760
 80133e4:	08014780 	.word	0x08014780
 80133e8:	08014740 	.word	0x08014740

080133ec <_close_r>:
 80133ec:	b538      	push	{r3, r4, r5, lr}
 80133ee:	4d06      	ldr	r5, [pc, #24]	; (8013408 <_close_r+0x1c>)
 80133f0:	2300      	movs	r3, #0
 80133f2:	4604      	mov	r4, r0
 80133f4:	4608      	mov	r0, r1
 80133f6:	602b      	str	r3, [r5, #0]
 80133f8:	f7ee fc08 	bl	8001c0c <_close>
 80133fc:	1c43      	adds	r3, r0, #1
 80133fe:	d102      	bne.n	8013406 <_close_r+0x1a>
 8013400:	682b      	ldr	r3, [r5, #0]
 8013402:	b103      	cbz	r3, 8013406 <_close_r+0x1a>
 8013404:	6023      	str	r3, [r4, #0]
 8013406:	bd38      	pop	{r3, r4, r5, pc}
 8013408:	200017b0 	.word	0x200017b0

0801340c <__sflush_r>:
 801340c:	898a      	ldrh	r2, [r1, #12]
 801340e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013410:	4605      	mov	r5, r0
 8013412:	0710      	lsls	r0, r2, #28
 8013414:	460c      	mov	r4, r1
 8013416:	d457      	bmi.n	80134c8 <__sflush_r+0xbc>
 8013418:	684b      	ldr	r3, [r1, #4]
 801341a:	2b00      	cmp	r3, #0
 801341c:	dc04      	bgt.n	8013428 <__sflush_r+0x1c>
 801341e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013420:	2b00      	cmp	r3, #0
 8013422:	dc01      	bgt.n	8013428 <__sflush_r+0x1c>
 8013424:	2000      	movs	r0, #0
 8013426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801342a:	2e00      	cmp	r6, #0
 801342c:	d0fa      	beq.n	8013424 <__sflush_r+0x18>
 801342e:	2300      	movs	r3, #0
 8013430:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013434:	682f      	ldr	r7, [r5, #0]
 8013436:	602b      	str	r3, [r5, #0]
 8013438:	d032      	beq.n	80134a0 <__sflush_r+0x94>
 801343a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801343c:	89a3      	ldrh	r3, [r4, #12]
 801343e:	075a      	lsls	r2, r3, #29
 8013440:	d505      	bpl.n	801344e <__sflush_r+0x42>
 8013442:	6863      	ldr	r3, [r4, #4]
 8013444:	1ac0      	subs	r0, r0, r3
 8013446:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013448:	b10b      	cbz	r3, 801344e <__sflush_r+0x42>
 801344a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801344c:	1ac0      	subs	r0, r0, r3
 801344e:	2300      	movs	r3, #0
 8013450:	4602      	mov	r2, r0
 8013452:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013454:	6a21      	ldr	r1, [r4, #32]
 8013456:	4628      	mov	r0, r5
 8013458:	47b0      	blx	r6
 801345a:	1c43      	adds	r3, r0, #1
 801345c:	89a3      	ldrh	r3, [r4, #12]
 801345e:	d106      	bne.n	801346e <__sflush_r+0x62>
 8013460:	6829      	ldr	r1, [r5, #0]
 8013462:	291d      	cmp	r1, #29
 8013464:	d82c      	bhi.n	80134c0 <__sflush_r+0xb4>
 8013466:	4a29      	ldr	r2, [pc, #164]	; (801350c <__sflush_r+0x100>)
 8013468:	40ca      	lsrs	r2, r1
 801346a:	07d6      	lsls	r6, r2, #31
 801346c:	d528      	bpl.n	80134c0 <__sflush_r+0xb4>
 801346e:	2200      	movs	r2, #0
 8013470:	6062      	str	r2, [r4, #4]
 8013472:	04d9      	lsls	r1, r3, #19
 8013474:	6922      	ldr	r2, [r4, #16]
 8013476:	6022      	str	r2, [r4, #0]
 8013478:	d504      	bpl.n	8013484 <__sflush_r+0x78>
 801347a:	1c42      	adds	r2, r0, #1
 801347c:	d101      	bne.n	8013482 <__sflush_r+0x76>
 801347e:	682b      	ldr	r3, [r5, #0]
 8013480:	b903      	cbnz	r3, 8013484 <__sflush_r+0x78>
 8013482:	6560      	str	r0, [r4, #84]	; 0x54
 8013484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013486:	602f      	str	r7, [r5, #0]
 8013488:	2900      	cmp	r1, #0
 801348a:	d0cb      	beq.n	8013424 <__sflush_r+0x18>
 801348c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013490:	4299      	cmp	r1, r3
 8013492:	d002      	beq.n	801349a <__sflush_r+0x8e>
 8013494:	4628      	mov	r0, r5
 8013496:	f7ff f999 	bl	80127cc <_free_r>
 801349a:	2000      	movs	r0, #0
 801349c:	6360      	str	r0, [r4, #52]	; 0x34
 801349e:	e7c2      	b.n	8013426 <__sflush_r+0x1a>
 80134a0:	6a21      	ldr	r1, [r4, #32]
 80134a2:	2301      	movs	r3, #1
 80134a4:	4628      	mov	r0, r5
 80134a6:	47b0      	blx	r6
 80134a8:	1c41      	adds	r1, r0, #1
 80134aa:	d1c7      	bne.n	801343c <__sflush_r+0x30>
 80134ac:	682b      	ldr	r3, [r5, #0]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d0c4      	beq.n	801343c <__sflush_r+0x30>
 80134b2:	2b1d      	cmp	r3, #29
 80134b4:	d001      	beq.n	80134ba <__sflush_r+0xae>
 80134b6:	2b16      	cmp	r3, #22
 80134b8:	d101      	bne.n	80134be <__sflush_r+0xb2>
 80134ba:	602f      	str	r7, [r5, #0]
 80134bc:	e7b2      	b.n	8013424 <__sflush_r+0x18>
 80134be:	89a3      	ldrh	r3, [r4, #12]
 80134c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134c4:	81a3      	strh	r3, [r4, #12]
 80134c6:	e7ae      	b.n	8013426 <__sflush_r+0x1a>
 80134c8:	690f      	ldr	r7, [r1, #16]
 80134ca:	2f00      	cmp	r7, #0
 80134cc:	d0aa      	beq.n	8013424 <__sflush_r+0x18>
 80134ce:	0793      	lsls	r3, r2, #30
 80134d0:	680e      	ldr	r6, [r1, #0]
 80134d2:	bf08      	it	eq
 80134d4:	694b      	ldreq	r3, [r1, #20]
 80134d6:	600f      	str	r7, [r1, #0]
 80134d8:	bf18      	it	ne
 80134da:	2300      	movne	r3, #0
 80134dc:	1bf6      	subs	r6, r6, r7
 80134de:	608b      	str	r3, [r1, #8]
 80134e0:	2e00      	cmp	r6, #0
 80134e2:	dd9f      	ble.n	8013424 <__sflush_r+0x18>
 80134e4:	6a21      	ldr	r1, [r4, #32]
 80134e6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80134ea:	4633      	mov	r3, r6
 80134ec:	463a      	mov	r2, r7
 80134ee:	4628      	mov	r0, r5
 80134f0:	47e0      	blx	ip
 80134f2:	2800      	cmp	r0, #0
 80134f4:	dc06      	bgt.n	8013504 <__sflush_r+0xf8>
 80134f6:	89a3      	ldrh	r3, [r4, #12]
 80134f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134fc:	81a3      	strh	r3, [r4, #12]
 80134fe:	f04f 30ff 	mov.w	r0, #4294967295
 8013502:	e790      	b.n	8013426 <__sflush_r+0x1a>
 8013504:	4407      	add	r7, r0
 8013506:	1a36      	subs	r6, r6, r0
 8013508:	e7ea      	b.n	80134e0 <__sflush_r+0xd4>
 801350a:	bf00      	nop
 801350c:	20400001 	.word	0x20400001

08013510 <_fflush_r>:
 8013510:	b538      	push	{r3, r4, r5, lr}
 8013512:	690b      	ldr	r3, [r1, #16]
 8013514:	4605      	mov	r5, r0
 8013516:	460c      	mov	r4, r1
 8013518:	b913      	cbnz	r3, 8013520 <_fflush_r+0x10>
 801351a:	2500      	movs	r5, #0
 801351c:	4628      	mov	r0, r5
 801351e:	bd38      	pop	{r3, r4, r5, pc}
 8013520:	b118      	cbz	r0, 801352a <_fflush_r+0x1a>
 8013522:	6983      	ldr	r3, [r0, #24]
 8013524:	b90b      	cbnz	r3, 801352a <_fflush_r+0x1a>
 8013526:	f7ff fab3 	bl	8012a90 <__sinit>
 801352a:	4b14      	ldr	r3, [pc, #80]	; (801357c <_fflush_r+0x6c>)
 801352c:	429c      	cmp	r4, r3
 801352e:	d11b      	bne.n	8013568 <_fflush_r+0x58>
 8013530:	686c      	ldr	r4, [r5, #4]
 8013532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d0ef      	beq.n	801351a <_fflush_r+0xa>
 801353a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801353c:	07d0      	lsls	r0, r2, #31
 801353e:	d404      	bmi.n	801354a <_fflush_r+0x3a>
 8013540:	0599      	lsls	r1, r3, #22
 8013542:	d402      	bmi.n	801354a <_fflush_r+0x3a>
 8013544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013546:	f7ff fb41 	bl	8012bcc <__retarget_lock_acquire_recursive>
 801354a:	4628      	mov	r0, r5
 801354c:	4621      	mov	r1, r4
 801354e:	f7ff ff5d 	bl	801340c <__sflush_r>
 8013552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013554:	07da      	lsls	r2, r3, #31
 8013556:	4605      	mov	r5, r0
 8013558:	d4e0      	bmi.n	801351c <_fflush_r+0xc>
 801355a:	89a3      	ldrh	r3, [r4, #12]
 801355c:	059b      	lsls	r3, r3, #22
 801355e:	d4dd      	bmi.n	801351c <_fflush_r+0xc>
 8013560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013562:	f7ff fb34 	bl	8012bce <__retarget_lock_release_recursive>
 8013566:	e7d9      	b.n	801351c <_fflush_r+0xc>
 8013568:	4b05      	ldr	r3, [pc, #20]	; (8013580 <_fflush_r+0x70>)
 801356a:	429c      	cmp	r4, r3
 801356c:	d101      	bne.n	8013572 <_fflush_r+0x62>
 801356e:	68ac      	ldr	r4, [r5, #8]
 8013570:	e7df      	b.n	8013532 <_fflush_r+0x22>
 8013572:	4b04      	ldr	r3, [pc, #16]	; (8013584 <_fflush_r+0x74>)
 8013574:	429c      	cmp	r4, r3
 8013576:	bf08      	it	eq
 8013578:	68ec      	ldreq	r4, [r5, #12]
 801357a:	e7da      	b.n	8013532 <_fflush_r+0x22>
 801357c:	08014760 	.word	0x08014760
 8013580:	08014780 	.word	0x08014780
 8013584:	08014740 	.word	0x08014740

08013588 <_lseek_r>:
 8013588:	b538      	push	{r3, r4, r5, lr}
 801358a:	4d07      	ldr	r5, [pc, #28]	; (80135a8 <_lseek_r+0x20>)
 801358c:	4604      	mov	r4, r0
 801358e:	4608      	mov	r0, r1
 8013590:	4611      	mov	r1, r2
 8013592:	2200      	movs	r2, #0
 8013594:	602a      	str	r2, [r5, #0]
 8013596:	461a      	mov	r2, r3
 8013598:	f7ee fb42 	bl	8001c20 <_lseek>
 801359c:	1c43      	adds	r3, r0, #1
 801359e:	d102      	bne.n	80135a6 <_lseek_r+0x1e>
 80135a0:	682b      	ldr	r3, [r5, #0]
 80135a2:	b103      	cbz	r3, 80135a6 <_lseek_r+0x1e>
 80135a4:	6023      	str	r3, [r4, #0]
 80135a6:	bd38      	pop	{r3, r4, r5, pc}
 80135a8:	200017b0 	.word	0x200017b0

080135ac <__swhatbuf_r>:
 80135ac:	b570      	push	{r4, r5, r6, lr}
 80135ae:	460e      	mov	r6, r1
 80135b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135b4:	2900      	cmp	r1, #0
 80135b6:	b096      	sub	sp, #88	; 0x58
 80135b8:	4614      	mov	r4, r2
 80135ba:	461d      	mov	r5, r3
 80135bc:	da08      	bge.n	80135d0 <__swhatbuf_r+0x24>
 80135be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80135c2:	2200      	movs	r2, #0
 80135c4:	602a      	str	r2, [r5, #0]
 80135c6:	061a      	lsls	r2, r3, #24
 80135c8:	d410      	bmi.n	80135ec <__swhatbuf_r+0x40>
 80135ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80135ce:	e00e      	b.n	80135ee <__swhatbuf_r+0x42>
 80135d0:	466a      	mov	r2, sp
 80135d2:	f000 f863 	bl	801369c <_fstat_r>
 80135d6:	2800      	cmp	r0, #0
 80135d8:	dbf1      	blt.n	80135be <__swhatbuf_r+0x12>
 80135da:	9a01      	ldr	r2, [sp, #4]
 80135dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80135e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80135e4:	425a      	negs	r2, r3
 80135e6:	415a      	adcs	r2, r3
 80135e8:	602a      	str	r2, [r5, #0]
 80135ea:	e7ee      	b.n	80135ca <__swhatbuf_r+0x1e>
 80135ec:	2340      	movs	r3, #64	; 0x40
 80135ee:	2000      	movs	r0, #0
 80135f0:	6023      	str	r3, [r4, #0]
 80135f2:	b016      	add	sp, #88	; 0x58
 80135f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080135f8 <__smakebuf_r>:
 80135f8:	898b      	ldrh	r3, [r1, #12]
 80135fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80135fc:	079d      	lsls	r5, r3, #30
 80135fe:	4606      	mov	r6, r0
 8013600:	460c      	mov	r4, r1
 8013602:	d507      	bpl.n	8013614 <__smakebuf_r+0x1c>
 8013604:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013608:	6023      	str	r3, [r4, #0]
 801360a:	6123      	str	r3, [r4, #16]
 801360c:	2301      	movs	r3, #1
 801360e:	6163      	str	r3, [r4, #20]
 8013610:	b002      	add	sp, #8
 8013612:	bd70      	pop	{r4, r5, r6, pc}
 8013614:	ab01      	add	r3, sp, #4
 8013616:	466a      	mov	r2, sp
 8013618:	f7ff ffc8 	bl	80135ac <__swhatbuf_r>
 801361c:	9900      	ldr	r1, [sp, #0]
 801361e:	4605      	mov	r5, r0
 8013620:	4630      	mov	r0, r6
 8013622:	f7ff f93d 	bl	80128a0 <_malloc_r>
 8013626:	b948      	cbnz	r0, 801363c <__smakebuf_r+0x44>
 8013628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801362c:	059a      	lsls	r2, r3, #22
 801362e:	d4ef      	bmi.n	8013610 <__smakebuf_r+0x18>
 8013630:	f023 0303 	bic.w	r3, r3, #3
 8013634:	f043 0302 	orr.w	r3, r3, #2
 8013638:	81a3      	strh	r3, [r4, #12]
 801363a:	e7e3      	b.n	8013604 <__smakebuf_r+0xc>
 801363c:	4b0d      	ldr	r3, [pc, #52]	; (8013674 <__smakebuf_r+0x7c>)
 801363e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013640:	89a3      	ldrh	r3, [r4, #12]
 8013642:	6020      	str	r0, [r4, #0]
 8013644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013648:	81a3      	strh	r3, [r4, #12]
 801364a:	9b00      	ldr	r3, [sp, #0]
 801364c:	6163      	str	r3, [r4, #20]
 801364e:	9b01      	ldr	r3, [sp, #4]
 8013650:	6120      	str	r0, [r4, #16]
 8013652:	b15b      	cbz	r3, 801366c <__smakebuf_r+0x74>
 8013654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013658:	4630      	mov	r0, r6
 801365a:	f000 f831 	bl	80136c0 <_isatty_r>
 801365e:	b128      	cbz	r0, 801366c <__smakebuf_r+0x74>
 8013660:	89a3      	ldrh	r3, [r4, #12]
 8013662:	f023 0303 	bic.w	r3, r3, #3
 8013666:	f043 0301 	orr.w	r3, r3, #1
 801366a:	81a3      	strh	r3, [r4, #12]
 801366c:	89a0      	ldrh	r0, [r4, #12]
 801366e:	4305      	orrs	r5, r0
 8013670:	81a5      	strh	r5, [r4, #12]
 8013672:	e7cd      	b.n	8013610 <__smakebuf_r+0x18>
 8013674:	08012a29 	.word	0x08012a29

08013678 <_read_r>:
 8013678:	b538      	push	{r3, r4, r5, lr}
 801367a:	4d07      	ldr	r5, [pc, #28]	; (8013698 <_read_r+0x20>)
 801367c:	4604      	mov	r4, r0
 801367e:	4608      	mov	r0, r1
 8013680:	4611      	mov	r1, r2
 8013682:	2200      	movs	r2, #0
 8013684:	602a      	str	r2, [r5, #0]
 8013686:	461a      	mov	r2, r3
 8013688:	f7ee faa2 	bl	8001bd0 <_read>
 801368c:	1c43      	adds	r3, r0, #1
 801368e:	d102      	bne.n	8013696 <_read_r+0x1e>
 8013690:	682b      	ldr	r3, [r5, #0]
 8013692:	b103      	cbz	r3, 8013696 <_read_r+0x1e>
 8013694:	6023      	str	r3, [r4, #0]
 8013696:	bd38      	pop	{r3, r4, r5, pc}
 8013698:	200017b0 	.word	0x200017b0

0801369c <_fstat_r>:
 801369c:	b538      	push	{r3, r4, r5, lr}
 801369e:	4d07      	ldr	r5, [pc, #28]	; (80136bc <_fstat_r+0x20>)
 80136a0:	2300      	movs	r3, #0
 80136a2:	4604      	mov	r4, r0
 80136a4:	4608      	mov	r0, r1
 80136a6:	4611      	mov	r1, r2
 80136a8:	602b      	str	r3, [r5, #0]
 80136aa:	f7ee fab2 	bl	8001c12 <_fstat>
 80136ae:	1c43      	adds	r3, r0, #1
 80136b0:	d102      	bne.n	80136b8 <_fstat_r+0x1c>
 80136b2:	682b      	ldr	r3, [r5, #0]
 80136b4:	b103      	cbz	r3, 80136b8 <_fstat_r+0x1c>
 80136b6:	6023      	str	r3, [r4, #0]
 80136b8:	bd38      	pop	{r3, r4, r5, pc}
 80136ba:	bf00      	nop
 80136bc:	200017b0 	.word	0x200017b0

080136c0 <_isatty_r>:
 80136c0:	b538      	push	{r3, r4, r5, lr}
 80136c2:	4d06      	ldr	r5, [pc, #24]	; (80136dc <_isatty_r+0x1c>)
 80136c4:	2300      	movs	r3, #0
 80136c6:	4604      	mov	r4, r0
 80136c8:	4608      	mov	r0, r1
 80136ca:	602b      	str	r3, [r5, #0]
 80136cc:	f7ee faa6 	bl	8001c1c <_isatty>
 80136d0:	1c43      	adds	r3, r0, #1
 80136d2:	d102      	bne.n	80136da <_isatty_r+0x1a>
 80136d4:	682b      	ldr	r3, [r5, #0]
 80136d6:	b103      	cbz	r3, 80136da <_isatty_r+0x1a>
 80136d8:	6023      	str	r3, [r4, #0]
 80136da:	bd38      	pop	{r3, r4, r5, pc}
 80136dc:	200017b0 	.word	0x200017b0

080136e0 <floor>:
 80136e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136e4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80136e8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80136ec:	2e13      	cmp	r6, #19
 80136ee:	4602      	mov	r2, r0
 80136f0:	460b      	mov	r3, r1
 80136f2:	4607      	mov	r7, r0
 80136f4:	460c      	mov	r4, r1
 80136f6:	4605      	mov	r5, r0
 80136f8:	dc33      	bgt.n	8013762 <floor+0x82>
 80136fa:	2e00      	cmp	r6, #0
 80136fc:	da14      	bge.n	8013728 <floor+0x48>
 80136fe:	a334      	add	r3, pc, #208	; (adr r3, 80137d0 <floor+0xf0>)
 8013700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013704:	f7ec fd9a 	bl	800023c <__adddf3>
 8013708:	2200      	movs	r2, #0
 801370a:	2300      	movs	r3, #0
 801370c:	f7ec ffca 	bl	80006a4 <__aeabi_dcmpgt>
 8013710:	b138      	cbz	r0, 8013722 <floor+0x42>
 8013712:	2c00      	cmp	r4, #0
 8013714:	da58      	bge.n	80137c8 <floor+0xe8>
 8013716:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801371a:	431d      	orrs	r5, r3
 801371c:	d001      	beq.n	8013722 <floor+0x42>
 801371e:	4c2e      	ldr	r4, [pc, #184]	; (80137d8 <floor+0xf8>)
 8013720:	2500      	movs	r5, #0
 8013722:	4623      	mov	r3, r4
 8013724:	462f      	mov	r7, r5
 8013726:	e025      	b.n	8013774 <floor+0x94>
 8013728:	4a2c      	ldr	r2, [pc, #176]	; (80137dc <floor+0xfc>)
 801372a:	fa42 f806 	asr.w	r8, r2, r6
 801372e:	ea01 0208 	and.w	r2, r1, r8
 8013732:	4302      	orrs	r2, r0
 8013734:	d01e      	beq.n	8013774 <floor+0x94>
 8013736:	a326      	add	r3, pc, #152	; (adr r3, 80137d0 <floor+0xf0>)
 8013738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801373c:	f7ec fd7e 	bl	800023c <__adddf3>
 8013740:	2200      	movs	r2, #0
 8013742:	2300      	movs	r3, #0
 8013744:	f7ec ffae 	bl	80006a4 <__aeabi_dcmpgt>
 8013748:	2800      	cmp	r0, #0
 801374a:	d0ea      	beq.n	8013722 <floor+0x42>
 801374c:	2c00      	cmp	r4, #0
 801374e:	bfbe      	ittt	lt
 8013750:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013754:	fa43 f606 	asrlt.w	r6, r3, r6
 8013758:	19a4      	addlt	r4, r4, r6
 801375a:	ea24 0408 	bic.w	r4, r4, r8
 801375e:	2500      	movs	r5, #0
 8013760:	e7df      	b.n	8013722 <floor+0x42>
 8013762:	2e33      	cmp	r6, #51	; 0x33
 8013764:	dd0a      	ble.n	801377c <floor+0x9c>
 8013766:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801376a:	d103      	bne.n	8013774 <floor+0x94>
 801376c:	f7ec fd66 	bl	800023c <__adddf3>
 8013770:	4607      	mov	r7, r0
 8013772:	460b      	mov	r3, r1
 8013774:	4638      	mov	r0, r7
 8013776:	4619      	mov	r1, r3
 8013778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801377c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8013780:	f04f 32ff 	mov.w	r2, #4294967295
 8013784:	fa22 f808 	lsr.w	r8, r2, r8
 8013788:	ea18 0f00 	tst.w	r8, r0
 801378c:	d0f2      	beq.n	8013774 <floor+0x94>
 801378e:	a310      	add	r3, pc, #64	; (adr r3, 80137d0 <floor+0xf0>)
 8013790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013794:	f7ec fd52 	bl	800023c <__adddf3>
 8013798:	2200      	movs	r2, #0
 801379a:	2300      	movs	r3, #0
 801379c:	f7ec ff82 	bl	80006a4 <__aeabi_dcmpgt>
 80137a0:	2800      	cmp	r0, #0
 80137a2:	d0be      	beq.n	8013722 <floor+0x42>
 80137a4:	2c00      	cmp	r4, #0
 80137a6:	da02      	bge.n	80137ae <floor+0xce>
 80137a8:	2e14      	cmp	r6, #20
 80137aa:	d103      	bne.n	80137b4 <floor+0xd4>
 80137ac:	3401      	adds	r4, #1
 80137ae:	ea25 0508 	bic.w	r5, r5, r8
 80137b2:	e7b6      	b.n	8013722 <floor+0x42>
 80137b4:	2301      	movs	r3, #1
 80137b6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80137ba:	fa03 f606 	lsl.w	r6, r3, r6
 80137be:	4435      	add	r5, r6
 80137c0:	42bd      	cmp	r5, r7
 80137c2:	bf38      	it	cc
 80137c4:	18e4      	addcc	r4, r4, r3
 80137c6:	e7f2      	b.n	80137ae <floor+0xce>
 80137c8:	2500      	movs	r5, #0
 80137ca:	462c      	mov	r4, r5
 80137cc:	e7a9      	b.n	8013722 <floor+0x42>
 80137ce:	bf00      	nop
 80137d0:	8800759c 	.word	0x8800759c
 80137d4:	7e37e43c 	.word	0x7e37e43c
 80137d8:	bff00000 	.word	0xbff00000
 80137dc:	000fffff 	.word	0x000fffff

080137e0 <_init>:
 80137e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137e2:	bf00      	nop
 80137e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137e6:	bc08      	pop	{r3}
 80137e8:	469e      	mov	lr, r3
 80137ea:	4770      	bx	lr

080137ec <_fini>:
 80137ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137ee:	bf00      	nop
 80137f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137f2:	bc08      	pop	{r3}
 80137f4:	469e      	mov	lr, r3
 80137f6:	4770      	bx	lr
